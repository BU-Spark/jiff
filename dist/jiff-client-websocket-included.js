(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var initialization = require('./api/initialization.js');
var sharing = require('./api/sharing.js');
var custom = require('./api/custom.js');
var crypto_provider = require('./api/crypto_provider.js');
var synchronization = require('./api/synchronization.js');

var protocols = require('./api/protocols.js');
var bitsProtocols = require('./api/bits.js');


module.exports = function (jiffClient) {
  initialization(jiffClient);
  sharing(jiffClient);
  custom(jiffClient);
  crypto_provider(jiffClient);
  synchronization(jiffClient);

  protocols(jiffClient);
  bitsProtocols(jiffClient);
};
},{"./api/bits.js":2,"./api/crypto_provider.js":3,"./api/custom.js":4,"./api/initialization.js":5,"./api/protocols.js":6,"./api/sharing.js":7,"./api/synchronization.js":8}],2:[function(require,module,exports){
var arithmetic = require('../protocols/bits/arithmetic.js');
var comparison = require('../protocols/bits/comparison.js');
var otherProtocols = require('../protocols/bits/protocols.js');
var sharing = require('../protocols/bits/sharing.js');

/**
 * Contains bits protocols (including rejection sampling and bits operations)
 *
 * <b>Important: bit protocols (including bit_decomposition) are unaware of any extension specific customizations, and will operate as
 * on the given shares as if they are natural numbers in Zp. Make sure to take into consideration any magnification/shift transformations
 * needed to translate correctly between plain representations and extension representations of bits! </b>
 * @alias bits
 * @namespace
 */

module.exports = function (jiffClient) {
  /**
   * Compute sum of bitwise secret shared number and a constant
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - the bit wise secret shares
   * @param {number} constant - the constant
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result. Note that the length here will be max(|bits|, |constant|) + 1
   *                          in case of potential overflow / carry
   */
  jiffClient.protocols.bits.cadd = arithmetic.cadd.bind(null, jiffClient);
  /**
   * Compute [secret bits] - [constant bits]
   * @method
   * @memberof bits
   * @param {number} constant - the constant
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - the bit wise secret shares
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result. Note that the length of the returned result is |bits|+1, where
   *                          the bit at index 0 is the least significant bit. The bit at index 1 is the most significant bit,
   *                          and the bit at index |bits| is 1 if the result overflows, or 0 otherwise
   */
  jiffClient.protocols.bits.csubl = arithmetic.csubl.bind(null, jiffClient);
  /**
   * Compute [constant bits] - [secret bits]
   * @method
   * @memberof bits
   * @param {number} constant - the constant
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - the bit wise secret shares
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result. Note that the length of the returned result is |bits|+1, where
   *                          the bit at index 0 is the least significant bit. The bit at index 1 is the most significant bit,
   *                          and the bit at index |bits| is 1 if the result overflows, or 0 otherwise
   */
  jiffClient.protocols.bits.csubr = arithmetic.csubr.bind(null, jiffClient);
  /**
   *
   * Compute [secret bits1] + [secret bits2]
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - the first bitwise shared number: array of secrets with index 0 being least significant bit
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number (length may be different)
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result. Note that the length of the returned result is |bits|+1, where
   *                          the bit at index 0 is the least significant bit
   */
  jiffClient.protocols.bits.sadd = arithmetic.sadd.bind(null, jiffClient);
  /**
   * Compute [secret bits1] - [secret bits2]
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - first bitwise secret shared number: lower indices represent less significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - second bitwise secret shared number (length may be different)
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result. Note that the length of the returned result is |bits|+1, where
   *                          the bit at index 0 is the least significant bit. The bit at index 1 is the most significant bit,
   *                          and the bit at index |bits| is 1 if the result overflows, or 0 otherwise
   */
  jiffClient.protocols.bits.ssub = arithmetic.ssub.bind(null, jiffClient);
  /**
   * Compute [secret bits] * constant
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - bitwise shared secret to multiply: lower indices represent less significant bits
   * @param {number} constant - constant to multiply with
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result, the length of the result will be bits.length + ceil(log2(constant)), except
   *                          if constant is zero, the result will then be [ zero share ]
   */
  jiffClient.protocols.bits.cmult = arithmetic.cmult.bind(null, jiffClient);
  /**
   * Compute [secret bits1] * [secret bits2]
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - bitwise shared secret to multiply: lower indices represent less significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - bitwise shared secret to multiply
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result, the length of the result will be bits1.length + bits2.length
   */
  jiffClient.protocols.bits.smult = arithmetic.smult.bind(null, jiffClient);
  /**
   * Computes integer division of [secret bits 1] / [secret bits 2]
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {{quotient: module:jiff-client~JIFFClient#SecretShare[], remainder: module:jiff-client~JIFFClient#SecretShare[]}} the quotient and remainder bits arrays, note that
   *                                                                the quotient array has the same length as bits1,
   *                                                                and the remainder array has the same length as bits2 or bits1, whichever is smaller.
   *                                                                Note: if bits2 represent 0, the returned result is the maximum
   *                                                                number that fits in the number of bits (all 1), and the remainder
   *                                                                is equal to bits1
   */
  jiffClient.protocols.bits.sdiv = arithmetic.sdiv.bind(null, jiffClient);
  /**
   * Computes integer division of [secret bits] / constant
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - numerator: an array of secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the denominator number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {{quotient: module:jiff-client~JIFFClient#SecretShare[], remainder: module:jiff-client~JIFFClient#SecretShare[]}} the quotient and remainder bits arrays, note that
   *                                                                the quotient array has the same length as bits,
   *                                                                and the remainder array has the same length as
   *                                                                constant or bits, whichever is smaller
   * @throws if constant is 0.
   */
  jiffClient.protocols.bits.cdivl = arithmetic.cdivl.bind(null, jiffClient);
  /**
   * Computes integer division of constant / [secret bits]
   * @method
   * @memberof bits
   * @param {number} constant - the numerator number
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - denominator: an array of secret shares of bits, starting from least to most significant bits
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {{quotient: module:jiff-client~JIFFClient#SecretShare[], remainder: module:jiff-client~JIFFClient#SecretShare[]}} the quotient and remainder bits arrays, note that
   *                                                                the quotient array has the same length as the number of bits in constant,
   *                                                                and the remainder array has the same length as bits or constant, whichever is smaller.
   *                                                                Note: if bits represent 0, the returned result is the maximum
   *                                                                number that fits in its bits (all 1), and the remainder
   *                                                                is equal to constant
   */
  jiffClient.protocols.bits.cdivr = arithmetic.cdivr.bind(null, jiffClient);

  /**
   * Checks whether the given bitwise secret shared number and numeric constant are equal
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if parameters are equal, 0 otherwise. If result is known
   *                                (e.g. constant has a greater non-zero bit than bits' most significant bit), the result is
   *                                returned immediately as a boolean
   */
  jiffClient.protocols.bits.ceq = comparison.ceq.bind(null, jiffClient);
  /**
   * Checks whether the given bitwise secret shared number and numeric constant are not equal
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if parameters are not equal, 0 otherwise. If result is known
   *                                (e.g. constant has a greater non-zero bit than bits' most significant bit), the result is
   *                                returned immediately as a boolean
   */
  jiffClient.protocols.bits.cneq = comparison.cneq.bind(null, jiffClient);
  /**
   * Checks whether given secret shared bits are greater than the given constant
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if bits are greater than constant, 0 otherwise, if result is known
   *                                (e.g. constant has greater non-zero bit than bits' most significant bit), the result is
   *                                returned immediately as a boolean
   */
  jiffClient.protocols.bits.cgt = comparison.cgt.bind(null, jiffClient);
  /**
   * Checks whether given secret shared bits are greater or equal to the given constant
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if bits are greater or equal to constant, 0 otherwise, if result is known
   *                                (e.g. constant has greater non-zero bit than bits' most significant bit or constant is zero), the result is
   *                                returned immediately as a boolean
   */
  jiffClient.protocols.bits.cgteq = comparison.cgteq.bind(null, jiffClient);
  /**
   * Checks whether given secret shared bits are less than the given constant
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if bits are less than the constant, 0 otherwise, if result is known
   *                                (e.g. constant has greater non-zero bit than bits' most significant bit), the result is
   *                                returned immediately as a boolean
   */
  jiffClient.protocols.bits.clt = comparison.clt.bind(null, jiffClient);
  /**
   * Checks whether given secret shared bits are less or equal to the given constant
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if bits are less or equal to constant, 0 otherwise, if result is known
   *                                (e.g. constant has greater non-zero bit than bits' most significant bit), the result is
   *                                returned immediately as a boolean
   */
  jiffClient.protocols.bits.clteq = comparison.clteq.bind(null, jiffClient);
  /**
   * Checks whether the two given bitwise secret shared numbers are equal
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if bits are equal, 0 otherwise
   */
  jiffClient.protocols.bits.seq = comparison.seq.bind(null, jiffClient);
  /**
   * Checks whether the two given bitwise secret shared numbers are not equal
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if bits are not equal, 0 otherwise
   */
  jiffClient.protocols.bits.sneq = comparison.sneq.bind(null, jiffClient);
  /**
   * Checks whether the first given bitwise secret shared number is greater than the second bitwise secret shared number
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if the first number is greater than the second, 0 otherwise
   */
  jiffClient.protocols.bits.sgt = comparison.sgt.bind(null, jiffClient);
  /**
   * Checks whether the first given bitwise secret shared number is greater than or equal to the second bitwise secret shared number
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if the first number is greater or equal to the second, 0 otherwise
   */
  jiffClient.protocols.bits.sgteq = comparison.sgteq.bind(null, jiffClient);
  /**
   * Checks whether the first given bitwise secret shared number is less than the second bitwise secret shared number
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if the first number is less than the second, 0 otherwise
   */
  jiffClient.protocols.bits.slt = comparison.slt.bind(null, jiffClient);
  /**
   * Checks whether the first given bitwise secret shared number is less or equal to the second bitwise secret shared number
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if the first number is less than or equal to the second, 0 otherwise
   */
  jiffClient.protocols.bits.slteq = comparison.slteq.bind(null, jiffClient);

  /**
   * Retrieves preprocessed rejection_sampling bits or performs the rejection sampling on the fly if crypto_provider is enabled
   * @method
   * @memberof bits
   * @param {number} lower_bound - the lower bound, included (can be a bigNumber if using bigNumber extension)
   * @param {number} upper_bound - the upper bound, excluded (can be a bigNumber if using bigNumber extension)
   * @param {number} [threshold=parties.length] - the threshold of the resulting shares after sampling
   * @param {Array} [parties=all_parties] - array of party ids that want to receive (or compute if needed) the sampling shares, by default, this includes all parties
   * @param {number} [Zp=jiff-instance.Zp] - the mod (if null then the default Zp for the instance is used)
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly
   * @returns {SecretShare[]} an array of secret shares, each representing a bit from the sampled value (from least to most significant)
   */
  jiffClient.protocols.bits.rejection_sampling = otherProtocols.rejection_sampling.bind(null, jiffClient);

  /**
   * Creates a secret share of the number represented by the given array of secret shared bits.
   * Requires no communication, only local operations
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits.
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of the number represented by bits.
   */
  jiffClient.protocols.bits.bit_composition = otherProtocols.bit_composition;

  /**
   * Share a number as an array of secret bits
   * This takes the same parameters as jiff-instance.share, but returns an array of secret bit shares per sending party.
   * Each bit array starts with the least significant bit at index 0, and most significant bit at index length-1
   * @method
   * @memberof bits
   * @param {number} secret - the number to share (this party's input)
   * @param {number} [bit_length=jiff_instance.Zp] - the number of generated bits, if the secret has less bits, it will be
   *                                                 padded with zeros
   * @param {number} [threshold=receivers_list.length] - threshold of each shared bit
   * @param {Array} [receivers_list=all_parties] - receivers of every bits
   * @param {Array} [senders_list=all_parties] - senders of evey bit
   * @param {number} [Zp=jiff_instance.Zp] - the field of sharing for every bit
   * @param {string|number} [share_id=auto_gen()] - synchronization id
   * @returns {object} a map (of size equal to the number of parties)
   *          where the key is the party id (from 1 to n)
   *          and the value is an array of secret shared bits
   */
  jiffClient.protocols.bits.share = sharing.share_bits.bind(null, jiffClient);
  /**
   * Opens the given array of secret shared bits.
   * This works regardless of whether the represented value fit inside the corresponding field or not
   * @method
   * @memberof bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits
   * @param {number[]} parties - parties to open (same as jiff_instance.open)
   * @param {string|number} [op_id=auto_gen()] - same as jiff_instance.open
   * @returns {promise} a promise to the number represented by bits
   */
  jiffClient.protocols.bits.open = sharing.open_bits.bind(null, jiffClient);
  /**
   * Receives an opening of an array of secret bits without owning shares of the underlying value.
   * Similar to jiff.receive_open() but for bits.
   * This works regardless of whether the represented value fit inside the corresponding field or not
   * @method
   * @memberOf jiff-instance.protocols.bits
   * @param {Array} senders - an array with party ids (1 to n) specifying the parties sending the shares
   * @param {Array} [receivers=all_parties] - an array with party ids (1 to n) specifying the parties receiving the result
   * @param {number} [count=ceil(log2(Zp))] - the number of bits being opened
   * @param {number} [threshold=parties.length] - the min number of parties needed to reconstruct the secret, defaults to all the senders
   * @param {number} [Zp=jiff_instance.Zp] - the mod (if null then the default Zp for the instance is used)
   * @param {string|number|object} [op_id=auto_gen()] - unique and consistent synchronization id between all parties
   * @returns {promise} a (JQuery) promise to the open value of the secret
   */
  jiffClient.protocols.bits.receive_open = sharing.receive_open_bits.bind(null, jiffClient);
};
},{"../protocols/bits/arithmetic.js":25,"../protocols/bits/comparison.js":26,"../protocols/bits/protocols.js":27,"../protocols/bits/sharing.js":28}],3:[function(require,module,exports){
module.exports = function (jiffClient) {
  /**
   * Requests secret(s) from the server (crypto provider) of type matching the given label.
   * @method from_crypto_provider
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} label - the type of secret(s) being requested from crypto_provider (e.g. triplet, quotient, numbers, etc)
   * @param {Array} [receivers_list=all_parties] - array of party ids that want to receive the secret(s), by default, this includes all parties.
   * @param {number} [threshold=receivers_list.length] - the min number of parties needed to reconstruct the secret(s).
   * @param {number} [Zp=jiff_instance.Zp] - the mod, defaults to the Zp of the instance.
   * @param {string} [op_id=auto_Gen()] - an id which is used to identify the secret requested, so that every party
   *                              gets a share from the same secret for every matching instruction. An automatic id
   *                              is generated by increasing a local counter per label, default ids suffice when all
   *                              parties execute all instructions in the same order.
   * @param {object} [params={}] - any additional parameters specific to the label, these are defined by the label handler at the server side.
   *                               some of these parameters may be optional, while others may be required.
   * @returns {promise} a promise to the secret(s) provided by the server/crypto provider, the promise returns an object with the given format:
   *                               { values: <any values returned by the server side>, shares: <array of secret share objects matching shares returned by server by index>}
   */
  jiffClient.from_crypto_provider = function (label, receivers_list, threshold, Zp, op_id, params) {
    // defaults
    if (Zp == null) {
      Zp = jiffClient.Zp;
    }
    if (receivers_list == null) {
      receivers_list = [];
      for (var i = 1; i <= jiffClient.party_count; i++) {
        receivers_list.push(i);
      }
    } else {
      jiffClient.helpers.sort_ids(receivers_list);
    }
    if (threshold == null) {
      threshold = receivers_list.length;
    }
    if (op_id == null) {
      op_id = jiffClient.counters.gen_op_id('crypto_provider:' + label, receivers_list);
    }
    if (params == null) {
      params = {};
    }

    // Send a request to the server
    var msg = {label: label, op_id: op_id, receivers: receivers_list, threshold: threshold, Zp: Zp, params: params};
    msg = jiffClient.hooks.execute_array_hooks('beforeOperation', [jiffClient, 'crypto_provider', msg], 2);
    msg = JSON.stringify(msg);

    // Setup deferred to handle receiving the result later.
    jiffClient.deferreds[op_id] = new jiffClient.helpers.Deferred();
    var result = jiffClient.deferreds[op_id].promise;

    // send a request to the server.
    jiffClient.socket.safe_emit('crypto_provider', msg);
    return result;
  };
};
},{}],4:[function(require,module,exports){
module.exports = function (jiffClient) {
  /**
   * Sends a custom message to a subset of parties
   * @memberof module:jiff-client~JIFFClient
   * @method emit
   * @instance
   * @param {string} tag - the tag to attach to the message
   * @param {Array} [receivers=all_parties] - contains the party ids to receive the message, defaults to all parties
   * @param {string} message - the message to send
   * @param {boolean} [encrypt=true] - if true, messages will be encrypted
   */
  jiffClient.emit = function (tag, receivers, message, encrypt) {
    if (typeof(message) !== 'string') {
      throw new Error('Emit: message must be a string');
    }

    if (receivers == null) {
      receivers = [];
      for (var i = 1; i <= jiffClient.party_count; i++) {
        receivers.push(i);
      }
    }

    // send to all other parties
    for (var p = 0; p < receivers.length; p++) {
      if (receivers[p] === jiffClient.id) {
        continue;
      }

      var message_to_send = {tag: tag, party_id: receivers[p], message: message, encrypted: encrypt};
      message_to_send = jiffClient.hooks.execute_array_hooks('beforeOperation', [jiffClient, 'custom', message_to_send], 2);

      if (message_to_send['encrypted'] !== false) {
        message_to_send['message'] = jiffClient.hooks.encryptSign(jiffClient, message_to_send['message'], jiffClient.keymap[message_to_send['party_id']], jiffClient.secret_key);
        message_to_send['encrypted'] = true;
      }

      jiffClient.socket.safe_emit('custom', JSON.stringify(message_to_send));
    }

    // receive our own message if specified
    if (receivers.indexOf(jiffClient.id) > -1) {
      jiffClient.handlers.receive_custom({tag: tag, party_id: jiffClient.id, message: message, encrypted: false});
    }
  };

  /**
   * Registers the given function as a listener for messages with the given tag.
   * Removes any previously set listener for this tag.
   * @memberof module:jiff-client~JIFFClient
   * @method listen
   * @instance
   * @param {string} tag - the tag to listen for.
   * @param {function(party_id, string)} handler - the function that handles the received message: takes the sender id and the message as parameters.
   */
  jiffClient.listen = function (tag, handler) {
    jiffClient.listeners[tag] = handler;

    var stored_messages = jiffClient.custom_messages_mailbox[tag];
    if (stored_messages == null) {
      return;
    }

    for (var i = 0; i < stored_messages.length; i++) {
      var sender_id = stored_messages[i].sender_id;
      var message = stored_messages[i].message;
      handler(sender_id, message);
    }

    delete jiffClient.custom_messages_mailbox[tag];
  };

  /**
   * Removes the custom message listener attached to the given tag
   * @memberof module:jiff-client~JIFFClient
   * @method remove_listener
   * @instance
   * @param {string} tag - the tag of the listener to remove
   */
  jiffClient.remove_listener = function (tag) {
    delete jiffClient.listeners[tag];
  };
};
},{}],5:[function(require,module,exports){
module.exports = function (jiffClient) {
  /**
   * Wait until the public keys of these parties are known.
   * The public keys may be known before the parties connect (if provided in the options),
   * or they could be sent by the server after the parties connect.
   * Computation specified in the callback may assume that these parties are connected,
   * if they are not, the server will handle storing and relaying the needed messages
   * to them when they connect.
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {Array} parties - an array of party ids to wait for, must explicitly include 's1' if callback must wait for the server.
   * @param {function(jiff-instance)} callback - the function to execute when these parties are known.
   * @param {boolean} [wait_for_initialization=true] - specifies whether to wait for initialization to be complete
   *                                                   before executing the callback (even if parties are available).
   *                                                   Set this to false if you do not need the party count and this
   *                                                   party's id, or if you already have them, and you are certain
   *                                                   they will be accepted by the server on initialization.
   */
  jiffClient.wait_for = function (parties, callback, wait_for_initialization) {
    if (wait_for_initialization == null) {
      wait_for_initialization = true;
    }

    jiffClient.wait_callbacks.push({parties: parties, callback: callback, initialization: wait_for_initialization});
    jiffClient.execute_wait_callbacks(); // See if the callback can be executed immediately
  };

  /**
   * Disconnects from the computation.
   * Allows the client program to exit.
   * @method disconnect
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {boolean} [safe=false] - if true, jiff will disconnect safely (i.e. after ensuring all
   *                                 outgoing pending messages were delivered).
   * @param {boolean} [free=false] - if set to true, it means this party's disconnection is final, and all resources
   *                                 associated with this party must be freed.
   *                                 If all parties in a computation are freed, then all resources associated with the
   *                                 computation are freed, and any subsequent reconnection to the computation is as
   *                                 if a the connection is for a fresh new computation.
   * @param {function()} [callback] - executed after the instance safely disconnects, if safe is set to false, this
   *                                  parameter is ignored.
   */
  jiffClient.disconnect = function (safe, free, callback) {
    if (safe) {
      jiffClient.socket.safe_disconnect(free, callback);
    } else {
      if (free) {
        jiffClient.free();
      }
      jiffClient.socket.disconnect();
    }
  };

  /**
   * Emits event to free up all the resources allocated for this party on the server.
   * It is best not to call this function directly, as it can break things if resources still need to be used.
   * Instead, use jiff.disconnect(safe, free, callback) to free after safely disconnecting.
   * @see {@link module:jiff-client~JIFFClient#disconnect}
   * @method free
   * @memberof module:jiff-client~JIFFClient
   * @instance
   */
  jiffClient.free = function () {
    var msg = jiffClient.hooks.execute_array_hooks('beforeOperation', [jiffClient, 'free', {}], 2);
    jiffClient.socket.safe_emit('free', JSON.stringify(msg));
  };
};
},{}],6:[function(require,module,exports){
var numbers = require('../protocols/preprocessing/numbers.js');
var bits = require('../protocols/preprocessing/bits.js');
var triplets = require('../protocols/preprocessing/triplets.js');
var quotients = require('../protocols/preprocessing/quotients.js');
var sampling = require('../protocols/preprocessing/sampling.js');

/**
 * Contains miscellaneous protocols (mostly used in preprocessing)
 * @name protocols
 * @alias protocols
 * @namespace
 */
module.exports = function (jiffClient) {
  /**
   * Creates shares of an unknown random number. Every party comes up with its own random number and shares it.
   * Then every party combines all the received shares to construct one share of the random unknown number.
   * @method
   * @memberof protocols
   * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed.
   * @param {Array} receivers_list - array of party ids to receive the result.
   * @param {Array} compute_list - array of party ids to perform the protocol.
   * @param {number} Zp - the mod.
   * @param {object} params - an object containing extra parameters passed by the user.
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated.
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   * @return {Object} contains 'share' (this party's share of the result) and 'promise'.
   */
  jiffClient.protocols.generate_random_number = numbers.generate_random_number.bind(null, jiffClient);

  /**
   * Creates shares of 0, such that no party knows the other parties' shares.
   * Every party secret shares 0, then every party sums all the shares they received, resulting
   * in a new share of 0 for every party.
   * @method
   * @memberof protocols
   * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed.
   * @param {Array} receivers_list - array of party ids to receive the result.
   * @param {Array} compute_list - array of party ids to perform the protocol.
   * @param {number} Zp - the mod.
   * @param {object} params - an object containing extra parameters passed by the user.
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated.
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   * @return {Object} contains 'share' (this party's share of the result) and 'promise'.
   */
  jiffClient.protocols.generate_zero = numbers.generate_zero.bind(null, jiffClient);

  /**
   * Generates a random bit under MPC by xoring all bits sent by participating parties using smult / beaver triples
   * @method
   * @memberof protocols
   * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed.
   * @param {Array} receivers_list - array of party ids to receive the result.
   * @param {Array} compute_list - array of party ids to perform the protocol.
   * @param {number} Zp - the mod.
   * @param {object} params - an object containing extra parameters passed by the user.
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated.
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   * @return {Object} contains 'share' (this party's share of the generated bit) and 'promise'.
   */
  jiffClient.protocols.generate_random_bit_smult = bits.generate_random_bit_smult.bind(null, jiffClient);

  /**
   * Generates a random bit under MPC by xoring all bits sent by participating parties using smult_bgw
   * @method
   * @memberof protocols
   * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed.
   * @param {Array} receivers_list - array of party ids to receive the result.
   * @param {Array} compute_list - array of party ids to perform the protocol.
   * @param {number} Zp - the mod.
   * @param {object} params - an object containing extra parameters passed by the user.
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated.
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   * @return {Object} contains 'share' (this party's share of the generated bit) and 'promise'.
   */
  jiffClient.protocols.generate_random_bit_bgw = bits.generate_random_bit_bgw.bind(null, jiffClient);

  /**
   * Generates a sequence of random bits under MPC.
   * @method
   * @memberof protocols
   * @param {number} [threshold=receivers_list.length] - the threshold of the bit when stored by receivers after generation.     * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed.
   * @param {Array} receivers_list - array of party ids to receive the result.
   * @param {Array} compute_list - array of party ids to perform the protocol.
   * @param {number} Zp - the mod.
   * @param {object} params - an object containing extra parameters passed by the user.
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated.
   *                               - count: how many random bits to generate.
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   * @param {object} protocols - the protocols to use for preprocessing.
   * @return {Object} contains 'share' (array of secret shares bits) and 'promise'.
   */
  jiffClient.protocols.generate_random_bits = bits.generate_random_bits.bind(null, jiffClient);

  /**
   * Generation of beaver triplet via MPC, uses the server for communication channels, but not for generation
   * @method
   * @memberof protocols
   * @param {number} threshold - the threshold of the triplets when stored by receivers after generation
   * @param {Array} receivers_list - array of party ids that want to receive the triplet shares
   * @param {Array} compute_list - array of party ids that will perform this protocol
   * @param {number} Zp - the mod
   * @param {object} params - an object containing extra parameters passed by the user
   *                               Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated
   *                               - an optional number compute_threshold parameter, which specifies threshold used
   *                               during the protocol execution. By default, this is the length of the (compute_list+1)/2
   * @param {object} protocols - the sub protocols to use for preprocessing
   * @return {object} all pre-processing protocols must return an object with these keys:
   *  {
   *    'share': the share(s)/value(s) to store attached to op_id for later use by the computation (i.e. the result of preprocessing),
   *    'promise': a promise for when this protocol is fully completed (could be null if the protocol was already completed)
   *  }
   *  In this case, 'share' is an array of this party's shares of the resulting triplet, a,b,c such that a*b=c
   */
  jiffClient.protocols.generate_beaver_bgw = triplets.bind(null, jiffClient);

  /**
   * Creates shares of r and x, such that r is a uniform random number between 0 and Zp, and x is floor(r/constant)
   * where constant is provided by the extra params
   * @method
   * @memberof protocols
   * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed
   * @param {Array} receivers_list - array of party ids to receive the result
   * @param {Array} compute_list - array of party ids to perform the protocol
   * @param {number} Zp - the mod
   * @param {object} params - an object containing extra parameters passed by the user
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   *                               - constant: the constant to divide the random number by.
   *                               - output_op_id: the set op id of the output quotient and noise
   * @return {Object} contains 'share' (this party's share of the result) and 'promise'
   */
  jiffClient.protocols.generate_random_and_quotient = quotients.bind(null, jiffClient);

  /**
   * Wrapper for when doing rejection sampling during pre processing
   *
   * Do not use this function directly, especially during online computation time, use jiffClient.protocols.bits.rejection_sampling instead
   *
   * @method
   * @memberof protocols
   * @param {number} [threshold=receivers_list.length] - the threshold of the resulting shares after sampling
   * @param {Array} [receivers_list=all_parties] - array of party ids that want to receive the sampling shares, by default, this includes all parties
   * @param {Array} [compute_list=all_parties] - array of party ids that will perform this protocol, by default, this includes all parties
   * @param {number} [Zp=jiff-instance.Zp] - the mod (if null then the default Zp for the instance is used)
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly
   * @param {object} [params={}] - an object containing extra parameters passed by the user
   *                               Expects:
   *                               - an optional number compute_threshold parameter, which specifies threshold used
   *                               during the protocol execution. By default, this is (|compute_list|+1)/2
   *                               - optional 'lower_bound' and 'upper_bound' numeric parameters, default to 0 and Zp respectively
   *                               - op_id, the base op_id to tag operations inside this protocol with, defaults to auto generated
   *                               - output_op_id, the tag id for the output result
   *                               - retry_count, how many times rejection sampling have been retried!
   * @param {object} [protocols=defaults] - the protocols to use for preprocessing, any protocol(s) not provided will be replaced with defaults
   * @returns {Object} an object containing keys: 'share', and 'promise'. The promise is resolved when the rejection sampling is completed.
   *                   The object is consumed by <jiff_instance>.preprocessing:
   *                        - 'share' attribute contains the resulting array of secret shared bits representing the sampled value, and is stored in the preprocessing table internally
   *                        - The promise is consumed and a new promise is returned by <jiff_instance>.preprocessing that is resolved after this returned promise (and all other promise generated by that .preprocessing call) are resolved
   */
  jiffClient.protocols.rejection_sampling = sampling.bind(null, jiffClient);
};
},{"../protocols/preprocessing/bits.js":34,"../protocols/preprocessing/numbers.js":35,"../protocols/preprocessing/quotients.js":36,"../protocols/preprocessing/sampling.js":37,"../protocols/preprocessing/triplets.js":38}],7:[function(require,module,exports){
var shareProtocol = require('../protocols/shamir/share.js');
var openProtocol = require('../protocols/shamir/open.js');
var reshareProtocol = require('../protocols/shamir/reshare.js');
var arraysSharing = require('../protocols/arrays/api.js');

module.exports = function (jiffClient) {
  /**
   * Share a secret input
   *
   * Can be overriden by extensions to customize behavior
   *
   * @method share
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {number} secret - the number to share (this party's input)
   * @param {number} [threshold=receivers_list.length] - the minimum number of parties needed to reconstruct the secret, defaults to all the receivers
   * @param {Array} [receivers_list=all_parties] - array of party ids to share with, by default, this includes all parties
   * @param {Array} [senders_list=all_parties] - array of party ids to receive from, by default, this includes all parties
   * @param {number} [Zp=jiff_instance.Zp] - the mod (if null then the default Zp for the instance is used)
   * @param {string|number} [share_id=auto_gen()] - the tag used to tag the messages sent by this share operation, this tag is used
   *                                   so that parties distinguish messages belonging to this share operation from other
   *                                   share operations between the same parties (when the order of execution is not
   *                                   deterministic). An automatic id is generated by increasing a local counter, default
   *                                   ids suffice when all parties execute all sharing operations with the same senders
   *                                   and receivers in the same order
   * @returns {object} a map (of size equal to the number of sending parties)
   *          where the key is the party id (between 1 and n), or 's1' if 's1' is specified in the senders_list,
   *          and the value is the share object that wraps the value received from that party (the internal value maybe
   *          deferred).
   *
   * @example
   * // share an input value with all parties, and receive all other parties' inputs
   * var shares = jiffClient.share(input);
   * // my party id is '1', so the first share is mine (technically my share of my input value)
   * var my_share = shares[1];
   * // my share of party 2's input
   * var p2_share = shares[2];
   */
  jiffClient.share = function (secret, threshold, receivers_list, senders_list, Zp, share_id) {
    // type check to confirm the secret to be shared is a number
    // for fixed-point extension it should allow non-ints
    if (secret != null && (typeof(secret) !== 'number' || Math.floor(secret) !== secret || secret < 0)) {
      throw new Error('secret \'' + secret + '\' must be a non-negative whole number');
    }
    if (secret != null && (secret >= (Zp == null ? jiffClient.Zp : Zp))) {
      throw new Error('secret \'' + secret + '\' must fit inside Zp');
    }
    return jiffClient.internal_share(secret, threshold, receivers_list, senders_list, Zp, share_id);
  };

  /**
   * Same as share, but used by internal JIFF primitives/protocols, do not override this!
   * @see {@link module:jiff-client~JIFFClient#share}
   * @method internal_share
   * @instance
   * @memberof module:jiff-client~JIFFClient
   */
  jiffClient.internal_share = shareProtocol.jiff_share.bind(null, jiffClient);

  /**
   * re-share an existing share (value) under a new threshold or to a new set of parties or both.
   * Do not use this to refresh a share (use {@link module:jiff-client~JIFFClient#SecretShare#refresh} instead)
   * @method reshare
   * @instance
   * @memberof module:jiff-client~JIFFClient
   * @param {module:jiff-client~JIFFClient#SecretShare} [share=null] - the share you would like to reshare (null if you are a receiver but not a sender)
   * @param {number} [threshold=receivers_list.length] - the new threshold, defaults to the length of receivers_list param
   * @param {Array} [receivers_list=all_parties] - array of party ids to receive from, by default, this includes all parties
   * @param {Array} [senders_list=all_parties] - array of party ids that posses the share and will reshare it with the receivers, by default, this includes all parties
   * @param {number} [Zp=jiff.Zp] - the Zp of the existing share
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this multiplication (and internally, the corresponding beaver triplet).
   *                         This id must be unique, and must be passed by all parties to the same instruction.
   *                         this ensures that every party gets a share from the same triplet for every matching instruction. An automatic id
   *                         is generated by increasing a local counter, default ids suffice when all parties execute the
   *                         instructions in the same order
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result under the new threshold, or null if this party is not a receiver
   */
  jiffClient.reshare = reshareProtocol.bind(null, jiffClient);

  /**
   * Open a secret share to reconstruct secret.
   * @method open
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {module:jiff-client~JIFFClient#SecretShare} share - this party's share of the secret to reconstruct.
   * @param {Array} [parties=all_parties] - an array with party ids (1 to n) of receiving parties.
   * @param {string|number} [op_id=auto_gen()] - the operation id to be used to tag outgoing messages.
   * @returns {?promise} a (JQuery) promise to the open value of the secret, null if the party is not specified in the parties array as a receiver.
   * @example
   * var shares = jiff_instance.share(input);
   * //multiply the inputs of party 1 and 2 together
   * var result = shares[1].mult(shares[2]);
   * // reveal the result of the multiplication to all parties
   * return jiff_instance.open(result);
   */
  jiffClient.open = openProtocol.jiff_open.bind(null, jiffClient);

  /**
   * Same as open, but used by internal JIFF primitives/protocols, do not override this!
   * @see {@link module:jiff-client~JIFFClient#open}
   * @method internal_open
   * @instance
   * @memberof module:jiff-client~JIFFClient
   */
  jiffClient.internal_open = jiffClient.open;

  /**
   * Receive shares from the specified parties and reconstruct their secret.
   * Use this function in a party that will receive some answer/value but does not have a share of it.
   * @method receive_open
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {Array} senders - an array with party ids (1 to n) specifying the parties sending the shares, this must be provided!
   * @param {Array} [receivers=all_parties] - an array with party ids (1 to n) specifying the parties receiving the result
   * @param {number} [threshold=senders.length] - the min number of parties needed to reconstruct the secret, defaults to all the senders
   * @param {number} [Zp=jiff_instance.Zp] - the mod (if null then the default Zp for the instance is used)
   * @param {string|number} [op_id=auto_Gen()] - same as jiff-instance.open
   * @returns {!promise} a (JQuery) promise to the open value of the secret.
   */
  jiffClient.receive_open = function (senders, receivers, threshold, Zp, op_id) {
    if (senders == null) {
      throw new Error('Must provide "senders" parameter in receive_open');
    }

    jiffClient.helpers.sort_ids(senders);
    if (receivers == null) {
      receivers = [];
      for (var i = 1; i <= jiffClient.party_count; i++) {
        receivers.push(i);
      }
    } else {
      jiffClient.helpers.sort_ids(receivers);
    }
    if (Zp == null) {
      Zp = jiffClient.Zp;
    }
    if (threshold == null) {
      threshold = senders.length;
    }

    var imitationSecretShare = new jiffClient.SecretShare({}, senders, threshold, Zp);
    return jiffClient.open(imitationSecretShare, receivers, op_id);
  };

  /**
   * Receive arrays of shares from the specified parties and reconstruct their secrets.
   * Use this function in a party that will receive some answer/value but does not have a share of it.
   * @method receive_open
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {Array} senders - an array with party ids (1 to n) specifying the parties sending the shares, this must be provided!
   * @param {number} [threshold=senders.length] - the min number of parties needed to reconstruct the secret, defaults to all the senders
   * @param {number} [Zp=jiff_instance.Zp] - the mod (if null then the default Zp for the instance is used)
   * @param {string|number} [op_id=auto_Gen()] - same as jiff-instance.open
   * @returns {!promise} a (JQuery) promise to the open value of the secret.
   */
  jiffClient.receive_open_array = arraysSharing.jiff_receive_open_ND_array.bind(null, jiffClient);

  /**
   * Share an array of values. Each sender may have an array of different length. This is handled by the lengths parameter.
   * This function will reveal the lengths of the shared array.
   *
   * If parties would like to keep the lengths of their arrays secret, they should agree on some public "max" length apriori (either under MPC
   * or as part of the logistics of the computation), all their arrays should be padded to that length by using appropriate default/identity
   * values
   * @method share_array
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {Array} array - the array to be shared.
   * @param {null|number|object} [lengths] - the lengths of the arrays to be shared, has the following options: <br>
   *                                       1. null: lengths are unknown, each sender will publicly reveal the lengths of its own array. <br>
   *                                       2. number: all arrays are of this length <br>
   *                                       3. object: { <sender_party_id>: length }: must specify the length of the array for each sender. <br>
   * @param {number} [threshold=receivers_list.length] - the min number of parties needed to reconstruct the secret, defaults to all the receivers.
   * @param {Array} [receivers_list=all_parties] - array of party ids to share with, by default, this includes all parties.
   * @param {Array} [senders_list=all_parties] - array of party ids to receive from, by default, this includes all parties.
   * @param {number} [Zp=jiff_instance.Zp] - the mod (if null then the default Zp for the instance is used).
   * @param {string|number} [share_id=auto_gen()] - the base tag used to tag the messages sent by this share operation, every element of the array
   *                                   will get a unique id based on the concatenation of base_share_id and the index of the element.
   *                                   This tag is used so that parties distinguish messages belonging to this share operation from
   *                                   other share operations between the same parties (when the order of execution is not
   *                                   deterministic). An automatic id is generated by increasing a local counter, default
   *                                   ids suffice when all parties execute all sharing operations with the same senders
   *                                   and receivers in the same order.
   * @returns {?promise} if the calling party is a receiver then a promise to the shared arrays is returned, the promise will provide an object
   *                    formatted as follows: { <party_id>: [ <1st_share>, <2nd_share>, ..., <(lengths[party_id])th_share> ] }
   *                    where the party_ids are those of the senders.
   *                    if the calling party is not a receiver, then null is returned.
   */
  jiffClient.share_array = arraysSharing.jiff_share_array.bind(null, jiffClient);

  /**
   * Share an array of values. Each sender may have an array of different length. This is handled by the lengths parameter.
   * This function will reveal the lengths of the shared array.
   *
   * If parties would like to keep the lengths of their arrays secret, they should agree on some "max" length apriori (either under MPC
   * or as part of the logistics of the computation), all their arrays should be padded to that length by using appropriate default/identity
   * values.
   * @method share_2D_array
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {Array} array - the array to be shared.
   * @param {null|number|object} lengths - the lengths of the arrays to be shared. For this to work successfully, the
   *                                       same exact value must be used in the calling code for each party. Any missing
   *                                       lengths for a row will be automatically publicly revealed by this function.
   *                                       Must have the following format:
   *                                       1. null: lengths are unknown, each sender will publicly reveal the lengths of its own array.
   *                                       2. { rows: <number>, cols: <number>, 0: <number>, 1: <number>, ...}: all parties have arrays
   *                                          with the given number of rows and cols. In case of jagged 2D arrays, different rows
   *                                          can have a different number of cols specified by using <row_index>: <col_size>.
   *                                          rows is mandatory, cols and any other number matching a specific row are optional.
   *                                       3. { <sender_party_id>: <length_object> }: must specify the lengths for each party by using
   *                                          an object with the same format as 2. Must include every party.
   * @param {number} [threshold=receivers_list.length] - the min number of parties needed to reconstruct the secret, defaults to all the receivers.
   * @param {Array} [receivers_list=all_parties] - array of party ids to share with, by default, this includes all parties.
   * @param {Array} [senders_list=all_parties] - array of party ids to receive from, by default, this includes all parties.
   * @param {number} [Zp=jiff_instance.Zp] - the mod (if null then the default Zp for the instance is used).
   * @param {string|number} [share_id=auto_gen()] - the base tag used to tag the messages sent by this share operation, every element of the array
   *                                   will get a unique id based on the concatenation of base_share_id and the index of the element.
   *                                   This tag is used so that parties distinguish messages belonging to this share operation from
   *                                   other share operations between the same parties (when the order of execution is not
   *                                   deterministic). An automatic id is generated by increasing a local counter, default
   *                                   ids suffice when all parties execute all sharing operations with the same senders
   *                                   and receivers in the same order.
   * @returns {promise} if the calling party is a receiver then a promise to the shared arrays is returned, the promise will provide an object
   *                    formatted as follows: { <party_id>: [ [ <1st_row_shares> ], [<2nd_row_share> ], ..., [ <(lengths[party_id])th_row_shares> ] ] }
   *                    where the party_ids are those of the senders.
   *                    if the calling party is not a receiver, then null is returned.
   */
  jiffClient.share_2D_array = arraysSharing.jiff_share_2D_array.bind(null, jiffClient);

  /**
   * Share an n-dimensional array of secrets
   * The arrays can be of different lengths and dimensions.
   * @method share_ND_array
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @returns {object|promise}
   */
  jiffClient.share_ND_array = arraysSharing.jiff_share_ND_array.bind(null, jiffClient);

  /**
   * Helper function of share_ND_array
   * This method gets called if share_ND_array does not have enough information
   *                 to output an array of shares immediately.  Instead it
   *                 returns a promise to an object holding the unknown-size
   *                 arrays from each sender.
   * @method share_ND_array_deferred
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @returns {promise}
   */
  //jiffClient.share_ND_array_deferred = arraysSharing.jiff_share_ND_array_deferred.bind(null, jiffClient);

  /**
   * Helper function of share_ND_array
   * This method gets called if share_ND_array when share_ND_array was given
   *                 sufficients information (in the form of array skeletons) to
   *                 infer the size and shape of each of the senders' arrays.
   *                 This allows it to immediately return an object containing
   *                 the secret-shared arrays from each sender.
   * @method share_ND_array_static
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @returns {object}
   */
  //jiffClient.share_ND_array_static = arraysSharing.jiff_share_ND_array_static.bind(null, jiffClient);

  /*
   * Wipe a secret array of all secrets but preserve the shape
   */
  jiffClient.skeleton_of = arraysSharing.jiff_skeleton_of.bind(null, jiffClient);

  /**
   * Opens an array of secret shares.
   * @method open_array
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} shares - an array containing this party's shares of the secrets to reconstruct.
   * @param {Array<number|string|Array>} [parties=all_parties] - an array with party ids of receiving parties.
   *                          This must be one of 3 cases:
   *                          1. null:                       open all shares to all parties.
   *                          2. array of numbers:           open all shares to all the parties specified in the array.
   *                          3. array of array of numbers:  open share with index i to the parties specified
   *                                                         in the nested array at parties[i]. if parties[i] was null,
   *                                                         then shares[i] will be opened to all parties.
   * @param {string|number|object} [op_ids=auto_gen()] - an optional mapping that specifies the ID/Tag associated with each
   *                                        open message sent. Since open_array involves sending many messages per party,
   *                                        this parameter only specifies the BASE OPERATION ID. Each message sent will
   *                                        have this base id attached to it concatenated to a counter.
   *                                        If this is an object, then it should map an id of a receiving parties
   *                                        to the base op_id that should be used to tag the messages sent to that party.
   *                                        Parties left unmapped by this object will get an automatically generated id.
   *                                        If this is a number/string, then it will be used as the base id tagging all messages
   *                                        sent by this open to all parties.
   *                                        You can safely ignore this unless you have multiple opens each containing other opens.
   *                                        In that case, the order by which these opens are executed is not fully deterministic
   *                                        and depends on the order of arriving messages. In this case, use this parameter
   *                                        with every nested_open, to ensure ids are unique and define a total ordering on
   *                                        the execution of the opens (check implementation of slt for an example).
   * @returns {promise} a (JQuery) promise to ALL the open values of the secret, the promise will yield
   *                    a 2D array of values, each corresponding to the given share in the shares parameter
   *                    at the same index. In the case where different values are opened to different parties, the order
   *                    of the values will be preserved, but not the indices, there will be no blanks in the resulting arrays,
   *                    the first share that is opened to this party will appear at index [0], even if it was not initially
   *                    at [0].
   * @throws error if some shares does not belong to the passed jiff instance.
   */
  jiffClient.open_array = arraysSharing.jiff_open_array.bind(null, jiffClient);

  /**
   * Opens an n-dimensional array of secret shares.
   * @method open_ND_array
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {module:jiff-client~JIFFClient#SecretShare|module:jiff-client~JIFFClient#SecretShare[]|module:jiff-client~JIFFClient#SecretShare[][]} shares - an n-dimensional array containing this party's shares of the secrets to reconstruct.
   * @param {Array[]} [parties=all_parties] - an array with party ids (1 to n) of receiving parties.
   * @param {string|number|object} [op_ids=auto_gen()] - an optional ID/Tag associated with these open operations
   * @returns {promise} a (JQuery) promise to ALL the open values of the secret, the promise will yield
   *                    an n-dimensional array of values, each corresponding to the given share in the shares parameter
   *                    at the same index. In the case where different values are opened to different parties, the order
   *                    of the values will be preserved, but not the indices, there will be no blanks in the resulting arrays,
   *                    the first share that is opened to this party will appear at indices [0][0], even if it was not initially
   *                    at [0][0].
   * @throws error if some shares does not belong to the passed jiff instance.
   */
  jiffClient.open_ND_array = arraysSharing.jiff_open_ND_array.bind(null, jiffClient);
};

},{"../protocols/arrays/api.js":21,"../protocols/shamir/open.js":39,"../protocols/shamir/reshare.js":40,"../protocols/shamir/share.js":41}],8:[function(require,module,exports){
module.exports = function (jiffClient) {
  var maxBarrierId = 10000000;
  var currentBarrierId = 0;
  var openBarriers = 0;

  /**
   * Starts a new barrier, all promises and secret shares created between this call and the corresponding start_barrier
   * call will be part of this barrier. start_barrier may be called before previous barriers are resolved, in which
   * case promises / secret shares created will be part of the new barrier as well as any previous barriers.
   * @memberof module:jiff-client~JIFFClient
   * @method start_barrier
   * @instance
   * @returns {number} a barrier id that identifies this barrier.
   */
  jiffClient.start_barrier = function () {
    openBarriers++;
    currentBarrierId = (currentBarrierId + 1 % maxBarrierId);
    jiffClient.barriers[currentBarrierId] = [];
    return currentBarrierId;
  };

  /**
   * Adds given promise to all active barriers.
   * @memberof module:jiff-client~JIFFClient
   * @method add_to_barriers
   * @instance
   * @param {promise} promise - the promise to add.
   */
  jiffClient.add_to_barriers = function (promise) {
    if (openBarriers > 0) {
      for (var id in jiffClient.barriers) {
        if (jiffClient.barriers.hasOwnProperty(id)) {
          jiffClient.barriers[id].push(promise);
        }
      }
    }
  };

  /**
   * Executes the callback only after all promises / secret shares in the barrier were resolved.
   * @memberof module:jiff-client~JIFFClient
   * @method end_barrier
   * @instance
   * @param {number} [barrier_id=jiff.barriers.length - 1] - identifies the barrier, should be returned by start_barrier.
   *                                                         by default, barrier_id will refer to the last barrier.
   * @returns {promise} a promise that resolves after the secret shares are resolved.
   */
  jiffClient.end_barrier = function (barrier_id) {
    if (openBarriers === 0) {
      return;
    }

    openBarriers--;
    if (barrier_id == null) {
      barrier_id = currentBarrierId;
    }

    var promise = Promise.all(jiffClient.barriers[barrier_id]);
    delete jiffClient.barriers[barrier_id];
    return promise;
  };
};
},{}],9:[function(require,module,exports){
// Manages op_id counters and generation
module.exports = function (jiffClient) {

  /**
   * Resets all the counters for op_ids
   * @method counters.reset
   * @memberof module:jiff-client~JIFFClient
   * @instance
   */
  jiffClient.counters.reset = function () {
    jiffClient.counters.op_count = {};
    jiffClient.counters.op_count_preprocessing = {};

    if (jiffClient.counters.pending_opens == null) {
      jiffClient.counters.pending_opens = 0;
    }

    // stores a seed for generating unique op_ids.
    jiffClient.op_id_seed = '';
  };

  // initialize the counters for the first time
  jiffClient.counters.reset();

  /**
   * Shorthand for generating unique operation ids.
   * All primitives called after this seed will use their usual default ids prefixed by the seed.
   * Helpful when we have nested callbacks/functions (e.g. share_arrays) that may be executed in arbitrary order,
   * using this function as a the first call inside such callbacks with an appropriate deterministic unique base_op_id
   * ensures that regardless of the order of execution, operations in the same callback are matched correctly across
   * all parties.
   * Check out demos/graph-pip/mpc.js for an example on using this.
   * @method seed_ids
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string|number} base_op_id - the base seed to use as a prefix for all future op_ids.
   */
  jiffClient.seed_ids = function (base_op_id) {
    if (base_op_id == null || base_op_id === '') {
      jiffClient.op_id_seed = '';
    } else {
      jiffClient.op_id_seed = base_op_id.toString() + ':';
    }
  };

  /**
   * Generate a unique operation id for a new operation object.
   * The returned op_id will be unique with respect to other operations, and identifies the same
   * operation across all parties, as long as all parties are executing instructions in the same order.
   * @method gen_op_id
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} op - the type/name of operation performed.
   * @param {Array} holders - an array containing the ids of all the parties carrying out the operation.
   * @return {string} the op_id for the operation.
   */
  jiffClient.counters.gen_op_id = function (op, holders) {
    var label = jiffClient.op_id_seed + op + ':' + holders.join(',');
    if (jiffClient.counters.op_count[label] == null) {
      jiffClient.counters.op_count[label] = 0;
    }
    return label + ':' + (jiffClient.counters.op_count[label]++);
  };

  /**
   * Generate a unique operation id for a new operation object given two distinct executing parties lists.
   * For example, when sharing, this is given two potentially different lists of senders and receivers.
   * The returned op_id will be unique with respect to other operations, and identifies the same
   * operation across all parties, as long as all parties are executing instructions in the same order.
   * @method gen_op_id2
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} op - the type/name of operation performed.
   * @param {Array} receivers - an array containing the ids of all the parties carrying out the receiving portion of the operation.
   * @param {Array} senders - an array containing the ids of all the parties carrying out the sending portion of the operation.
   * @return {string} the op_id for the operation.
   */
  jiffClient.counters.gen_op_id2 = function (op, receivers, senders) {
    var label = jiffClient.op_id_seed + op + ':' + senders.join(',') + ':' + receivers.join(',');
    if (jiffClient.counters.op_count[label] == null) {
      jiffClient.counters.op_count[label] = 0;
    }
    return label + ':' + (jiffClient.counters.op_count[label]++);
  };

  /**
   * Generate a unique operation id for a new operation object (for preprocessing)
   * The returned op_id will be unique with respect to other operations, and identifies the same
   * operation across all parties, as long as all parties are executing instructions in the same order.
   * @method gen_op_id_preprocessing
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} op - the type/name of operation performed.
   * @param {Array} holders - an array containing the ids of all the parties carrying out the operation.
   * @return {string} the op_id for the operation.
   */
  jiffClient.counters.gen_op_id_preprocessing = function (op, holders) {
    var label = jiffClient.op_id_seed + op + ':' + holders.join(',');
    if (jiffClient.counters.op_count_preprocessing[label] == null) {
      jiffClient.counters.op_count_preprocessing[label] = 0;
    }
    return label + ':' + (jiffClient.counters.op_count_preprocessing[label]++);
  };

  /**
   * Generate a unique operation id for a new operation object given two distinct executing parties lists (for preprocessing).
   * For example, when sharing, this is given two potentially different lists of senders and receivers.
   * The returned op_id will be unique with respect to other operations, and identifies the same
   * operation across all parties, as long as all parties are executing instructions in the same order.
   * @method gen_op_id2_preprocessing
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} op - the type/name of operation performed.
   * @param {Array} receivers - an array containing the ids of all the parties carrying out the receiving portion of the operation.
   * @param {Array} senders - an array containing the ids of all the parties carrying out the sending portion of the operation.
   * @return {string} the op_id for the operation.
   */
  jiffClient.counters.gen_op_id2_preprocessing = function (op, receivers, senders) {
    var label = jiffClient.op_id_seed + op + ':' + senders.join(',') + ':' + receivers.join(',');
    if (jiffClient.counters.op_count_preprocessing[label] == null) {
      jiffClient.counters.op_count_preprocessing[label] = 0;
    }
    return label + ':' + (jiffClient.counters.op_count_preprocessing[label]++);
  };
};
},{}],10:[function(require,module,exports){
// Server extensions management system
module.exports = function (JIFFClient) {
  /**
   * Checks if the given extension is applied.
   * @method has_extension
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} name - the extension name (found in the extension filename as jiff-client-[name].js).
   * @return {boolean} true if the extension was applied, false otherwise.
   */
  JIFFClient.prototype.has_extension = function (name) {
    return this.extensions.indexOf(name) > -1;
  };

  /**
   * Checks if a given extension can be safely applied to the instance
   * @method can_apply_extension
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} name - the extension name (found in the filename at jiff-client[name].js)
   * @return {boolean} true if the extension can be safely applied, otherwise returns an error message.
   */
  JIFFClient.prototype.can_apply_extension = function (name) {
    return true;
  };

  /**
   * Applies the given extension.
   * If the extension is safe (as per can_apply_extension), it will be applied successfully.
   * If the extension is not safe to be applied, an exception will be thrown with an appropriate error message.
   * @see {@link module:jiff-client~JIFFClient#can_apply_extension}
   * @method apply_extension
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {object} ext - the namespace of the extension acquired when the extension is imported, should contain a make_jiff function.
   * @param {object} [options={}] - optional options to be passed to the extension.
   */
  JIFFClient.prototype.apply_extension = function (ext, options) {
    if (options == null) {
      options = {};
    }

    var name = ext.name;
    var status = this.can_apply_extension(name);

    if (status === true) {
      ext.make_jiff(this, options);

      this.extensions.push(name);
      this.extension_applied(name, options);
    } else {
      throw status;
    }
  };

  /**
   * Called when an extension is applied successfully. Override to change behavior of your extension based on future extensions.
   * @method extension_applied
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} name - the name of the applied extension.
   * @param {object} [options={}] - the options passed by the user to the newly applied extension.
   */
  JIFFClient.prototype.extension_applied = function (name, options) {};
};
},{}],11:[function(require,module,exports){
/**
 * The hooks for this instance.
 * Checkout the <a href="hooks.html">hooks documentation</a>
 * @see {@link module:jiff-client~JIFFClient#hooks}
 * @name hooks
 * @alias hooks
 * @namespace
 */

var crypto = require('../util/crypto.js');
var shamir_share = require('../protocols/shamir/share.js');
var shamir_open = require('../protocols/shamir/open.js');

function Hooks(jiffClient) {
  this.jiffClient = jiffClient;

  // avoid sharing aliases to the same array
  for (hook in Hooks.prototype) {
    if (Hooks.prototype.hasOwnProperty(hook) && typeof(Hooks.prototype[hook].length) === 'number' && Hooks.prototype[hook].slice) {
      this[hook] = Hooks.prototype[hook].slice();
    }
  }

  // fill in hooks from options
  var optionHooks = jiffClient.options.hooks || {};
  for (var hook in optionHooks) {
    if (hook === 'afterOperation') {
      this[hook] = optionHooks[hook].concat(this[hook]);
    } else if (optionHooks.hasOwnProperty(hook)) {
      this[hook] = optionHooks[hook];
    }
  }
}

/**
 * Hook for computing shares of a secret
 * @method computeShares
 * @memberof hooks
 * @param jiffClient {module:jiff-client~JIFFClient} - the jiff client instance
 * @param secret {number} - the secret to share
 * @param parties_list {number[]} - array of party ids to share with
 * @param threshold {number} - threshold of sharing
 * @param Zp {number} - the field prime
 */
Hooks.prototype.computeShares = shamir_share.jiff_compute_shares;
Hooks.prototype.reconstructShare = shamir_open.jiff_lagrange;

// Crypto hooks
Hooks.prototype.encryptSign = function (jiffClient, message) {
  if (jiffClient.sodium_ !== false) {
    return crypto.encrypt_and_sign.apply(null, arguments);
  } else {
    return message;
  }
};

Hooks.prototype.decryptSign = function (jiffClient, cipher) {
  if (jiffClient.sodium_ !== false) {
    return crypto.decrypt_and_sign.apply(null, arguments);
  } else {
    return cipher;
  }
};

Hooks.prototype.generateKeyPair = function (jiffClient) {
  if (jiffClient.sodium_ !== false) {
    var key = jiffClient.sodium_.crypto_box_keypair(); // this party's public and secret key
    return { public_key: key.publicKey, secret_key: key.privateKey }
  } else {
    return { public_key: '', secret_key: ''};
  }
};

Hooks.prototype.parseKey = function (jiffClient, keyString) {
  if (jiffClient.sodium_ !== false) {
    return new Uint8Array(JSON.parse(keyString));
  } else {
    return '';
  }
};

Hooks.prototype.dumpKey = function (jiffClient, key) {
  if (jiffClient.sodium_ !== false) {
    return '[' + key.toString() + ']';
  } else {
    return '';
  }
};

// Array Hooks
Hooks.prototype.beforeShare = [];
Hooks.prototype.afterComputeShare = [];
Hooks.prototype.receiveShare = [];

Hooks.prototype.beforeOpen = [];
Hooks.prototype.receiveOpen = [];
Hooks.prototype.afterReconstructShare = [];

Hooks.prototype.createSecretShare = [];

Hooks.prototype.beforeOperation = [];
Hooks.prototype.afterOperation = [
  // parse content of share/open messages to be integers (instead of strings due to encryption/decryption)
  function (jiff, label, msg) {
    if (label === 'share' || label === 'open') {
      msg['share'] = parseInt(msg['share'], 10);
    }
    return msg;
  }
];

/**
 * Execute all hooks attached to the given name in order.
 * Hooks are executed sequentially such that the first hook's return value is passed into the second and so on.
 * @method execute_array_hooks
 * @memberof hooks
 * @param {string} hook_name - the name of the hook
 * @param {Array} params - parameters to pass to the hooks
 * @param {number} acc_index - the index in params in which the result of the hooks must be saved, if no hooks
 *                             exist for the name, then params[acc_index] is returned.
 * @return {object} returns the result of the last hook.
 */
Hooks.prototype.execute_array_hooks = function (hook_name, params, acc_index) {
  var arr = this.jiffClient.hooks[hook_name];
  arr = (arr == null ? [] : arr);

  for (var i = 0; i < arr.length; i++) {
    params[acc_index] = arr[i].apply(this.jiffClient, params);
  }
  return params[acc_index];
};

module.exports = Hooks;
},{"../protocols/shamir/open.js":39,"../protocols/shamir/share.js":41,"../util/crypto.js":48}],12:[function(require,module,exports){
var initializationHandlers = require('./handlers/initialization.js');
var shareHandlers = require('./handlers/sharing.js');
var customHandlers = require('./handlers/custom.js');
var cryptoProviderHandlers = require('./handlers/crypto_provider.js');

/**
 * Contains handlers for communication events
 * @name handlers
 * @alias handlers
 * @namespace
 */

// Add handlers implementations
module.exports = function (jiffClient) {
  // fill in handlers
  initializationHandlers(jiffClient);
  shareHandlers(jiffClient);
  customHandlers(jiffClient);
  cryptoProviderHandlers(jiffClient);
};
},{"./handlers/crypto_provider.js":13,"./handlers/custom.js":14,"./handlers/initialization.js":15,"./handlers/sharing.js":16}],13:[function(require,module,exports){
// setup handler for receiving messages from the crypto provider
module.exports = function (jiffClient) {
  /**
   * Parse crypto provider message and resolve associated promise.
   * @method
   * @memberof handlers
   * @param {object} json_msg - the parsed json message as received by the crypto_provider event, contains 'values' and 'shares' attributes.
   */
  jiffClient.handlers.receive_crypto_provider = function (json_msg) {
    // Hook
    json_msg = jiffClient.hooks.execute_array_hooks('afterOperation', [jiffClient, 'crypto_provider', json_msg], 2);

    var op_id = json_msg['op_id'];
    if (jiffClient.deferreds[op_id] == null) {
      return; // duplicate message: ignore
    }

    // parse msg
    var receivers_list = json_msg['receivers'];
    var threshold = json_msg['threshold'];
    var Zp = json_msg['Zp'];

    // construct secret share objects
    var result = {};
    if (json_msg['values'] != null) {
      result.values = json_msg['values'];
    }
    if (json_msg['shares'] != null) {
      result.shares = [];
      for (var i = 0; i < json_msg['shares'].length; i++) {
        result.shares.push(new jiffClient.SecretShare(json_msg['shares'][i], receivers_list, threshold, Zp));
      }
    }

    // resolve deferred
    jiffClient.deferreds[op_id].resolve(result);
    delete jiffClient.deferreds[op_id];
  };
};
},{}],14:[function(require,module,exports){
module.exports = function (jiffClient) {
  /**
   * Called when this party receives a custom tag message from any party (including itself).
   * If a custom listener was setup to listen to the tag, the message is passed to the listener.
   * Otherwise, the message is stored until such a listener is provided.
   * @method
   * @memberof handlers
   * @param {object} json_msg - the parsed json message as received by the custom event.
   */
  jiffClient.handlers.receive_custom = function (json_msg) {
    if (json_msg['party_id'] !== jiffClient.id) {
      if (json_msg['encrypted'] === true) {
        json_msg['message'] = jiffClient.hooks.decryptSign(jiffClient, json_msg['message'], jiffClient.secret_key, jiffClient.keymap[json_msg['party_id']]);
      }

      json_msg = jiffClient.hooks.execute_array_hooks('afterOperation', [jiffClient, 'custom', json_msg], 2);
    }

    var sender_id = json_msg['party_id'];
    var tag = json_msg['tag'];
    var message = json_msg['message'];

    if (jiffClient.listeners[tag] != null) {
      jiffClient.listeners[tag](sender_id, message);
    } else {
      // Store message until listener is provided
      var stored_messages = jiffClient.custom_messages_mailbox[tag];
      if (stored_messages == null) {
        stored_messages = [];
        jiffClient.custom_messages_mailbox[tag] = stored_messages;
      }

      stored_messages.push({sender_id: sender_id, message: message});
    }
  }
};
},{}],15:[function(require,module,exports){
// add handlers for initialization
module.exports = function (jiffClient) {
  jiffClient.options.initialization = Object.assign({}, jiffClient.options.initialization);

  /**
   * Called when an error occurs
   * @method
   * @memberof handlers
   * @param {string} label - the name of message or operation causing the error
   * @param {error|string} error - the error
   */
  jiffClient.handlers.error = function (label, error) {
    if (jiffClient.options.onError) {
      jiffClient.options.onError(label, error);
    }

    console.log(jiffClient.id, ':', 'Error from server:', label, '---', error); // TODO: remove debugging
    if (label === 'initialization') {
      jiffClient.socket.disconnect();

      if (jiffClient.initialization_counter < jiffClient.options.maxInitializationRetries) {
        console.log(jiffClient.id, ':', 'reconnecting..'); // TODO: remove debugging
        setTimeout(jiffClient.connect, jiffClient.options.socketOptions.reconnectionDelay);
      }
    }
  };

  /**
   * Builds the initialization message for this instance
   * @method
   * @memberof handlers
   * @return {Object}
   */
  jiffClient.handlers.build_initialization_message = function () {
    var msg = {
      computation_id: jiffClient.computation_id,
      party_id: jiffClient.id,
      party_count: jiffClient.party_count,
      public_key: jiffClient.public_key != null ? jiffClient.hooks.dumpKey(jiffClient, jiffClient.public_key) : undefined
    };
    msg = Object.assign(msg, jiffClient.options.initialization);

    // Initialization Hook
    return jiffClient.hooks.execute_array_hooks('beforeOperation', [jiffClient, 'initialization', msg], 2);
  };

  /**
   * Begins initialization of this instance by sending the initialization message to the server.
   * Should only be called after connection is established.
   * Do not call this manually unless you know what you are doing, use <jiff_instance>.connect() instead!
   * @method
   * @memberof handlers
   */
  jiffClient.handlers.connected = function () {
    console.log('Connected!', jiffClient.id); // TODO: remove debugging
    jiffClient.initialization_counter++;

    if (jiffClient.secret_key == null && jiffClient.public_key == null) {
      var key = jiffClient.hooks.generateKeyPair(jiffClient);
      jiffClient.secret_key = key.secret_key;
      jiffClient.public_key = key.public_key;
    }

    // Initialization message
    var msg = jiffClient.handlers.build_initialization_message();

    // Emit initialization message to server
    jiffClient.socket.emit('initialization', JSON.stringify(msg));
  };

  /**
   * Called after the server approves initialization of this instance.
   * Sets the instance id, the count of parties in the computation, and the public keys
   * of initialized parties.
   * @method
   * @memberof handlers
   */
  jiffClient.handlers.initialized = function (msg) {
    jiffClient.__initialized = true;
    jiffClient.initialization_counter = 0;

    msg = JSON.parse(msg);
    msg = jiffClient.hooks.execute_array_hooks('afterOperation', [jiffClient, 'initialization', msg], 2);

    jiffClient.id = msg.party_id;
    jiffClient.party_count = msg.party_count;

    // Now: (1) this party is connect (2) server (and other parties) know this public key
    // Resend all pending messages
    jiffClient.socket.resend_mailbox();

    // store the received public keys and resolve wait callbacks
    jiffClient.handlers.store_public_keys(msg.public_keys);
  };

  /**
   * Parse and store the given public keys
   * @method
   * @memberof handlers
   * @param {object} keymap - maps party id to serialized public key.
   */
  jiffClient.handlers.store_public_keys = function (keymap) {
    var i;
    for (i in keymap) {
      if (keymap.hasOwnProperty(i) && jiffClient.keymap[i] == null) {
        jiffClient.keymap[i] = jiffClient.hooks.parseKey(jiffClient, keymap[i]);
      }
    }

    // Resolve any pending messages that were received before the sender's public key was known
    jiffClient.resolve_messages_waiting_for_keys();

    // Resolve any pending waits that have satisfied conditions
    jiffClient.execute_wait_callbacks();

    // Check if all keys have been received
    if (jiffClient.keymap['s1'] == null) {
      return;
    }
    for (i = 1; i <= jiffClient.party_count; i++) {
      if (jiffClient.keymap[i] == null) {
        return;
      }
    }

    // all parties are connected; execute callback
    if (jiffClient.__ready !== true && jiffClient.__initialized) {
      jiffClient.__ready = true;
      if (jiffClient.options.onConnect != null) {
        jiffClient.options.onConnect(jiffClient);
      }
    }
  };
};
},{}],16:[function(require,module,exports){
// adds sharing related handlers
module.exports = function (jiffClient) {
  /**
   * Store the received share and resolves the corresponding
   * deferred if needed.
   * @method
   * @memberof handlers
   * @param {object} json_msg - the parsed json message as received.
   */
  jiffClient.handlers.receive_share = function (json_msg) {
    // Decrypt share
    json_msg['share'] = jiffClient.hooks.decryptSign(jiffClient, json_msg['share'], jiffClient.secret_key, jiffClient.keymap[json_msg['party_id']]);
    json_msg = jiffClient.hooks.execute_array_hooks('afterOperation', [jiffClient, 'share', json_msg], 2);

    var sender_id = json_msg['party_id'];
    var op_id = json_msg['op_id'];
    var share = json_msg['share'];

    // Call hook
    share = jiffClient.hooks.execute_array_hooks('receiveShare', [jiffClient, sender_id, share], 2);

    // check if a deferred is set up (maybe the share was received early)
    if (jiffClient.deferreds[op_id] == null) {
      jiffClient.deferreds[op_id] = {};
    }
    if (jiffClient.deferreds[op_id][sender_id] == null) {
      // Share is received before deferred was setup, store it.
      jiffClient.deferreds[op_id][sender_id] = new jiffClient.helpers.Deferred();
    }

    // Deferred is already setup, resolve it.
    jiffClient.deferreds[op_id][sender_id].resolve(share);
  };

  /**
   * Resolves the deferred corresponding to operation_id and sender_id.
   * @method
   * @memberof handlers
   * @param {object} json_msg - the json message as received with the open event.
   */
  jiffClient.handlers.receive_open = function (json_msg) {
    // Decrypt share
    if (json_msg['party_id'] !== jiffClient.id) {
      json_msg['share'] = jiffClient.hooks.decryptSign(jiffClient, json_msg['share'], jiffClient.secret_key, jiffClient.keymap[json_msg['party_id']]);
      json_msg = jiffClient.hooks.execute_array_hooks('afterOperation', [jiffClient, 'open', json_msg], 2);
    }

    var sender_id = json_msg['party_id'];
    var op_id = json_msg['op_id'];
    var share = json_msg['share'];
    var Zp = json_msg['Zp'];

    // call hook
    share = jiffClient.hooks.execute_array_hooks('receiveOpen', [jiffClient, sender_id, share, Zp], 2);

    // Ensure deferred is setup
    if (jiffClient.deferreds[op_id] == null) {
      jiffClient.deferreds[op_id] = {};
    }
    if (jiffClient.deferreds[op_id].shares == null) {
      jiffClient.deferreds[op_id].shares = [];
    }

    // Accumulate received shares
    jiffClient.deferreds[op_id].shares.push({value: share, sender_id: sender_id, Zp: Zp});

    // Resolve when ready
    if (jiffClient.deferreds[op_id].shares.length === jiffClient.deferreds[op_id].threshold) {
      jiffClient.deferreds[op_id].deferred.resolve();
    }

    // Clean up if done
    if (jiffClient.deferreds[op_id] != null && jiffClient.deferreds[op_id].deferred === 'CLEAN' && jiffClient.deferreds[op_id].shares.length === jiffClient.deferreds[op_id].total) {
      delete jiffClient.deferreds[op_id];
    }
  }
};
},{}],17:[function(require,module,exports){
var linkedList = require('../../common/linkedlist.js');

module.exports = function (jiffClient) {
  var isRunning = false;
  var userCallbacks = [];
  var preprocessingTasks = [linkedList()];

  /**
   * Checks if the given operation uses preprocessed values
   * @method has_preprocessing
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} op - name of the operation to check
   * @return {boolean} true if the op uses preprocessing, false otherwise
   */
  jiffClient.has_preprocessing = function (op) {
    for (var i = 0; i < jiffClient.extensions.length; i++) {
      if (jiffClient.preprocessing_function_map[jiffClient.extensions[i]][op] != null) {
        return true;
      }
    }

    return false;
  };

  /**
   * Get a preprocessed share/value by associated op_id. If value does not exist
   * Fallback to some user specified way for creating it
   * @method get_preprocessing
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} op_id - the op_id associated with the preprocessed value/share
   * @return {object} the preprocessed share(s)
   */
  jiffClient.get_preprocessing = function (op_id) {
    var values = jiffClient.preprocessing_table[op_id];
    if (values != null) {
      return values;
    }
    if (jiffClient.crypto_provider === true) {
      return null;
    }
    throw new Error('No preprocessed value(s) that correspond to the op_id "' + op_id + '"');
  };

  /**
   * Store a pair of op_id and associated pre-processed value/share
   * The value/share can be accessed later during the computation through jiffClient.get_preprocessing(op_id)
   * @method store_preprocessing
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} op_id - the op_id associated with the preprocessed value/share
   * @param {SecretShare} share - the share/value to store
   */
  jiffClient.store_preprocessing = function (op_id, share) {
    if (share != null) {
      jiffClient.preprocessing_table[op_id] = share;
    }
  };

  /**
   * Generate values used for JIFF operations in advance of the computation.
   *
   * Calling this function does not begin preprocessing, it just creates a preprocessing task. After you created
   * your desired tasks, you can ask JIFF to execute them via {@link module:jiff-client~JIFFClient#executePreprocessing}.
   *
   * @method preprocessing
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param {string} dependent_op - name of the operation that will later use the pre_processed values
   * @param {Number} [count=1] - number of times the protocol should be performed, number of values that will be generated
   * @param {Object} [protocols=defaults] - a mapping from base preprocessing elements ('beaver', 'bits', 'sampling') to functions that can pre-process them
   *                               the function must implement the same interface as the JIFF provided protocols (e.g. jiffClient.protocols.generate_beaver_bgw),
   *                               missing mappings indicate that JIFF must use the default protocols
   * @param {Number} [threshold=receivers_list.length] - the threshold of the preprocessed shares
   * @param {Array} [receivers_list=all_parties] - the parties that will receive the preprocsssed shares
   * @param {Array} [compute_list=all_parties] - the parties that will compute the preprocsssed shares
   * @param {Number} [Zp=jiffClient.Zp] - the Zp of the preprocessed shares
   * @param {Array} [id_list=auto_gen()] - array of ids to be used sequentially to identify the pre_processed values
   * @param {Object} [params={}] - any additional protocol-specific parameters
   * @return {promise} a promise that is resolved when preprocessing is completed, null if this is called by a party that is neither a compute nor receiver party
   * @see {@link module:jiff-client~JIFFClient#executePreprocessing}
   */
  jiffClient.preprocessing = function (dependent_op, count, protocols, threshold, receivers_list, compute_list, Zp, id_list, params) {
    // defaults!
    if (receivers_list == null) {
      receivers_list = [];
      for (var p = 1; p <= jiffClient.party_count; p++) {
        receivers_list.push(p);
      }
    } else {
      jiffClient.helpers.sort_ids(receivers_list);
    }
    if (compute_list == null) {
      compute_list = [];
      for (var c = 1; c <= jiffClient.party_count; c++) {
        compute_list.push(c);
      }
    } else {
      jiffClient.helpers.sort_ids(compute_list);
    }

    // not a receiver nor a sender
    if (receivers_list.indexOf(jiffClient.id) === -1 && compute_list.indexOf(jiffClient.id) === -1) {
      return null;
    }

    // more defaults
    if (Zp == null) {
      Zp = jiffClient.Zp;
    }
    if (threshold == null) {
      threshold = receivers_list.length;
    }
    if (protocols == null) {
      protocols = jiffClient.default_preprocessing_protocols;
    }

    // actual preprocessing
    if (count == null || count <= 0) {
      count = 1;
    }
    if (params == null) {
      params = {};
    }
    if (params['namespace'] == null) {
      params['namespace'] = jiffClient.extensions[jiffClient.extensions.length - 1];
    }

    // Create preprocessing tasks
    var task = {
      dependent_op : dependent_op,
      count : count,
      threshold : threshold,
      receivers_list : receivers_list,
      compute_list : compute_list,
      Zp : Zp,
      id_list : id_list,
      id : null,
      params : params,
      protocols : protocols,
      deferred: new jiffClient.helpers.Deferred()
    };

    preprocessingTasks[preprocessingTasks.length - 1].add(task);

    return task.deferred.promise;
  };

  /**
   * Ask JIFF to start executing preprocessing for tasks previously added by {@link module:jiff-client~JIFFClient#preprocessing}.
   *
   * Calls the provided callback when the preprocessing tasks are all done.
   *
   * @method executePreprocessing
   * @memberof module:jiff-client~JIFFClient
   * @instance
   * @param callback {!Function} - the callback to execute when preprocessing is finished.
   * {@link module:jiff-client~JIFFClient#preprocessing}
   */
  jiffClient.executePreprocessing = function (callback) {
    userCallbacks.push(callback);
    preprocessingTasks.push(linkedList());

    if (!isRunning) {
      __executePreprocessing();
    }
  };

  // called only when preprocessing can run RIGHT NOW
  var __executePreprocessing = function () {
    isRunning = true;

    jiffClient.currentPreprocessingTasks = preprocessingTasks.shift();
    var currentCallback = userCallbacks.shift();

    jiffClient.preprocessingCallback = function () {
      if (currentCallback != null) {
        currentCallback.apply(null, currentCallback);
      }

      if (userCallbacks.length > 0) {
        __executePreprocessing();
      } else {
        isRunning = false;
      }
    };

    jiffClient.preprocessingDaemon();
  };
};

},{"../../common/linkedlist.js":52}],18:[function(require,module,exports){
module.exports = function (jiffClient) {
  var linkedList = require('../../common/linkedlist.js');
  var currentBatchLoad = 0;
  var suspendedTasks = 0;

  var getFirstTask = function (task) {
    if (task.count > 1) {
      var remainingTasks = Object.assign({}, task);

      var deferred1 = new jiffClient.helpers.Deferred();
      var deferred2 = new jiffClient.helpers.Deferred();
      Promise.all([deferred1.promise, deferred2.promise]).then(task.deferred.resolve);
      task.deferred = deferred1;
      remainingTasks.deferred = deferred2;

      remainingTasks.count--;
      task.count = 1;
      if (task.id_list != null) {
        task.id = remainingTasks.id_list.shift();
        task.id_list = null;
      }
      jiffClient.currentPreprocessingTasks.pushHead(remainingTasks);
    }
    if (task.id_list != null) {
      task.id = task.id_list[0];
      task.id_list = null;
    }
    return task;
  };

  var checkIfDone = function () {
    if (currentBatchLoad === 0 && suspendedTasks === 0) {
      var callback = jiffClient.preprocessingCallback;
      jiffClient.preprocessingCallback = null;
      callback(jiffClient);
    }
  };

  var buildID = function (task) {
    // Two kinds of operations: one that relies on different sets of senders and receivers, and one that has a set of holders
    if (task.dependent_op === 'open' || task.dependent_op === 'bits.open') { // TODO: make this part of the description in table
      var open_parties = task.params['open_parties'] != null ? task.params['open_parties'] : task.receivers_list;
      task.id = jiffClient.counters.gen_op_id2_preprocessing(task.dependent_op, open_parties, task.receivers_list);
    } else {
      task.id = jiffClient.counters.gen_op_id_preprocessing(task.dependent_op, task.receivers_list);
    }
  };

  var taskIsExecutable = function (task) {
    // if the protocol name is in the map, it can be directly executed
    var namespace = find_closest_namespace(task.dependent_op, task.params['namespace']);
    return (namespace == null);
  };

  var find_closest_namespace = function (op, starting_namespace) {
    var namespace_index = jiffClient.extensions.indexOf(starting_namespace);
    while (namespace_index >= 0) {
      var namespace = jiffClient.extensions[namespace_index];
      if (jiffClient.preprocessing_function_map[namespace] != null && jiffClient.preprocessing_function_map[namespace][op] != null) {
        return namespace;
      }
      namespace_index--;
    }

    return null;
  };

  // execute a task and handle it upon completion
  var executeTask = function (task) {
    currentBatchLoad++;

    var _params = Object.assign({}, task.params);
    _params.output_op_id = task.id;

    var protocol = task.protocols[task.dependent_op] || jiffClient.default_preprocessing_protocols[task.dependent_op];
    var result = protocol(task.threshold, task.receivers_list, task.compute_list, task.Zp, _params, task.protocols);

    if (result.promise == null || result.promise.then == null) {
      taskFinished(task, result);
    } else {
      result.promise.then(taskFinished.bind(null, task, result));
    }
  };
  var taskFinished = function (task, result) {
    currentBatchLoad--;

    if (task.receivers_list.indexOf(jiffClient.id) > -1) {
      jiffClient.store_preprocessing(task.id, result.share);
    }
    task.deferred.resolve();
    jiffClient.preprocessingDaemon();
  };

  // expand task by one level and replace the node in the task list
  var expandTask = function (task) {
    // copy of params
    var _params = Object.assign({}, task.params);

    // Recursively follow jiffClient.preprocessing_function_map
    // to figure out the sub-components/nested primitives of the given operation
    // and pre-process those with the right op_ids.

    // ID should never be null
    var namespace = find_closest_namespace(task.dependent_op, _params['namespace']);
    var preprocessing_dependencies = jiffClient.preprocessing_function_map[namespace][task.dependent_op];

    if (typeof(preprocessing_dependencies) === 'function') {
      preprocessing_dependencies = preprocessing_dependencies(task.dependent_op, task.count, task.protocols, task.threshold, task.receivers_list, task.compute_list, task.Zp, task.id, _params, task, jiffClient);
    }

    var newTasks = linkedList();
    var deferredChain = [];
    // build linked list of new dependencies, afterwords merge them with current tasks list
    for (var k = 0; k < preprocessing_dependencies.length; k++) {
      var dependency = preprocessing_dependencies[k];
      var next_op = dependency['op'];

      // copy both the originally given extra_params and the extra params of the dependency and merge them
      // together, dependency params overwrite duplicate keys.
      // If params are ever needed in non-leaf operations, this must be changed to accommodate
      var extra_params = Object.assign({}, _params, dependency['params']);
      extra_params['namespace'] = dependency['namespace'] != null ? dependency['namespace'] : 'base';
      if (dependency.handler != null) {
        extra_params = dependency.handler(task.threshold, task.receivers_list, task.compute_list, task.Zp, task.id, extra_params, task, jiffClient);
      }
      if (extra_params.ignore === true) {
        continue;
      }

      // compose ids similar to how the actual operation is implemented
      var next_id_list = [];
      var next_count = dependency['count'];

      if (next_count == null) {
        next_count = 1;
        next_id_list[0] = dependency['absolute_op_id'] || (task.id + dependency['op_id']);
      } else {
        next_count = next_count(task.threshold, task.receivers_list, task.compute_list, task.Zp, task.id, extra_params);
        for (var j = 0; j < next_count; j++) {
          next_id_list.push(dependency['absolute_op_id'] || (task.id + dependency['op_id'] + j));
        }
      }

      var nextTask = {
        dependent_op : next_op,
        count : next_count,
        threshold : dependency['threshold'] || task.threshold,
        receivers_list : dependency['receivers_list'] || task.receivers_list,
        compute_list : dependency['compute_list'] || task.compute_list,
        Zp : dependency['Zp'] || task.Zp,
        id_list : next_id_list,
        id : null,
        params : extra_params,
        protocols : task.protocols,
        deferred: new jiffClient.helpers.Deferred()
      };

      deferredChain.push(nextTask.deferred.promise);
      if (dependency.requires != null) {
        nextTask.wait = true;
        var required_ops = [];
        for (var r = 0; r < dependency.requires.length; r++) {
          if (dependency.requires[r] >= k) {
            throw new Error('Preprocessing dependency "' + next_op + '" in preprocessingMap for "' + task.dependent_op
              + '" at namespace "' + namespace + '" cannot require subsequent dependency ' + dependency.requires[r]);
          }
          required_ops.push(deferredChain[dependency.requires[r]]);
        }

        Promise.all(required_ops).then(function (nextTask) {
          delete nextTask['wait'];
          jiffClient.preprocessingDaemon();
        }.bind(null, nextTask));

        // add waiting task to the tail of the queue
        // jiffClient.currentPreprocessingTasks.add(nextTask);
        newTasks.add(nextTask);
      } else {
        // non-waiting tasks are added to the head of the queue
        newTasks.add(nextTask);
      }
    }

    Promise.all(deferredChain).then(task.deferred.resolve);
    jiffClient.currentPreprocessingTasks = newTasks.extend(jiffClient.currentPreprocessingTasks);
  };

  /**
   * Preprocessing Daemon that executes all currently scheduled preprocessing tasks (entries in jiffClient.currentPreprocessingTasks array) in order.
   * @method preprocessingDaemon
   * @memberof module:jiff-client~JIFFClient
   * @instance
   */
  jiffClient.preprocessingDaemon = function () {
    while (currentBatchLoad < jiffClient.preprocessingBatchSize) {
      var task = jiffClient.currentPreprocessingTasks.popHead();

      if (task == null) {
        checkIfDone();
        return;
      }

      if (task.object.wait) {
        jiffClient.currentPreprocessingTasks.pushHead(task.object);
        break;
      }

      task = getFirstTask(task.object);
      if (task.id == null) {
        buildID(task);
      }

      // check if task is executable or no
      if (taskIsExecutable(task)) {
        executeTask(task); // co-recursively calls preprocessingDaemon()
      } else {
        //expand single task
        expandTask(task);
      }
    }
  };
};

},{"../../common/linkedlist.js":52}],19:[function(require,module,exports){
// internal functions for use in preprocessing function map
module.exports = {
  bits_count: function (threshold, receivers_list, compute_list, Zp, op_id, params) {
    var bitLength = params.bitLength;
    if (bitLength == null) {
      bitLength = Zp.toString(2).length;
    }
    return bitLength;
  },
  constant_bits_count: function () {
    return module.exports.bits_count.apply(null, arguments) - 1;
  },
  dynamic_bits_cmult: function (dependent_op, count, protocols, threshold, receivers_list, compute_list, Zp, task_id, params) {
    // constant bit length
    var constantBits = Zp.toString(2).length;
    if (params.constantBits != null) {
      constantBits = params.constantBits;
    }
    // secret bit length
    var bitLength = params.bitLength;
    if (bitLength == null) {
      bitLength = Zp.toString(2).length;
    }
    // for every bit from constant, pre-process for one bits.sadd of the right size
    var ops = [];
    for (var i = 0; i < constantBits; i++) {
      var accLength = i === 0 ? 1 : (bitLength + i);
      ops.push({ op: 'bits.sadd', op_id: ':bits.sadd:' + i, params: {bitLengthLeft: accLength, bitLengthRight: bitLength + i}});
    }
    return ops;
  },
  dynamic_bits_smult: function (dependent_op, count, protocols, threshold, receivers_list, compute_list, Zp, task_id, params) {
    var bitLength = params.bitLength;
    if (bitLength == null) {
      bitLength = Zp.toString(2).length;
    }

    var left = params.bitLengthLeft;
    var right = params.bitLengthRight;
    left = left != null ? left : bitLength;
    right = right != null ? right : bitLength;
    var max = Math.max(left, right);
    var min = Math.max(left, right);

    var ops = [];
    for (var i = 0; i < min; i++) {
      for (var j = 0; j < max + i; j++) {
        ops.push({ op: 'if_else', op_id: ':if_else:' + i + ':' + j });
      }
      var accLength = i === 0 ? min : (max + i);
      ops.push({ op: 'bits.sadd', op_id: ':bits.sadd:'+i, params: {bitLengthLeft: accLength, bitLengthRight: max + i}});
    }
    return ops;
  },
  choice_bits_count: function (choice, offset) {
    if (offset == null) {
      offset = 0;
    }
    return function (threshold, receivers_list, compute_list, Zp, op_id, params) {
      var bitLength = params.bitLength;
      if (bitLength == null) {
        bitLength = Zp.toString(2).length;
      }

      var left = params.bitLengthLeft;
      var right = params.bitLengthRight;
      left = left != null ? left : bitLength;
      right = right != null ? right : bitLength;

      return choice(left, right) + offset;
    };
  },
  decomposition_ifelse_count: function (threshold, receivers_list, compute_list, Zp, op_id, params) {
    return Zp.toString(2).length;
  },
  dynamic_bits_sdiv: function (dependent_op, count, protocols, threshold, receivers_list, compute_list, Zp, task_id, params) {
    var bitLength = params.bitLength;
    if (bitLength == null) {
      bitLength = Zp.toString(2).length;
    }

    var left = params.bitLengthLeft;
    var right = params.bitLengthRight;
    left = left != null ? left : bitLength;
    right = right != null ? right : bitLength;
    var min = Math.min(left, right);

    var ops = [];
    for (var i = 0; i < left; i++) {
      var accLength = Math.min(i+1, min+1);
      ops.push({ op: 'bits.ssub', op_id: ':bits.ssub:'+i, params: {bitLengthLeft: accLength, bitLengthRight: right}});
      for (var j = 0; j < accLength; j++) {
        ops.push({ op: 'if_else', op_id: ':if_else:' + i + ':' + j });
      }
    }
    return ops;
  },
  dynamic_bits_cdiv: function (dir) {
    return function (dependent_op, count, protocols, threshold, receivers_list, compute_list, Zp, task_id, params) {
      var constantBits = Zp.toString(2).length;
      if (params.constantBits != null) {
        constantBits = params.constantBits;
      }
      var bitLength = params.bitLength;
      if (bitLength == null) {
        bitLength = Zp.toString(2).length;
      }
      var min = Math.min(bitLength, constantBits);

      var ops = [];
      var loopCounter = (dir === 'left') ? bitLength : constantBits;
      for (var i = 0; i < loopCounter; i++) {
        var accLength = Math.min(i + 1, min + 1);
        if (dir === 'left') {
          ops.push({
            op: 'bits.csubl',
            op_id: ':bits.csubl:' + i,
            params: {bitLength: accLength, constantBits: constantBits}
          });
        } else {
          ops.push({
            op: 'bits.ssub',
            op_id: ':bits.ssub:' + i,
            params: {bitLengthLeft: accLength, bitLengthRight: bitLength}
          });
        }

        for (var j = 0; j < accLength; j++) {
          ops.push({op: 'if_else', op_id: ':if_else:' + i + ':' + j});
        }
      }
      return ops;
    }
  },
  // rejection sampling
  dynamic_rejection_sampling: function (dependent_op, count, protocols, threshold, receivers_list, compute_list, Zp, task_id, params, task, jiff) {
    var previousPreprocessing = jiff.preprocessing_table[task.id];
    params.reject_count = params.reject_count == null ? -1 : params.reject_count;

    if (previousPreprocessing == null || previousPreprocessing === 'RETRY' || (previousPreprocessing[0] != null && previousPreprocessing[0].value === 'RETRY')) {
      if (!params.defaultBounds && (params.lower_bound == null || params.upper_bound == null)) {
        jiff.store_preprocessing(task.id, {ondemand: true});
        return [];
      }

      var compute_threshold = params.compute_threshold;
      if (compute_threshold == null) { // honest majority BGW
        compute_threshold = Math.floor((compute_list.length + 1) / 2);
      }

      var extra_params = {compute_threshold: compute_threshold};
      var reject_count = ++params.reject_count;

      Zp = Zp != null ? Zp : jiff.Zp;
      params.lower_bound = params.lower_bound || 0;
      params.upper_bound = params.upper_bound != null ? params.upper_bound : Zp;

      var range;
      if (params.upper_bound.isBigNumber === true) {
        range = params.upper_bound.minus(params.lower_bound);
      } else {
        range = params.upper_bound - params.lower_bound;
      }

      // handle special cases
      if (range.toString() === '0') {
        throw new Error('rejection sampling preprocessing called with range 0, no numbers to sample!');
      }
      if (range.toString() === '1') {
        return [{op: 'sampling', op_id: '', params: extra_params}];
      }

      var bitLength = jiff.helpers.ceil(jiff.helpers.bLog(range, 2));
      bitLength = parseInt(bitLength.toString(), 10);
      params.bitLength = bitLength;

      // fill in dependencies according to the lower and upper bounds
      var dependent_ops = [];
      var requires = [];
      if (jiff.helpers.bLog(range, 2).toString().indexOf('.') > -1) {
        dependent_ops = [
          {op: 'bits.clt', op_id: ':bits.clt:' + reject_count, params: extra_params, threshold: compute_threshold, receivers_list: compute_list},
          {op: 'open', op_id: ':open:' + reject_count, params: extra_params, threshold: compute_threshold, receivers_list: compute_list}
        ];
        requires = [0, 1];
      }

      if (params.lower_bound.toString() !== '0' && bitLength > 1) {
        dependent_ops.push({op: 'bits.cadd', op_id: ':bits.cadd:' + reject_count, params: extra_params, threshold: compute_threshold, receivers_list: compute_list});
        requires.push(dependent_ops.length - 1);
      }

      dependent_ops.push(
        {op: 'sampling', op_id: '', requires: requires, params: extra_params},
        {op: 'rejection_sampling', op_id: '', requires: [dependent_ops.length]}
      );

      return dependent_ops;
    }

    if (previousPreprocessing[0] != null && previousPreprocessing[0].value === 'PLACEHOLDER') {
      delete jiff.preprocessing_table[task.id];
    }

    return [];
  },
  // random quotients for cdiv
  dynamic_random_and_quotient: function (dependent_op, count, protocols, threshold, receivers_list, compute_list, Zp, task_id, params, task, jiff) {
    var constantNotProvided = (params.constant == null);
    receivers_list = constantNotProvided ? compute_list : receivers_list;
    Zp = Zp ? Zp : jiff.Zp;

    var newParams = {compute_threshold: params.compute_threshold};
    if (params.compute_threshold == null) { // honest majority BGW
      newParams.compute_threshold = Math.floor((compute_list.length + 1) / 2);
    }
    threshold = newParams.compute_threshold;

    var dependent_ops = [
      {op: 'bits.cgteq', op_id: ':bits_cgteq', receivers_list: receivers_list, threshold: threshold, params: newParams},
      {op: 'if_else', op_id: ':ifelse1', receivers_list: receivers_list, threshold: threshold, params: newParams},
      {op: 'if_else', op_id: ':ifelse2', receivers_list: receivers_list, threshold: threshold, params: newParams},
      {op: 'rejection_sampling', op_id: ':rejection1', receivers_list: receivers_list, threshold: threshold, params: {lower_bound: 0, upper_bound: Zp, compute_threshold: threshold}}
    ];

    if (constantNotProvided) {
      jiff.store_preprocessing(task_id, {ondemand: true});
      return dependent_ops;
    }

    // we want to sample uniformly in [0, largest multiple of constant <= Zp) and [0, constant)
    var largestQuotient = jiff.share_helpers['floor'](jiff.share_helpers['/'](Zp, params.constant));

    dependent_ops.push(
      {op: 'rejection_sampling', op_id: ':rejection2', threshold: threshold, params: {lower_bound: 0, upper_bound: largestQuotient, compute_threshold: threshold}},
      {op: 'rejection_sampling', op_id: ':rejection3', threshold: threshold, params: {lower_bound: 0, upper_bound: params.constant, compute_threshold: threshold}},
      {op: 'generate_random_and_quotient', op_id: '', requires: [0, 1, 2, 3, 4, 5], params: newParams}
    );

    return dependent_ops;
  },
  // fast exponentiation
  dynamic_fast_exponentiation: function (dependent_op, count, protocols, threshold, receivers_list, compute_list, Zp, task_id, params, task, jiff) {
    Zp = Zp ? Zp : jiff.Zp;
    var constantNotProvided = params.constant == null;
    var constant = params.constant;
    var constantBits = params.constantBits == null ? Zp.toString(2).length : params.constantBits;

    // special case
    if (!constantNotProvided && constant.toString() === '0') {
      return [];
    }

    var ops = [];
    if (constantNotProvided) {
      for (var i = 0; i < constantBits-1; i++) {
        ops.push({op: 'smult', op_id: ':smult0:' + i});
        ops.push({op: 'smult', op_id: ':smult1:' + i});
      }
      ops.push({op: 'smult', op_id: ':smult0:' + i});
      return ops;
    }

    // handle big number
    if (jiff.helpers.BigNumber) {
      constant = jiff.helpers.BigNumber(constant);
    }

    // preprocess for exactly the needed amount of multiplications
    for (i = 0; jiff.share_helpers['<'](1, constant); i++) {
      ops.push({op: 'smult', op_id: ':smult0:' + i});
      if (!jiff.share_helpers['even'](constant)) {
        ops.push({op: 'smult', op_id: ':smult1:' + i});
      }
      constant = jiff.share_helpers['floor'](jiff.share_helpers['/'](constant, 2));
    }
    ops.push({op: 'smult', op_id: ':smult0:' + i});
    return ops;
  },
  // for various equality tests, preprocess of cpow(Zp - 1) (Fermat's little theorem)
  handler_cpow_Zp_minus_1: function (threshold, receivers_list, compute_list, Zp, op_id, params, task, jiff) {
    Zp = Zp ? Zp : jiff.Zp;
    params.constant = jiff.share_helpers['-'](Zp, 1);
    return params;
  }
};
},{}],20:[function(require,module,exports){
module.exports = function (jiffClient) {
  var handlers = require('./handlers.js');

  jiffClient.default_preprocessing_protocols = {
    generate_beaver: jiffClient.protocols.generate_beaver_bgw,
    generate_random_number: jiffClient.protocols.generate_random_number,
    sampling: jiffClient.protocols.rejection_sampling,
    generate_random_bits: jiffClient.protocols.generate_random_bits,
    generate_random_bit: jiffClient.protocols.generate_random_bit_bgw,
    generate_zero: jiffClient.protocols.generate_zero,
    generate_random_and_quotient: jiffClient.protocols.generate_random_and_quotient
  };

  jiffClient.preprocessing_function_map = {
    base: {
      // arithmetic sharing protocols
      'smult': [
        {op: 'open', op_id: ':open1'},
        {op: 'generate_beaver', op_id: ':triplet'},
        {op: 'open', op_id: ':open2'}
      ],
      'sxor_bit': [
        {op: 'smult', op_id: ':smult1'}
      ],
      'slt': [
        {op: 'lt_halfprime', op_id: ':halfprime:1'},
        {op: 'lt_halfprime', op_id: ':halfprime:2'},
        {op: 'lt_halfprime', op_id: ':halfprime:3'},
        {op: 'smult', op_id: ':smult1'},
        {op: 'smult', op_id: ':smult2'}
      ],
      'cgt': [
        {op: 'lt_halfprime', op_id: ':halfprime:1'},
        {op: 'lt_halfprime', op_id: ':halfprime:2'},
        {op: 'smult', op_id: ':smult1'}
      ],
      'clt': [
        {op: 'lt_halfprime', op_id: ':halfprime:1'},
        {op: 'lt_halfprime', op_id: ':halfprime:2'},
        {op: 'smult', op_id: ':smult1'}
      ],
      'lt_halfprime': [
        {op: 'rejection_sampling', op_id: ':sampling', params: {defaultBounds: true}},
        {op: 'smult', op_id: ':smult1'},
        {op: 'bits.cgt', op_id: ':bits.cgt'},
        {op: 'sxor_bit', op_id: ':sxor_bit'},
        {op: 'open', op_id: ':open'}
      ],
      'cneq': [
        {op: 'cpow', op_id: ':cpow', handler: handlers.handler_cpow_Zp_minus_1}
      ],
      'cpow': handlers.dynamic_fast_exponentiation,
      'cdiv': [
        {op: 'cgt', op_id: ':wrap_cgt'},
        {op: 'cgteq', op_id: ':cor1'},
        {op: 'cgteq', op_id: ':cor2'},
        {op: 'smult', op_id: ':smult'},
        {op: 'clt', op_id: ':zero_check'},
        {op: 'smult', op_id: ':zero_it'},
        {op: 'open', op_id: ':open'},
        {op: 'quotient', op_id: ':quotient'}
      ],
      'sdiv': [
        {op: 'bit_decomposition', op_id: ':decomposition1'},
        {op: 'bit_decomposition', op_id: ':decomposition2'},
        {op: 'bits.sdiv', op_id: ':bits.sdiv'}
      ],
      'if_else': [
        {op: 'smult', op_id: ':smult'}
      ],
      // bits protocols
      'bit_decomposition': [
        {op: 'rejection_sampling', op_id: ':sampling', params: {defaultBounds: true}},
        {op: 'bits.csubr', op_id: ':bits.csubr:1'},
        {op: 'bits.csubr', op_id: ':bits.csubr:2'},
        {op: 'if_else', op_id: ':if_else:', count: handlers.decomposition_ifelse_count},
        {op: 'open', op_id: ':open'}
      ],
      // comparisons
      'bits.cgteq': [
        {op: 'smult', op_id: ':smult:', count: handlers.constant_bits_count}
      ],
      'bits.cneq': [
        {op: 'sor_bit', op_id: ':sor_bit:', count: handlers.constant_bits_count}
      ],
      'bits.sneq': [
        {op: 'sxor_bit', op_id: ':sxor_bit:initial'},
        {op: 'sxor_bit', op_id: ':sxor_bit:', count: handlers.choice_bits_count(Math.min, -1)},
        {op: 'sor_bit', op_id: ':sor_bit:', count: handlers.choice_bits_count(Math.max, -1)}
      ],
      'bits.sgteq': [
        {op: 'smult', op_id: ':smult:initial'},
        {op: 'smult', op_id: ':smult1:', count: handlers.choice_bits_count(Math.max, -1)},
        {op: 'sxor_bit', op_id: ':sxor_bit1:', count: handlers.choice_bits_count(Math.min, -1)},
        {op: 'smult', op_id: ':smult2:', count: handlers.choice_bits_count(Math.min, -1)}
      ],
      'bits.sgt': [
        {op: 'bits.sgteq', op_id: ':bits.sgteq'},
        {op: 'bits.sneq', op_id: ':bits.sneq'},
        {op: 'smult', op_id: ':smult'}
      ],
      // constant arithmetic
      'bits.cadd': [
        {op: 'smult', op_id: ':smult:', count: handlers.constant_bits_count},
        {op: 'sxor_bit', op_id: ':sxor_bit:', count: handlers.constant_bits_count}
      ],
      'bits.cmult': handlers.dynamic_bits_cmult,
      'bits.cdivl': handlers.dynamic_bits_cdiv('left'),
      'bits.cdivr': handlers.dynamic_bits_cdiv('right'),
      // secret arithmetic
      'bits.sadd': [
        {op: 'sxor_bit', op_id: ':sxor_bit:initial'},
        {op: 'smult', op_id: ':smult:initial'},
        {op: 'smult', op_id: ':smult1:', count: handlers.choice_bits_count(Math.max, -1)},
        {op: 'sxor_bit', op_id: ':sxor_bit1:', count: handlers.choice_bits_count(Math.max, -1)},
        {op: 'smult', op_id: ':smult2:', count: handlers.choice_bits_count(Math.min, -1)},
        {op: 'sxor_bit', op_id: ':sxor_bit2:', count: handlers.choice_bits_count(Math.min, -1)}
      ],
      'bits.smult': handlers.dynamic_bits_smult,
      'bits.sdiv': handlers.dynamic_bits_sdiv,
      'bits.open': [
        {op: 'open', op_id: ':', count: handlers.bits_count}
      ],
      // refresh/open
      'refresh': [
        {op: 'generate_zero', op_id: ''}
      ],
      'open': [
        {op: 'refresh', op_id: ':refresh'}
      ],
      // generating a random number and its quotient / constant
      'quotient': handlers.dynamic_random_and_quotient,
      // rejection sampling
      'rejection_sampling': handlers.dynamic_rejection_sampling
    }
  };

  // arithmetic protocols
  jiffClient.preprocessing_function_map['base']['sor_bit'] = jiffClient.preprocessing_function_map['base']['sxor_bit'];
  jiffClient.preprocessing_function_map['base']['smod'] = jiffClient.preprocessing_function_map['base']['sdiv'];
  jiffClient.preprocessing_function_map['base']['slteq'] = jiffClient.preprocessing_function_map['base']['slt'];
  jiffClient.preprocessing_function_map['base']['sgteq'] = jiffClient.preprocessing_function_map['base']['slt'];
  jiffClient.preprocessing_function_map['base']['sgt'] = jiffClient.preprocessing_function_map['base']['slt'];
  jiffClient.preprocessing_function_map['base']['clteq'] = jiffClient.preprocessing_function_map['base']['cgt'];
  jiffClient.preprocessing_function_map['base']['cgteq'] = jiffClient.preprocessing_function_map['base']['clt'];
  jiffClient.preprocessing_function_map['base']['seq'] = jiffClient.preprocessing_function_map['base']['cneq'];
  jiffClient.preprocessing_function_map['base']['sneq'] = jiffClient.preprocessing_function_map['base']['cneq'];
  jiffClient.preprocessing_function_map['base']['ceq'] = jiffClient.preprocessing_function_map['base']['cneq'];

  // bits protocols
  jiffClient.preprocessing_function_map['base']['bits.clt'] = jiffClient.preprocessing_function_map['base']['bits.cgteq'];
  jiffClient.preprocessing_function_map['base']['bits.clteq'] = jiffClient.preprocessing_function_map['base']['bits.cgteq'];
  jiffClient.preprocessing_function_map['base']['bits.cgt'] = jiffClient.preprocessing_function_map['base']['bits.cgteq'];
  jiffClient.preprocessing_function_map['base']['bits.ceq'] = jiffClient.preprocessing_function_map['base']['bits.cneq'];
  jiffClient.preprocessing_function_map['base']['bits.slt'] = jiffClient.preprocessing_function_map['base']['bits.sgteq'];
  jiffClient.preprocessing_function_map['base']['bits.slteq'] = jiffClient.preprocessing_function_map['base']['bits.sgt'];
  jiffClient.preprocessing_function_map['base']['bits.seq'] = jiffClient.preprocessing_function_map['base']['bits.sneq'];
  jiffClient.preprocessing_function_map['base']['bits.csubl'] = jiffClient.preprocessing_function_map['base']['bits.cadd'];
  jiffClient.preprocessing_function_map['base']['bits.csubr'] = jiffClient.preprocessing_function_map['base']['bits.cadd'];
  jiffClient.preprocessing_function_map['base']['bits.ssub'] = jiffClient.preprocessing_function_map['base']['bits.sadd'];
};

},{"./handlers.js":19}],21:[function(require,module,exports){
const share = require('./share.js');
const open = require('./open.js');
const util = require('./util.js');

module.exports = {
  jiff_share_array: share.share_array,
  jiff_share_2D_array: share.share_2D_array,
  jiff_share_ND_array: share.share_ND_array,
  jiff_share_ND_array_static: share.share_ND_array_static,
  jiff_share_ND_array_deferred: share.share_ND_array_deferred,

  jiff_skeleton_of: util.skeleton_of,

  jiff_open_array: open.open_array,
  jiff_open_ND_array: open.open_ND_array,
  jiff_receive_open_ND_array: open.receive_open_ND_array
};

},{"./open.js":22,"./share.js":23,"./util.js":24}],22:[function(require,module,exports){
const open_array = function (jiff, shares, parties, op_ids) {
  var i;

  // A base operation id is provided to use for all opens.
  if (typeof(op_ids) === 'string' || typeof(op_ids) === 'number') {
    var tmp = { s1: op_ids };
    for (i = 1; i <= jiff.party_count; i++) {
      tmp[i] = op_ids;
    }
    op_ids = tmp;
  }

  return open_ND_array(jiff, shares, parties, null, op_ids);
};

const open_ND_array = function (jiff, shares, receivers_list, senders_list, op_ids) {
  if (senders_list == null) {
    senders_list = [];
    for (var i = 1; i <= jiff.party_count; i++) {
      senders_list.push(i);
    }
    if (receivers_list == null) {
      receivers_list = Array.from(senders_list);
    }
  }
  var is_sending = senders_list.indexOf(jiff.id) > -1;

  // Compute operation id
  /*
   *if (op_ids == null) {
   *  op_ids = jiff.counters.gen_op_id('open_ND_array', receivers_list.concat(senders_list));
   *}
   */

  var final_deferred = new jiff.helpers.Deferred();
  var final_promise = final_deferred.promise;
  var resolve_open = function (shares) {
    final_deferred.resolve((
      function __open_ND_array(shares, parties, op_ids) {
        if (typeof(shares.length) === 'undefined') {
          return jiff.internal_open(shares, parties);
        } else if (shares.length === 0) {
          return Promise.resolve([]);
        } else {
          var promised_array = [];
          for (var i = 0; i < shares.length; i++) {
            promised_array.push(__open_ND_array(shares[i], parties, op_ids + ':' + i));
          }
          return Promise.all(promised_array);
        }
      }
    )(shares, receivers_list, op_ids));
  };

  if (is_sending) {
    // Must emit the skeleton for any parties that are not holders but are receiving the open
    var skeleton = (function __unwipe(nd_array, replace) {
      if (!(typeof (nd_array.length) === 'undefined') || nd_array.length === 0) {
        var unwiped_array = [];
        for (var k = 0; k < nd_array.length; k++) {
          unwiped_array.push(__unwipe(nd_array[k], replace));
        }
        return unwiped_array;
      }
      return replace;
    })(shares, null);
    jiff.emit(op_ids + 'skeleton', receivers_list, JSON.stringify(skeleton));

    resolve_open(shares);
  } else {
    // Populate skeleton with imitation shares
    var revive_shares = function (skeleton) {
      const share = new jiff.SecretShare({}, senders_list, senders_list.length, jiff.Zp);
      return (function __unwipe(nd_array, replace) {
        if (nd_array != null && !(typeof (nd_array.length) === 'undefined' && nd_array.length > 0)) {
          var unwiped_array = [];
          for (var k = 0; k < nd_array.length; k++) {
            unwiped_array.push(__unwipe(nd_array[k], replace));
          }
          return unwiped_array;
        }
        return replace;
      })(skeleton, share);
    }

    // If this party is not a sender, then the variable `shares` may be a skeleton
    if (shares != null) {
      // Use existing shares as skeleton to revive
      shares = revive_shares(shares);
      resolve_open(shares);
    } else {
      // Receive skeleton from senders
      jiff.listen(op_ids + 'skeleton',  function (sender, skeleton) {
        jiff.remove_listener(op_ids + 'skeleton');  // This doesn't seem to work

        if (typeof(skeleton) === 'string') {
          skeleton = JSON.parse(skeleton);
        }

        shares = revive_shares(skeleton);
        resolve_open(shares);
      });
    }
  }

  return final_promise;
};

const receive_open_ND_array = function (jiff, receivers_list, senders_list, threshold, Zp, op_ids) {
  return open_ND_array(jiff, null, receivers_list, senders_list, op_ids);
};

module.exports = {
  open_array: open_array,
  open_ND_array: open_ND_array,
  receive_open_ND_array: receive_open_ND_array
};

},{}],23:[function(require,module,exports){
const util = require('./util.js');

const share_array = function (jiff, array, lengths, threshold, receivers_list, senders_list, Zp, share_id) {
  var skeletons = null;
  if (lengths != null) {
    // Check format of lengths
    if (lengths != null && typeof(lengths) !== 'number' && typeof(lengths) !== 'object') {
      throw new Error('share_array: unrecognized lengths');
    }

    // Get senders list for later checking
    if (senders_list == null) {
      senders_list = [];
      for (i = 1; i <= jiff.party_count; i++) {
        senders_list.push(i);
      }
    }

    // Generate skeletons from lengths
    skeletons = {};
    if (typeof(lengths) === 'number') {
      // All arrays are of the same length
      var skeleton = [];
      for (var i = 0; i < lengths; i++) {
        skeleton.push(null);
      }
      for (i = 0; i < senders_list.length; i++) {
        skeletons[senders_list[i]] = skeleton;
      }
    } else {
      // Lengths of the different arrays are all provided
      for (i = 0; i < senders_list.length; i++) {
        if (lengths[senders_list[i]] == null) {
          throw new Error('share_array: missing length');
        } else {
          skeletons[senders_list[i]] = [];
          for (var j = 0; j < lengths[senders_list[i]]; j++) {
            skeletons[senders_list[i]].push(null);
          }
        }
      }
    }
  }

  return share_ND_array(jiff, array, skeletons, threshold, receivers_list, senders_list, Zp, share_id);
};

const share_2D_array = function (jiff, array, lengths, threshold, receivers_list, senders_list, Zp, share_id) {
  var i;

  // Check format of lengths
  if (lengths != null && typeof(lengths) !== 'object') {
    throw new Error('share_array: unrecognized lengths');
  }

  // Default values
  if (receivers_list == null) {
    receivers_list = [];
    for (i = 1; i <= jiff.party_count; i++) {
      receivers_list.push(i);
    }
  }
  if (senders_list == null) {
    senders_list = [];
    for (i = 1; i <= jiff.party_count; i++) {
      senders_list.push(i);
    }
  }

  var isReceiving = receivers_list.indexOf(jiff.id) > -1;
  if (senders_list.indexOf(jiff.id) === -1 && !isReceiving) {
    // This party is neither a sender nor a receiver, do nothing!
    return null;
  }

  // compute operation id
  receivers_list.sort(); // sort to get the same order
  senders_list.sort();
  if (share_id == null) {
    share_id = jiff.counters.gen_share_id(receivers_list, senders_list) + ':array:';
  }

  // wrap around result of share_array
  var lengths_deferred = new jiff.helpers.Deferred();
  var lengths_promise = lengths_deferred.promise;

  // figure out lengths by having each party emit their length publicly
  if (lengths == null) {
    lengths = {};
    var total = 0;
    if (senders_list.indexOf(jiff.id) > -1) {
      lengths[jiff.id] = array.length;

      // send the length of this party's array to all receivers
      jiff.emit(share_id + 'length', receivers_list, array.length.toString(10));
    }

    jiff.listen(share_id + 'length', function (sender, message) {
      lengths[sender] = { rows: parseInt(message, 10) };
      total++;
      if (total === senders_list.length) {
        jiff.remove_listener(share_id + 'length');
        lengths_deferred.resolve(lengths);
      }
    });
  } else if (typeof(lengths.rows) === 'number') {
    // All arrays are of the same length
    var l = lengths;
    lengths = {};
    for (i = 0; i < senders_list.length; i++) {
      lengths[senders_list[i]] = l;
    }

    lengths_deferred.resolve(lengths);
  } else {
    // Lengths of the different arrays are all provided
    for (i = 0; i < senders_list.length; i++) {
      if (lengths[senders_list[i]] == null || lengths[senders_list[i]].rows == null) {
        throw new Error('share_2D_array: missing rows length');
      }
    }

    lengths_deferred.resolve(lengths);
  }

  // Final results
  var share_array_deferred = new jiff.helpers.Deferred();
  var share_array_promise = share_array_deferred.promise;

  // lengths are now set, start sharing
  lengths_promise.then(function (lengths) {
    // compute the number of sharing rounds
    var max = 0;
    for (i = 0; i < senders_list.length; i++) {
      var l = lengths[senders_list[i]].rows;
      max = l > max ? l : max;
    }

    // share every round
    var promises = [];
    for (var r = 0; r < max; r++) {
      var round_senders = [];
      for (i = 0; i < senders_list.length; i++) {
        if (lengths[senders_list[i]].rows > r) {
          round_senders.push(senders_list[i]);
        }
      }

      var row_lengths = {};
      var empty = false;
      for (var p = 0; p < round_senders.length; p++) {
        var pid = round_senders[p];
        row_lengths[pid] = lengths[pid].cols;
        if (lengths[pid][r] != null) {
          row_lengths[pid] = lengths[pid][r];
        }
        if (row_lengths[pid] == null) {
          empty = true;
        }
      }

      var row = r < array.length ? array[r] : [];
      row_lengths = empty ? null : row_lengths;
      var round_results = share_array(jiff, row, row_lengths, threshold, receivers_list, round_senders, Zp, share_id + 'row' + r + ':');
      promises.push(round_results);
    }

    // Wait for every promises corresponding to every row
    return Promise.all(promises).then(function (intermediate_results) {
      // Store results here
      var results = {};
      if (isReceiving) {
        for (i = 0; i < senders_list.length; i++) {
          results[senders_list[i]] = [];
        }
      }

      for (i = 0; i < intermediate_results.length; i++) {
        var round = intermediate_results[i];
        for (var sender_id in round) {
          if (round.hasOwnProperty(sender_id)) {
            results[sender_id].push(round[sender_id]);
          }
        }
      }

      share_array_deferred.resolve(results);
    });
  });

  return isReceiving ? share_array_promise : null;
};

const share_from_skeleton_unbound = function (jiff, that, sender, skeleton) {
  var shares = typeof(skeleton) === 'string' ? JSON.parse(skeleton) : skeleton;

  var promise = share_array_single_sender(jiff, shares, that.threshold, that.receivers_list, sender, that.Zp, that.share_id + ':p_id_' + sender);

  promise.then(function (sender, array) {
    that.deferreds[sender].resolve(array);
  }.bind(null, sender));
};

const share_array_single_sender = function (jiff, secrets, threshold, receivers_list, sender, Zp, share_id) {
  if (secrets != null && secrets.length === 0) {
    return Promise.resolve([]);
  } else if (secrets != null && Array.isArray(secrets)) {
    var promised_array = [];
    for (var j = 0; j < secrets.length; j++) {
      promised_array.push(share_array_single_sender(jiff, secrets[j], threshold, receivers_list, sender, Zp, share_id + ':' + j));
    }

    var isReceiving = receivers_list.indexOf(jiff.id) > -1;

    if (isReceiving) {
      var deferred_array = new jiff.helpers.Deferred();
      Promise.all(promised_array).then(function (array) {
        deferred_array.resolve(array);
      });
    }

    return isReceiving ? deferred_array.promise : Promise.resolve({});
  } else {
    // Create and distribute the share - Note: Senders are reorganized in the final array.
    // The return value of jiff.share is an array, [sender: share], and we only need to return share by itself.
    return Promise.resolve(jiff.share(secrets, threshold, receivers_list, [sender], Zp, 'share:' + share_id)[sender]);
  }
};

const share_ND_array_deferred = function (jiff, secrets, skeletons, threshold, receivers_list, senders_list, Zp, share_id) {
  var parameters = [receivers_list, senders_list, threshold, Zp, share_id];
  [receivers_list, senders_list, threshold, Zp, share_id] = util.sanitize_array_params.bind(null, jiff).apply(null, parameters);

  var i, p_id, skeleton;

  var isReceiving = receivers_list.indexOf(jiff.id) > -1;
  var isSending = senders_list.indexOf(jiff.id) > -1;
  if (!isSending && !isReceiving) {
    return null;  // This party is neither a sender nor a receiver, do nothing!
  }

  // Setup deferreds: required because we don't yet know how many shares to account for
  var final_deferreds = [];
  for (i = 0; i < senders_list.length; i++) {
    p_id = senders_list[i];
    final_deferreds[p_id] = new jiff.helpers.Deferred();
  }

  const share_from_skeleton = share_from_skeleton_unbound.bind(null, jiff).bind(null, {
    deferreds: final_deferreds,
    threshold: threshold,
    receivers_list: receivers_list,
    Zp: Zp, share_id: share_id
  });

  if (skeletons == null) {
    if (isSending) {  // Send the shape and lengths of this party's array to all receivers
      skeleton = jiff.skeleton_of(secrets);  // All secrets are removed while maintaing the array's orginial structure.
      var skeleton_str = JSON.stringify(skeleton);  // serialize for emit
      jiff.emit(share_id + 'skeleton', receivers_list, skeleton_str);
      share_from_skeleton(jiff.id, secrets);  // Share the real values matching the emitted skeleton
    }
    if (isReceiving) {
      jiff.listen(share_id + 'skeleton', share_from_skeleton);  // Receive shares when dimensions are known
    }
  } else {
    senders_list = Array.from(senders_list);  // remove jiff helpers' internal properties
    util.match_skeletons(jiff, skeletons, senders_list);  // Saftey check array dimention presets
    for (i in senders_list) {  // Share each party's array
      p_id = senders_list[i];
      var myself = p_id === jiff.id;
      skeleton = skeletons[p_id];
      share_from_skeleton(p_id, myself ? secrets : skeleton);
    }
  }


  // Combine all promises and re-index final array map
  var final_deferred = new jiff.helpers.Deferred();
  var final_promise = isReceiving ? final_deferred.promise : Promise.resolve({});
  Promise.all((function () {
    var all_promises = [];
    for (var i = 0; i < senders_list.length; i++) {
      var p_id = senders_list[i]
      all_promises.push(final_deferreds[p_id].promise);
    }
    return all_promises;
  })()).then(function (array) {
    var shares = {};
    for (var i = 0; i < senders_list.length; i++) {
      var p_id = senders_list[i];
      shares[p_id] = array[i];
    }
    final_deferred.resolve(shares);
    jiff.remove_listener(share_id + 'skeleton');
  });

  return final_promise;  // Return promise to map of secret-shared arrays
};

const share_ND_array_static = function (jiff, secrets, skeletons, threshold, receivers_list, senders_list, Zp, share_id) {
  var parameters = [receivers_list, senders_list, threshold, Zp, share_id];
  [receivers_list, senders_list, threshold, Zp, share_id] = util.sanitize_array_params.bind(null, jiff).apply(null, parameters);

  var i;

  var shares = {};

  var isReceiving = receivers_list.indexOf(jiff.id) > -1;
  var isSending = senders_list.indexOf(jiff.id) > -1;
  if (isSending || isReceiving) {
    // Static version of share_from_skeleton
    const share_from_skeleton = function (sender, skeleton) {
      return (function share_recursive(__secrets, share_id) {
        if (__secrets != null && __secrets.length === 0) {
          return [];
        } else if (__secrets != null && Array.isArray(__secrets)) {
          var array = [];
          for (var j = 0; j < __secrets.length; j++) {
            array.push(share_recursive(__secrets[j], share_id + ':' + j));
          }
          return isReceiving ? array : {};
        } else {
          return jiff.share(__secrets, threshold, receivers_list, [sender], Zp, 'share:' + share_id)[sender];
        }
      })(skeleton, share_id + ':p_id_' + sender);
    }

    senders_list = Array.from(senders_list);  // remove jiff helpers' internal properties
    util.match_skeletons(jiff, skeletons, senders_list);  // Saftey check array dimention presets
    for (i in senders_list) {  // Share each party's array
      var p_id = senders_list[i];
      var skeleton = skeletons[p_id];
      shares[p_id] = share_from_skeleton(p_id, p_id === jiff.id ? secrets : skeleton);
    }
  }

  return isReceiving ? shares : {};  // Return promise to map of secret-shared arrays
};

const share_ND_array = function (jiff, secrets, skeletons, threshold, receivers_list, senders_list, Zp, share_id) {
  var share_ND_array = skeletons != null ? share_ND_array_static : share_ND_array_deferred;
  return share_ND_array(jiff, secrets, skeletons, threshold, receivers_list, senders_list, Zp, share_id);
};

module.exports = {
  share_array: share_array,
  share_2D_array: share_2D_array,
  share_ND_array: share_ND_array
};

},{"./util.js":24}],24:[function(require,module,exports){
const sanitize_array_params = function (jiff, receivers_list, senders_list, threshold, Zp, share_id) {
  [receivers_list, senders_list] = [receivers_list, senders_list].map(function (party_list) {
    if (party_list == null) {
      party_list = [];
      for (var i = 1; i <= jiff.party_count; i++) {
        party_list.push(i);
      }
    }
    jiff.helpers.sort_ids(party_list);  // sort to get the same order
    return party_list;
  });

  if (threshold == null) {
    threshold = receivers_list.length;
  } else if (threshold < 0) {
    threshold = 2;
  } else if (threshold > receivers_list.length) {
    threshold = receivers_list.length;
  }

  if (Zp == null) {
    Zp = jiff.Zp;
  }

  if (share_id == null) {  // Make a unique id for this array
    share_id = jiff.counters.gen_op_id2('share_array', receivers_list, senders_list);
  }

  return [receivers_list, senders_list, threshold, Zp, share_id];
};

const skeleton_of = function (jiff, nd_array, replace) {
  if (typeof(replace) === 'undefined') {
    replace = null;
  }
  if (!(typeof(nd_array.length) === 'undefined') || nd_array.length === 0) {
    var wiped_array = [];
    for (var k = 0; k < nd_array.length; k++) {
      wiped_array.push(jiff.skeleton_of(nd_array[k], replace));
    }
    return wiped_array;
  }
  return replace;
};

const match_skeletons = function (jiff, skeletons, senders_list) {
  var keys = Object.keys(skeletons);
  var expected_keys = senders_list.map(String);
  if (keys.length === senders_list.length) {
    for (var i = 0; i < senders_list.length; i++) {
      if (!(keys[i] === expected_keys[i])) {
        console.log('senders: ', senders_list);
        console.log('skeleton keys', keys);
        throw new Error('Keys of parameter \'skeletons\' should be the same as the senders');
      }
    }
  } else {
    throw new Error('Invalid parameter \'skeletons\'');
  }
};

module.exports = {
  sanitize_array_params: sanitize_array_params,
  skeleton_of: skeleton_of,
  match_skeletons: match_skeletons
};

},{}],25:[function(require,module,exports){
module.exports = {
  /**
   * Compute sum of bitwise secret shared number and a constant
   * @function cadd
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - the bit wise secret shares
   * @param {number} constant - the constant
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result. Note that the length here will be max(|bits|, |constant|) + 1
   *                          in case of potential overflow / carry
   */
  cadd: function (jiff, bits, constant, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.cadd)');
    }
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.cadd', bits[0].holders);
    }

    if (constant.toString() === '0') {
      return bits;
    }

    // copy to avoid aliasing problems during execution
    bits = bits.slice();

    // decompose constant into bits
    var constant_bits = jiff.helpers.number_to_bits(constant, bits.length); // pads with zeros to bits.length

    // initialize results
    var result = jiff.utils.many_secret_shares(Math.max(constant_bits.length, bits.length), bits[0].holders, bits[0].threshold, bits[0].Zp);
    var deferreds = result.deferreds;
    result = result.shares;

    var sum = bits[0].icxor_bit(constant_bits[0]);
    var carry = bits[0].icmult(constant_bits[0]);

    // put initial bit at head of result array
    result.unshift(sum);
    deferreds.unshift(null);

    // compute sum one bit at a time, propagating carry
    jiff.utils.bit_combinator(deferreds[deferreds.length - 1], 1, deferreds.length - 1, carry, function (i, carry) {
      var sum;
      if (i < bits.length) {
        var and = bits[i].icmult(constant_bits[i]);
        var xor = bits[i].icxor_bit(constant_bits[i]);
        var xorAndCarry = xor.ismult(carry, op_id + ':smult:' + (i - 1));

        sum = xor.isxor_bit(carry, op_id + ':sxor_bit:' + (i - 1));
        carry = and.isadd(xorAndCarry); // cheap or, xor and and cannot both be true!
      } else {
        // bits.length <= i < constant_bits.length
        // and is zero, xor is constant_bits[i]
        sum = carry.icxor_bit(constant_bits[i]);
        carry = carry.icmult(constant_bits[i]);
      }

      sum.wThen(deferreds[i].resolve);
      return carry;
    });

    return result;
  },
  /**
   * Compute [secret bits] - [constant bits]
   * @function csubl
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {number} constant - the constant
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - the bit wise secret shares
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result. Note that the length of the returned result is |bits|+1, where
   *                          the bit at index 0 is the least significant bit. The bit at index 1 is the most significant bit,
   *                          and the bit at index |bits| is 1 if the result overflows, or 0 otherwise
   */
  csubl: function (jiff, bits, constant, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.csubl)');
    }
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.csubl', bits[0].holders);
    }

    if (constant.toString() === '0') {
      return bits;
    }

    // copy to avoid aliasing problems during execution
    bits = bits.slice();

    // decompose constant into bits
    var constant_bits = jiff.helpers.number_to_bits(constant, bits.length); // pads with zeros to bits.length

    // initialize results
    var result = jiff.utils.many_secret_shares(Math.max(constant_bits.length, bits.length), bits[0].holders, bits[0].threshold, bits[0].Zp);
    var deferreds = result.deferreds;
    result = result.shares;

    var diff = bits[0].icxor_bit(constant_bits[0]);
    var borrow = bits[0].inot().icmult(constant_bits[0]);

    // put initial bit at head of result array
    result.unshift(diff);
    deferreds.unshift(null);

    // compute diff one bit at a time, propagating borrow
    jiff.utils.bit_combinator(deferreds[deferreds.length - 1], 1, deferreds.length - 1, borrow, function (i, borrow) {
      var diff;
      if (i < bits.length) {
        var xor = bits[i].icxor_bit(constant_bits[i]);
        var andNot = bits[i].inot().icmult(constant_bits[i]);

        // save and update borrow
        diff = xor.isxor_bit(borrow, op_id + ':sxor_bit:' + (i - 1));
        borrow = xor.inot().ismult(borrow, op_id + ':smult:' + (i - 1));
        borrow = borrow.isadd(andNot);
      } else {
        // bits.length <= i < constant_bits.length
        // xor and andNot are equal to the constant bit value since secret bit is always zero here
        diff = borrow.icxor_bit(constant_bits[i]);
        borrow = borrow.issub(borrow.icmult(constant_bits[i]));
        borrow = borrow.icadd(constant_bits[i]);
      }

      diff.wThen(deferreds[i].resolve);
      return borrow;
    });

    return result;
  },
  /**
   * Compute [constant bits] - [secret bits]
   * @function csubr
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {number} constant - the constant
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - the bit wise secret shares
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result. Note that the length of the returned result is |bits|+1, where
   *                          the bit at index 0 is the least significant bit. The bit at index 1 is the most significant bit,
   *                          and the bit at index |bits| is 1 if the result overflows, or 0 otherwise
   */
  csubr: function (jiff, constant, bits, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.csubr)');
    }
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.csubr', bits[0].holders);
    }

    // copy to avoid aliasing problems during execution
    bits = bits.slice();

    // decompose constant into bits
    var constant_bits = jiff.helpers.number_to_bits(constant, bits.length); // pads with zeros to bits.length

    // initialize results
    var result = jiff.utils.many_secret_shares(Math.max(constant_bits.length, bits.length), bits[0].holders, bits[0].threshold, bits[0].Zp);
    var deferreds = result.deferreds;
    result = result.shares;

    var diff = bits[0].icxor_bit(constant_bits[0]);
    var borrow = bits[0].issub(bits[0].icmult(constant_bits[0]));

    // put initial bit at head of result array
    result.unshift(diff);
    deferreds.unshift(null);

    // compute diff one bit at a time, propagating borrow
    jiff.utils.bit_combinator(deferreds[deferreds.length - 1], 1, deferreds.length - 1, borrow, function (i, borrow) {
      var diff;
      if (i < bits.length) {
        var xor = bits[i].icxor_bit(constant_bits[i]);
        var andNot = bits[i].issub(bits[i].icmult(constant_bits[i]));

        // save and update borrow
        diff = xor.isxor_bit(borrow, op_id + ':sxor_bit:' + (i - 1));
        borrow = xor.inot().ismult(borrow, op_id + ':smult:' + (i - 1));
        borrow = borrow.isadd(andNot);
      } else {
        // andNot is zero and xor is equal to the constant bit since secret bit is always zero here.
        diff = borrow.icxor_bit(constant_bits[i]);
        borrow = borrow.icmult(constant_bits[i] === 1 ? 0 : 1);
      }

      diff.wThen(deferreds[i].resolve);
      return borrow;
    });

    return result;
  },
  /**
   *
   * Compute [secret bits1] + [secret bits2]
   * @function sadd
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - the first bitwise shared number: array of secrets with index 0 being least significant bit
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number (length may be different)
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result. Note that the length of the returned result is |bits|+1, where
   *                          the bit at index 0 is the least significant bit
   */
  sadd: function (jiff, bits1, bits2, op_id) {
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.sadd', bits1[0].holders);
    }

    // copy to avoid aliasing problems during execution
    bits1 = bits1.slice();
    bits2 = bits2.slice();

    var tmp = bits1.length > bits2.length ? bits1 : bits2;
    bits2 = bits1.length > bits2.length ? bits2 : bits1; // shortest array
    bits1 = tmp; // longest array

    // initialize results
    var result = jiff.utils.many_secret_shares(bits1.length, bits1[0].holders, Math.max(bits1[0].threshold, bits2[0].threshold), bits1[0].Zp);
    var deferreds = result.deferreds;
    result = result.shares;

    var sum = bits1[0].isxor_bit(bits2[0], op_id + ':sxor_bit:initial');
    var carry = bits1[0].ismult(bits2[0], op_id + ':smult:initial');

    // put initial bit at head of result array
    result.unshift(sum);
    deferreds.unshift(null);

    // compute sum one bit at a time, propagating carry
    jiff.utils.bit_combinator(deferreds[deferreds.length - 1], 1, deferreds.length - 1, carry, function (i, carry) {
      var sum;
      if (i < bits2.length) {
        var and = bits1[i].ismult(bits2[i], op_id + ':smult1:' + (i - 1));
        var xor = bits1[i].isxor_bit(bits2[i], op_id + ':sxor_bit1:' + (i - 1));
        var xorAndCarry = xor.ismult(carry, op_id + ':smult2:' + (i - 1));

        sum = xor.isxor_bit(carry, op_id + ':sxor_bit2:' + (i - 1));
        carry = and.isadd(xorAndCarry); // cheap or, xor and and cannot both be true!
      } else {
        // and is always zero, xor is equal to bits1[i]
        sum = bits1[i].isxor_bit(carry, op_id + ':sxor_bit1:' + (i - 1));
        carry = bits1[i].ismult(carry, op_id + ':smult1:' + (i - 1));
      }

      sum.wThen(deferreds[i].resolve);
      return carry;
    });

    return result;
  },
  /**
   * Compute [secret bits1] - [secret bits2]
   * @function ssub
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - first bitwise secret shared number: lower indices represent less significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - second bitwise secret shared number (length may be different)
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result. Note that the length of the returned result is |bits|+1, where
   *                          the bit at index 0 is the least significant bit. The bit at index 1 is the most significant bit,
   *                          and the bit at index |bits| is 1 if the result overflows, or 0 otherwise
   */
  ssub: function (jiff, bits1, bits2, op_id) {
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.ssub', bits1[0].holders);
    }

    // copy to avoid aliasing problems during execution
    bits1 = bits1.slice();
    bits2 = bits2.slice();

    // initialize results
    var result = jiff.utils.many_secret_shares(Math.max(bits1.length, bits2.length), bits1[0].holders, Math.max(bits1[0].threshold, bits2[0].threshold), bits1[0].Zp);
    var deferreds = result.deferreds;
    result = result.shares;

    var diff = bits1[0].isxor_bit(bits2[0], op_id + ':sxor_bit:initial');
    var borrow = bits1[0].inot().ismult(bits2[0], op_id + ':smult:initial');

    // put initial bit at head of result array
    result.unshift(diff);
    deferreds.unshift(null);

    // compute diff one bit at a time, propagating borrow
    jiff.utils.bit_combinator(deferreds[deferreds.length - 1], 1, deferreds.length - 1, borrow, function (i, borrow) {
      var diff;
      if (i < bits1.length && i < bits2.length) {
        var xor = bits1[i].isxor_bit(bits2[i], op_id + ':sxor_bit1:' + (i - 1));
        var andNot = bits1[i].inot().ismult(bits2[i], op_id + ':smult1:' + (i - 1));

        // save and update borrow
        diff = xor.isxor_bit(borrow, op_id + ':sxor_bit2:' + (i - 1));
        borrow = xor.inot().ismult(borrow, op_id + ':smult2:' + (i - 1));
        borrow = borrow.isadd(andNot);
      } else if (i < bits1.length) {
        // xor is equal to the value of bits1[i], andNot is equal to 0, since bits[2] is all zeros here
        diff = bits1[i].isxor_bit(borrow, op_id + ':sxor_bit1:' + (i - 1));
        borrow = bits1[i].inot().ismult(borrow, op_id + ':smult1:' + (i - 1));
      } else { // i < bits2.length
        // xor and andNot are equal to the value of bits2[i]
        diff = bits2[i].isxor_bit(borrow, op_id + ':sxor_bit1:' + (i - 1));
        borrow = bits2[i].inot().ismult(borrow, op_id + ':smult1:' + (i - 1));
        borrow = borrow.isadd(bits2[i]);
      }

      diff.wThen(deferreds[i].resolve);
      return borrow;
    });

    return result;
  },
  /**
   * Compute [secret bits] * constant
   * @function cmult
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - bitwise shared secret to multiply: lower indices represent less significant bits
   * @param {number} constant - constant to multiply with
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result, the length of the result will be bits.length + ceil(log2(constant)), except
   *                          if constant is zero, the result will then be [ zero share ]
   */
  cmult: function (jiff, bits, constant, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.cmult)');
    }
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.cmult', bits[0].holders);
    }

    // copy to avoid aliasing problems during execution
    bits = bits.slice();

    // decompose constant into bits
    var constant_bits = jiff.helpers.number_to_bits(constant); // do not pad

    // Initialize the result
    var result = jiff.utils.many_secret_shares(bits.length + constant_bits.length, bits[0].holders, bits[0].threshold, bits[0].Zp);
    var deferreds = result.deferreds;
    result = result.shares;

    // Resolve result when ready
    var final_deferred = new jiff.helpers.Deferred();
    final_deferred.promise.then(jiff.utils.resolve_many_secrets.bind(null, deferreds));

    // get useless share of zero (just for padding)
    var zero = new jiff.SecretShare(0, bits[0].holders, bits[0].threshold, bits[0].Zp);
    var initial = [zero];

    // special case
    if (constant.toString() === '0') {
      return initial;
    }

    // main function
    jiff.utils.bit_combinator(final_deferred, 0, constant_bits.length, initial, function (i, intermediate) {
      // Shift bits to create the intermediate values,
      // and sum if the corresponding bit in a is 1
      if (constant_bits[i].toString() === '1') {
        intermediate = jiff.protocols.bits.sadd(intermediate, bits, op_id + ':bits.sadd:' + i);
      }

      bits.unshift(zero);
      return intermediate;
    }, function (intermediate) {
      // promise-ify an array of intermediate results
      var promises = [];
      for (var i = 0; i < intermediate.length; i++) {
        promises.push(intermediate[i].value);
      }
      return Promise.all(promises);
    }, function (result) {
      // identity
      return result;
    });

    return result;
  },
  /**
   * Compute [secret bits1] * [secret bits2]
   * @function smult
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - bitwise shared secret to multiply: lower indices represent less significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - bitwise shared secret to multiply
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for communication.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} bitwise sharing of the result, the length of the result will be bits1.length + bits2.length
   */
  smult: function (jiff, bits1, bits2, op_id) {
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.smult', bits1[0].holders);
    }

    // copy to avoid aliasing problems during execution
    bits1 = bits1.slice();
    bits2 = bits2.slice();

    // bits1 will be the longest array, bits2 will be the shortest
    var tmp = bits1.length > bits2.length ? bits1 : bits2;
    bits2 = bits1.length > bits2.length ? bits2 : bits1;
    bits1 = tmp;

    // Initialize the result
    var offset = bits2.length === 1 ? -1 : 0;
    var result = jiff.utils.many_secret_shares(bits1.length + bits2.length + offset, bits1[0].holders, Math.max(bits1[0].threshold, bits2[0].threshold), bits1[0].Zp);
    var deferreds = result.deferreds;
    result = result.shares;

    // Resolve result when ready
    var final_deferred = new jiff.helpers.Deferred();
    final_deferred.promise.then(jiff.utils.resolve_many_secrets.bind(null, deferreds));

    // Loop over *shortest* array one bit at a time
    jiff.utils.bit_combinator(final_deferred, 0, bits2.length, bits2, function (i, intermediate) {
      var this_bit = bits2[i];
      var bit_mult = []; // add bits1 or 0 to the result according to this bit
      for (var j = 0; j < bits1.length; j++) {
        bit_mult[j] = this_bit.iif_else(bits1[j], 0, op_id + ':if_else:' + i + ':' + j);
      }
      bits1.unshift(0); // increase magnitude

      if (i === 0) {
        return bit_mult;
      }

      return jiff.protocols.bits.sadd(intermediate, bit_mult, op_id + ':bits.sadd:' + i);
    }, function (intermediate) {
      // promise-ify an array of intermediate results
      var promises = [];
      for (var i = 0; i < intermediate.length; i++) {
        promises.push(intermediate[i].value);
      }
      return Promise.all(promises);
    }, function (result) {
      // identity
      return result;
    });

    return result;
  },
  /**
   * Computes integer division of [secret bits 1] / [secret bits 2]
   * @function sdiv
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {{quotient: module:jiff-client~JIFFClient#SecretShare[], remainder: module:jiff-client~JIFFClient#SecretShare[]}} the quotient and remainder bits arrays, note that
   *                                                                the quotient array has the same length as bits1,
   *                                                                and the remainder array has the same length as bits2 or bits1, whichever is smaller.
   *                                                                Note: if bits2 represent 0, the returned result is the maximum
   *                                                                number that fits in the number of bits (all 1), and the remainder
   *                                                                is equal to bits1
   */
  sdiv: function (jiff, bits1, bits2, op_id) {
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.sdiv', bits1[0].holders);
    }

    // copy to avoid aliasing problems during execution
    bits1 = bits1.slice();
    bits2 = bits2.slice();

    // Initialize the result
    var quotient = jiff.utils.many_secret_shares(bits1.length, bits1[0].holders, Math.max(bits1[0].threshold, bits2[0].threshold), bits1[0].Zp);
    var quotientDeferreds = quotient.deferreds;
    quotient = quotient.shares;

    var remainder = jiff.utils.many_secret_shares(Math.min(bits1.length, bits2.length), bits1[0].holders, Math.max(bits1[0].threshold, bits2[0].threshold), bits1[0].Zp);
    var remainderDeferreds = remainder.deferreds;
    remainder = remainder.shares;

    // Resolve result when ready
    var final_deferred = new jiff.helpers.Deferred();
    final_deferred.promise.then(function (result) {
      jiff.utils.resolve_many_secrets(remainderDeferreds, result);
    });

    var initial = []; // initial remainder
    jiff.utils.bit_combinator(final_deferred, bits1.length - 1, -1, initial, function (i, _remainder) {
      var iterationCounter = (bits1.length - i - 1);

      // add bit i to the head of remainder (least significant bit)
      _remainder.unshift(bits1[i]);

      // Get the next bit of the quotient
      // and conditionally subtract b from the
      // intermediate remainder to continue
      var sub = jiff.protocols.bits.ssub(_remainder, bits2, op_id + ':bits.ssub:' + iterationCounter);
      var noUnderflow = sub.pop().inot(); // get the overflow bit, sub is now the result of subtraction

      // Get next bit of quotient
      noUnderflow.wThen(quotientDeferreds[i].resolve);

      // Update remainder
      for (var j = 0; j < _remainder.length; j++) {
        // note, if noUnderflow, then |# bits in sub| <= |# bits in remainder|
        _remainder[j] = noUnderflow.iif_else(sub[j], _remainder[j], op_id + ':if_else:' + iterationCounter + ':' + j);
      }

      // Remainder cannot be greater than divisor at this point
      while (_remainder.length > remainder.length) {
        _remainder.pop();
      }

      return _remainder;
    }, function (intermediate) {
      // promise-ify an array of intermediate results
      var promises = [];
      for (var i = 0; i < intermediate.length; i++) {
        promises.push(intermediate[i].value);
      }
      return Promise.all(promises);
    }, function (result) {
      // identity
      return result;
    });

    return {quotient: quotient, remainder: remainder}
  },
  /**
   * Computes integer division of [secret bits] / constant
   * @function cdivl
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - numerator: an array of secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the denominator number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {{quotient: module:jiff-client~JIFFClient#SecretShare[], remainder: module:jiff-client~JIFFClient#SecretShare[]}} the quotient and remainder bits arrays, note that
   *                                                                the quotient array has the same length as bits,
   *                                                                and the remainder array has the same length as
   *                                                                constant or bits, whichever is smaller
   * @throws if constant is 0.
   */
  cdivl: function (jiff, bits, constant, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.cdivl)');
    }
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.cdivl', bits[0].holders);
    }

    if (constant.toString() === '0') {
      throw new Error('constant cannot be 0 in bits.cdiv');
    }

    // copy to avoid aliasing problems during execution
    bits = bits.slice();

    // special case, divide by 1
    if (constant.toString() === '1') {
      return {
        quotient: bits,
        remainder: [new jiff.SecretShare(0, bits[0].holders, bits[0].threshold, bits[0].Zp)]
      }
    }

    // Initialize the result
    var quotient = jiff.utils.many_secret_shares(bits.length, bits[0].holders, bits[0].threshold, bits[0].Zp);
    var quotientDeferreds = quotient.deferreds;
    quotient = quotient.shares;

    var constantLessBits = jiff.helpers.ceil(jiff.helpers.bLog(constant, 2));
    constantLessBits = parseInt(constantLessBits.toString(), 10);
    var remainder = jiff.utils.many_secret_shares(Math.min(constantLessBits, bits.length), bits[0].holders, bits[0].threshold, bits[0].Zp);
    var remainderDeferreds = remainder.deferreds;
    remainder = remainder.shares;

    // Resolve result when ready
    var final_deferred = new jiff.helpers.Deferred();
    final_deferred.promise.then(jiff.utils.resolve_many_secrets.bind(null, remainderDeferreds));

    var initial = []; // initial remainder
    jiff.utils.bit_combinator(final_deferred, bits.length - 1, -1, initial, function (i, _remainder) {
      var iterationCounter = (bits.length - i - 1);

      // add bit i to the head of remainder (least significant bit)
      _remainder.unshift(bits[i]);

      // Get the next bit of the quotient
      // and conditionally subtract b from the
      // intermediate remainder to continue
      var sub = jiff.protocols.bits.csubl(_remainder, constant, op_id + ':bits.csubl:' + iterationCounter);
      var noUnderflow = sub.pop().inot(); // get the overflow bit, sub is now the result of subtraction

      // Get next bit of quotient
      noUnderflow.wThen(quotientDeferreds[i].resolve);

      // Update remainder
      for (var j = 0; j < _remainder.length; j++) {
        // note, if noUnderflow, then |# bits in sub| <= |# bits in remainder|
        _remainder[j] = noUnderflow.iif_else(sub[j], _remainder[j], op_id + ':if_else:' + iterationCounter + ':' + j);
      }

      // Remainder cannot be greater than constant at this point
      while (_remainder.length > remainder.length) {
        _remainder.pop();
      }

      return _remainder;
    }, function (intermediate) {
      // promise-ify an array of intermediate results
      var promises = [];
      for (var i = 0; i < intermediate.length; i++) {
        promises.push(intermediate[i].value);
      }
      return Promise.all(promises);
    }, function (result) {
      // identity
      return result;
    });

    return {quotient: quotient, remainder: remainder};
  },
  /**
   * Computes integer division of constant / [secret bits]
   * @function cdivr
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {number} constant - the numerator number
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - denominator: an array of secret shares of bits, starting from least to most significant bits
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {{quotient: module:jiff-client~JIFFClient#SecretShare[], remainder: module:jiff-client~JIFFClient#SecretShare[]}} the quotient and remainder bits arrays, note that
   *                                                                the quotient array has the same length as the number of bits in constant,
   *                                                                and the remainder array has the same length as bits or constant, whichever is smaller.
   *                                                                Note: if bits represent 0, the returned result is the maximum
   *                                                                number that fits in its bits (all 1), and the remainder
   *                                                                is equal to constant
   */
  cdivr: function (jiff, constant, bits, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.cdivr)');
    }
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.cdivr', bits[0].holders);
    }

    // copy to avoid aliasing problems during execution
    bits = bits.slice();

    // do not pad
    var constant_bits = jiff.helpers.number_to_bits(constant);

    // Initialize the result
    var quotient = jiff.utils.many_secret_shares(constant_bits.length, bits[0].holders, bits[0].threshold, bits[0].Zp);
    var quotientDeferreds = quotient.deferreds;
    quotient = quotient.shares;

    var remainder = jiff.utils.many_secret_shares(Math.min(constant_bits.length, bits.length), bits[0].holders, bits[0].threshold, bits[0].Zp);
    var remainderDeferreds = remainder.deferreds;
    remainder = remainder.shares;

    // Resolve result when ready
    var final_deferred = new jiff.helpers.Deferred();
    final_deferred.promise.then(jiff.utils.resolve_many_secrets.bind(null, remainderDeferreds));

    var initial = []; // initial remainder
    jiff.utils.bit_combinator(final_deferred, constant_bits.length - 1, -1, initial, function (i, _remainder) {
      var iterationCounter = (constant_bits.length - i - 1);

      // add bit i to the head of remainder (least significant bit)
      // turn into a secret without communication, just for typing
      var cbit_share = new jiff.SecretShare(constant_bits[i], bits[0].holders, bits[0].threshold, bits[0].Zp);
      _remainder.unshift(cbit_share);

      // Get the next bit of the quotient
      // and conditionally subtract b from the
      // intermediate remainder to continue
      var sub = jiff.protocols.bits.ssub(_remainder, bits, op_id + ':bits.ssub:' + iterationCounter);
      var noUnderflow = sub.pop().inot(); // get the overflow bit, sub is now the result of subtraction

      // Get next bit of quotient
      noUnderflow.wThen(quotientDeferreds[i].resolve);

      // Update remainder
      for (var j = 0; j < _remainder.length; j++) {
        // note, if noUnderflow, then |# bits in sub| <= |# bits in remainder|
        _remainder[j] = noUnderflow.iif_else(sub[j], _remainder[j], op_id + ':if_else:' + iterationCounter + ':' + j);
      }

      // cannot be bigger than divisor at this point
      while (_remainder.length > remainder.length) {
        _remainder.pop();
      }

      return _remainder;
    }, function (intermediate) {
      // promise-ify an array of intermediate results
      var promises = [];
      for (var i = 0; i < intermediate.length; i++) {
        promises.push(intermediate[i].value);
      }
      return Promise.all(promises);
    }, function (result) {
      // identity
      return result;
    });

    return {quotient: quotient, remainder: remainder};
  }
};
},{}],26:[function(require,module,exports){
module.exports = {
  /**
   * Checks whether the given bitwise secret shared number and numeric constant are equal
   * @function ceq
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if parameters are equal, 0 otherwise. If result is known
   *                                (e.g. constant has a greater non-zero bit than bits' most significant bit), the result is
   *                                returned immediately as a boolean
   */
  ceq: function (jiff, bits, constant, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.ceq)');
    }
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.ceq', bits[0].holders);
    }
    var result = jiff.protocols.bits.cneq(bits, constant, op_id);
    if (result === true || result === false) {
      return !result;
    }
    return result.inot();
  },
  /**
   * Checks whether the given bitwise secret shared number and numeric constant are not equal
   * @function cneq
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if parameters are not equal, 0 otherwise. If result is known
   *                                (e.g. constant has a greater non-zero bit than bits' most significant bit), the result is
   *                                returned immediately as a boolean
   */
  cneq: function (jiff, bits, constant, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.cneq)');
    }

    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.cneq', bits[0].holders);
    }

    // copy to avoid aliasing problems during execution
    bits = bits.slice();

    var constant_bits = jiff.helpers.number_to_bits(constant, bits.length);
    if (constant_bits.length > bits.length) {
      // Optimization: if constant has more bits, one of them must be 1, constant must be greater than bits.
      return true;
    }

    var deferred = new jiff.helpers.Deferred();
    var result = new jiff.SecretShare(deferred.promise, bits[0].holders, bits[0].threshold, bits[0].Zp);

    // big or of bitwise XORs
    var initial = bits[0].icxor_bit(constant_bits[0]);
    jiff.utils.bit_combinator(deferred, 1, bits.length, initial, function (i, prev) {
      var xor = bits[i].icxor_bit(constant_bits[i]);
      xor = prev.isor_bit(xor, op_id + ':sor_bit:' + (i - 1));
      return xor;
    });

    return result;
  },
  /**
   * Checks whether given secret shared bits are greater than the given constant
   * @function cgt
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if bits are greater than constant, 0 otherwise, if result is known
   *                                (e.g. constant has greater non-zero bit than bits' most significant bit), the result is
   *                                returned immediately as a boolean
   */
  cgt: function (jiff, bits, constant, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.cgt)');
    }
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.cgt', bits[0].holders);
    }
    return jiff.protocols.bits.cgteq(bits, constant + 1, op_id);
  },
  /**
   * Checks whether given secret shared bits are greater or equal to the given constant
   * @function cgteq
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if bits are greater or equal to constant, 0 otherwise, if result is known
   *                                (e.g. constant has greater non-zero bit than bits' most significant bit or constant is zero), the result is
   *                                returned immediately as a boolean
   */
  cgteq: function (jiff, bits, constant, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.cgteq)');
    }

    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.cgteq', bits[0].holders);
    }

    // copy to avoid aliasing problems during execution
    bits = bits.slice();

    // Optimization: the bits are a share of non-negative number, if constant <= 0, return true
    if (constant.toString().startsWith('-') || constant.toString() === '0') {
      return true;
    }

    // decompose result into bits
    var constant_bits = jiff.helpers.number_to_bits(constant, bits.length);
    if (constant_bits.length > bits.length) {
      // Optimization: if constant has more bits, one of them must be 1, constant must be greater than bits.
      return false;
    }

    // initialize result
    var deferred = new jiff.helpers.Deferred();
    var result = new jiff.SecretShare(deferred.promise, bits[0].holders, bits[0].threshold, bits[0].Zp);

    // Subtract bits2 from bits1, only keeping track of borrow
    var borrow = bits[0].inot().icmult(constant_bits[0]);

    // compute one bit at a time, propagating borrow
    jiff.utils.bit_combinator(deferred, 1, bits.length, borrow, function (i, borrow) {
      var xor = bits[i].icxor_bit(constant_bits[i]);
      var andNot = bits[i].inot().icmult(constant_bits[i]);

      // save and update borrow
      borrow = xor.inot().ismult(borrow, op_id + ':smult:' + (i - 1));
      return borrow.isadd(andNot);
    });

    return result.inot();
  },
  /**
   * Checks whether given secret shared bits are less than the given constant
   * @function clt
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if bits are less than the constant, 0 otherwise, if result is known
   *                                (e.g. constant has greater non-zero bit than bits' most significant bit), the result is
   *                                returned immediately as a boolean
   */
  clt: function (jiff, bits, constant, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.clt)');
    }
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.clt', bits[0].holders);
    }
    var result = jiff.protocols.bits.cgteq(bits, constant, op_id);
    if (result === true || result === false) {
      return !result;
    }
    return result.inot();
  },
  /**
   * Checks whether given secret shared bits are less or equal to the given constant
   * @function clteq
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits
   * @param {number} constant - the constant number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {SecretShare|boolean} a secret share of 1 if bits are less or equal to constant, 0 otherwise, if result is known
   *                                (e.g. constant has greater non-zero bit than bits' most significant bit), the result is
   *                                returned immediately as a boolean
   */
  clteq: function (jiff, bits, constant, op_id) {
    if (!(bits[0].isConstant(constant))) {
      throw new Error('parameter should be a number (bits.clteq)');
    }
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.clteq', bits[0].holders);
    }
    var result = jiff.protocols.bits.cgt(bits, constant, op_id);
    if (result === true || result === false) {
      return !result;
    }
    return result.inot();
  },
  /**
   * Checks whether the two given bitwise secret shared numbers are equal
   * @function seq
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if bits are equal, 0 otherwise
   */
  seq: function (jiff, bits1, bits2, op_id) {
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.seq', bits1[0].holders);
    }
    return jiff.protocols.bits.sneq(bits1, bits2, op_id).inot();
  },
  /**
   * Checks whether the two given bitwise secret shared numbers are not equal
   * @function sneq
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if bits are not equal, 0 otherwise
   */
  sneq: function (jiff, bits1, bits2, op_id) {
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.sneq', bits1[0].holders);
    }

    var tmp = bits1.length > bits2.length ? bits1 : bits2;
    bits2 = bits1.length > bits2.length ? bits2 : bits1; // shortest array
    bits1 = tmp; // longest array

    // copy to avoid aliasing problems during execution
    bits1 = bits1.slice();
    bits2 = bits2.slice();

    // initialize result
    var deferred = new jiff.helpers.Deferred();
    var result = new jiff.SecretShare(deferred.promise, bits1[0].holders, Math.max(bits1[0].threshold, bits2[0].threshold), bits1[0].Zp);

    // big or of bitwise XORs
    var initial = bits1[0].isxor_bit(bits2[0], op_id + ':sxor_bit:initial');
    jiff.utils.bit_combinator(deferred, 1, bits1.length, initial, function (i, prev) {
      var next;
      if (i < bits2.length) {
        var xor = bits1[i].isxor_bit(bits2[i], op_id + ':sxor_bit:' + (i - 1));
        next = prev.isor_bit(xor, op_id + ':sor_bit:' + (i - 1));
      } else {
        // xor is equal to bits1[i] since bits2[i] is zero
        next = prev.isor_bit(bits1[i], op_id + ':sor_bit:' + (i - 1));
      }
      return next;
    });

    return result;
  },
  /**
   * Checks whether the first given bitwise secret shared number is greater than the second bitwise secret shared number
   * @function sgt
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if the first number is greater than the second, 0 otherwise
   */
  sgt: function (jiff, bits1, bits2, op_id) {
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.sgt', bits1[0].holders);
    }

    var gteq = jiff.protocols.bits.sgteq(bits1, bits2, op_id + ':bits.sgteq');
    var neq = jiff.protocols.bits.sneq(bits1, bits2, op_id + ':bits.sneq');
    return gteq.ismult(neq, op_id + ':smult');
  },
  /**
   * Checks whether the first given bitwise secret shared number is greater than or equal to the second bitwise secret shared number
   * @function sgteq
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if the first number is greater or equal to the second, 0 otherwise
   */
  sgteq: function (jiff, bits1, bits2, op_id) {
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.sgteq', bits1[0].holders);
    }

    // copy to avoid aliasing problems during execution
    bits1 = bits1.slice();
    bits2 = bits2.slice();

    // initialize result
    var deferred = new jiff.helpers.Deferred();
    var result = new jiff.SecretShare(deferred.promise, bits1[0].holders, Math.max(bits1[0].threshold, bits2[0].threshold), bits1[0].Zp);

    // Subtract bits2 from bits1, only keeping track of borrow
    var borrow = bits1[0].inot().ismult(bits2[0], op_id + ':smult:initial');
    var n = Math.max(bits1.length, bits2.length);
    jiff.utils.bit_combinator(deferred, 1, n, borrow, function (i, borrow) {
      if (i < bits1.length && i < bits2.length) {
        var xor = bits1[i].isxor_bit(bits2[i], op_id + ':sxor_bit1:' + (i - 1));
        var andNot = bits1[i].inot().ismult(bits2[i], op_id + ':smult1:' + (i - 1));

        // save and update borrow
        borrow = xor.inot().ismult(borrow, op_id + ':smult2:' + (i - 1));
        borrow = borrow.isadd(andNot);
      } else if (i < bits1.length) {
        // xor is equal to the value of bits1[i], andNot is equal to 0, since bits[2] is all zeros here
        borrow = bits1[i].inot().ismult(borrow, op_id + ':smult1:' + (i - 1));
      } else { // i < bits2.length
        // xor and andNot are equal to the value of bits2[i]
        borrow = bits2[i].inot().ismult(borrow, op_id + ':smult1:' + (i - 1));
        borrow = borrow.isadd(bits2[i]);
      }

      return borrow;
    });

    return result.inot();
  },
  /**
   * Checks whether the first given bitwise secret shared number is less than the second bitwise secret shared number
   * @function slt
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if the first number is less than the second, 0 otherwise
   */
  slt: function (jiff, bits1, bits2, op_id) {
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.slt', bits1[0].holders);
    }
    var result = jiff.protocols.bits.sgteq(bits1, bits2, op_id);
    return result.inot();
  },
  /**
   * Checks whether the first given bitwise secret shared number is less or equal to the second bitwise secret shared number
   * @function slteq
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits1 - an array of secret shares of bits, starting from least to most significant bits
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits2 - the second bitwise shared number
   * @param {string} [op_id=<auto-generate-id>] - the base operation id to use when generating unique ids for multiplications.
   *                                              default value should suffice when the code of all parties executes all instructions
   *                                              in the same exact order, otherwise, a unique base name is needed here
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of 1 if the first number is less than or equal to the second, 0 otherwise
   */
  slteq: function (jiff, bits1, bits2, op_id) {
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('bits.slteq', bits1[0].holders);
    }
    var result = jiff.protocols.bits.sgt(bits1, bits2, op_id);
    return result.inot();
  }
};
},{}],27:[function(require,module,exports){
module.exports = {
  /**
   * Retrieves preprocessed rejection_sampling bits or performs the rejection sampling on the fly if crypto_provider is enabled
   * @function rejection_sampling
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff instance
   * @param {number} [lower_bound=0] - the lower bound, included (can be a bigNumber if using bigNumber extension)
   * @param {number} [upper_bound=jiff-instance.Zp] - the upper bound, excluded (can be a bigNumber if using bigNumber extension)
   * @param {number} [threshold=parties.length] - the threshold of the resulting shares after sampling
   * @param {Array} [parties=all_parties] - array of party ids that want to receive (or compute if needed) the sampling shares, by default, this includes all parties
   * @param {number} [Zp=jiff-instance.Zp] - the mod (if null then the default Zp for the instance is used)
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly
   * @returns {SecretShare[]} an array of secret shares, each representing a bit from the sampled value (from least to most significant)
   */
  rejection_sampling: function (jiff, lower_bound, upper_bound, threshold, parties, Zp, op_id) {
    // defaults
    if (parties == null) {
      parties = [];
      for (var i = 1; i <= jiff.party_count; i++) {
        parties.push(i);
      }
    } else {
      jiff.helpers.sort_ids(parties);
    }

    if (op_id == null) {
      op_id = jiff.counters.gen_op_id('rejection_sampling', parties);
    }

    // try to get preprocessed samples
    var result = jiff.get_preprocessing(op_id);
    if (result != null && result.ondemand !== true) {
      return result;
    }

    // Not ready, either preprocess it on demand, or use crypto provider!
    lower_bound = lower_bound ? lower_bound : 0;
    upper_bound = upper_bound ? upper_bound : jiff.Zp;
    if (threshold == null) {
      threshold = parties.length;
    }
    if (Zp == null) {
      Zp = jiff.Zp;
    }

    var finalLength = jiff.helpers.ceil(jiff.helpers.bLog(upper_bound, 2));
    finalLength = parseInt(finalLength.toString(), 10);
    finalLength = Math.max(finalLength, 1); // special case: when upper_bound is 1!

    var many_shares = jiff.utils.many_secret_shares(finalLength, parties, threshold, Zp);
    var final_deferreds = many_shares.deferreds;

    // Crypto provider
    if (result == null) {
      var promise = jiff.from_crypto_provider('numbers', parties, threshold, Zp, op_id, {
        max: upper_bound,
        min: lower_bound,
        bitLength: finalLength,
        count: 1
      });
      promise.then(function (result) {
        jiff.utils.resolve_many_secrets(final_deferreds, result['shares']);
      });
    } else { // preprocess on demand
      delete jiff.preprocessing_table[op_id];
      jiff.preprocessing('rejection_sampling', 1, null, threshold, parties, parties, Zp, [op_id], {
        lower_bound: lower_bound,
        upper_bound: upper_bound
      });
      jiff.executePreprocessing(function () {
        jiff.utils.resolve_many_secrets(final_deferreds, jiff.get_preprocessing(op_id));
      });
    }

    return many_shares.shares;
  },

  /**
   * Creates a secret share of the number represented by the given array of secret shared bits.
   * Requires no communication, only local operations
   * @function bit_composition
   * @ignore
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits.
   * @returns {module:jiff-client~JIFFClient#SecretShare} a secret share of the number represented by bits.
   */
  bit_composition: function (bits) {
    var result = bits[0];
    var pow = 1;
    for (var i = 1; i < bits.length; i++) {
      pow = pow * 2;
      result = result.isadd(bits[i].icmult(pow));
    }
    return result;
  }
};
},{}],28:[function(require,module,exports){
module.exports = {
  /**
   * Share a number as an array of secret bits
   * This takes the same parameters as jiff-instance.share, but returns an array of secret bit shares per sending party.
   * Each bit array starts with the least significant bit at index 0, and most significant bit at index length-1
   * @function share_bits
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {number} secret - the number to share (this party's input)
   * @param {number} [bit_length=jiff_instance.Zp] - the number of generated bits, if the secret has less bits, it will be
   *                                                 padded with zeros
   * @param {number} [threshold=receivers_list.length] - threshold of each shared bit
   * @param {Array} [receivers_list=all_parties] - receivers of every bits
   * @param {Array} [senders_list=all_parties] - senders of evey bit
   * @param {number} [Zp=jiff_instance.Zp] - the field of sharing for every bit
   * @param {string|number} [share_id=auto_gen()] - synchronization id
   * @returns {object} a map (of size equal to the number of parties)
   *          where the key is the party id (from 1 to n)
   *          and the value is an array of secret shared bits
   */
  share_bits: function (jiff, secret, bit_length, threshold, receivers_list, senders_list, Zp, share_id) {
    var i;
    if (Zp == null) {
      Zp = jiff.Zp;
    }
    if (receivers_list == null) {
      receivers_list = [];
      for (i = 1; i <= jiff.party_count; i++) {
        receivers_list.push(i);
      }
    } else {
      jiff.helpers.sort_ids(receivers_list);
    }
    if (senders_list == null) {
      senders_list = [];
      for (i = 1; i <= jiff.party_count; i++) {
        senders_list.push(i);
      }
    } else {
      jiff.helpers.sort_ids(senders_list);
    }

    if (share_id == null) {
      share_id = jiff.counters.gen_op_id2('share_bits', receivers_list, senders_list);
    }

    if (bit_length == null) {
      bit_length = Zp.toString(2).length;
    }

    // to allow for secret=null when party is not a sender
    var local_bits = [];
    if (secret != null) {
      local_bits = jiff.helpers.number_to_bits(secret, bit_length);
    }

    var shared_bits = {};
    for (i = 0; i < senders_list.length; i++) {
      shared_bits[senders_list[i]] = [];
    }

    for (i = 0; i < bit_length; i++) {
      var round = jiff.internal_share(local_bits[i], threshold, receivers_list, senders_list, Zp, share_id + ':' + i);
      for (var si = 0; si < senders_list.length; si++) {
        var pid = senders_list[si];
        shared_bits[pid].push(round[pid]);
      }
    }

    return shared_bits;
  },
  /**
   * Opens the given array of secret shared bits.
   * This works regardless of whether the represented value fit inside the corresponding field or not
   * @function open_bits
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {module:jiff-client~JIFFClient#SecretShare[]} bits - an array of the secret shares of bits, starting from least to most significant bits
   * @param {number[]} parties - parties to open (same as jiff_instance.open)
   * @param {string|number} [op_id=auto_gen()] - same as jiff_instance.open
   * @returns {promise} a promise to the number represented by bits
   */
  open_bits: function (jiff, bits, parties, op_id) {
    // Default values
    if (parties == null) {
      parties = [];
      for (var p = 1; p <= jiff.party_count; p++) {
        parties.push(p);
      }
    } else {
      jiff.helpers.sort_ids(parties);
    }

    // Compute operation ids (one for each party that will receive a result
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id2('bits.open', parties, bits[0].holders);
    }

    var opened_bits = [];
    for (var i = 0; i < bits.length; i++) {
      opened_bits[i] = jiff.internal_open(bits[i], parties, op_id + ':' + i);
    }

    return Promise.all(opened_bits).then(function (bits) {
      return jiff.helpers.bits_to_number(bits, bits.length);
    });
  },
  /**
   * Receives an opening of an array of secret bits without owning shares of the underlying value.
   * Similar to jiff.receive_open() but for bits.
   * This works regardless of whether the represented value fit inside the corresponding field or not
   * @function receive_open_bits
   * @memberOf jiff-instance.protocols.bits
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {Array} senders - an array with party ids (1 to n) specifying the parties sending the shares
   * @param {Array} [receivers=all_parties] - an array with party ids (1 to n) specifying the parties receiving the result
   * @param {number} [count=ceil(log2(Zp))] - the number of bits being opened
   * @param {number} [threshold=parties.length] - the min number of parties needed to reconstruct the secret, defaults to all the senders
   * @param {number} [Zp=jiff_instance.Zp] - the mod (if null then the default Zp for the instance is used)
   * @param {string|number|object} [op_id=auto_gen()] - unique and consistent synchronization id between all parties
   * @returns {promise} a (JQuery) promise to the open value of the secret
   */
  receive_open_bits: function (jiff, senders, receivers, count, threshold, Zp, op_id) {
    if (senders == null) {
      throw new Error('Must provide "senders" parameter in receive_open');
    }
    jiff.helpers.sort_ids(senders);
    // Default values
    if (receivers == null) {
      receivers = [];
      for (i = 1; i <= jiff.party_count; i++) {
        receivers.push(i);
      }
    } else {
      jiff.helpers.sort_ids(receivers);
    }

    if (op_id == null) {
      op_id = jiff.counters.gen_op_id2('bits.open', receivers, senders);
    }

    if (count == null) {
      if (Zp == null) {
        Zp = jiff.Zp;
      }
      count = Zp.toString(2).length;
    }

    var opened_bits = [];
    for (var i = 0; i < count; i++) {
      opened_bits[i] = jiff.receive_open(senders, receivers, threshold, Zp, op_id + ':' + i);
    }

    return Promise.all(opened_bits).then(function (bits) {
      return jiff.helpers.bits_to_number(bits, bits.length);
    });
  }
};
},{}],29:[function(require,module,exports){
// Generic version of operations
module.exports = function (SecretShare) {
  /**
   * bitwise-XOR with a constant (BOTH BITS).
   * @method cxor_bit
   * @param {number} cst - the constant bit to XOR with (0 or 1).
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.cxor_bit = function (cst) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (^)');
    }
    if (!this.jiff.share_helpers['binary'](cst)) {
      throw new Error('parameter should be binary (^)');
    }

    return this.icadd(cst).issub(this.icmult(cst).icmult(2));
  };

  /**
   * bitwise-OR with a constant (BOTH BITS).
   * @method cor_bit
   * @param {number} cst - the constant bit to OR with (0 or 1).
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.cor_bit = function (cst) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (|)');
    }
    if (!this.jiff.share_helpers['binary'](cst)) {
      throw new Error('parameter should be binary (|)');
    }

    return this.icadd(cst).issub(this.icmult(cst));
  };

  /**
   * bitwise-XOR of two secret shares OF BITS.
   * @method sxor_bit
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the share to XOR with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this < o, and 0 otherwise.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.sxor_bit = function (o, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (^)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (^)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (^)');
    }
    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('sxor_bit', this.holders);
    }

    return this.isadd(o).issub(this.ismult(o, op_id + ':smult1').icmult(2));
  };

  /**
   * OR of two secret shares OF BITS.
   * @method sor_bit
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the share to OR with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this < o, and 0 otherwise.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.sor_bit = function (o, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (|)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (|)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (|)');
    }
    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('sor_bit', this.holders);
    }

    return this.isadd(o).issub(this.ismult(o, op_id + ':smult1'));
  };

  /**
   * Negation of a bit.
   * This has to be a share of a BIT in order for this to work properly.
   * @method not
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result (negated bit).
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.not = function () {
    return this.icmult(-1).icadd(1);
  };

  /**
   * Simulate an oblivious If-else statement with a single return value.
   * Should be called on a secret share of a bit: 0 representing false, and 1 representing true
   * If this is a share of 1, a new sharing of the element represented by the first parameter is returned,
   * otherwise, a new sharing of the second is returned.
   * @method if_else
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {module:jiff-client~JIFFClient#SecretShare | number} trueVal - the value/share to return if this is a sharing of 1.
   * @param {module:jiff-client~JIFFClient#SecretShare | number} falseVal - the value/share to return if this is a sharing of 0.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} a new sharing of the result of the if.
   *
   * @example
   * // a and b are secret shares
   * // cmp will be a secret share of either 1 or 0, depending on whether a or b is greater
   * var cmp = a.gt(b);
   *
   * // max is set to the greater value, without revealing the value or the result of the inequality
   * var max = cmp.if_else(a, b);
   */
  SecretShare.prototype.if_else = function (trueVal, falseVal, op_id) {
    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('if_else', this.holders);
    }

    var const1 = this.isConstant(trueVal);
    var const2 = this.isConstant(falseVal);
    if (const1 && const2) {
      return this.icmult(trueVal).isadd(this.inot().icmult(falseVal));
    } else if (const1) {
      return this.inot().ismult(falseVal.icsub(trueVal), op_id + ':smult').icadd(trueVal);
    } else if (const2) {
      return this.ismult(trueVal.icsub(falseVal), op_id + ':smult').icadd(falseVal);
    } else {
      return this.ismult(trueVal.issub(falseVal), op_id + ':smult').isadd(falseVal);
    }
  };
};
},{}],30:[function(require,module,exports){
// Generic version of operations
module.exports = function (SecretShare) {
  /**
   * Checks if the given parameter is a constant, used to determine whether constant or secret
   * operations should be executed when the generic version of an operation is called
   * @method isConstant
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {number/object} o - the parameter to determine.
   * @return {boolean} true if o is a valid constant, false otherwise.
   */
  SecretShare.prototype.isConstant = function (o) {
    return typeof(o) === 'number';
  };

  /**
   * Generic Addition.
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method add
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   *
   * @example
   * var shares = jiffClient.share(input);
   * // this will add two secret shared values together
   * var sum1 = shares[1].add(shares[2]);
   * // this will add 3 to the secret input from party 1
   * var sum2 = shares[1].add(3);
   * // both sum1 and sum2 are SecretShares
   */
  SecretShare.prototype.add = function (o) {
    if (this.isConstant(o)) {
      return this.cadd(o);
    }
    return this.sadd(o);
  };


  /**
   * Generic Subtraction.
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method sub
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.sub = function (o) {
    if (this.isConstant(o)) {
      return this.csub(o);
    }
    return this.ssub(o);
  };


  /**
   * Generic Multiplication.
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method mult
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this multiplication (and internally, the corresponding beaver triplet).
   *                         This id must be unique, and must be passed by all parties to the same instruction.
   *                         this ensures that every party gets a share from the same triplet for every matching instruction. An automatic id
   *                         is generated by increasing a local counter, default ids suffice when all parties execute the
   *                         instructions in the same order. Only used if secret multiplication is used.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.mult = function (o, op_id) {
    if (this.isConstant(o)) {
      return this.cmult(o);
    }
    return this.smult(o, op_id);
  };


  /**
   * Generic XOR for bits (both this and o have to be bits to work correctly).
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method xor_bit
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   *                         Only used if secret xor is used..
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.xor_bit = function (o, op_id) {
    if (this.isConstant(o)) {
      return this.cxor_bit(o);
    }
    return this.sxor_bit(o, op_id);
  };

  /**
   * Generic OR for bits (both this and o have to be bits to work correctly).
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method or_bit
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   *                         Only used if secret or is used..
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.or_bit = function (o, op_id) {
    if (this.isConstant(o)) {
      return this.cor_bit(o);
    }
    return this.sor_bit(o, op_id);
  };

  /**
   * Generic Greater or equal.
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method gteq
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.gteq = function (o, op_id) {
    if (this.isConstant(o)) {
      return this.cgteq(o, op_id);
    }
    return this.sgteq(o);
  };


  /**
   * Generic Greater than.
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method gt
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.gt = function (o, op_id) {
    if (this.isConstant(o)) {
      return this.cgt(o, op_id);
    }
    return this.sgt(o, op_id);
  };


  /**
   * Generic Less or equal.
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method lteq
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.lteq = function (o, op_id) {
    if (this.isConstant(o)) {
      return this.clteq(o, op_id);
    }
    return this.slteq(o, op_id);
  };


  /**
   * Generic Less than.
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method lt
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.lt = function (o, op_id) {
    if (this.isConstant(o)) {
      return this.clt(o, op_id);
    }
    return this.slt(o, op_id);
  };


  /**
   * Generic Equals.
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method eq
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.eq = function (o, op_id) {
    if (this.isConstant(o)) {
      return this.ceq(o, op_id);
    }
    return this.seq(o, op_id);
  };


  /**
   * Generic Not Equals.
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method neq
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.neq = function (o, op_id) {
    if (this.isConstant(o)) {
      return this.cneq(o, op_id);
    }
    return this.sneq(o, op_id);
  };


  /**
   * Generic Integer Divison.
   * Uses either the constant or secret version of this operator depending on type of paramter.
   * @method div
   * @param {number|module:jiff-client~JIFFClient#SecretShare} o - the other operand (can be either number or share).
   * @param {number} l - the maximum bit length of the two shares.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.div = function (o, l, op_id) {
    if (this.isConstant(o)) {
      return this.cdiv(o, l, op_id);
    }
    return this.sdiv(o, l, op_id);
  };
};
},{}],31:[function(require,module,exports){
// Arithmetic operations on shares
module.exports = function (SecretShare) {
  /**
   * Addition with a constant.
   * @method cadd
   * @param {number} cst - the constant to add.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.cadd = function (cst) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (+)');
    }

    var self = this;
    var ready = function () {
      return self.jiff.helpers.mod(self.jiff.share_helpers['+'](self.value, cst), self.Zp);
    };

    return new this.jiff.SecretShare(this.wThen(ready), this.holders, this.threshold, this.Zp);
  };

  /**
   * Subtraction with a constant.
   * @method csub
   * @param {number} cst - the constant to subtract from this share.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.csub = function (cst) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (-)');
    }

    var self = this;
    var ready = function () {
      return self.jiff.helpers.mod(self.jiff.share_helpers['-'](self.value, cst), self.Zp);
    };

    return new this.jiff.SecretShare(this.wThen(ready), this.holders, this.threshold, this.Zp);
  };

  /**
   * Multiplication by a constant.
   * @method cmult
   * @param {number} cst - the constant to multiply to this share.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.cmult = function (cst) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (*)');
    }

    var self = this;
    var ready = function () {
      return self.jiff.helpers.mod(self.jiff.share_helpers['*'](self.value, cst), self.Zp);
    };

    return new this.jiff.SecretShare(this.wThen(ready), this.holders, this.threshold, this.Zp);
  };

  /**
   * Division by a constant factor of the number represented by the share.
   * @method cdivfac
   * @param {number} cst - the constant by which to divide the share.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.cdivfac = function (cst) {
    if (!(this.isConstant(cst))) {
      throw new Error('Parameter should be a number (cdivfac)');
    }

    var inv = this.jiff.helpers.extended_gcd(cst, this.Zp)[0];

    var self = this;
    var ready = function () {
      return self.jiff.helpers.mod(self.jiff.share_helpers['*'](self.value, inv), self.Zp);
    };

    return new this.jiff.SecretShare(this.wThen(ready), this.holders, this.threshold, this.Zp);
  };

  /**
   * Addition of two secret shares.
   * @method sadd
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the share to add to this share.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   *
   * @example
   * // share a value with all parties, and sum the values of all shares
   * var shares = jiff_instance.share(x);
   * var sum = shares[1];
   * for (var i = 2; i <= jiff_instance.party_count; i++) {
   *  sum = sum.sadd(shares[i]);
   * }
   *
   */
  SecretShare.prototype.sadd = function (o) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (+)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (+)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (+)');
    }

    // add the two shares when ready locally
    var self = this;
    var ready = function () {
      return self.jiff.helpers.mod(self.jiff.share_helpers['+'](self.value, o.value), self.Zp);
    };

    // promise to execute ready_add when both are ready
    return new this.jiff.SecretShare(this.when_both_ready(o, ready), this.holders, Math.max(this.threshold, o.threshold), this.Zp);
  };

  /**
   * Subtraction of two secret shares.
   * @method ssub
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the share to subtract from this share.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.ssub = function (o) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (-)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (-)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (-)');
    }

    // subtract the two shares when ready locally
    var self = this;
    var ready = function () {
      return self.jiff.helpers.mod(self.jiff.share_helpers['-'](self.value, o.value), self.Zp);
    };

    // promise to execute ready_add when both are ready
    return new this.jiff.SecretShare(this.when_both_ready(o, ready), this.holders, Math.max(this.threshold, o.threshold), this.Zp);
  };

  /**
   * Multiplication of two secret shares through Beaver Triplets.
   * @method smult
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the share to multiply with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this multiplication (and internally, the corresponding beaver triplet).
   *                         This id must be unique, and must be passed by all parties to the same instruction.
   *                         this ensures that every party gets a share from the same triplet for every matching instruction. An automatic id
   *                         is generated by increasing a local counter, default ids suffice when all parties execute the
   *                         instructions in the same order.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.smult = function (o, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (*)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (*)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (*)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('smult', this.holders);
    }

    // final result
    var final_deferred = new this.jiff.helpers.Deferred();
    var final_promise = final_deferred.promise;
    var result = new this.jiff.SecretShare(final_promise, this.holders, Math.max(this.threshold, o.threshold), this.Zp);

    // called when triplet is ready
    var self = this;
    var ready_triplet = function (triplet) {
      var a = triplet[0];
      var b = triplet[1];
      var c = triplet[2];

      // d = s - a. e = o - b.
      var d = self.isadd(a.icmult(-1));
      var e = o.isadd(b.icmult(-1));

      // Open d and e.
      // The only communication cost.
      var e_promise = self.jiff.internal_open(e, e.holders, op_id + ':open1');
      var d_promise = self.jiff.internal_open(d, d.holders, op_id + ':open2');
      Promise.all([e_promise, d_promise]).then(function (arr) {
        var e_open = arr[0];
        var d_open = arr[1];

        // result_share = d_open * e_open + d_open * b_share + e_open * a_share + c.
        var t1 = self.jiff.helpers.mod(self.jiff.share_helpers['*'](d_open, e_open), self.Zp);
        var t2 = b.icmult(d_open);
        var t3 = a.icmult(e_open);

        // All this happens locally.
        var final_result = t2.icadd(t1);
        final_result = final_result.isadd(t3);
        final_result = final_result.isadd(c);

        final_result.wThen(final_deferred.resolve);
      });
    };

    // Get shares of triplets.
    var triplet = this.jiff.get_preprocessing(op_id + ':triplet');
    if (triplet == null) {
      var promise = this.jiff.from_crypto_provider('triplet', this.holders, Math.max(this.threshold, o.threshold), this.Zp, op_id + ':triplet');
      promise.then(function (msg) {
        ready_triplet(msg['shares']);
      });
    } else {
      ready_triplet(triplet);
    }

    return result;
  };

  /**
   * Multiplication of two secret shares through BGW protocol.
   * @method smult_bgw
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the share to multiply with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this multiplication (and internally, the corresponding beaver triplet).
   *                         This id must be unique, and must be passed by all parties to the same instruction.
   *                         this ensures that every party gets a share from the same triplet for every matching instruction. An automatic id
   *                         is generated by increasing a local counter, default ids suffice when all parties execute the
   *                         instructions in the same order.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.smult_bgw = function (o, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (bgw*)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (bgw*)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (bgw*)');
    }
    if ((this.threshold - 1) + (o.threshold - 1) > this.holders.length - 1) {
      throw new Error('threshold too high for BGW (*)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('smult_bgw', this.holders);
    }

    // ensure thresholds are fine
    var new_threshold = (this.threshold - 1) + (o.threshold - 1) + 1;
    if (new_threshold > this.holders) {
      var errorMsg = 'Threshold too large for smult_bgw: ' + new_threshold;
      errorMsg += '. Shares: ' + this.toString() + ', ' + o.toString();
      throw new Error(errorMsg);
    }

    // multiply via the BGW protocol
    var self = this;
    var ready = function () {
      return self.jiff.helpers.mod(self.jiff.share_helpers['*'](self.value, o.value), self.Zp);
    };

    // reshare to reduce threshold and return when ready
    var result = new this.jiff.SecretShare(this.when_both_ready(o, ready), this.holders, new_threshold, this.Zp);
    return this.jiff.reshare(result, Math.max(this.threshold, o.threshold), result.holders, result.holders, result.Zp, op_id + ':threshold');
  };

  /**
   * Integer divison with two shares (this / o)
   * @method sdiv
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the share to divide by.
   * @param {number} [l=ceil(log_2(this.Zp))] - the maximum bit length of either operands.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.sdiv = function (o, l, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (!=)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (!=)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (!=)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('sdiv', this.holders);
    }

    // figure out maximum output bit length
    var lZp = this.jiff.share_helpers['ceil'](this.jiff.helpers.bLog(this.Zp, 2));
    l = (l != null && l < lZp) ? l : lZp;

    // Convert to bits
    var dividend_bits = this.bit_decomposition(op_id + ':decomposition1').slice(0, l);
    var divisor_bits = o.bit_decomposition(op_id + ':decomposition2').slice(0, l);

    // Compute by long division
    var quotient_bits = this.jiff.protocols.bits.sdiv(dividend_bits, divisor_bits, op_id + ':bits.sdiv').quotient;

    // Convert to number and return
    return this.jiff.protocols.bits.bit_composition(quotient_bits);
  };

  /**
   * Integer divison with a share and a constant (this / cst).
   * @method cdiv
   * @param {module:jiff-client~JIFFClient#SecretShare} cst - the constant to divide by.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.cdiv = function (cst, op_id) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (/)');
    }

    if (this.jiff.share_helpers['<='](cst, 0)) {
      throw new Error('divisor must be > 0 (cst/): ' + cst);
    }

    if (this.jiff.share_helpers['<='](this.Zp, cst)) {
      throw new Error('divisor must be < share.Zp (' + this.Zp + ') in (cst/): ' + cst);
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('cdiv', this.holders);
    }

    // Allocate share for result to which the answer will be resolved once available
    var final_deferred = new this.jiff.helpers.Deferred();
    var final_promise = final_deferred.promise;
    var result = new this.jiff.SecretShare(final_promise, this.holders, this.threshold, this.Zp);

    // Execute protocol when random in noise in [0, Zp) and quotient floor(noise/constant) is ready!
    var self = this;
    var ready_quotient = function (noise, nOVERc) {
      // Use noise
      var noisyX = self.isadd(noise);
      self.jiff.internal_open(noisyX, noisyX.holders, op_id + ':open').then(function (noisyX) {
        var wrapped = self.icgt(noisyX, op_id + ':wrap_cgt'); // 1 => x + noise wrapped around Zp, 0 otherwise

        // if we did not wrap
        var noWrapDiv = self.jiff.share_helpers['floor/'](noisyX, cst);
        var unCorrectedQuotient = nOVERc.icmult(-1).icadd(noWrapDiv).icsub(1);
        var verify = self.issub(unCorrectedQuotient.icmult(cst));
        var isNotCorrect = verify.icgteq(cst, op_id + ':cor1');
        var noWrapAnswer = unCorrectedQuotient.isadd(isNotCorrect); // if incorrect => isNotCorrect = 1 => quotient = unCorrectedQuotient - 1

        // if we wrapped
        var wrapDiv = self.jiff.share_helpers['floor/'](self.jiff.share_helpers['+'](noisyX, self.Zp), cst);
        unCorrectedQuotient = nOVERc.icmult(-1).icadd(wrapDiv).icsub(1);
        verify = self.issub(unCorrectedQuotient.icmult(cst));
        isNotCorrect = verify.icgteq(cst, op_id + ':cor2');
        var wrapAnswer = unCorrectedQuotient.isadd(isNotCorrect); // if incorrect => isNotCorrect = 1 => quotient = unCorrectedQuotient - 1

        var answer = noWrapAnswer.isadd(wrapped.ismult(wrapAnswer.issub(noWrapAnswer), op_id + ':smult'));
        answer.wThen(final_deferred.resolve);
      });
    };

    // Preprocessing cases
    var quotient = this.jiff.get_preprocessing(op_id + ':quotient');
    if (quotient == null) { // case 1: no preprocessing with crypto provider!
      var promise = this.jiff.from_crypto_provider('quotient', this.holders, this.threshold, this.Zp, op_id + ':quotient', {constant: cst});
      promise.then(function (msg) {
        ready_quotient(msg['shares'][0], msg['shares'][1]);
      });
    } else if (quotient.ondemand === true) { // case 2: constant was not available at preprocessing time, must do it now!
      this.jiff.preprocessing('quotient', 1, null, this.threshold, this.holders, this.holders, this.Zp, [op_id + ':quotient'], {constant: cst, namespace: 'base'});
      this.jiff.executePreprocessing(function () {
        var quotient = self.jiff.get_preprocessing(op_id + ':quotient');
        ready_quotient(quotient.r, quotient.q);
      });
    } else { // case 3: preprocessing is completed!
      ready_quotient(quotient.r, quotient.q);
    }

    // special case, if result is zero, sometimes we will get to -1 due to how correction happens above (.csub(1) and then compare)
    var zeroIt = this.iclt(cst, op_id + ':zero_check').inot();
    return result.ismult(zeroIt, op_id + ':zero_it');
  };

  /**
   * Remainder with two shares (this % o)
   * @method smod
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the modulus to apply
   * @param {number} [l=ceil(log_2(this.Zp))] - the maximum bit length of either operands.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.smod = function (o, l, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (!=)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (!=)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (!=)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('smod', this.holders);
    }

    // figure out maximum output bit length
    var lZp = this.jiff.share_helpers['ceil'](this.jiff.helpers.bLog(this.Zp, 2));
    l = (l != null && l < lZp) ? l : lZp;

    // Convert to bits
    var dividend_bits = this.bit_decomposition(op_id + ':decomposition1').slice(0, l);
    var divisor_bits = o.bit_decomposition(op_id + ':decomposition2').slice(0, l);

    // Compute by long division
    var remainder_bits = this.jiff.protocols.bits.sdiv(dividend_bits, divisor_bits, op_id + ':bits.sdiv').remainder;

    // Convert to number and return
    return this.jiff.protocols.bits.bit_composition(remainder_bits);
  };

  /**
   * Fast (modular) exponentiation with constant exponent via repeated squaring.
   * @method cpow
   * @param {number} cst - the constant to multiply to this share.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.cpow = function (cst, op_id) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (*)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('cpow', this.holders);
    }

    // handle big numbers
    var one = 1;
    if (this.jiff.has_extension('bignumber')) {
      one = this.jiff.helpers.BigNumber(1);
      cst = this.jiff.helpers.BigNumber(cst);
    }

    // ensure exponent is non-negative
    if (this.jiff.share_helpers['<'](cst, 0)) {
      throw new Error('cpow supports non-negative exponents only, given ' + cst.toString());
    }

    // begin protocol
    var evens = this;
    var odds = new this.jiff.SecretShare(one, this.holders, this.threshold, this.Zp);

    // special case
    if (cst.toString() === '0') {
      return odds;
    }

    for (var i = 0; this.jiff.share_helpers['<'](1, cst); i++) {
      if (this.jiff.share_helpers['even'](cst)) {
        evens = evens.ismult(evens, op_id + ':smult0:'+i);
        cst = this.jiff.share_helpers['/'](cst, 2);
      } else {
        odds = evens.ismult(odds, op_id + ':smult0:'+i);
        evens = evens.ismult(evens, op_id + ':smult1:'+i);
        cst = this.jiff.share_helpers['/'](this.jiff.share_helpers['-'](cst, 1), 2);
      }
    }

    return evens.ismult(odds, op_id + ':smult0:' + i);
  };
};
},{}],32:[function(require,module,exports){
// Comparison operations on shares
module.exports = function (SecretShare) {
  /**
   * Greater than or equal with another share.
   * @method sgteq
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the other share.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this >= o, and 0 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.sgteq = function (o, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (>=)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (>=)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (>=)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('sgteq', this.holders);
    }

    return this.islt(o, op_id).inot();
  };

  /**
   * Greater than with another share.
   * @method sgt
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the other share.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this > o, and 0 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.sgt = function (o, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (>)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (>)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (>)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('sgt', this.holders);
    }

    return o.islt(this, op_id);
  };

  /**
   * Less than or equal with another share.
   * @method slteq
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the other share.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this <= o, and 0 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.slteq = function (o, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (<=)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (<=)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (<=)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('slteq', this.holders);
    }

    return o.islt(this, op_id).inot();
  };

  /**
   * Less than with another share.
   * @method slt
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the other share.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this < o, and 0 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.slt = function (o, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (<)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (<)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (<)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('slt', this.holders);
    }

    var final_deferred = new this.jiff.helpers.Deferred();
    var final_promise = final_deferred.promise;
    var result = new this.jiff.SecretShare(final_promise, this.holders, Math.max(this.threshold, o.threshold), this.Zp);

    var w = this.ilt_halfprime(op_id + ':halfprime:1');

    var self = this;
    w.wThen(function () {
      var x = o.ilt_halfprime(op_id + ':halfprime:2');
      x.wThen(function () {
        var y = self.issub(o).ilt_halfprime(op_id + ':halfprime:3');
        y.wThen(function () {
          var xy = x.ismult(y, op_id + ':smult1');
          var answer = x.icmult(-1).icadd(1).issub(y).isadd(xy).isadd(w.ismult(x.isadd(y).issub(xy.icmult(2)), op_id + ':smult2'));
          answer.wThen(final_deferred.resolve);
        });
      });
    });

    return result;
  };

  /**
   * Greater than or equal with a constant.
   * @method cgteqn
   * @param {number} cst - the constant to compare with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this >= cst, and 0 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.cgteq = function (cst, op_id) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (>=)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('cgteq', this.holders);
    }

    return this.iclt(cst, op_id).inot();
  };

  /**
   * Greater than with a constant.
   * @method cgt
   * @param {number} cst - the constant to compare with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.default ids suffice when all parties execute the
   *                         instructions in the same order.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this > cst, and 0 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.cgt = function (cst, op_id) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (>)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('cgt', this.holders);
    }

    var final_deferred = new this.jiff.helpers.Deferred();
    var final_promise = final_deferred.promise;
    var result = new this.jiff.SecretShare(final_promise, this.holders, this.threshold, this.Zp);

    var w = this.jiff.share_helpers['<'](cst, this.jiff.share_helpers['/'](this.Zp, 2)) ? 1 : 0;
    var x = this.ilt_halfprime(op_id + ':halfprime:1');

    var self = this;
    x.wThen(function () {
      var y = self.icmult(-1).icadd(cst).ilt_halfprime(op_id + ':halfprime:2');
      y.wThen(function () {
        var xy = y.ismult(x, op_id + ':smult1');
        var answer = x.icmult(-1).icadd(1).issub(y).isadd(xy).isadd(x.isadd(y).issub(xy.icmult(2)).icmult(w));
        answer.wThen(final_deferred.resolve);
      });
    });

    return result;
  };

  /**
   * Less than or equal with a constant.
   * @method clteq
   * @param {number} cst - the constant to compare with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this <= cst, and 0 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.clteq = function (cst, op_id) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (<=)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('clteq', this.holders);
    }

    return this.icgt(cst, op_id).inot();
  };

  /**
   * Less than with a constant.
   * @method clt
   * @param {number} cst - the constant to compare with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this < cst, and 0 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.clt = function (cst, op_id) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (<)');
    }

    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('clt', this.holders);
    }

    var final_deferred = new this.jiff.helpers.Deferred();
    var final_promise = final_deferred.promise;
    var result = new this.jiff.SecretShare(final_promise, this.holders, this.threshold, this.Zp);

    var w = this.ilt_halfprime(op_id + ':halfprime:1');

    var self = this;
    w.wThen(function () {
      var x = self.jiff.share_helpers['<'](cst, self.jiff.share_helpers['/'](self.Zp, 2)) ? 1 : 0;
      var y = self.icsub(cst).ilt_halfprime(op_id + ':halfprime:2');
      y.wThen(function () {
        var xy = y.icmult(x);
        var answer = y.icmult(-1).icadd(1 - x).isadd(xy).isadd(w.ismult(y.icadd(x).issub(xy.icmult(2)), op_id + ':smult1'));
        answer.wThen(final_deferred.resolve);
      });
    });

    return result;
  };

  /**
   * Equality test with two shares.
   * @method seq
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the share to compare with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 1 if this = o, and 0 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.seq = function (o, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (==)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (==)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (==)');
    }
    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('seq', this.holders);
    }

    return this.isneq(o, op_id).inot();
  };

  /**
   * Unequality test with two shares.
   * @method sneq
   * @param {module:jiff-client~JIFFClient#SecretShare} o - the share to compare with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 0 if this = o, and 1 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.sneq = function (o, op_id) {
    if (!(o.jiff === this.jiff)) {
      throw new Error('shares do not belong to the same instance (!=)');
    }
    if (!this.jiff.helpers.Zp_equals(this, o)) {
      throw new Error('shares must belong to the same field (!=)');
    }
    if (!this.jiff.helpers.array_equals(this.holders, o.holders)) {
      throw new Error('shares must be held by the same parties (!=)');
    }
    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('sneq', this.holders);
    }

    return this.issub(o).icpow(this.jiff.share_helpers['-'](this.Zp, 1), op_id + ':cpow');
  };

  /**
   * Equality test with a constant.
   * @method ceq
   * @param {number} cst - the constant to compare with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 0 if this = o, and 1 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.ceq = function (cst, op_id) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (==)');
    }
    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('ceq', this.holders);
    }

    return this.icneq(cst, op_id).inot();
  };

  /**
   * Unequality test with a constant.
   * @method cneq
   * @param {number} cst - the constant to compare with.
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result, the final result is 0 if this = o, and 1 otherwise.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.cneq = function (cst, op_id) {
    if (!(this.isConstant(cst))) {
      throw new Error('parameter should be a number (!=)');
    }
    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('cneq', this.holders);
    }

    return this.icsub(cst).icpow(this.jiff.share_helpers['-'](this.Zp, 1), op_id + ':cpow');
  };

  /**
   * Checks whether the share is less than half the field size.
   * @method lt_halfprime
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @return {module:jiff-client~JIFFClient#SecretShare} this party's share of the result.
   */
  SecretShare.prototype.lt_halfprime = function (op_id) {
    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('lt_halfprime', this.holders);
    }

    // if share is even, then this is less than half the prime, otherwise, share is greater than half the prime
    var share = this.icmult(2);

    // to check if share is even, we will use pre-shared bits as some form of a bit mask
    var bitLength = this.jiff.share_helpers['ceil'](this.jiff.helpers.bLog(share.Zp, 2));

    // Create result share
    var final_deferred = new this.jiff.helpers.Deferred();
    var final_promise = final_deferred.promise;
    var result = new this.jiff.SecretShare(final_promise, this.holders, this.threshold, this.Zp);

    // Execute protocol when randomly sampled bit-wise random number is ready
    var self = this;
    var ready_sampling = function (bits) {
      // if 2*this is even, then this is less than half prime, otherwise this is greater or equal to half prime
      if (bits.length !== bitLength) {
        throw new Error('Preprocessed bits sequence has incorrect length, expected: ' + bitLength + ' actual: ' + bits.length);
      }

      // bit composition: r = (rl ... r1 r0)_10
      var r = self.jiff.protocols.bits.bit_composition(bits);
      // open share + noise, and utilize opened value with shared bit representation of noise to check the least significant digit of share.
      share.jiff.internal_open(r.isadd(share), share.holders, op_id + ':open').then(function (result) {
        var wrapped = self.jiff.protocols.bits.cgt(bits, result, op_id + ':bits.cgt');
        var isOdd = self.jiff.helpers.mod(result, 2);
        isOdd = bits[0].icxor_bit(isOdd);
        isOdd = isOdd.isxor_bit(wrapped, op_id + ':sxor_bit');

        var answer = isOdd.inot();
        answer.wThen(final_deferred.resolve);
      });
    };

    // generate the bits of a random number less than our prime
    var bits = this.jiff.get_preprocessing(op_id + ':sampling');
    if (bits == null) {
      var promise = this.jiff.from_crypto_provider('numbers', this.holders, this.threshold, this.Zp, op_id + ':sampling', {
        bitLength: bitLength,
        count: 1,
        max: this.Zp
      });
      promise.then(function (msg) {
        ready_sampling(msg['shares']);
      });
    } else {
      ready_sampling(bits);
    }

    return result;
  };
};
},{}],33:[function(require,module,exports){
// general arithmetic protocols
module.exports = function (SecretShare) {
  /**
   * Reshares/refreshes the sharing of this number, used before opening to keep the share secret.
   * @method refresh
   * @param {string} [op_id=auto_gen()] - the operation id with which to tag the messages sent by this refresh, by default
   *                         an automatic operation id is generated by increasing a local counter, default operation ids
   *                         suffice when all parties execute the instructions in the same order.
   * @returns {module:jiff-client~JIFFClient#SecretShare} a new share of the same number.
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.refresh = function (op_id) {
    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('refresh', this.holders);
    }

    // final result
    var final_deferred = new this.jiff.helpers.Deferred();
    var final_promise = final_deferred.promise;
    var result = new this.jiff.SecretShare(final_promise, this.holders, this.threshold, this.Zp);

    // refresh
    var self = this;
    var ready_number = function (zero) {
      self.isadd(zero).wThen(final_deferred.resolve);
    };

    // get shares of zero
    var zero = this.jiff.get_preprocessing(op_id);
    if (zero == null) {
      var promise = this.jiff.from_crypto_provider('numbers', this.holders, this.threshold, this.Zp, op_id, {
        number: 0,
        count: 1
      });
      promise.then(function (msg) {
        ready_number(msg['shares'][0]);
      });
    } else {
      ready_number(zero);
    }

    return result;
  };

  /**
   * Bit Decomposition: Transform existing share to an array of bit shares.
   * @method bit_decomposition
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
   *                         This id must be unique, and must be passed by all parties to the same instruction, to
   *                         ensure that corresponding instructions across different parties are matched correctly.
   * @returns {module:jiff-client~JIFFClient#SecretShare[]} an array of secret shares of bits of length [ceil(log_2(this.Zp))], where
   *   index 0 represents the least significant bit.
   */
  SecretShare.prototype.bit_decomposition = function (op_id) {
    if (op_id == null) {
      op_id = this.jiff.counters.gen_op_id('bit_decomposition', this.holders);
    }

    // bit length of this secret
    var bitLength = this.jiff.share_helpers['ceil'](this.jiff.helpers.bLog(this.Zp, 2));

    // Create deferred shares to resolve to later when the computation completes
    var many_shares = this.jiff.utils.many_secret_shares(bitLength, this.holders, this.threshold, this.Zp);
    var deferreds = many_shares.deferreds;
    var result = many_shares.shares;

    // Execute protocol when randomly sampled bit-wise random number is ready
    var self = this;
    var ready_sampling = function (bits) {
      var r = self.jiff.protocols.bits.bit_composition(bits);
      // add and reveal random number to this
      self.jiff.internal_open(r.isadd(self), self.holders, op_id + ':open').then(function (result) {
        // compute bits assuming r+this < Zp
        var noWrap = self.jiff.protocols.bits.csubr(result, bits, op_id + ':bits.csubr:1');
        var didWrap = noWrap.pop();

        // compute bits assuming r+this >= Zp
        var withWrap = self.jiff.protocols.bits.csubr(self.jiff.share_helpers['+'](result, self.Zp), bits, op_id + ':bits.csubr:2');
        withWrap.pop(); // withWrap cannot underflow!

        // choose noWrap if first subtraction does not overflow (sign bit is zero), otherwise choose withWrap.
        for (var i = 0; i < bitLength; i++) {
          withWrap[i] = didWrap.iif_else(withWrap[i], noWrap[i], op_id + ':if_else:' + i);
        }
        self.jiff.utils.resolve_many_secrets(deferreds, withWrap);
      });
    };

    // generate the bits of a random number less than our prime
    var bits = this.jiff.get_preprocessing(op_id + ':sampling');
    if (bits == null) {
      var promise = this.jiff.from_crypto_provider('numbers', this.holders, this.threshold, this.Zp, op_id + ':sampling', {
        bitLength: bitLength,
        count: 1,
        max: this.Zp
      });
      promise.then(function (msg) {
        ready_sampling(msg['shares']);
      });
    } else {
      ready_sampling(bits);
    }

    return result;
  };
};
},{}],34:[function(require,module,exports){
module.exports = {
  /**
   * Generates a random bit under MPC by xoring all bits sent by participating parties using smult / beaver triples
   * @function generate_random_bit_bgw
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed
   * @param {Array} receivers_list - array of party ids to receive the result
   * @param {Array} compute_list - array of party ids to perform the protocol
   * @param {number} Zp - the mod
   * @param {object} params - an object containing extra parameters passed by the user
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   * @return {Object} contains 'share' (this party's share of the generated bit) and 'promise'
   */
  generate_random_bit_smult: function (jiff, threshold, receivers_list, compute_list, Zp, params) {
    if (params.compute_threshold == null) {
      params.compute_threshold = threshold;
    }

    if (params.op_id == null && params.output_op_id == null) {
      params.op_id = jiff.counters.gen_op_id2('generate_random_bit_smult', receivers_list, compute_list);
    } else if (params.op_id == null) {
      params.op_id = 'preprocessing:' + params.output_op_id + ':' + compute_list.join(',');
    }
    var op_id = params.op_id;

    // Generate random bit
    var random_bit, promise;
    if (compute_list.indexOf(jiff.id) > -1) {
      var bit = jiff.helpers.random(2);
      var bit_shares = jiff.internal_share(bit, params.compute_threshold, compute_list, compute_list, Zp, op_id + ':share');

      random_bit = bit_shares[compute_list[0]];
      for (var i = 1; i < compute_list.length; i++) {
        var party_id = compute_list[i];
        var obit = bit_shares[party_id];
        random_bit = random_bit.isxor_bit(obit,  op_id + ':sxor_bit:' + i);
      }

      promise = random_bit.value;
    }

    // Reshare
    random_bit = jiff.reshare(random_bit, threshold, receivers_list, compute_list, Zp, op_id + ':reshare');
    if (receivers_list.indexOf(jiff.id) > -1) {
      promise = random_bit.value;
    }
    return {share: random_bit, promise: promise};
  },
  /**
   * Generates a random bit under MPC by xoring all bits sent by participating parties using smult_bgw
   * @function generate_random_bit_bgw
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed
   * @param {Array} receivers_list - array of party ids to receive the result
   * @param {Array} compute_list - array of party ids to perform the protocol
   * @param {number} Zp - the mod
   * @param {object} params - an object containing extra parameters passed by the user
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   * @return {Object} contains 'share' (this party's share of the generated bit) and 'promise'
   */
  generate_random_bit_bgw: function (jiff, threshold, receivers_list, compute_list, Zp, params) {
    if (params.compute_threshold == null) {
      params.compute_threshold = Math.floor((compute_list.length + 1) / 2); // honest majority BGW
    }

    if (params.op_id == null && params.output_op_id == null) {
      params.op_id = jiff.counters.gen_op_id2('generate_random_bit_bgw', receivers_list, compute_list);
    } else if (params.op_id == null) {
      params.op_id = 'preprocessing:' + params.output_op_id + ':' + compute_list.join(',');
    }

    var op_id = params.op_id;

    // Generate random bit
    var random_bit, promise;
    if (compute_list.indexOf(jiff.id) > -1) {
      var bit = jiff.helpers.random(2);
      var bit_shares = jiff.internal_share(bit, params.compute_threshold, compute_list, compute_list, Zp, op_id + ':share');

      random_bit = bit_shares[compute_list[0]];
      for (var i = 1; i < compute_list.length; i++) {
        var party_id = compute_list[i];
        var obit = bit_shares[party_id];
        random_bit = random_bit.isadd(obit).issub(random_bit.ismult_bgw(obit, op_id + ':smult' + i).icmult(2));
      }

      promise = random_bit.value;
    }

    // Reshare
    random_bit = jiff.reshare(random_bit, threshold, receivers_list, compute_list, Zp, op_id + ':reshare');
    if (receivers_list.indexOf(jiff.id) > -1) {
      promise = random_bit.value;
    }
    return {share: random_bit, promise: promise};
  },
  /**
   * Generates a sequence of random bits under MPC
   * @function generate_random_bits
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {number} [threshold=receivers_list.length] - the threshold of the bit when stored by receivers after generation
   * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed
   * @param {Array} receivers_list - array of party ids to receive the result
   * @param {Array} compute_list - array of party ids to perform the protocol
   * @param {number} Zp - the mod
   * @param {object} params - an object containing extra parameters passed by the user
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated
   *                               - count: how many random bits to generate
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   * @param {object} protocols - the protocols to use for preprocessing
   * @return {Object} contains 'share' (array of secret shares bits) and 'promise'
   */
  generate_random_bits: function (jiff, threshold, receivers_list, compute_list, Zp, params, protocols) {
    if (params.count == null) {
      params.count = 1;
    }

    if (params.op_id == null && params.output_op_id == null) {
      params.op_id = jiff.counters.gen_op_id2('generate_random_bits', receivers_list, compute_list);
    } else if (params.op_id == null) {
      params.op_id = 'preprocessing:' + params.output_op_id + ':' + compute_list.join(',');
    }

    var op_id = params.op_id;
    var _params = params;

    var promises = [];
    var bits = [];
    for (var i = 0; i < params.count; i++) {
      params = Object.assign({}, _params);
      params.op_id = op_id + ':' + i;

      var bit = protocols.generate_random_bit(threshold, receivers_list, compute_list, Zp, params, protocols);

      promises.push(bit.value);
      if (bit.share != null) {
        bits.push(bit.share);
      }
    }

    if (bits.length === 0) {
      bits = null;
    }
    return {share: bits, promise: Promise.all(promises)};
  }
};
},{}],35:[function(require,module,exports){
/**
 * Can be used to generate shares of a random number, or shares of zero.
 * For a random number, every party generates a local random number and secret share it,
 * then every party sums its share, resulting in a single share of an unknown random number for every party.
 * The same approach is followed for zero, but instead, all the parties know that the total number is zero, but they
 * do not know the value of any resulting share (except their own)
 * @function jiff_share_all_number
 * @ignore
 * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
 * @param {number} n - the number to share
 * @param {number} [threshold=receivers_list.length] - the min number of parties needed to reconstruct the secret, defaults to all the receivers
 * @param {Array} [receivers_list=all_parties] - array of party ids to receive the result, by default, this includes all parties
 * @param {Array} [compute_list=all_parties] - array of party ids to perform the protocol, by default, this includes all parties
 * @param {number} [Zp=jiff.Zp] - the mod
 * @param {object} [params={}] - an object containing extra parameters passed by the user
 *                                 Expects:
 *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated
 *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
 * @return {Object} contains 'share' (this party's share of the result) and 'promise'
 */
var jiff_share_all_number = function (jiff, n, threshold, receivers_list, compute_list, Zp, params) {
  var isSender = compute_list.indexOf(jiff.id) > -1;
  var isReceiver = receivers_list.indexOf(jiff.id) > -1;

  if (!isSender && !isReceiver) {
    return {};
  }

  if (params.compute_threshold == null) {
    params.compute_threshold = Math.min(threshold, compute_list.length);
  }

  var result, promise;
  if (isSender) {
    var shares = jiff.internal_share(n, params.compute_threshold, compute_list, compute_list, Zp, params.op_id + ':share');
    result = shares[compute_list[0]];
    for (var i = 1; i < compute_list.length; i++) {
      result = result.isadd(shares[compute_list[i]]);
    }
    promise = result.value;
  }

  result = jiff.reshare(result, threshold, receivers_list, compute_list, Zp, params.op_id + ':reshare');
  if (receivers_list.indexOf(jiff.id) > -1) {
    promise = result.value;
  }

  return {share: result, promise: promise};
};

module.exports = {
  /**
   * Creates shares of an unknown random number. Every party comes up with its own random number and shares it.
   * Then every party combines all the received shares to construct one share of the random unknown number
   * @function generate_random_number
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed
   * @param {Array} receivers_list - array of party ids to receive the result
   * @param {Array} compute_list - array of party ids to perform the protocol
   * @param {number} Zp - the mod
   * @param {object} params - an object containing extra parameters passed by the user
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   * @return {Object} contains 'share' (this party's share of the result) and 'promise'
   */
  generate_random_number: function (jiff, threshold, receivers_list, compute_list, Zp, params) {
    if (params.op_id == null && params.output_op_id == null) {
      params.op_id = jiff.counters.gen_op_id2('generate_random_number', receivers_list, compute_list);
    } else if (params.op_id == null) {
      params.op_id = 'preprocessing:' + params.output_op_id + ':' + compute_list.join(',');
    }
    return jiff_share_all_number(jiff, jiff.helpers.random(Zp), threshold, receivers_list, compute_list, Zp, params);
  },
  /**
   * Creates shares of 0, such that no party knows the other parties' shares.
   * Every party secret shares 0, then every party sums all the shares they received, resulting
   * in a new share of 0 for every party
   * @function generate_zero
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff instance
   * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed
   * @param {Array} receivers_list - array of party ids to receive the result
   * @param {Array} compute_list - array of party ids to perform the protocol
   * @param {number} Zp - the mod
   * @param {object} params - an object containing extra parameters passed by the user
   *                                 Expects:
   *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated
   *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
   * @return {Object} contains 'share' (this party's share of the result) and 'promise'
   */
  generate_zero: function (jiff, threshold, receivers_list, compute_list, Zp, params) {
    if (params.op_id == null && params.output_op_id == null) {
      params.op_id = jiff.counters.gen_op_id2('generate_zero', receivers_list, compute_list);
    } else if (params.op_id == null) {
      params.op_id = 'preprocessing:' + params.output_op_id + ':' + compute_list.join(',');
    }
    return jiff_share_all_number(jiff, 0, threshold, receivers_list, compute_list, Zp, params);
  }
};
},{}],36:[function(require,module,exports){
/**
 * Creates shares of r and x, such that r is a uniform random number between 0 and Zp, and x is floor(r/constant)
 * where constant is provided by the extra params
 * @function generate_random_and_quotient
 * @ignore
 * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
 * @param {number} threshold - the min number of parties needed to reconstruct the secret after it is computed
 * @param {Array} receivers_list - array of party ids to receive the result
 * @param {Array} compute_list - array of party ids to perform the protocol
 * @param {number} Zp - the mod
 * @param {object} params - an object containing extra parameters passed by the user
 *                                 Expects:
 *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated
 *                               - compute_threshold: the threshold to use during computation: defaults to compute_list.length
 *                               - constant: the constant to divide the random number by.
 *                               - output_op_id: the set op id of the output quotient and noise
 * @return {Object} contains 'share' (this party's share of the result) and 'promise'
 */
module.exports = function (jiff, threshold, receivers_list, compute_list, Zp, params, protocols) {
  // consistent and unique op_id for compute and receiver parties
  if (params.op_id == null && params.output_op_id == null) {
    params.op_id = jiff.counters.gen_op_id2('generate_random_and_quotient', receivers_list, compute_list);
  } else if (params.op_id == null) {
    params.op_id = 'preprocessing:' + params.output_op_id + ':' + compute_list.join(',');
  }

  if (params.compute_threshold == null) {
    params.compute_threshold = Math.floor((compute_list.length + 1) / 2); // honest majority BGW
  }

  var constant = params.constant;
  var op_id = params.op_id;
  Zp = Zp ? jiff.Zp : Zp;

  // stores the result
  var r, q;

  // for compute parties
  var promise;
  if (compute_list.indexOf(jiff.id) > -1) {
    var largestQuotient = jiff.share_helpers['floor'](jiff.share_helpers['/'](Zp, constant));
    var largestMultiple = jiff.share_helpers['*'](largestQuotient, constant);

    // Uniform random number between [0, Zp)
    var r_bits = jiff.protocols.bits.rejection_sampling(0, Zp, params.compute_threshold, compute_list, Zp, params.output_op_id + ':rejection1');
    var cmp = jiff.protocols.bits.cgteq(r_bits, largestMultiple, params.output_op_id + ':bits_cgteq');
    var r1 = jiff.protocols.bits.bit_composition(r_bits);

    // Uniform random number between [0, Math.floor(Zp / constant))
    var quotient = jiff.protocols.bits.rejection_sampling(0, largestQuotient, params.compute_threshold, compute_list, Zp, params.output_op_id + ':rejection2');
    quotient = jiff.protocols.bits.bit_composition(quotient);

    // Uniform random number between [0, constant)
    var remainder = jiff.protocols.bits.rejection_sampling(0, constant, params.compute_threshold, compute_list, Zp, params.output_op_id + ':rejection3');
    remainder = jiff.protocols.bits.bit_composition(remainder);
    var r2 = quotient.icmult(constant).isadd(remainder);

    // choose either (r1, largestQuotient) or (r2, quotient) based on cmp result
    r = cmp.iif_else(r1, r2, params.output_op_id + ':ifelse1');
    q = cmp.iif_else(largestQuotient, quotient, params.output_op_id + ':ifelse2');
    promise = Promise.all([r.value, q.value]);
  }

  // reshare the result with the designated receivers
  r = jiff.reshare(r, threshold, receivers_list, compute_list, Zp, op_id + ':reshare1');
  q = jiff.reshare(q, threshold, receivers_list, compute_list, Zp, op_id + ':reshare2');

  // return result
  if (receivers_list.indexOf(jiff.id) > -1) {
    promise = Promise.all([r.value, q.value]);
  }
  return {share: {r: r, q: q}, promise: promise};
};
},{}],37:[function(require,module,exports){
var sample = function (jiff, range, compute_list, Zp, params, protocols, reject_count) {
  // Transform sampling range into bit size
  var bitLength = jiff.helpers.ceil(jiff.helpers.bLog(range, 2));
  bitLength = parseInt(bitLength.toString(), 10);

  var paramsCopy = Object.assign({}, params);
  paramsCopy['count'] = bitLength;
  paramsCopy['op_id'] = params.op_id + ':sampling:' + reject_count;
  return protocols.generate_random_bits(params.compute_threshold, compute_list, compute_list, Zp, paramsCopy, protocols).share;
};

var one_round_sampling = function (jiff, lower_bound, upper_bound, compute_list, Zp, params, protocols, finalLength, reject_count) {
  // Figure out sampling range
  var range;
  if (upper_bound.isBigNumber === true) {
    range = upper_bound.minus(lower_bound);
  } else {
    range = upper_bound - lower_bound;
  }

  // Special cases
  if (range.toString() === '0') {
    throw new Error('rejection sampling called with range 0, no numbers to sample!');
  }
  if (range.toString() === '1') {
    var zero = protocols.generate_zero(params.compute_threshold, compute_list, compute_list, Zp, params, protocols).share;
    // special case: cadd can be performed locally on bit arrays of length 1!
    var resultOne = jiff.protocols.bits.cadd([zero], lower_bound);
    while (resultOne.length > finalLength) {
      resultOne.pop();
    }
    return {share: resultOne, promise: true};
  }

  // Rejection protocol
  var bits = sample(jiff, range, compute_list, Zp, params, protocols, reject_count);
  var cmp = jiff.protocols.bits.clt(bits, range, params.output_op_id + ':bits.clt:' + reject_count);
  var bits_add = jiff.protocols.bits.cadd(bits, lower_bound, params.output_op_id + ':bits.cadd:' + reject_count);

  if (cmp === true) {
    return {share: bits_add, promise: true};
  } else if (cmp === false) { // need to resample
    return {share: bits_add, promise: false};
  }

  var promise = jiff.internal_open(cmp, compute_list, params.output_op_id + ':open:' + reject_count);
  return {share: bits_add, promise: promise.then(
    function (cmp) {
      return cmp.toString() === '1';
    }
  )};
};

var computeParty = function (jiff, lower_bound, upper_bound, threshold, receivers_list, compute_list, Zp, params, protocols, op_id, finalLength, reject_count) {
  var result = one_round_sampling(jiff, lower_bound, upper_bound, compute_list, Zp, params, protocols, finalLength, reject_count);

  // Case 1: we know whether sampling succeeded or not
  if (result.promise === true) {
    return reshareResult(jiff, upper_bound, threshold, receivers_list, compute_list, Zp, op_id, finalLength, result.share);
  }
  if (result.promise === false) {
    return {share: 'RETRY', promise: jiff.utils.all_promises(result.share)};
  }

  // Case 2: we only have a promise to whether the sampling succeeded or not
  var many_shares = jiff.utils.many_secret_shares(finalLength, compute_list, threshold, Zp);
  var final_deferreds = many_shares.deferreds;

  result.promise.then(function (promiseVal) {
    // RETRY and PLACEHOLDER shares are cleaned up later in the preprocessing pipeline
    if (promiseVal === false) {
      for (var i = 0; i < final_deferreds.length; i++) {
        final_deferreds[i].resolve('RETRY');
      }
      return;
    }

    // Need to make sure party only executes the reshare operation if sampling succeeds
    var reshared = reshareResult(jiff, upper_bound, threshold, receivers_list, compute_list, Zp, op_id, finalLength, result.share);

    if (receivers_list.indexOf(jiff.id) > -1) {
      jiff.utils.resolve_many_secrets(final_deferreds, reshared.share);
    } else {
      for (i = 0; i < final_deferreds.length; i++) {
        final_deferreds[i].resolve('PLACEHOLDER');
      }
    }
  });

  return {share: many_shares.shares, promise: jiff.utils.all_promises(many_shares.shares)};
};

var reshareResult = function (jiff, upper_bound, threshold, receivers_list, compute_list, Zp, op_id, finalLength, shares) {
  // fix threshold and parties
  var promises = [];
  for (var i = 0; i < finalLength; i++) {
    if (compute_list.indexOf(jiff.id) > -1) {
      promises[i] = shares[i].value;
    }
    shares[i] = jiff.reshare(shares[i], threshold, receivers_list, compute_list, Zp, op_id + ':reshare:' + i);
    if (receivers_list.indexOf(jiff.id) > -1) {
      promises[i] = shares[i].value;
    }
  }

  // return output
  if (receivers_list.indexOf(jiff.id) === -1) {
    shares = null;
  }

  // handle rejection case
  return {share: shares, promise: Promise.all(promises)};
};

/**
 * Wrapper for when doing rejection sampling during pre processing
 *
 * Do not use this function directly, especially during online computation time, use jiffClient.protocols.bits.rejection_sampling instead
 *
 * @function sampling
 * @ignore
 * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
 * @param {number} [threshold=receivers_list.length] - the threshold of the resulting shares after sampling
 * @param {Array} [receivers_list=all_parties] - array of party ids that want to receive the sampling shares, by default, this includes all parties
 * @param {Array} [compute_list=all_parties] - array of party ids that will perform this protocol, by default, this includes all parties
 * @param {number} [Zp=jiff-instance.Zp] - the mod (if null then the default Zp for the instance is used)
 * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this operation.
 *                         This id must be unique, and must be passed by all parties to the same instruction, to
 *                         ensure that corresponding instructions across different parties are matched correctly
 * @param {object} [params={}] - an object containing extra parameters passed by the user
 *                               Expects:
 *                               - compute_threshold, an optional number compute_threshold parameter, which specifies threshold used
 *                               during the protocol execution. By default, this is (|compute_list|+1)/2
 *                               - optional 'lower_bound' and 'upper_bound', numeric parameters, default to 0 and Zp respectively
 *                               - op_id, the base op_id to tag operations inside this protocol with, defaults to auto generated
 *                               - output_op_id, the tag id for the output result
 *                               - retry_count, how many times rejection sampling have been retried!
 * @param {object} [protocols=defaults] - the protocols to use for preprocessing, any protocol(s) not provided will be replaced with defaults
 * @returns {Object} an object containing keys: 'share', and 'promise'. The promise is resolved when the rejection sampling is completed.
 *                   The object is consumed by <jiff_instance>.preprocessing:
 *                        - 'share' attribute contains the resulting array of secret shared bits representing the sampled value, and is stored in the preprocessing table internally
 *                        - The promise is consumed and a new promise is returned by <jiff_instance>.preprocessing that is resolved after this returned promise (and all other promise generated by that .preprocessing call) are resolved
 */
module.exports = function (jiff, threshold, receivers_list, compute_list, Zp, params, protocols) {
  // Internal version: set parameters (e.g. receivers_list) do not need defaults
  // defaults (for internal preprocessing)
  var lower_bound = params.lower_bound != null ? params.lower_bound : 0;
  var upper_bound = params.upper_bound != null ? params.upper_bound : Zp;
  if (params.compute_threshold == null) { // honest majority BGW
    params.compute_threshold = Math.floor((compute_list.length + 1) / 2);
  }

  // Figure out final bit size (after adding back lower)
  var finalLength = jiff.helpers.ceil(jiff.helpers.bLog(upper_bound, 2));
  finalLength = parseInt(finalLength.toString(), 10);
  finalLength = Math.max(finalLength, 1); // special case: when upper_bound is 1!

  if (params.op_id == null && params.output_op_id == null) {
    params.op_id = jiff.counters.gen_op_id2('rejection_sampling', receivers_list, compute_list);
  } else if (params.op_id == null) {
    params.op_id = 'preprocessing:' + params.output_op_id + ':' + compute_list.join(',');
  }
  var op_id = params.op_id;

  // Rejection count
  var reject_count = params.reject_count || 0;

  if (compute_list.indexOf(jiff.id) === -1) {
    return reshareResult(jiff, upper_bound, threshold, receivers_list, compute_list, Zp, op_id, finalLength, [])
  }

  return computeParty(jiff, lower_bound, upper_bound, threshold, receivers_list, compute_list, Zp, params, protocols, op_id, finalLength, reject_count);
};

},{}],38:[function(require,module,exports){
/**
 * Generation of beaver triplet via MPC, uses the server for communication channels, but not for generation
 * @function generate_beaver_bgw
 * @ignore
 * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
 * @param {number} threshold - the threshold of the triplets when stored by receivers after generation
 * @param {Array} receivers_list - array of party ids that want to receive the triplet shares
 * @param {Array} compute_list - array of party ids that will perform this protocol
 * @param {number} Zp - the mod
 * @param {object} params - an object containing extra parameters passed by the user
 *                               Expects:
 *                               - op_id: the base id to use for operation during the execution of this protocol, defaults to auto generated
 *                               - an optional number compute_threshold parameter, which specifies threshold used
 *                               during the protocol execution. By default, this is the length of the (compute_list+1)/2
 * @param {object} protocols - the sub protocols to use for preprocessing
 * @return {object} all pre-processing protocols must return an object with these keys:
 *  {
 *    'share': the share(s)/value(s) to store attached to op_id for later use by the computation (i.e. the result of preprocessing),
 *    'promise': a promise for when this protocol is fully completed (could be null if the protocol was already completed)
 *  }
 *  In this case, 'share' is an array of this party's shares of the resulting triplet, a,b,c such that a*b=c
 */
module.exports = function (jiff, threshold, receivers_list, compute_list, Zp, params, protocols) {
  if (params.compute_threshold == null) {
    params.compute_threshold = Math.floor((compute_list.length + 1) / 2); // honest majority BGW
  }
  if (params.op_id == null && params.output_op_id == null) {
    params.op_id = jiff.counters.gen_op_id2('generate_beaver_bgw', receivers_list, compute_list);
  } else if (params.op_id == null) {
    params.op_id = 'preprocessing:' + params.output_op_id + ':' + compute_list.join(',');
  }

  var op_id = params.op_id;
  var _params = params;

  var a, b, c, promises;
  if (compute_list.indexOf(jiff.id) > -1) {
    params = Object.assign({}, _params);
    params.op_id = op_id + ':share_a';
    a = protocols.generate_random_number(params.compute_threshold, compute_list, compute_list, Zp, params, protocols).share;

    params = Object.assign({}, _params);
    params.op_id = op_id + ':share_b';
    b = protocols.generate_random_number(params.compute_threshold, compute_list, compute_list, Zp, params, protocols).share;

    c = a.ismult_bgw(b, op_id + ':smult_bgw');
    promises = [a.value, b.value, c.value];
  }

  a = jiff.reshare(a, threshold, receivers_list, compute_list, Zp, op_id + ':reshare_a');
  b = jiff.reshare(b, threshold, receivers_list, compute_list, Zp, op_id + ':reshare_b');
  c = jiff.reshare(c, threshold, receivers_list, compute_list, Zp, op_id + ':reshare_c');
  if (receivers_list.indexOf(jiff.id) > -1) {
    promises = [a.value, b.value, c.value];
  }

  return { share: [a, b, c], promise: Promise.all(promises) };
};

},{}],39:[function(require,module,exports){
/**
 * Share the given share to all the parties in the jiff instance.
 * @function jiff_broadcast
 * @ignore
 * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance.
 * @param {module:jiff-client~JIFFClient#SecretShare} share - the share.
 * @param {Array} parties - the parties to broadcast the share to.
 * @param {number|string} op_id - a unique operation id, used to tag outgoing messages.
 *
 */
var jiff_broadcast = function (jiff, share, parties, op_id) {
  for (var index = 0; index < parties.length; index++) {
    var i = parties[index]; // Party id
    if (i === jiff.id) {
      jiff.handlers.receive_open({ party_id: i, share: share.value, op_id: op_id, Zp: share.Zp });
      continue;
    }

    // encrypt, sign and send
    var msg = {party_id: i, share: share.value, op_id: op_id, Zp: share.Zp};
    msg = jiff.hooks.execute_array_hooks('beforeOperation', [jiff, 'open', msg], 2);

    msg['share'] = jiff.hooks.encryptSign(jiff, msg['share'].toString(), jiff.keymap[msg['party_id']], jiff.secret_key);
    jiff.socket.safe_emit('open', JSON.stringify(msg));
  }
};

module.exports = {
  /**
   * Open up the given share to the participating parties.
   * @function jiff_open
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance.
   * @param {module:jiff-client~JIFFClient#SecretShare} share - the share of the secret to open that belongs to this party
   * @param {Array<number|string>} [parties=all_parties] - an array with party ids of receiving parties
   * @param {string|number} [op_id=auto_gen()] - the operation id to be used to tag outgoing messages
   * @returns {?promise} a (JQuery) promise to the open value of the secret, or null if the calling party is not a receiving party
   *
   */
  jiff_open: function (jiff, share, parties, op_id) {
    var i;

    if (!(share.jiff === jiff)) {
      throw 'share does not belong to given instance';
    }

    // Default values
    if (parties == null || parties === []) {
      parties = [];
      for (i = 1; i <= jiff.party_count; i++) {
        parties.push(i);
      }
    } else {
      jiff.helpers.sort_ids(parties);
    }

    // If not a receiver nor holder, do nothing
    if (share.holders.indexOf(jiff.id) === -1 && parties.indexOf(jiff.id) === -1) {
      return null;
    }

    // Compute operation ids (one for each party that will receive a result
    if (op_id == null) {
      op_id = jiff.counters.gen_op_id2('open', parties, share.holders);
    }

    // Party is a holder
    if (share.holders.indexOf(jiff.id) > -1) {
      // Call hook
      share = jiff.hooks.execute_array_hooks('beforeOpen', [jiff, share, parties], 1);

      // refresh/reshare, so that the original share remains secret, instead
      // a new share is sent/open without changing the actual value.
      share = share.refresh(op_id + ':refresh');

      // The given share has been computed, broadcast it to all parties
      jiff.counters.pending_opens++;
      share.wThen(function () {
        jiff.counters.pending_opens--;
        jiff_broadcast(jiff, share, parties, op_id);
      }, share.error);
    }

    // Party is a receiver
    if (parties.indexOf(jiff.id) > -1) {
      var final_deferred = new jiff.helpers.Deferred(); // will be resolved when the final value is reconstructed
      var final_promise = final_deferred.promise;

      if (jiff.deferreds[op_id] == null) {
        jiff.deferreds[op_id] = {};
      }

      jiff.deferreds[op_id].deferred = final_deferred;
      jiff.deferreds[op_id].threshold = share.threshold;
      jiff.deferreds[op_id].total = share.holders.length;
      if (jiff.deferreds[op_id].shares != null && jiff.deferreds[op_id].shares.length >= share.threshold) {
        final_deferred.resolve();
      }

      return final_promise.then(function () {
        var shares = jiff.deferreds[op_id].shares;

        if (shares.length === jiff.deferreds[op_id].total) {
          delete jiff.deferreds[op_id];
        } else {
          jiff.deferreds[op_id].deferred = 'CLEAN';
        }

        var recons_secret = jiff.hooks.reconstructShare(jiff, shares);
        recons_secret = jiff.hooks.execute_array_hooks('afterReconstructShare', [jiff, recons_secret], 1);
        return recons_secret;
      });
    }

    return null;
  },
  /**
   * Uses Lagrange polynomials to interpolate the polynomial
   * described by the given shares (points)
   * @function jiff_lagrange
   * @ignore
   * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
   * @param {Array} shares - an array of objects representing shares to reconstruct, every object has 3 attributes: value, sender_id, Zp
   * @returns {number} the value of the polynomial at x=0 (the secret value)
   *
   */
  jiff_lagrange: function (jiff, shares) {
    var lagrange_coeff = []; // will contain shares.length many elements.

    // Compute the Langrange coefficients at 0.
    for (var i = 0; i < shares.length; i++) {
      var pi = jiff.helpers.get_party_number(shares[i].sender_id);
      lagrange_coeff[pi] = 1;

      for (var j = 0; j < shares.length; j++) {
        var pj = jiff.helpers.get_party_number(shares[j].sender_id);
        if (pj !== pi) {
          var inv = jiff.helpers.extended_gcd(pi - pj, shares[i].Zp)[0];
          lagrange_coeff[pi] = jiff.helpers.mod(lagrange_coeff[pi] * (0 - pj), shares[i].Zp) * inv;
          lagrange_coeff[pi] = jiff.helpers.mod(lagrange_coeff[pi], shares[i].Zp);
        }
      }
    }

    // Reconstruct the secret via Lagrange interpolation
    var recons_secret = 0;
    for (var p = 0; p < shares.length; p++) {
      var party = jiff.helpers.get_party_number(shares[p].sender_id);
      var tmp = jiff.helpers.mod((shares[p].value * lagrange_coeff[party]), shares[p].Zp);
      recons_secret = jiff.helpers.mod((recons_secret + tmp), shares[p].Zp);
    }

    return recons_secret;
  }
};
},{}],40:[function(require,module,exports){
/**
 * re-share an existing share (value) under a new threshold or to a new set of parties or both.
 * Do not use this to refresh a share (use {@link jiff-client~JIFFClient#SecretShare#refresh} instead)
 * @function reshare
 * @ignore
 * @param {module:jiff-client~JIFFClient} jiff - the jiff client instance
 * @param {module:jiff-client~JIFFClient#SecretShare} [share=null] - the share you would like to reshare (null if you are a receiver but not a sender)
 * @param {number} [threshold=receivers_list.length] - the new threshold, defaults to the length of receivers_list param
 * @param {Array} [receivers_list=all_parties] - array of party ids to receive from, by default, this includes all parties
 * @param {Array} [senders_list=all_parties] - array of party ids that posses the share and will reshare it with the receivers, by default, this includes all parties
 * @param {number} [Zp=jiff.Zp] - the Zp of the existing share
 * @param {string} [op_id=auto_gen()] - the operation id which is used to identify this multiplication (and internally, the corresponding beaver triplet).
 *                         This id must be unique, and must be passed by all parties to the same instruction.
 *                         this ensures that every party gets a share from the same triplet for every matching instruction. An automatic id
 *                         is generated by increasing a local counter, default ids suffice when all parties execute the
 *                         instructions in the same order
 * @return {SecretShare} this party's share of the result under the new threshold, or null if this party is not a receiver
 */
module.exports = function (jiff, share, threshold, receivers_list, senders_list, Zp, op_id) {
  var i;

  // default values
  if (receivers_list == null) {
    receivers_list = [];
    for (i = 1; i <= jiff.party_count; i++) {
      receivers_list.push(i);
    }
  } else {
    jiff.helpers.sort_ids(receivers_list);
  }
  if (senders_list == null) {
    senders_list = [];
    for (i = 1; i <= jiff.party_count; i++) {
      senders_list.push(i);
    }
  } else {
    jiff.helpers.sort_ids(senders_list);
  }

  if (threshold == null) {
    threshold = receivers_list.length;
  }
  if (Zp == null) {
    Zp = jiff.Zp;
  }

  if (op_id == null) {
    op_id = jiff.counters.gen_op_id('reshare', senders_list);
  }

  // Check if this party is a sender or receiver
  var isSender = senders_list.indexOf(jiff.id) > -1;
  var isReceiver = receivers_list.indexOf(jiff.id) > -1;
  if (!isSender && !isReceiver) {
    return null;
  }

  // optimization, if nothing changes, keep share
  if (share != null && JSON.stringify(receivers_list) === JSON.stringify(senders_list) && threshold === share.threshold) {
    return share;
  }

  // Setup the result
  var final_deferred;
  var result = null;
  if (isReceiver) {
    final_deferred = new jiff.helpers.Deferred();
    result = new jiff.SecretShare(final_deferred.promise, receivers_list, threshold, Zp);
  }

  // This function is called when the share is ready: the value of the share has been received.
  var ready_share = function () {
    var intermediate_shares = jiff.internal_share(isSender ? share.value : null, threshold, receivers_list, senders_list, Zp, op_id);

    if (isReceiver) {
      var promises = [];
      for (var i = 0; i < senders_list.length; i++) {
        var party_id = senders_list[i];
        promises.push(intermediate_shares[party_id].value);
      }

      // Reconstruct share under new threshold
      Promise.all(promises).then(function () {
        var reconstruct_parts = [];
        for (var i = 0; i < senders_list.length; i++) {
          var party_id = senders_list[i];
          //shamir reconstruct takes an array of objects
          //has attributes: {value: x, sender_id: y, Zp: jiff_instance.Zp}
          reconstruct_parts[i] = {value: intermediate_shares[party_id].value, sender_id: party_id, Zp: Zp};
        }
        var value = jiff.hooks.reconstructShare(jiff, reconstruct_parts);
        final_deferred.resolve(value);
      });
    }
  };

  if (isSender && !share.ready) {
    share.value.then(ready_share);
  } else { // either a receiver or share is ready
    ready_share();
  }

  return result;
};
},{}],41:[function(require,module,exports){
module.exports = {
  /**
   * Default way of computing shares (can be overridden using hooks).
   * Compute the shares of the secret (as many shares as parties) using Shamir secret sharing
   * @ignore
   * @function jiff_compute_shares
   * @param {module:jiff-client~JIFFClient} jiff - the jiff instance
   * @param {number} secret - the secret to share.
   * @param {Array} parties_list - array of party ids to share with.
   * @param {number} threshold - the min number of parties needed to reconstruct the secret, defaults to all the receivers.
   * @param {number} Zp - the mod.
   * @returns {object} a map between party number and its share, this means that (party number, share) is a
   *          point from the polynomial.
   *
   */
  jiff_compute_shares: function (jiff, secret, parties_list, threshold, Zp) {
    var shares = {}; // Keeps the shares
    var i;

    // Each player's random polynomial f must have
    // degree threshold - 1, so that threshold many points are needed
    // to interpolate/reconstruct.
    var t = threshold - 1;
    var polynomial = Array(t + 1); // stores the coefficients

    // Each players's random polynomial f must be constructed
    // such that f(0) = secret
    polynomial[0] = secret;

    // Compute the random polynomial f's coefficients
    for (i = 1; i <= t; i++) {
      polynomial[i] = jiff.helpers.random(Zp);
    }

    // Compute each players share such that share[i] = f(i)
    for (i = 0; i < parties_list.length; i++) {
      var p_id = parties_list[i];
      shares[p_id] = polynomial[0];
      var power = jiff.helpers.get_party_number(p_id);

      for (var j = 1; j < polynomial.length; j++) {
        var tmp = jiff.helpers.mod((polynomial[j] * power), Zp);
        shares[p_id] = jiff.helpers.mod((shares[p_id] + tmp), Zp);
        power = jiff.helpers.mod(power * jiff.helpers.get_party_number(p_id), Zp);
      }
    }

    return shares;
  },
  /**
   * Share given secret to the participating parties.
   * @ignore
   * @function jiff_share
   * @param {module:jiff-client~JIFFClient} jiff - the jiff instance
   * @param {number} secret - the secret to share.
   * @param {number} [threshold=receivers_list.length] - the min number of parties needed to reconstruct the secret, defaults to all the receivers.
   * @param {Array} [receivers_list=all_parties] - array of party ids to share with, by default, this includes all parties.
   * @param {Array} [senders_list=all_parties] - array of party ids to receive from, by default, this includes all parties.
   * @param {number} [Zp=jiff.Zp] - the mod (if null then the default Zp for the instance is used).
   * @param {string|number} [share_id=auto_gen()] - the tag used to tag the messages sent by this share operation, this tag is used
   *                                   so that parties distinguish messages belonging to this share operation from other
   *                                   share operations between the same parties (when the order of execution is not
   *                                   deterministic). An automatic id is generated by increasing a local counter, default
   *                                   ids suffice when all parties execute all sharing operations with the same senders
   *                                   and receivers in the same order.
   * @returns {object} a map where the key is the sender party id
   *          and the value is the share object that wraps
   *          what was sent from that party (the internal value maybe deferred).
   *          if the party that calls this function is not a receiver then the map
   *          will be empty.
   */
  jiff_share: function (jiff, secret, threshold, receivers_list, senders_list, Zp, share_id) {
    var i, p_id;

    // defaults
    if (Zp == null) {
      Zp = jiff.Zp;
    }
    if (receivers_list == null) {
      receivers_list = [];
      for (i = 1; i <= jiff.party_count; i++) {
        receivers_list.push(i);
      }
    } else {
      jiff.helpers.sort_ids(receivers_list);
    }
    if (senders_list == null) {
      senders_list = [];
      for (i = 1; i <= jiff.party_count; i++) {
        senders_list.push(i);
      }
    } else {
      jiff.helpers.sort_ids(senders_list);
    }
    if (threshold == null) {
      threshold = receivers_list.length;
    }
    if (threshold < 0) {
      threshold = 2;
    }
    if (threshold > receivers_list.length) {
      threshold = receivers_list.length;
    }

    // if party is uninvolved in the share, do nothing
    if (receivers_list.indexOf(jiff.id) === -1 && senders_list.indexOf(jiff.id) === -1) {
      return {};
    }

    // compute operation id
    if (share_id == null) {
      share_id = jiff.counters.gen_op_id2('share', receivers_list, senders_list);
    }

    // stage sending of shares
    if (senders_list.indexOf(jiff.id) > -1) {
      // Call hook
      secret = jiff.hooks.execute_array_hooks('beforeShare', [jiff, secret, threshold, receivers_list, senders_list, Zp], 1);

      // compute shares
      var shares = jiff.hooks.computeShares(jiff, secret, receivers_list, threshold, Zp);

      // Call hook
      shares = jiff.hooks.execute_array_hooks('afterComputeShare', [jiff, shares, threshold, receivers_list, senders_list, Zp], 1);

      // send shares
      for (i = 0; i < receivers_list.length; i++) {
        p_id = receivers_list[i];
        if (p_id === jiff.id) {
          continue;
        }

        // send encrypted and signed shares_id[p_id] to party p_id
        var msg = {party_id: p_id, share: shares[p_id], op_id: share_id};
        msg = jiff.hooks.execute_array_hooks('beforeOperation', [jiff, 'share', msg], 2);

        msg['share'] = jiff.hooks.encryptSign(jiff, msg['share'].toString(10), jiff.keymap[msg['party_id']], jiff.secret_key);
        jiff.socket.safe_emit('share', JSON.stringify(msg));
      }
    }

    // stage receiving of shares
    var result = {};
    if (receivers_list.indexOf(jiff.id) > -1) {
      // setup a map of deferred for every received share
      if (jiff.deferreds[share_id] == null) {
        jiff.deferreds[share_id] = {};
      }

      var _remaining = senders_list.length;
      for (i = 0; i < senders_list.length; i++) {
        p_id = senders_list[i];
        if (p_id === jiff.id) { // Keep party's own share
          var my_share = jiff.hooks.execute_array_hooks('receiveShare', [jiff, p_id, shares[p_id]], 2);
          result[p_id] = new jiff.SecretShare(my_share, receivers_list, threshold, Zp);
          _remaining--;
          continue;
        }

        // check if a deferred is set up (maybe the message was previously received)
        if (jiff.deferreds[share_id][p_id] == null) { // not ready, setup a deferred
          jiff.deferreds[share_id][p_id] = new jiff.helpers.Deferred();
        }

        var promise = jiff.deferreds[share_id][p_id].promise;
        // destroy deferred when done
        (function (promise, p_id) { // p_id is modified in a for loop, must do this to avoid scoping issues.
          promise.then(function () {
            delete jiff.deferreds[share_id][p_id];
            _remaining--;
            if (_remaining === 0) {
              delete jiff.deferreds[share_id];
            }
          });
        })(promise, p_id);

        // receive share_i[id] from party p_id
        result[p_id] = new jiff.SecretShare(promise, receivers_list, threshold, Zp);
      }
    }

    return result;
  }
};
},{}],42:[function(require,module,exports){
var genericProtocols = require('./protocols/generic.js');
var arithmetic = require('./protocols/numbers/arithmetic.js');
var comparison = require('./protocols/numbers/comparison.js');
var protocols = require('./protocols/numbers/protocols.js');
var booleans = require('./protocols/booleans/boolean.js');

// a metaclass that creates SecretShare classes when given a jiff instance
// alternatively, we can think of this as a factory for a secret share prototypes/constructors given a jiff instance
module.exports = function (jiff) {
  // Look at jiff-client#SecretShare
  function SecretShare(value, holders, threshold, Zp) {
    // sort holders
    jiff.helpers.sort_ids(holders);

    /**
     * Indicates if the secret share's value is ready or still a promise
     * @member {boolean} ready
     * @memberof module:jiff-client~JIFFClient#SecretShare
     * @instance
     */
    this.ready = (value.then == null);

    /**
     * The value of the share (or a promise to it)
     * @member {number|promise} value
     * @memberof module:jiff-client~JIFFClient#SecretShare
     * @instance
     */
    this.value = value;

    /**
     * Array of party ids who hold shares of the corresponding secret
     * @member {Array} holders
     * @memberof module:jiff-client~JIFFClient#SecretShare
     * @instance
     */
    this.holders = holders;
    /**
     * The sharing threshold
     * @member {number} threshold
     * @memberof module:jiff-client~JIFFClient#SecretShare
     * @instance
     */
    this.threshold = threshold;

    /**
     * The field prime under which the corresponding secret is shared
     * @member {number} Zp
     * @memberof module:jiff-client~JIFFClient#SecretShare
     * @instance
     */
    this.Zp = Zp;

    // when the promise is resolved, acquire the value of the share and set ready to true
    if (!this.ready) {
      this.value = this.value.then(this.promise_handler.bind(this), this.error.bind(this));
      this.jiff.add_to_barriers(this.value);
    }

    // return the share
    return jiff.hooks.execute_array_hooks('createSecretShare', [jiff, this], 1);
  }

  /**
   * The jiff client instance this share belongs to
   * @member {module:jiff-client~JIFFClient} jiff
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.jiff = jiff;

  // Basic operations in prototype of SecretShare
  /**
   * Gets the value of this share
   * @method valueOf
   * @returns {number} the value (undefined if not ready yet)
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.valueOf = function () {
    if (this.ready) {
      return this.value;
    } else {
      return undefined;
    }
  };

  /**
   * Gets a string representation of this share
   * @method toString
   * @returns {string} the id and value of the share as a string
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   */
  SecretShare.prototype.toString = function () {
    var val = this.ready ? this.value : '<promise>';
    return 'share: ' + val + '. Holders: ' + JSON.stringify(this.holders) + '. Threshold: ' + this.threshold + '. Zp: ' + this.Zp.toString() + '.';
  };

  /**
   * Logs an error. Passes the error on to the associated jiff client instance's {@link handlers.error}
   * @method error
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {string|error} error - the error to log
   */
  SecretShare.prototype.error = function (error) {
    this.jiff.handlers.error('SecretShare', error);
  };

  /**
   * Logs the value represented by this share to the console
   * WARNING: THIS LEAKS INFORMATION AND MUST BE USED ONLY TO DEBUG ON FAKE DATA
   * @method logLEAK
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {string} tag - accompanying tag to display in the console
   * @param {Array<number|string>} [parties=[holders[0]] - the parties which will display the log
   * @param {string|number|object} [op_id=auto_gen()] - same as {@link module:jiff-client:JIFFClient#open}
   * @return {?promise} a promise to the value represented by this share after logging it, null if party is not in parties
   */
  SecretShare.prototype.logLEAK = function (tag, parties, op_id) {
    if (parties == null) {
      parties = [this.holders[0]];
    }
    var promise = this.open(parties, tag, op_id);
    if (promise != null) {
      promise = promise.then(function (result) {
        console.log(tag, result.toString());
        return result;
      }, this.error);
    }
    return promise;
  };

  /**
   * Handler for when this share's promise (if any) is resolved
   * @method promise_handler
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {number} value - the value of the share after it was resolved
   */
  SecretShare.prototype.promise_handler = function (value) {
    this.value = value;
    this.ready = true;
    return this.value;
  };

  /**
   * Executes callback when both this share and o are ready and returns the result (or a promise to the result)
   * @method when_both_ready
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {SecretShare} o - the other share object.
   * @param {function()} cb - the callback to execute.
   * @returns {value|promise} either the return value of cb() or a promise to it
   */
  SecretShare.prototype.when_both_ready = function (o, cb) {
    if (this.ready && o.ready) {
      return cb();
    }

    if (this.ready) {
      return o.value.then(cb, this.error);
    } else if (o.ready) {
      return this.value.then(cb, this.error);
    } else {
      return Promise.all([this.value, o.value]).then(cb, this.error);
    }
  };

  /**
   * Shortcut for opening/revealing the value of this share. Alias for open in jiff-instance
   * @see jiff-instance#open
   * @method open
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {Array} [parties=all_parties] - an array with party ids (1 to n) of receiving parties
   * @param {string|number|object} [op_id=auto_gen()] - same as {@link module:jiff-client:JIFFClient#open}
   * @returns {?promise} a (JQuery) promise to the open value of the secret, null if the party is not specified in
   *                         the parties array as a receiver
   */
  SecretShare.prototype.open = function (parties, op_id) {
    return this.jiff.open(this, parties, op_id);
  };

  /**
   * Wrapper around share.value.then.
   * In case share is ready (its promise is resolved and cleared)
   * The callback is executed immediately.
   * Does not support chaining
   * @method wThen
   * @memberof module:jiff-client~JIFFClient#SecretShare
   * @instance
   * @param {function} onFulfilled - callback for success, called with this.value as parameter
   * @param {function} [onRejected=this.error] - callback for errors
   * @return {promise|value} either the result of executing onFulfilled or a promise to it
   */
  SecretShare.prototype.wThen = function (onFulfilled, onRejected) {
    if (this.ready) {
      return onFulfilled(this.value);
    } else {
      if (onRejected == null) {
        onRejected = this.error;
      }
      return this.value.then(onFulfilled, onRejected);
    }
  };

  // Complex protocols in prototype of SecretShare
  genericProtocols(SecretShare);
  arithmetic(SecretShare);
  comparison(SecretShare);
  protocols(SecretShare);
  booleans(SecretShare);

  // internal variant of primitives, to use internally by other primitives
  var internals = ['cadd', 'csub', 'cmult', 'sadd', 'ssub', 'smult', 'smult_bgw',
    'cxor_bit', 'sxor_bit', 'cor_bit', 'sor_bit',
    'slt', 'slteq', 'sgt', 'sgteq', 'seq', 'sneq',
    'clt', 'clteq', 'cgt', 'cgteq', 'ceq', 'cneq',
    'sdiv', 'cdiv', 'not', 'cpow', 'lt_halfprime', 'if_else'];
  for (var i = 0; i < internals.length; i++) {
    var key = internals[i];
    SecretShare.prototype['i' + key] = SecretShare.prototype[key];
  }

  return SecretShare;
};
},{"./protocols/booleans/boolean.js":29,"./protocols/generic.js":30,"./protocols/numbers/arithmetic.js":31,"./protocols/numbers/comparison.js":32,"./protocols/numbers/protocols.js":33}],43:[function(require,module,exports){
module.exports = {
  '+': function (v1, v2) {
    return v1 + v2;
  },
  '-': function (v1, v2) {
    return v1 - v2;
  },
  '*': function (v1, v2) {
    return v1 * v2;
  },
  '/': function (v1, v2) {
    return v1 / v2;
  },
  '<': function (v1, v2) {
    return v1 < v2;
  },
  '<=': function (v1, v2) {
    return v1 <= v2;
  },
  'floor': function (v) {
    return Math.floor(v);
  },
  'ceil': function (v) {
    return Math.ceil(v);
  },
  'floor/': function (v1, v2) {
    return Math.floor(v1 / v2);
  },
  'pow': function (v1, v2) {
    return Math.pow(v1, v2);
  },
  'binary': function (v) {
    return v === 1 || v === 0;
  },
  'abs': function (v) {
    return Math.abs(v);
  },
  '==': function (v1, v2) {
    return v1 === v2;
  },
  'even': function (v1) {
    return (v1 % 2) === 0;
  }
};
},{}],44:[function(require,module,exports){
module.exports = function (JIFFClient) {
  /**
   * Initialize socket listeners and events
   * @memberof module:jiff-client.JIFFClient
   * @method
   */
  JIFFClient.prototype.initSocket = function () {
    var jiffClient = this;

    // set on('connect') handler once!
    this.socket.on('connect', jiffClient.handlers.connected);

    // Store the id when server sends it back
    this.socket.on('initialization', jiffClient.handlers.initialized);

    // Public keys were updated on the server, and it sent us the updates
    jiffClient.socket.on('public_keys', function (msg, callback) {
      callback(true);

      msg = JSON.parse(msg);
      msg = jiffClient.hooks.execute_array_hooks('afterOperation', [jiffClient, 'public_keys', msg], 2);

      jiffClient.handlers.store_public_keys(msg.public_keys);
    });

    // Setup receiving matching shares
    this.socket.on('share', function (msg, callback) {
      callback(true); // send ack to server

      // parse message
      var json_msg = JSON.parse(msg);
      var sender_id = json_msg['party_id'];

      if (jiffClient.keymap[sender_id] != null) {
        jiffClient.handlers.receive_share(json_msg);
      } else {
        if (jiffClient.messagesWaitingKeys[sender_id] == null) {
          jiffClient.messagesWaitingKeys[sender_id] = [];
        }
        jiffClient.messagesWaitingKeys[sender_id].push({label: 'share', msg: json_msg});
      }
    });

    this.socket.on('open', function (msg, callback) {
      callback(true); // send ack to server

      // parse message
      var json_msg = JSON.parse(msg);
      var sender_id = json_msg['party_id'];

      if (jiffClient.keymap[sender_id] != null) {
        jiffClient.handlers.receive_open(json_msg);
      } else {
        if (jiffClient.messagesWaitingKeys[sender_id] == null) {
          jiffClient.messagesWaitingKeys[sender_id] = [];
        }
        jiffClient.messagesWaitingKeys[sender_id].push({label: 'open', msg: json_msg});
      }
    });

    // handle custom messages
    this.socket.on('custom', function (msg, callback) {
      callback(true); // send ack to server

      var json_msg = JSON.parse(msg);
      var sender_id = json_msg['party_id'];
      var encrypted = json_msg['encrypted'];

      if (jiffClient.keymap[sender_id] != null || encrypted !== true) {
        jiffClient.handlers.receive_custom(json_msg);
      } else {
        // key must not exist yet for sender_id, and encrypted must be true
        if (jiffClient.messagesWaitingKeys[sender_id] == null) {
          jiffClient.messagesWaitingKeys[sender_id] = [];
        }
        jiffClient.messagesWaitingKeys[sender_id].push({label: 'custom', msg: json_msg});
      }
    });

    this.socket.on('crypto_provider', function (msg, callback) {
      callback(true); // send ack to server
      jiffClient.handlers.receive_crypto_provider(JSON.parse(msg));
    });

    this.socket.on('error', function (msg) {
      try {
        msg = JSON.parse(msg);
        jiffClient.handlers.error(msg['label'], msg['error']);
      } catch (error) {
        jiffClient.handlers.error('socket.io', msg);
      }
    });

    this.socket.on('disconnect', function (reason) {
      if (reason !== 'io client disconnect') {
        // check that the reason is an error and not a user initiated disconnect
        console.log('Disconnected!', jiffClient.id, reason);
      }

      jiffClient.hooks.execute_array_hooks('afterOperation', [jiffClient, 'disconnect', reason], -1);
    });
  };

  /**
   * Executes all callbacks for which the wait condition has been satisfied.
   * Remove all executed callbacks so that they would not be executed in the future.
   * @memberof module:jiff-client.JIFFClient
   * @method
   */
  JIFFClient.prototype.execute_wait_callbacks = function () {
    var copy_callbacks = this.wait_callbacks;
    this.wait_callbacks = [];
    for (var i = 0; i < copy_callbacks.length; i++) {
      var wait = copy_callbacks[i];
      var parties = wait.parties;
      var callback = wait.callback;
      var initialization = wait.initialization;

      // Check if the parties to wait for are now known
      var parties_satisfied = this.__initialized || !initialization;
      for (var j = 0; j < parties.length; j++) {
        var party_id = parties[j];
        if (this.keymap == null || this.keymap[party_id] == null) {
          parties_satisfied = false;
          break;
        }
      }

      if (parties_satisfied) {
        callback(this);
      } else {
        this.wait_callbacks.push(wait);
      }
    }
  };

  /**
   * Resolves all messages that were pending because their senders primary key was previously unknown.
   * These messages are decrypted and verified and handled appropriatly before being removed from the wait queue.
   * @memberof module:jiff-client.JIFFClient
   * @method
   */
  JIFFClient.prototype.resolve_messages_waiting_for_keys = function () {
    for (var party_id in this.keymap) {
      if (!this.keymap.hasOwnProperty(party_id)) {
        continue;
      }

      var messageQueue = this.messagesWaitingKeys[party_id];
      if (messageQueue == null) {
        continue;
      }
      for (var i = 0; i < messageQueue.length; i++) {
        var msg = messageQueue[i];
        if (msg.label === 'share') {
          this.handlers.receive_share(msg.msg);
        } else if (msg.label === 'open') {
          this.handlers.receive_open(msg.msg);
        } else if (msg.label === 'custom') {
          this.handlers.receive_custom(msg.msg);
        } else {
          throw new Error('Error resolving pending message: unknown label ' + msg.label);
        }
      }

      this.messagesWaitingKeys[party_id] = null;
    }
  };
};
},{}],45:[function(require,module,exports){
module.exports = function (jiffClient, __internal_socket) {
  __internal_socket.safe_emit = function (label, msg) {
    if (label === 'free') {
      jiffClient.hooks.execute_array_hooks('afterOperation', [this.jiffClient, 'free', msg], 2);
      return;
    }

    __internal_socket.emit(label, msg);
  };

  __internal_socket.resend_mailbox = function () {};

  __internal_socket.disconnect = function () {
    jiffClient.hooks.execute_array_hooks('beforeOperation', [jiffClient, 'disconnect', {}], -1);
  };

  __internal_socket.safe_disconnect = function (free, callback) {
    if (free) {
      jiffClient.free();
    }
    jiffClient.socket.disconnect();
    if (callback != null) {
      callback();
    }
  };

  return __internal_socket;
};
},{}],46:[function(require,module,exports){
var io = require('socket.io-client');

var linked_list = require('../../common/linkedlist.js');
var constants = require('../util/constants.js');

var defaultSocketOptions = {
  reconnectionDelay: constants.reconnectionDelay,
  reconnectionDelayMax: constants.reconnectionDelayMax,
  randomizationFactor: constants.randomizationFactor,
  autoConnect: false
};

/**
 * A guarded socket with an attached mailbox.
 *
 * The socket uses the mailbox to store all outgoing messages, and removes them from the mailbox only when
 * the server acknowledges their receipt. The socket resends mailbox upon re-connection. Extends {@link https://socket.io/docs/client-api/#Socket}.
 * @see {@link module:jiff-client~JIFFClient#socket}
 * @name GuardedSocket
 * @alias GuardedSocket
 * @constructor
 */

function guardedSocket(jiffClient) {
  jiffClient.options.socketOptions = Object.assign({}, defaultSocketOptions, jiffClient.options.socketOptions);

  // Create plain socket io object which we will wrap in this
  var socket = io(jiffClient.hostname, jiffClient.options.socketOptions);
  socket.old_disconnect = socket.disconnect;
  socket.mailbox = linked_list(); // for outgoing messages
  socket.empty_deferred = null; // gets resolved whenever the mailbox is empty
  socket.jiffClient = jiffClient;

  // add functionality to socket
  socket.safe_emit = safe_emit.bind(socket);
  socket.resend_mailbox = resend_mailbox.bind(socket);
  socket.disconnect = disconnect.bind(socket);
  socket.safe_disconnect = safe_disconnect.bind(socket);
  socket.is_empty = is_empty.bind(socket);

  return socket;
}

/**
 * Safe emit: stores message in the mailbox until acknowledgment is received, results in socket.emit(label, msg) call(s)
 * @method safe_emit
 * @memberof GuardedSocket
 * @instance
 * @param {string} label - the label given to the message
 * @param {string} msg - the message to send
 */
var safe_emit = function (label, msg) {
  // add message to mailbox
  var mailbox_pointer = this.mailbox.add({ label: label, msg: msg });
  if (this.connected) {
    var self = this;
    // emit the message, if an acknowledgment is received, remove it from mailbox
    this.emit(label, msg, function (status) {
      if (status) {
        self.mailbox.remove(mailbox_pointer);
        if (this.is_empty() && self.empty_deferred != null) {
          self.empty_deferred.resolve();
        }

        if (label === 'free') {
          this.jiffClient.hooks.execute_array_hooks('afterOperation', [this.jiffClient, 'free', msg], 2);
        }
      }
    });
  }
};

/**
 * Re-sends all pending messages
 * @method resend_mailbox
 * @memberof GuardedSocket
 * @instance
 */
var resend_mailbox = function () {
  // Create a new mailbox, since the current mailbox will be resent and
  // will contain new backups.
  var old_mailbox = this.mailbox;
  this.mailbox = linked_list();

  // loop over all stored messages and emit them
  var current_node = old_mailbox.head;
  while (current_node != null) {
    var label = current_node.object.label;
    var msg = current_node.object.msg;
    this.safe_emit(label, msg);
    current_node = current_node.next;
  }
};

/**
 * Wraps socket.io regular disconnect with a call to a hook before disconnection
 * @method disconnect
 * @memberof GuardedSocket
 * @instance
 */
var disconnect = function () {
  this.jiffClient.hooks.execute_array_hooks('beforeOperation', [this.jiffClient, 'disconnect', {}], -1);
  this.old_disconnect.apply(this, arguments);
};

/**
 * Safe disconnect: disconnect only after all messages (including free) were acknowledged and
 * all pending opens were resolved
 * @method safe_disconnect
 * @memberof GuardedSocket
 * @instance
 * @param {boolean} [free=false] - if true, a free message will be issued prior to disconnecting
 * @param {function()} [callback] - given callback will be executed after safe disconnection is complete
  */
var safe_disconnect = function (free, callback) {
  if (this.is_empty()) {
    if (free) {
      this.jiffClient.free();
      free = false;
    } else {
      this.disconnect();
      if (callback != null) {
        callback();
      }
      return;
    }
  }

  this.empty_deferred = new this.jiffClient.helpers.Deferred();
  this.empty_deferred.promise.then(this.safe_disconnect.bind(this, free, callback));
};

/**
 * Checks if the socket mailbox is empty (all communication was done and acknowledged),
 * used in safe_disconnect
 * @method is_empty
 * @memberof GuardedSocket
 * @instance
 */
var is_empty = function () {
  return this.mailbox.head == null && this.jiffClient.counters.pending_opens === 0;
};

module.exports = guardedSocket;
},{"../../common/linkedlist.js":52,"../util/constants.js":47,"socket.io-client":113}],47:[function(require,module,exports){
module.exports = {
  /**
   * The default mod to be used in a jiff instance if a custom mod was not provided.
   */
  gZp: 16777729,

  /**
   * Socket connection timeouts
   */
  reconnectionDelay: 25000,
  reconnectionDelayMax: 27500,
  randomizationFactor: 0.1,

  /**
   * Maximum numbers of retries on failed initialization.
   */
  maxInitializationRetries: 2
};
},{}],48:[function(require,module,exports){
/**
 * Encrypts and signs the given message.
 * @ignore
 * @memberof jiff.utils
 * @param {number|string} message - the message to encrypt.
 * @param {Uint8Array} encryption_public_key - ascii-armored public key to encrypt with.
 * @param {Uint8Array} signing_private_key - the private key of the encrypting party to sign with.
 * @returns {object} the signed cipher, includes two properties: 'cipher' and 'nonce'.
 */
exports.encrypt_and_sign = function (jiff, message, encryption_public_key, signing_private_key) {
  var nonce = jiff.sodium_.randombytes_buf(jiff.sodium_.crypto_box_NONCEBYTES);
  var cipher = jiff.sodium_.crypto_box_easy(message, nonce, encryption_public_key, signing_private_key);

  var result = { nonce: '[' + nonce.toString() + ']', cipher: '[' + cipher.toString() + ']' };
  return result;
};

/**
 * Decrypts and checks the signature of the given cipher text.
 * @ignore
 * @memberof jiff.utils
 * @param {object} cipher_text - the cipher text to decrypt, includes two properties: 'cipher' and 'nonce'.
 * @param {Uint8Array} decryption_secret_key - the secret key to decrypt with.
 * @param {Uint8Array} signing_public_key - ascii-armored public key to verify against signature.
 * @returns {number|string} the decrypted message if the signature was correct, the decrypted message type should
 *                          the type of operation, such that the returned value has the appropriate type and does
 *                          not need any type modifications.
 * @throws error if signature or nonce was forged/incorrect.
 */
exports.decrypt_and_sign = function (jiff, cipher_text, decryption_secret_key, signing_public_key) {
  var nonce = new Uint8Array(JSON.parse(cipher_text.nonce));
  cipher_text = new Uint8Array(JSON.parse(cipher_text.cipher));

  try {
    return jiff.sodium_.crypto_box_open_easy(cipher_text, nonce, signing_public_key, decryption_secret_key, 'text');
  } catch (_) {
    throw new Error('Bad signature or Bad nonce: Cipher: ' + cipher_text + '.  DecSKey: ' + decryption_secret_key + '.  SignPKey: ' + signing_public_key);
  }
};
},{}],49:[function(require,module,exports){
var helpers = require('../../common/helpers.js');

/**
 * Contains helper functions: these may be overriden by extensions to customize behavior
 * @see {@link module:jiff-client~JIFFClient#helpers}
 * @name helpers
 * @alias helpers
 * @namespace
 */

module.exports = function (jiffClient) {
  /**
   * Polyfill for jQuery Deferred
   * From https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Deferred
   * @memberof helpers
   * @constructor Deferred
   */
  jiffClient.helpers.Deferred = function () {
    /**
     * A method to resolve the associate Promise with the value passed.
     * @method resolve
     * @memberof helpers.Deferred
     * @instance
     * @param {*} value - the value to resolve the promise with
     */
    this.resolve = null;

    /**
     * A method to reject the associated Promise with the value passed.
     * If the promise is already settled it does nothing.
     * @method reject
     * @memberof helpers.Deferred
     * @instance
     * @param {*} reason - The reason for the rejection of the Promise.
     * Generally its an Error object. If however a Promise is passed, then the Promise
     * itself will be the reason for rejection no matter the state of the Promise.
     */
    this.reject = null;

    /**
     * A newly created Promise object.
     * Initially in pending state.
     * @memberof helpers.Deferred
     * @member {Promise} promise
     * @instance
     */
    this.promise = new Promise(function (resolve, reject) {
      this.resolve = resolve;
      this.reject = reject;
    }.bind(this));

    Object.freeze(this);
  };

  /**
   * Correct Mod instead of javascript's remainder (%).
   * @memberof helpers
   * @method
   * @param {number} x - the number.
   * @param {number} y - the mod.
   * @return {number} x mod y.
   */
  jiffClient.helpers.mod = helpers.mod;

  /**
   * Ceil of a number.
   * @memberof helpers
   * @method
   * @param {number} x - the number to ceil.
   * @return {number} ceil of x.
   */
  jiffClient.helpers.ceil = Math.ceil;

  /**
   * Floor of a number
   * @memberof helpers
   * @method
   * @param {number} x - the number to floor.
   * @return {number} floor of x.
   */
  jiffClient.helpers.floor = Math.floor;

  /**
   * Fast Exponentiation Mod
   * @memberof helpers
   * @method
   * @param {number} a - the base number
   * @param {number} b - the power
   * @param {number} n - the mod
   * @return {number} (base^pow) mod m
   */
  jiffClient.helpers.pow_mod = function (a, b, n) {
    a = jiffClient.helpers.mod(a, n);
    var result = 1;
    var x = a;
    while (b > 0) {
      var leastSignificantBit = jiffClient.helpers.mod(b, 2);
      b = Math.floor(b / 2);
      if (leastSignificantBit === 1) {
        result = result * x;
        result = jiffClient.helpers.mod(result, n);
      }
      x = x * x;
      x = jiffClient.helpers.mod(x, n);
    }
    return result;
  };

  /**
   * Extended Euclidean for finding inverses.
   * @method
   * @memberof helpers
   * @param {number} a - the number to find inverse for.
   * @param {number} b - the mod.
   * @return {number[]} [inverse of a mod b, coefficient for a, coefficient for b].
   */
  jiffClient.helpers.extended_gcd = function (a, b) {
    if (b === 0) {
      return [1, 0, a];
    }

    var temp = jiffClient.helpers.extended_gcd(b, jiffClient.helpers.mod(a, b));
    var x = temp[0];
    var y = temp[1];
    var d = temp[2];
    return [y, x - y * Math.floor(a / b), d];
  };

  /**
   * Compute Log to a given base.
   * @method
   * @memberof helpers
   * @param {number} value - the number to find log for.
   * @param {number} [base=2] - the base (2 by default).
   * @return {number} log(value) with the given base.
   */
  jiffClient.helpers.bLog = function (value, base) {
    if (base == null) {
      base = 2;
    }
    return Math.log(value) / Math.log(base);
  };

  /**
   * Check that two sorted arrays are equal.
   * @method
   * @memberof helpers
   * @param {Array} arr1 - the first array.
   * @param {Array} arr2 - the second array.
   * @return {boolean} true if arr1 is equal to arr2, false otherwise.
   */
  jiffClient.helpers.array_equals = function (arr1, arr2) {
    if (arr1.length !== arr2.length) {
      return false;
    }

    for (var i = 0; i < arr1.length; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }

    return true;
  };

  /**
   * Check that two Zps are equal. Used to determine if shares can be computed on or not.
   * @method
   * @memberof helpers
   * @param {SecretShare} s1 - the first share.
   * @param {SecretShare} s2 - the second share.
   * @return {boolean} true both shares have the same Zp, false otherwise.
   */
  jiffClient.helpers.Zp_equals = function (s1, s2) {
    return s1.Zp === s2.Zp;
  };

  /**
   * Generate a random integer between 0 and max-1 [inclusive].
   * Modify this to change the source of randomness and how it is generated.
   * @method
   * @memberof helpers
   * @param {number} max - the maximum number.
   * @return {number} the random number.
   */
  jiffClient.helpers.random = helpers.random;

  /**
   * Get the party number from the given party_id, the number is used to compute/open shares.
   * If party id was a number (regular party), that number is returned,
   * If party id refers to the ith server, then party_count + i is returned (i > 0).
   * @method
   * @memberof helpers
   * @param {number|string} party_id - the party id from which to compute the number.
   * @return {number} the party number (> 0).
   */
  jiffClient.helpers.get_party_number = helpers.get_party_number;

  /**
   * Transforms the given number to an array of bits (numbers).
   * Lower indices in the returned array corresponding to less significant bits.
   * @memberof helpers
   * @method
   * @param {number} number - the number to transform to binary
   * @param {length} [length=ceil(log2(number))] - if provided, then the given array will be padded with zeros to the length.
   * @return {number[]} the array of bits.
   */
  jiffClient.helpers.number_to_bits = helpers.number_to_bits;

  /**
   * Transforms the given array of bits to a number.
   * @memberof helpers
   * @method
   * @param {number[]} bits - the array of bits to compose as a number, starting from least to most significant bits.
   * @param {number} [length = bits.length] - if provided, only the first 'length' bits will be used
   * @return {number} the array of bits.
   */
  jiffClient.helpers.bits_to_number = function (bits, length) {
    if (length == null || length > bits.length) {
      length = bits.length;
    }
    return parseInt(bits.slice(0, length).reverse().join(''), 2);
  };

  /**
   * Checks if the given number is prime using AKS primality test
   * @method
   * @memberof helpers
   * @param {number} p - the number to check
   * @return {boolean} true if p is prime, false otherwise
   */
  jiffClient.helpers.is_prime = function (p) {
    // AKS Primality Test

    if (p === 2) {
      return true;
    } else if (p === 3) {
      return true;
    } else if (p % 2 === 0) {
      return false;
    } else if (p % 3 === 0) {
      return false;
    }

    var i = 5;
    var n = 2;
    while (i * i <= p) {
      if (p % i === 0) {
        return false;
      }
      i += n;
      n = 6 - n;
    }

    return true;
  };

  /**
   * sorts an array of ids (in place) according to a consistent ordering
   * @method
   * @memberof helpers
   * @param {array} ids - array of ids containing numbers or "s1"
   */
  jiffClient.helpers.sort_ids = function (ids) {
    if (ids.__jiff_sorted) {
      return;
    }

    ids.sort(function (e1, e2) {
      if (e1 === e2) {
        throw new Error('ids array has duplicated: ' + ids.toString());
      }
      if (e1 === 's1') {
        return 1;
      }
      if (e2 === 's1') {
        return -1;
      }
      return e1 - e2;
    });
    ids.__jiff_sorted = true;
  }
};
},{"../../common/helpers.js":51}],50:[function(require,module,exports){
/**
 * Contains utility functions (higher order combinators)
 * @see {@link module:jiff-client~JIFFClient#utils}
 * @name utils
 * @alias utils
 * @namespace
 */

module.exports = function (jiffClient) {
  /**
   * Create an array of secret shares and associated deferred.
   * @method
   * @memberof utils
   * @param {number} count - number of secret shares
   * @param {Array} holders - the parties that hold all the corresponding shares (must be sorted)
   * @param {number} threshold - the min number of parties needed to reconstruct the secret
   * @param {number} Zp - the mod under which this share was created
   * @return {object} the secret share object containing the give value
   *
   */
  jiffClient.utils.many_secret_shares = function (count, holders, threshold, Zp) {
    var deferreds = [];
    var shares = [];
    for (var i = 0; i < count; i++) {
      var deferred = new jiffClient.helpers.Deferred();
      shares.push(new jiffClient.SecretShare(deferred.promise, holders, threshold, Zp));
      deferreds.push(deferred);
    }

    return {shares: shares, deferreds: deferreds};
  };

  /**
   * Resolve the array of deferreds with the values of the given shares when ready, matched by index
   * @method
   * @memberof utils
   * @param {Deferred[]} deferreds - the deferred to resolve
   * @param {SecretShare[]} shares - the shares to resolve with
   */
  jiffClient.utils.resolve_many_secrets = function (deferreds, shares) {
    for (var i = 0; i < deferreds.length; i++) {
      shares[i].wThen(deferreds[i].resolve);
    }
  };

  /**
   * Combines all the promises of the given share into a single promise that is resolved when
   * all shares are resolved
   * @method
   * @methodof utils
   * @param {SecretShare[]} shares - the shares whose promises should be joined
   */
  jiffClient.utils.all_promises = function (shares) {
    var promises = [];
    for (var i = 0; i < shares.length; i++) {
      promises.push(shares[i].value);
    }
    return Promise.all(promises);
  };

  /**
   * A high level combinator for iteration of bit arrays
   * It executes a round of (func) starting from index start to the length (supports backwards if start > length) excluding length
   * Every round is blocked until the previous one finishes and the promise produced by it
   * is resolved
   * The final value is used to resolve deferred
   * @method
   * @memberof utils
   * @param {!Deferred} deferred - the deferred to resolve with the final output
   * @param {!number} start - the index to start from
   * @param {!number} length - the index to stop at (excluding it)
   * @param {?object} initial - an initial aggregator value
   * @param {!function(number, object)} func - the aggregator function to apply to the elements in order, takes the index and the aggregator value so far
   * @param {?function(object)} [promisify] - if initial is not null, this is called prior to starting combinator, to turn initial
   *                                        into a promise of the actually used initial value(in case it has to be resolved),
   *                                        defaults to promisifying a SecretShare with .wThen
   * @param {?function(object)} [valufy] - applied to the final result to turn it into a value, which is then used to resolve deferred,
   *                                       defaults to getting value of a SecretShare
   */
  jiffClient.utils.bit_combinator = function (deferred, start, length, initial, func, promisify, valufy) {
    if (promisify == null) {
      promisify = function (share) {
        return {then: share.wThen.bind(share)};
      }
    }

    if (valufy == null) {
      valufy = function (share) {
        return share.value;
      }
    }

    var next = start <= length ? 1 : -1;
    var __bit_combinator = function (start, val) {
      if (start === length) {
        // done
        deferred.resolve(valufy(val));
        return;
      }

      // execute func once
      val = func(start, val);

      // when done, do next iteration
      promisify(val).then(function () {
        __bit_combinator(start + next, val);
      });
    };

    // start combinator
    if (initial == null) {
      __bit_combinator(start, initial);
    } else {
      promisify(initial).then(function () {
        __bit_combinator(start, initial);
      });
    }
  }
};
},{}],51:[function(require,module,exports){
var crypto_;
if (typeof(window) === 'undefined') {
  crypto_ = require('crypto');
  crypto_.__randomBytesWrapper = crypto_.randomBytes;
} else {
  crypto_ = window.crypto || window.msCrypto;
  crypto_.__randomBytesWrapper = function (bytesNeeded) {
    var randomBytes = new Uint8Array(bytesNeeded);
    crypto_.getRandomValues(randomBytes);
    return randomBytes;
  };
}

// Secure randomness via rejection sampling.
exports.random = function (max) {
  // Use rejection sampling to get random value within bounds
  // Generate random Uint8 values of 1 byte larger than the max parameter
  // Reject if random is larger than quotient * max (remainder would cause biased distribution), then try again

  // Values up to 2^53 should be supported, but log2(2^49) === log2(2^49+1), so we lack the precision to easily
  // determine how many bytes are required
  if (max > 562949953421312) {
    throw new RangeError('Max value should be smaller than or equal to 2^49');
  }

  var bitsNeeded = Math.ceil(Math.log(max)/Math.log(2));
  var bytesNeeded = Math.ceil(bitsNeeded / 8);
  var maxValue = Math.pow(256, bytesNeeded);

  // Keep trying until we find a random value within bounds
  while (true) { // eslint-disable-line
    var randomBytes = crypto_.__randomBytesWrapper(bytesNeeded);
    var randomValue = 0;

    for (var i = 0; i < bytesNeeded; i++) {
      randomValue = randomValue * 256 + (randomBytes.readUInt8 ? randomBytes.readUInt8(i) : randomBytes[i]);
    }

    // randomValue should be smaller than largest multiple of max within maxBytes
    if (randomValue < maxValue - maxValue % max) {
      return randomValue % max;
    }
  }
};

// actual mode
exports.mod = function (x, y) {
  if (x < 0) {
    return (x % y) + y;
  }
  return x % y;
};

// get the party number from the given party_id, the number is used to compute/open shares
exports.get_party_number = function (party_id) {
  if (typeof(party_id) === 'number') {
    return party_id;
  }
  if (party_id.startsWith('s')) {
    return -1 * parseInt(party_id.substring(1), 10);
  }
  return parseInt(party_id, 10);
};

// transform number to bit array
exports.number_to_bits = function (number, length) {
  number = number.toString(2);
  var bits = [];
  for (var i = 0; i < number.length; i++) {
    bits[i] = parseInt(number.charAt(number.length - 1 - i));
  }
  while (length != null && bits.length < length) {
    bits.push(0);
  }
  return bits;
};
},{"crypto":204}],52:[function(require,module,exports){
/** Doubly linked list with add and remove functions and pointers to head and tail**/
module.exports = function () {
  // attributes: list.head and list.tail
  // functions: list.add(object) (returns pointer), list.remove(pointer)
  // list.head/list.tail/any element contains:
  //    next: pointer to next,
  //    previous: pointer to previous,
  //    object: stored object.
  var list = {head: null, tail: null};
  // TODO rename this to pushTail || push
  list.add = function (obj) {
    var node = { object: obj, next: null, previous: null };
    if (list.head == null) {
      list.head = node;
      list.tail = node;
    } else {
      list.tail.next = node;
      node.previous = list.tail;
      list.tail = node;
    }
    return node;
  };

  list.pushHead = function (obj) {
    list.head = {object: obj, next : list.head, previous : null};
    if (list.head.next != null) {
      list.head.next.previous = list.head;
    } else {
      list.tail = list.head;
    }
  };

  list.popHead = function () {
    var result = list.head;
    if (list.head != null) {
      list.head = list.head.next;
      if (list.head == null) {
        list.tail = null;
      } else {
        list.head.previous  = null;
      }
    }
    return result;
  };

  // merges two linked lists and return a pointer to the head of the merged list
  // the head will be the head of list and the tail the tail of l2
  list.extend = function (l2) {
    if (list.head == null) {
      return l2;
    }
    if (l2.head == null) {
      return list;
    }
    list.tail.next = l2.head;
    l2.head.previous = list.tail;
    list.tail = l2.tail;

    return list;
  };

  list.remove = function (ptr) {
    var prev = ptr.previous;
    var next = ptr.next;

    if (prev == null && list.head !== ptr) {
      return;
    } else if (next == null && list.tail !== ptr) {
      return;
    }

    if (prev == null) { // ptr is head (or both head and tail)
      list.head = next;
      if (list.head != null) {
        list.head.previous = null;
      } else {
        list.tail = null;
      }
    } else if (next == null) { // ptr is tail (and not head)
      list.tail = prev;
      prev.next = null;
    } else { // ptr is inside
      prev.next = next;
      next.previous = prev;
    }
  };
  list.slice = function (ptr) { // remove all elements from head to ptr (including ptr).
    if (ptr == null) {
      return;
    }

    /* CONSERVATIVE: make sure ptr is part of the list then remove */
    var current = list.head;
    while (current != null) {
      if (current === ptr) {
        list.head = ptr.next;
        if (list.head == null) {
          list.tail = null;
        }

        return;
      }
      current = current.next;
    }

    /* MORE AGGRESSIVE VERSION: will be incorrect if ptr is not in the list */
    /*
    list.head = ptr.next;
    if (list.head == null) {
      list.tail = null;
    }
    */
  };
  /*
  list._debug_length = function () {
    var l = 0;
    var current = list.head;
    while (current != null) {
      current = current.next;
      l++;
    }
    return l;
  };
  */
  return list;
};

},{}],53:[function(require,module,exports){
(function (global){
/**
 * This defines a library extension for using websockets rather than socket.io for communication. This
 * extension primarily edits/overwrites existing socket functions to use and be compatible with the
 * ws library.
 * @namespace jiffclient_websockets
 * @version 1.0
 *
 * REQUIREMENTS:
 * You must apply this extension to your client and the server you're communicating with must apply jiffserver_websockets.
 */


(function (exports, node) {
  /**
   * The name of this extension: 'websocket'
   * @type {string}
   * @memberOf jiffclient_websockets
   */
  exports.name = 'jiff_websockets';

  var WebSocket
  if (node) {
    var linked_list = require('../common/linkedlist.js');
    const socket = require('../server/socket.js');
    WebSocket = require('ws');
    var handlers = require('../client/handlers.js');
  } else {
    if (typeof WebSocket !== 'undefined') {
      ws = WebSocket
    } else if (typeof MozWebSocket !== 'undefined') {
      ws = MozWebSocket
    } else if (typeof global !== 'undefined') {
      ws = global.WebSocket || global.MozWebSocket
    } else if (typeof window !== 'undefined') {
      ws = window.WebSocket || window.MozWebSocket
    } else if (typeof self !== 'undefined') {
      ws = self.WebSocket || self.MozWebSocket
    }
  }


  // Take the jiff-client base instance and options for this extension, and use them
  // to construct an instance for this extension.
  function make_jiff(base_instance, options) {
    var jiff = base_instance;

    // Parse options
    if (options == null) {
      options = {};
    }

    /* Functions that overwrite client/socket/events.js functionality */

    /**
     * initSocket's '.on' functions needed to be replaced since ws does
     * not have as many protocols. Instead these functions are routed to
     * when a message is received and a protocol is manually parsed.
     */
    jiff.initSocket = function () {
      var jiffClient = this;

      /* ws uses the 'open' protocol on connection. Should not conflict with the
         JIFF open protocl as that will be sent as a message and ws
         will see it as a 'message' protocol. */
      this.socket.onopen = jiffClient.handlers.connected;

      // Public keys were updated on the server, and it sent us the updates
      function publicKeysChanged(msg, callback) {

        msg = JSON.parse(msg);
        msg = jiffClient.hooks.execute_array_hooks('afterOperation', [jiffClient, 'public_keys', msg], 2);

        jiffClient.handlers.store_public_keys(msg.public_keys);
      }

      // Setup receiving matching shares
      function share(msg, callback) {

        // parse message
        var json_msg = JSON.parse(msg);
        var sender_id = json_msg['party_id'];

        if (jiffClient.keymap[sender_id] != null) {
          jiffClient.handlers.receive_share(json_msg);
        } else {
          if (jiffClient.messagesWaitingKeys[sender_id] == null) {
            jiffClient.messagesWaitingKeys[sender_id] = [];
          }
          jiffClient.messagesWaitingKeys[sender_id].push({label: 'share', msg: json_msg});
        }
      }

      function mpcOpen(msg, callback) {
        // parse message
        var json_msg = JSON.parse(msg);
        var sender_id = json_msg['party_id'];

        if (jiffClient.keymap[sender_id] != null) {
          jiffClient.handlers.receive_open(json_msg);
        } else {
          if (jiffClient.messagesWaitingKeys[sender_id] == null) {
            jiffClient.messagesWaitingKeys[sender_id] = [];
          }
          jiffClient.messagesWaitingKeys[sender_id].push({label: 'open', msg: json_msg});
        }
      }

      // handle custom messages
      function socketCustom(msg, callback) {
        var json_msg = JSON.parse(msg);
        var sender_id = json_msg['party_id'];
        var encrypted = json_msg['encrypted'];

        if (jiffClient.keymap[sender_id] != null || encrypted !== true) {
          jiffClient.handlers.receive_custom(json_msg);
        } else {
          // key must not exist yet for sender_id, and encrypted must be true
          if (jiffClient.messagesWaitingKeys[sender_id] == null) {
            jiffClient.messagesWaitingKeys[sender_id] = [];
          }
          jiffClient.messagesWaitingKeys[sender_id].push({label: 'custom', msg: json_msg});
        }
      }

      function cryptoProvider(msg, callback) {
        jiffClient.handlers.receive_crypto_provider(JSON.parse(msg));
      }

      function onError(msg) {
        try {
          msg = JSON.parse(msg);
          jiffClient.handlers.error(msg['label'], msg['error']);
        } catch (error) {
          jiffClient.handlers.error('socket.io', msg);
        }
      }

      function socketClose(reason) {
        if (reason !== 'io client disconnect') {
          // check that the reason is an error and not a user initiated disconnect
          console.log('Disconnected!', jiffClient.id, reason);
        }

        jiffClient.hooks.execute_array_hooks('afterOperation', [jiffClient, 'disconnect', reason], -1);
      }

      this.socket.onclose = function (reason) {
        socketClose(reason.code);
      }

      /**
         * In every message sent over ws, we will send along with it a socketProtocol string
         * that will be parsed by the receiver to route the request to the correct function. The
         * previous information sent by socket.io will be untouched, but now sent inside of msg.data.
         */
      this.socket.onmessage = function (msg, callback) {
        msg = JSON.parse(msg.data);

        switch (msg.socketProtocol) {
          case 'initialization':
            jiffClient.handlers.initialized(msg.data);
            break;
          case 'public_keys':
            publicKeysChanged(msg.data, callback);
            break;
          case 'share':
            share(msg.data, callback);
            break;
          case 'open':
            mpcOpen(msg.data, callback);
            break;
          case 'custom':
            socketCustom(msg.data, callback);
            break;
          case 'crypto_provider':
            cryptoProvider(msg.data, callback);
            break;
          case 'close':
            socketClose(msg.data);
            break;
          case 'disconnect':
            socketClose(msg.data);
            break;
          case 'error':
            onError(msg.data);
            break;
          default:
            console.log('Uknown protocol, ' + msg.socketProtocol + ', received');
        }
      }

    };

    /* Overwrite the socketConnect function from jiff-client.js */
    jiff.socketConnect = function (JIFFClientInstance) {
      JIFFClientInstance.socket = guardedSocket(JIFFClientInstance);

      // set up socket event handlers
      handlers(JIFFClientInstance);

      // Overwrite handlers.connected with our new ws connection handler
      JIFFClientInstance.handlers.connected = function () {
        JIFFClientInstance.initialization_counter++;

        if (JIFFClientInstance.secret_key == null && JIFFClientInstance.public_key == null) {
          var key = JIFFClientInstance.hooks.generateKeyPair(JIFFClientInstance);
          JIFFClientInstance.secret_key = key.secret_key;
          JIFFClientInstance.public_key = key.public_key;
        }

        // Initialization message
        var msg = JIFFClientInstance.handlers.build_initialization_message();

        // Double wrap the msg
        msg = JSON.stringify(msg);

        // Emit initialization message to server
        JIFFClientInstance.socket.send(JSON.stringify( { socketProtocol: 'initialization', data: msg }));
      };


      JIFFClientInstance.initSocket();
    }
    /**
     * A guarded socket with an attached mailbox.
     *
     * The socket uses the mailbox to store all outgoing messages, and removes them from the mailbox only when
     * the server acknowledges their receipt. The socket resends mailbox upon re-connection. Extends {@link https://socket.io/docs/client-api/#Socket}.
     * @see {@link module:jiff-client~JIFFClient#socket}
     * @name GuardedSocket
     * @alias GuardedSocket
     * @constructor
     */

    /* Functions that overwrite client/socket/mailbox.js functionality */

    function guardedSocket(jiffClient) {
      // Create plain socket io object which we will wrap in this
      var socket = new WebSocket(jiffClient.hostname)

      socket.old_disconnect = socket.close;

      socket.mailbox = linked_list(); // for outgoing messages
      socket.empty_deferred = null; // gets resolved whenever the mailbox is empty
      socket.jiffClient = jiffClient;

      // add functionality to socket
      socket.safe_emit = safe_emit.bind(socket);
      socket.resend_mailbox = resend_mailbox.bind(socket);
      socket.disconnect = disconnect.bind(socket);
      socket.safe_disconnect = safe_disconnect.bind(socket);
      socket.is_empty = is_empty.bind(socket);

      return socket;
    }

    /**
     * Safe emit: stores message in the mailbox until acknowledgment is received, results in socket.emit(label, msg) call(s)
     * @method safe_emit
     * @memberof GuardedSocket
     * @instance
     * @param {string} label - the label given to the message
     * @param {string} msg - the message to send
     */
    function safe_emit(label, msg) {
      // add message to mailbox
      var mailbox_pointer = this.mailbox.add({ label: label, msg: msg });
      if (this.readyState === 1) {
        var self = this;
        // emit the message, if an acknowledgment is received, remove it from mailbox

        this.send(JSON.stringify( { socketProtocol: label, data: msg } ), null, function (status) {

          self.mailbox.remove(mailbox_pointer);

          if (self.is_empty() && self.empty_deferred != null) {
            self.empty_deferred.resolve();
          }

          if (label === 'free') {
            self.jiffClient.hooks.execute_array_hooks('afterOperation', [self.jiffClient, 'free', msg], 2);
          }
        });
      }

    }


    /**
     * Re-sends all pending messages
     * @method resend_mailbox
     * @memberof GuardedSocket
     * @instance
     */
    function resend_mailbox() {
      // Create a new mailbox, since the current mailbox will be resent and
      // will contain new backups.
      var old_mailbox = this.mailbox;
      this.mailbox = linked_list();

      // loop over all stored messages and emit them
      var current_node = old_mailbox.head;
      while (current_node != null) {
        var label = current_node.object.label;
        var msg = current_node.object.msg;
        this.safe_emit(label, msg);
        current_node = current_node.next;
      }

    }


    /**
     * Wraps socket regular disconnect with a call to a hook before disconnection
     * @method disconnect
     * @memberof GuardedSocket
     * @instance
     */
    function disconnect() {

      this.jiffClient.hooks.execute_array_hooks('beforeOperation', [this.jiffClient, 'disconnect', {}], -1);


      this.old_disconnect.apply(this, arguments);
    }


    /**
     * Safe disconnect: disconnect only after all messages (including free) were acknowledged and
     * all pending opens were resolved
     * @method safe_disconnect
     * @memberof GuardedSocket
     * @instance
     * @param {boolean} [free=false] - if true, a free message will be issued prior to disconnecting
     * @param {function()} [callback] - given callback will be executed after safe disconnection is complete
     */
    function safe_disconnect(free, callback) {

      if (this.is_empty()) {

        if (free) {
          this.jiffClient.free();
          free = false;
        } else {
          // T: Should remain "disconnect" since we override the .disconnect, no need to change to close
          this.disconnect();
          if (callback != null) {
            callback();
          }
          return;
        }
      }

      this.empty_deferred = new this.jiffClient.helpers.Deferred();
      this.empty_deferred.promise.then(this.safe_disconnect.bind(this, free, callback));

    }


    /**
     * Checks if the socket mailbox is empty (all communication was done and acknowledged),
     * used in safe_disconnect
     * @method is_empty
     * @memberof GuardedSocket
     * @instance
     */
    function is_empty() {
      return this.mailbox.head == null && this.jiffClient.counters.pending_opens === 0;

    }

    /* PREPROCESSING IS THE SAME */
    jiff.preprocessing_function_map[exports.name] = {};


    return jiff;
  }
  // Expose the API for this extension.
  exports.make_jiff = make_jiff;

}((typeof exports === 'undefined' ? this.jiff_websockets = {} : exports), typeof exports !== 'undefined'));


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../client/handlers.js":12,"../common/linkedlist.js":52,"../server/socket.js":56,"ws":140}],54:[function(require,module,exports){
/**
 * JIFF Client.
 *
 * Exposes the constructor for the {@link module:jiff-client~JIFFClient} class.
 *
 * In the browser, this adds `JIFFClient` as a global identifier.
 *
 * In the browser, this can be accessed via:
 * <pre><code>
 *   &lt;script src="jiff-client.js"&gt;&lt;/script&gt;
 *   &lt;script type="text/javascript"&gt;
 *     var jiffClientInstance = new JIFFClient(hostname, computationId, options);
 *   &lt;/script&gt;
 * </code></pre>
 *
 * In node.js, this can be accessed via:
 * <pre><code>
 *   const JIFFClient = require('jiffClient');
 *   const jiffClientInstance = new JIFFClient(hostname, computationId, options);
 *
 * </code></pre>
 *
 * @module jiff-client
 * @alias jiff-client
 */

// browserify bundles this into our code bundle
var sodium = require('libsodium-wrappers');

// utils and helpers
var constants = require('./client/util/constants.js');
var helpers = require('./client/util/helpers.js');
var utils = require('./client/util/utils.js');
var linkedList = require('./common/linkedlist.js');

var websocketExt = require('./ext/jiff-client-websockets.js')
// hooks
var Hooks = require('./client/arch/hooks.js');

// extensions management
var extensions = require('./client/arch/extensions.js');

// op ids and other counters
var counters = require('./client/arch/counters.js');

// socket and events
var guardedSocket = require('./client/socket/mailbox.js');
var internalSocket = require('./client/socket/internal.js');
var socketEvents = require('./client/socket/events.js');

// handlers for communication
var handlers = require('./client/handlers.js');

// secret shares
var SecretShareMetaClass = require('./client/share.js');
var share_helpers = require('./client/shareHelpers.js');

// jiff client instance API
var api = require('./client/api.js');

// preprocessing
var preprocessingMap = require('./client/preprocessing/map.js');
var preprocessingAPI = require('./client/preprocessing/api.js');
var preprocessingDaemon = require('./client/preprocessing/daemon.js');
var socket = require('./server/socket.js');

/**
 * Creates a new jiff client instance.
 * @class
 * @name JIFFClient
 * @param {!string} hostname - server hostname/ip and port.
 * @param {!string} computation_id - the id of the computation of this instance.
 * @param {?object} [options={}] - javascript object with additional options.
 *                           all parameters are optional, However, private and public key must either be both provided or neither of them provided.
 <pre>
 {
   "party_id": number,
   "party_count": number,
   "secret_key": Uint8Array to be used with libsodium-wrappers [(check Library Specs)]{@link https://download.libsodium.org/doc/public-key_cryptography/authenticated_encryption.html},
   "public_key": Uint8Array to be used with libsodium-wrappers [(check Library Specs)]{@link https://download.libsodium.org/doc/public-key_cryptography/authenticated_encryption.html},
   "public_keys": { 1: "Uint8Array PublicKey", 2: "Uint8Array PublicKey", ... },
   "Zp": default mod to use (prime number),
   "autoConnect": true/false,
   "hooks": { 'check out <a href="hooks.html">hooks documentation</a>' },
   "listeners" : A map from custom tags to listeners (of type function(sender_id, message_string)) that handle custom messages with that tag.
   "onConnect": function(jiff_instance),
   "onError": function(label, error): called when errors occured in client code or during handling requests from this client at the server side
                                      label is a string indicating where the error occured, and error is a string or an exception object.
   "safemod": boolean (whether or not to check if provided Zp is prime, may be slow for big primes, defaults to false),
   "crypto_provider": a boolean that flags whether to get beaver triplets and other preprocessing entities from the server (defaults to false),
   "socketOptions": an object, passed directly to socket.io constructor,
   "sodium": boolean, if false messages between clients will not be encrypted (useful for debugging),
   "maxInitializationRetries": how many consecutive times to retry to initialize with the server if initialization fails, defaults to 2,
   "preprocessingBatchSize": how many base level preprocessing tasks to execute in parallel.
 }
 </pre>
 *
 * @example
 * var JIFFClient = require('jiffClient'); // only for node.js
 * <script src="jiff-client.js"></script> // for the browser
 * // build a jiff instance which will connect to a server running on the local machine
 * var instance = new JIFFClient('http://localhost:8080', 'computation-1', {party_count: 2});
 */
function JIFFClient(hostname, computation_id, options) {
  var jiffClient = this;
  options = Object.assign({}, options);

  /**
   * The server hostname, ends with a slash, includes port and protocol (http/https).
   * @type {!string}
   */
  this.hostname = hostname.trim();
  if (!this.hostname.endsWith('/')) {
    this.hostname = this.hostname + '/';
  }

  /**
   * Stores the computation id.
   * @type {!string}
   */
  this.computation_id = computation_id;

  /**
   * Private. Do not use directly externally; use isReady() instead.
   * @type {!boolean}
   * @see {@link module:jiff-client~JIFFClient#isReady}
   */
  this.__ready = false;

  /**
   * Private. Do not use directly externally; use isInitialized() instead.
   * @type {!boolean}
   * @see {@link module:jiff-client~JIFFClient#isInitialized}
   */
  this.__initialized = false;

  /**
   * Returns whether this instance is capable of starting the computation.
   * In other words, the public keys for all parties and servers are known,
   * and this party successfully initialized with the server.
   * @returns {!boolean}
   */
  this.isReady = function () {
    return this.__ready;
  };

  /**
   * Returns whether this instance initialized successfully with the server.
   * Note that this can be true even when isReady() returns false, in case where some other parties have not
   * initialized yet!
   * @returns {!boolean}
   */
  this.isInitialized = function () {
    return this.__initialized;
  };

  /**
   * Helper functions [DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING].
   * @type {!helpers}
   */
  this.helpers = {};
  helpers(this);

  /**
   * Shallow copy of the options passed to the constructor.
   * @type {!Object}
   */

  this.options = options;


  // Parse and verify options
  options.maxInitializationRetries = options.maxInitializationRetries || constants.maxInitializationRetries;
  if (typeof(options.Zp) === 'number' && options.safemod !== false) { // big numbers are checked by extension
    if (!this.helpers.is_prime(options.Zp)) {
      throw new Error('Zp = ' + options.Zp + ' is not prime.  Please use a prime number for the modulus or set safemod to false.');
    }
  }

  /**
   * The default Zp for this instance.
   * @type {!number}
   */
  this.Zp = options.Zp || constants.gZp;

  /**
   * The id of this party.
   * @type {number}
   */
  this.id = options.party_id;

  /**
   * Total party count in the computation, parties will take ids between 1 to party_count (inclusive).
   * @type {number}
   */
  this.party_count = options.party_count;

  /**
   * sodium wrappers either imported via require (if in nodejs) or from the bundle (in the browser).
   * This will be false if options.sodium is false.
   * @see {@link https://www.npmjs.com/package/libsodium-wrappers}
   * @type {?sodium}
   */
  this.sodium_ = options.sodium !== false ? sodium : false;

  /**
   * A map from party id to public key. Where key is the party id (number), and
   * value is the public key, which by default follows libsodium's specs (Uint8Array).
   * @see {@link https://download.libsodium.org/doc/public-key_cryptography/authenticated_encryption.html}
   * @type {!object}
   */
  this.keymap = Object.assign({}, options.public_keys);

  /**
   * The secret key of this party, by default this follows libsodium's specs.
   * @see {@link https://download.libsodium.org/doc/public-key_cryptography/authenticated_encryption.html}
   * @type {?Uint8Array}
   */
  this.secret_key = options.secret_key;

  /**
   * The public key of this party, by default this follows libsodium's specs.
   * @see {@link https://download.libsodium.org/doc/public-key_cryptography/authenticated_encryption.html}
   * @type {?Uint8Array}
   */
  this.public_key = options.public_key;

  /**
   * Flags whether to use the server as a fallback for objects that were not pre-processed properly
   * @type {!boolean}
   */
  this.crypto_provider = (options.crypto_provider === true);

  /**
   * Stores messages that are received with a signature prior to acquiring the public keys of the sender.
   * { 'party_id': [ { 'label': 'share/open/custom', <other attributes of the message> } ] }
   * @type {object}
   */
  this.messagesWaitingKeys = {};

  /**
   * A map from tags to listeners (functions that take a sender_id and a string message).
   *
   * Stores listeners that are attached to this JIFF instance, listeners listen to custom messages sent by other parties.
   * @type {!object}
   */
  this.listeners = Object.assign({}, options.listeners);

  /**
   * Stores custom messages that are received before their listeners are set. Messages are stored in order.
   * { 'tag' => [ { "sender_id": <sender_id>, "message": <message> }, ... ] }
   *
   * Once a listener has been set, the corresponding messages are sent to it in order.
   * @type {!object}
   */
  this.custom_messages_mailbox = {};

  /**
   * Stores all promises created within some barrier.
   * @type {!object}
   */
  this.barriers = {};

  /**
   * Stores the parties and callbacks for every .wait_for() registered by the user.
   * @type {!Array}
   */
  this.wait_callbacks = [];

  /**
   * Counts how many times JIFF attempted to initialize with the server
   * without success consecutively.
   * @type {!number}
   *
   */
  this.initialization_counter = 0;

  /**
   * Utility functions
   * @type {!utils}
   */
  this.utils = {};
  utils(this);

  /**
   * An array containing the names (jiff-client-[name].js) of the extensions that are
   * applied to this instance.
   * @type {string[]}
   */
  this.extensions = ['base'];

  /**
   * Internal helpers for operations inside/on a share. Modify existing helpers or add more in your extensions
   * to avoid having to re-write and duplicate the code for primitives.
   * @type {!object}
   */
  this.share_helpers = share_helpers;

  /**
   * The constructor function used by JIFF to create a new share. This can be overloaded by extensions to create custom shares.
   * Modifying this will modify how shares are generated in the BASE JIFF implementation.
   * A share is a value/promise wrapped with a share object.
   * A share also has methods for performing operations.
   * @constructor
   * @param {number|promise} value - the value of the share, or a promise to it.
   * @param {Array} holders - the parties that hold all the corresponding shares (must be sorted).
   * @param {number} threshold - the min number of parties needed to reconstruct the secret.
   * @param {number} Zp - the mod under which this share was created.
   *
   * @example
   * // A share whose value is 10: the secret is still unknown, 10 is only one share
   * var share = new jiffClient.SecretShare(10, [1, 2, 3], 3, jiffClient.Zp);
   *
   * @example
   * // A share whose value depends on some promise
   * var share = new jiffClient.SecretShare(promise, [1, 2, 3, 4], 4, jiffClient.Zp);
   */
  this.SecretShare = SecretShareMetaClass(this);

  /**
   * A collection of useful protocols to be used during computation or preprocessing: extensions are encouraged to add useful
   * common protocols here, under a sub namespace corresponding to the extension name.
   * @type {!protocols}
   */
  this.protocols = {};

  /**
   * A collection of useful protocols for manipulating bitwise shared numbers, and transforming them from and to regular numeric shares.
   * @member {!bits} bits
   * @memberof protocols
   */
  this.protocols.bits = {};

  /**
   * Stores pre-computed values (beaver triples, random bits, etc) used to aid/speed up the main processes.
   * @type {!object}
   */
  this.preprocessing_table = {};

  /**
   * Sets batch size for base level preprocessing tasks
   * @type {!Number}
   */
  this.preprocessingBatchSize = options.preprocessingBatchSize || 10;

  /**
   * maps all primitive operations to the other operations they are dependent on, until leaves are primitives for which preprocessing protocols are defined,
   * this map is traversed during preprocessing to guide preprocessing of high level operations. Extensions should modify this map to reflect
   * any required changes to preprocessing of modified primitives
   * @type {!object}
   */
  this.preprocessing_function_map = {};

  /**
   * Store the default preprocessing protocols for each type of preprocessing value
   * @type {!object}
   */
  this.default_preprocessing_protocols = {};

  /**
   * Stores currently executing preprocessing tasks.
   * @type {!linkedlist}
   */
  this.currentPreprocessingTasks = linkedList();

  /**
   * Callback to execute when preprocessing is done!
   * @type {?function}
   */
  this.preprocessingCallback = null;

  /**
   * Used for logging/debugging
   * @type {!Array}
   */
  this.logs = [];

  /**
   * A map from open operation id to the corresponding shares received for that open operation
   * @type {!object}
   */
  this.shares = {};

  /**
   * A map from some message operation id to a deferred resolved when that message is received.
   * @type {!object}
   */
  this.deferreds = {};

  /**
   * Store sharing and shares counter which keeps track of the count of
   * sharing operations (share and open) and the total number of shares
   * respectively (used to get a unique id for each share operation and
   * share object).
   * @type {!object}
   */
  this.counters = {};

  /**
   * A prefix attached to all op_ids, can be changed using {@link module:jiff-client~JIFFClient#seed_ids}
   * to guarantee uniqueness of auto generate ids in a user-side callback
   * or event handler.
   * @type {string}
   * @see {@link module:jiff-client~JIFFClient#seed_ids}
   */
  this.op_id_seed = '';

  /**
   * The hooks for this instance.
   * Checkout the <a href="hooks.html">hooks documentation</a>
   * @type {!hooks}
   */
  this.hooks = new Hooks(this);

  /**
   * Contains handlers for communication events
   * @type {!handlers}
   */
  this.handlers = {};

  // Add user facing API
  api(this);

  // Preprocessing
  preprocessingMap(this);
  preprocessingAPI(this);
  preprocessingDaemon(this);

  // set up counters for op_ids
  counters(this);


  this.socketConnect = function (JIFFClientInstance) {

    if (options.__internal_socket == null) {
      /**
       * Socket wrapper between this instance and the server, based on sockets.io
       * @type {!GuardedSocket}
       */
      JIFFClientInstance.socket = guardedSocket(JIFFClientInstance);
    } else {
      JIFFClientInstance.socket = internalSocket(JIFFClientInstance, options.__internal_socket);
    }

    // set up socket event handlers
    handlers(JIFFClientInstance);

    JIFFClientInstance.initSocket();


    JIFFClientInstance.socket.connect();
  }

  /**
   * Connect to the server and starts listening.
   */
  this.connect = function () {
    // Ask socket to connect, which will automatically trigger a call to 'initialize()' when connection is established!

    // Wait to let JIFF know that we are connected until sodium is ready
    // Trigger the onConnect call
    var JIFFClientInstance = this;
    if (jiffClient.sodium_ === false) {
      JIFFClientInstance.socketConnect(JIFFClientInstance);
    } else {
      jiffClient.sodium_.ready.then(function () {
        JIFFClientInstance.socketConnect(JIFFClientInstance);
      });
    }
  };

  // Connect when all is done
  if (options.autoConnect !== false) {
    this.connect();
  }
}


// Add socket event handlers to prototype
socketEvents(JIFFClient);

// Add extension management to prototype
extensions(JIFFClient);

// export JIFFClient class
module.exports = JIFFClient;

},{"./client/api.js":1,"./client/arch/counters.js":9,"./client/arch/extensions.js":10,"./client/arch/hooks.js":11,"./client/handlers.js":12,"./client/preprocessing/api.js":17,"./client/preprocessing/daemon.js":18,"./client/preprocessing/map.js":20,"./client/share.js":42,"./client/shareHelpers.js":43,"./client/socket/events.js":44,"./client/socket/internal.js":45,"./client/socket/mailbox.js":46,"./client/util/constants.js":47,"./client/util/helpers.js":49,"./client/util/utils.js":50,"./common/linkedlist.js":52,"./ext/jiff-client-websockets.js":53,"./server/socket.js":56,"libsodium-wrappers":99}],55:[function(require,module,exports){
module.exports = {
  PING_TIMEOUT: 5000,
  PING_INTERVAL: 25000
};
},{}],56:[function(require,module,exports){
var io = require('socket.io');

var constants = require('./constants.js');

module.exports = function (JIFFServer) {
  // initializes the socket
  JIFFServer.prototype.initSocket = function () {
    var jiff = this;

    // socket io options
    var socketOptions = Object.assign({
      pingTimeout: constants.PING_TIMEOUT,
      pingInterval: constants.PING_INTERVAL
    }, this.options.socketOptions);

    // create socket io server and listen to connection
    this.io = io(this.http, socketOptions);
    this.io.on('connection', function (socket) {
      jiff.hooks.log(jiff, 'user connected');

      socket.on('initialization', function (msg) {
        // START OF SOCKET SPECIFIC SETUP
        msg = JSON.parse(msg);

        // read message
        var computation_id = msg['computation_id'];
        var party_id = msg['party_id'];
        var party_count = msg['party_count'];
        // END OF SOCKET SPECIFIC SETUP

        // COMPUTATION: independent from socket
        msg.socket_id = socket.id; // Hack-ish trick to pass this as a parameter to the default hook.
        var output = jiff.handlers.initializeParty(computation_id, party_id, party_count, msg, false);
        // END OF COMPUTATION

        // START OF SOCKET SPECIFIC OUTPUT/CLEANUP
        if (output.success) {
          jiff.socketMaps.socketId[computation_id][output.message.party_id] = socket.id;
          jiff.socketMaps.computationId[socket.id] = computation_id;
          jiff.socketMaps.partyId[socket.id] = output.message.party_id;

          party_id = output.message.party_id;
          output.message = JSON.stringify(output.message);
          jiff.io.to(socket.id).emit('initialization', output.message);

          // Now that party is connected and has the needed public keys,
          // send the mailbox with pending messages to the party.
          jiff.resend_mailbox(computation_id, party_id);
        } else {
          jiff.io.to(socket.id).emit('error', JSON.stringify({label: 'initialization', error: output.error}));
        }
        // END OF SOCKET SPECIFIC OUTPUT/CLEANUP
      });

      socket.on('share', function (msg, callback) {
        callback(true); // send ack to client

        var json_msg = JSON.parse(msg);
        var computation_id = jiff.socketMaps.computationId[socket.id];
        var from_id = jiff.socketMaps.partyId[socket.id];

        var output = jiff.handlers.share(computation_id, from_id, json_msg);
        if (!output.success) {
          var errorMsg = JSON.stringify({label: 'share', error: output.error});
          jiff.emit('error', errorMsg, computation_id, from_id);
        }
      });

      socket.on('open', function (msg, callback) {
        callback(true); // send ack to client

        var computation_id = jiff.socketMaps.computationId[socket.id];
        var from_id = jiff.socketMaps.partyId[socket.id];
        var json_msg = JSON.parse(msg);

        var output = jiff.handlers.open(computation_id, from_id, json_msg);
        if (!output.success) {
          var errorMsg = JSON.stringify({label: 'open', error: output.error});
          jiff.emit('error', errorMsg, computation_id, from_id);
        }
      });

      socket.on('custom', function (msg, callback) {
        callback(true); // send ack to client

        var computation_id = jiff.socketMaps.computationId[socket.id];
        var from_id = jiff.socketMaps.partyId[socket.id];
        var json_msg = JSON.parse(msg);

        var output = jiff.handlers.custom(computation_id, from_id, json_msg);
        if (!output.success) {
          var errorMsg = JSON.stringify({label: 'custom', error: output.error});
          jiff.emit('error', errorMsg, computation_id, from_id);
        }
      });

      socket.on('crypto_provider', function (msg, callback) {
        callback(true); // send ack to client

        msg = JSON.parse(msg);
        var computation_id = jiff.socketMaps.computationId[socket.id];
        var from_id = jiff.socketMaps.partyId[socket.id];

        var res = jiff.handlers.crypto_provider(computation_id, from_id, msg);
        if (!res.success) {
          var errorMsg = JSON.stringify({label: 'crypto_provider', error: res.error});
          jiff.emit('error', errorMsg, computation_id, from_id);
        }
      });

      socket.on('disconnect', function (reason) {
        var computation_id = jiff.socketMaps.computationId[socket.id];
        var from_id = jiff.socketMaps.partyId[socket.id];

        jiff.hooks.log(jiff, 'user disconnected', computation_id, from_id, 'Reason:', reason);
        jiff.hooks.execute_array_hooks('onDisconnect', [jiff, computation_id, from_id], -1);

        if (jiff.computationMaps.freeParties[computation_id] == null || jiff.computationMaps.freeParties[computation_id][from_id]) {
          delete jiff.socketMaps.computationId[socket.id];
          delete jiff.socketMaps.partyId[socket.id];
        } else {
          socket.__jiff_cleaned = true;
        }
      });

      socket.on('free', function (msg, callback) {
        callback(true);

        msg = JSON.parse(msg);
        var computation_id = jiff.socketMaps.computationId[socket.id];
        var from_id = jiff.socketMaps.partyId[socket.id];

        var output = jiff.handlers.free(computation_id, from_id, msg);
        if (!output.success) {
          var errorMsg = JSON.stringify({label: 'free', error: output.error});
          jiff.emit('error', errorMsg, computation_id, from_id);
        }

        if (socket.__jiff_cleaned) {
          delete jiff.socketMaps.computationId[socket.id];
          delete jiff.socketMaps.partyId[socket.id];
          delete socket.__jiff_cleaned;
        }
      });
    });
  };
};
},{"./constants.js":55,"socket.io":133}],57:[function(require,module,exports){
/*!
 * accepts
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
 */

var Negotiator = require('negotiator')
var mime = require('mime-types')

/**
 * Module exports.
 * @public
 */

module.exports = Accepts

/**
 * Create a new Accepts object for the given req.
 *
 * @param {object} req
 * @public
 */

function Accepts (req) {
  if (!(this instanceof Accepts)) {
    return new Accepts(req)
  }

  this.headers = req.headers
  this.negotiator = new Negotiator(req)
}

/**
 * Check if the given `type(s)` is acceptable, returning
 * the best match when true, otherwise `undefined`, in which
 * case you should respond with 406 "Not Acceptable".
 *
 * The `type` value may be a single mime type string
 * such as "application/json", the extension name
 * such as "json" or an array `["json", "html", "text/plain"]`. When a list
 * or array is given the _best_ match, if any is returned.
 *
 * Examples:
 *
 *     // Accept: text/html
 *     this.types('html');
 *     // => "html"
 *
 *     // Accept: text/*, application/json
 *     this.types('html');
 *     // => "html"
 *     this.types('text/html');
 *     // => "text/html"
 *     this.types('json', 'text');
 *     // => "json"
 *     this.types('application/json');
 *     // => "application/json"
 *
 *     // Accept: text/*, application/json
 *     this.types('image/png');
 *     this.types('png');
 *     // => undefined
 *
 *     // Accept: text/*;q=.5, application/json
 *     this.types(['html', 'json']);
 *     this.types('html', 'json');
 *     // => "json"
 *
 * @param {String|Array} types...
 * @return {String|Array|Boolean}
 * @public
 */

Accepts.prototype.type =
Accepts.prototype.types = function (types_) {
  var types = types_

  // support flattened arguments
  if (types && !Array.isArray(types)) {
    types = new Array(arguments.length)
    for (var i = 0; i < types.length; i++) {
      types[i] = arguments[i]
    }
  }

  // no types, return all requested types
  if (!types || types.length === 0) {
    return this.negotiator.mediaTypes()
  }

  // no accept header, return first given type
  if (!this.headers.accept) {
    return types[0]
  }

  var mimes = types.map(extToMime)
  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime))
  var first = accepts[0]

  return first
    ? types[mimes.indexOf(first)]
    : false
}

/**
 * Return accepted encodings or best fit based on `encodings`.
 *
 * Given `Accept-Encoding: gzip, deflate`
 * an array sorted by quality is returned:
 *
 *     ['gzip', 'deflate']
 *
 * @param {String|Array} encodings...
 * @return {String|Array}
 * @public
 */

Accepts.prototype.encoding =
Accepts.prototype.encodings = function (encodings_) {
  var encodings = encodings_

  // support flattened arguments
  if (encodings && !Array.isArray(encodings)) {
    encodings = new Array(arguments.length)
    for (var i = 0; i < encodings.length; i++) {
      encodings[i] = arguments[i]
    }
  }

  // no encodings, return all requested encodings
  if (!encodings || encodings.length === 0) {
    return this.negotiator.encodings()
  }

  return this.negotiator.encodings(encodings)[0] || false
}

/**
 * Return accepted charsets or best fit based on `charsets`.
 *
 * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
 * an array sorted by quality is returned:
 *
 *     ['utf-8', 'utf-7', 'iso-8859-1']
 *
 * @param {String|Array} charsets...
 * @return {String|Array}
 * @public
 */

Accepts.prototype.charset =
Accepts.prototype.charsets = function (charsets_) {
  var charsets = charsets_

  // support flattened arguments
  if (charsets && !Array.isArray(charsets)) {
    charsets = new Array(arguments.length)
    for (var i = 0; i < charsets.length; i++) {
      charsets[i] = arguments[i]
    }
  }

  // no charsets, return all requested charsets
  if (!charsets || charsets.length === 0) {
    return this.negotiator.charsets()
  }

  return this.negotiator.charsets(charsets)[0] || false
}

/**
 * Return accepted languages or best fit based on `langs`.
 *
 * Given `Accept-Language: en;q=0.8, es, pt`
 * an array sorted by quality is returned:
 *
 *     ['es', 'pt', 'en']
 *
 * @param {String|Array} langs...
 * @return {Array|String}
 * @public
 */

Accepts.prototype.lang =
Accepts.prototype.langs =
Accepts.prototype.language =
Accepts.prototype.languages = function (languages_) {
  var languages = languages_

  // support flattened arguments
  if (languages && !Array.isArray(languages)) {
    languages = new Array(arguments.length)
    for (var i = 0; i < languages.length; i++) {
      languages[i] = arguments[i]
    }
  }

  // no languages, return all requested languages
  if (!languages || languages.length === 0) {
    return this.negotiator.languages()
  }

  return this.negotiator.languages(languages)[0] || false
}

/**
 * Convert extnames to mime.
 *
 * @param {String} type
 * @return {String}
 * @private
 */

function extToMime (type) {
  return type.indexOf('/') === -1
    ? mime.lookup(type)
    : type
}

/**
 * Check if mime is valid.
 *
 * @param {String} type
 * @return {String}
 * @private
 */

function validMime (type) {
  return typeof type === 'string'
}

},{"mime-types":103,"negotiator":105}],58:[function(require,module,exports){
module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}

},{}],59:[function(require,module,exports){
/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};

},{}],60:[function(require,module,exports){

/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};


},{}],61:[function(require,module,exports){
/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();

},{}],62:[function(require,module,exports){
(function (Buffer){
/*!
 * base64id v0.1.0
 */

/**
 * Module dependencies
 */

var crypto = require('crypto');

/**
 * Constructor
 */

var Base64Id = function() { };

/**
 * Get random bytes
 *
 * Uses a buffer if available, falls back to crypto.randomBytes
 */

Base64Id.prototype.getRandomBytes = function(bytes) {

  var BUFFER_SIZE = 4096
  var self = this;  
  
  bytes = bytes || 12;

  if (bytes > BUFFER_SIZE) {
    return crypto.randomBytes(bytes);
  }
  
  var bytesInBuffer = parseInt(BUFFER_SIZE/bytes);
  var threshold = parseInt(bytesInBuffer*0.85);

  if (!threshold) {
    return crypto.randomBytes(bytes);
  }

  if (this.bytesBufferIndex == null) {
     this.bytesBufferIndex = -1;
  }

  if (this.bytesBufferIndex == bytesInBuffer) {
    this.bytesBuffer = null;
    this.bytesBufferIndex = -1;
  }

  // No buffered bytes available or index above threshold
  if (this.bytesBufferIndex == -1 || this.bytesBufferIndex > threshold) {
     
    if (!this.isGeneratingBytes) {
      this.isGeneratingBytes = true;
      crypto.randomBytes(BUFFER_SIZE, function(err, bytes) {
        self.bytesBuffer = bytes;
        self.bytesBufferIndex = 0;
        self.isGeneratingBytes = false;
      }); 
    }
    
    // Fall back to sync call when no buffered bytes are available
    if (this.bytesBufferIndex == -1) {
      return crypto.randomBytes(bytes);
    }
  }
  
  var result = this.bytesBuffer.slice(bytes*this.bytesBufferIndex, bytes*(this.bytesBufferIndex+1)); 
  this.bytesBufferIndex++; 
  
  return result;
}

/**
 * Generates a base64 id
 *
 * (Original version from socket.io <http://socket.io>)
 */

Base64Id.prototype.generateId = function () {
  var rand = Buffer.alloc(15); // multiple of 3 for base64
  if (!rand.writeInt32BE) {
    return Math.abs(Math.random() * Math.random() * Date.now() | 0).toString()
      + Math.abs(Math.random() * Math.random() * Date.now() | 0).toString();
  }
  this.sequenceNumber = (this.sequenceNumber + 1) | 0;
  rand.writeInt32BE(this.sequenceNumber, 11);
  if (crypto.randomBytes) {
    this.getRandomBytes(12).copy(rand);
  } else {
    // not secure for node 0.4
    [0, 4, 8].forEach(function(i) {
      rand.writeInt32BE(Math.random() * Math.pow(2, 32) | 0, i);
    });
  }
  return rand.toString('base64').replace(/\//g, '_').replace(/\+/g, '-');
};

/**
 * Export
 */

exports = module.exports = new Base64Id();

}).call(this,require("buffer").Buffer)
},{"buffer":195,"crypto":204}],63:[function(require,module,exports){
/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :
  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : 
  false;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  return ary.map(function(chunk) {
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      return buf;
    }

    return chunk;
  });
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary).forEach(function(part) {
    bb.append(part);
  });

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  return new Blob(mapArrayBufferViews(ary), options || {});
};

if (typeof Blob !== 'undefined') {
  BlobBuilderConstructor.prototype = Blob.prototype;
  BlobConstructor.prototype = Blob.prototype;
}

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

},{}],64:[function(require,module,exports){
/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};

},{}],65:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],66:[function(require,module,exports){

module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};
},{}],67:[function(require,module,exports){
module.exports = (function () {
  if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
  } else {
    return Function('return this')(); // eslint-disable-line no-new-func
  }
})();

},{}],68:[function(require,module,exports){

module.exports = require('./socket');

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = require('engine.io-parser');

},{"./socket":69,"engine.io-parser":80}],69:[function(require,module,exports){
/**
 * Module dependencies.
 */

var transports = require('./transports/index');
var Emitter = require('component-emitter');
var debug = require('debug')('engine.io-client:socket');
var index = require('indexof');
var parser = require('engine.io-parser');
var parseuri = require('parseuri');
var parseqs = require('parseqs');

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (typeof location !== 'undefined' && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (typeof location !== 'undefined' ? location.hostname : 'localhost');
  this.port = opts.port || (typeof location !== 'undefined' && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.withCredentials = false !== opts.withCredentials;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // detect ReactNative environment
  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

  // other options for Node.js or ReactNative client
  if (typeof self === 'undefined' || this.isReactNative) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = require('./transport');
Socket.transports = require('./transports/index');
Socket.parser = require('engine.io-parser');

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // per-transport options
  var options = this.transportOptions[name] || {};

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    withCredentials: options.withCredentials || this.withCredentials,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void (0),
    isReactNative: this.isReactNative
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(JSON.parse(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

},{"./transport":70,"./transports/index":71,"component-emitter":77,"debug":78,"engine.io-parser":80,"indexof":97,"parseqs":110,"parseuri":111}],70:[function(require,module,exports){
/**
 * Module dependencies.
 */

var parser = require('engine.io-parser');
var Emitter = require('component-emitter');

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // results of ReactNative environment detection
  this.isReactNative = opts.isReactNative;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

},{"component-emitter":77,"engine.io-parser":80}],71:[function(require,module,exports){
/**
 * Module dependencies
 */

var XMLHttpRequest = require('xmlhttprequest-ssl');
var XHR = require('./polling-xhr');
var JSONP = require('./polling-jsonp');
var websocket = require('./websocket');

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

},{"./polling-jsonp":72,"./polling-xhr":73,"./websocket":75,"xmlhttprequest-ssl":76}],72:[function(require,module,exports){
/**
 * Module requirements.
 */

var Polling = require('./polling');
var inherit = require('component-inherit');
var globalThis = require('../globalThis');

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    callbacks = globalThis.___eio = (globalThis.___eio || []);
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (typeof addEventListener === 'function') {
    addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

},{"../globalThis":67,"./polling":74,"component-inherit":66}],73:[function(require,module,exports){
/* global attachEvent */

/**
 * Module requirements.
 */

var XMLHttpRequest = require('xmlhttprequest-ssl');
var Polling = require('./polling');
var Emitter = require('component-emitter');
var inherit = require('component-inherit');
var debug = require('debug')('engine.io-client:polling-xhr');
var globalThis = require('../globalThis');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;
  opts.withCredentials = this.withCredentials;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = this.withCredentials;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          try {
            var contentType = xhr.getResponseHeader('Content-Type');
            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
              xhr.responseType = 'arraybuffer';
            }
          } catch (e) {}
        }
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (typeof document !== 'undefined') {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (typeof document !== 'undefined') {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (typeof document !== 'undefined') {
  if (typeof attachEvent === 'function') {
    attachEvent('onunload', unloadHandler);
  } else if (typeof addEventListener === 'function') {
    var terminationEvent = 'onpagehide' in globalThis ? 'pagehide' : 'unload';
    addEventListener(terminationEvent, unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

},{"../globalThis":67,"./polling":74,"component-emitter":77,"component-inherit":66,"debug":78,"xmlhttprequest-ssl":76}],74:[function(require,module,exports){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parseqs = require('parseqs');
var parser = require('engine.io-parser');
var inherit = require('component-inherit');
var yeast = require('yeast');
var debug = require('debug')('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = require('xmlhttprequest-ssl');
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

},{"../transport":70,"component-inherit":66,"debug":78,"engine.io-parser":80,"parseqs":110,"xmlhttprequest-ssl":76,"yeast":141}],75:[function(require,module,exports){
(function (Buffer){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parser = require('engine.io-parser');
var parseqs = require('parseqs');
var inherit = require('component-inherit');
var yeast = require('yeast');
var debug = require('debug')('engine.io-client:websocket');

var BrowserWebSocket, NodeWebSocket;

if (typeof WebSocket !== 'undefined') {
  BrowserWebSocket = WebSocket;
} else if (typeof self !== 'undefined') {
  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
}

if (typeof window === 'undefined') {
  try {
    NodeWebSocket = require('ws');
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocketImpl = BrowserWebSocket || NodeWebSocket;

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;
  if (!this.usingBrowserWebSocket) {
    WebSocketImpl = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;

  var opts = {};

  if (!this.isReactNative) {
    opts.agent = this.agent;
    opts.perMessageDeflate = this.perMessageDeflate;

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;
  }

  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws =
      this.usingBrowserWebSocket && !this.isReactNative
        ? protocols
          ? new WebSocketImpl(uri, protocols)
          : new WebSocketImpl(uri)
        : new WebSocketImpl(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
};

}).call(this,require("buffer").Buffer)
},{"../transport":70,"buffer":195,"component-inherit":66,"debug":78,"engine.io-parser":80,"parseqs":110,"ws":164,"yeast":141}],76:[function(require,module,exports){
// browser shim for xmlhttprequest module

var hasCORS = require('has-cors');
var globalThis = require('./globalThis');

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new globalThis[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};

},{"./globalThis":67,"has-cors":96}],77:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  // Remove event specific arrays for event types that no
  // one is subscribed for to avoid memory leak.
  if (callbacks.length === 0) {
    delete this._callbacks['$' + event];
  }

  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};

  var args = new Array(arguments.length - 1)
    , callbacks = this._callbacks['$' + event];

  for (var i = 1; i < arguments.length; i++) {
    args[i - 1] = arguments[i];
  }

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],78:[function(require,module,exports){
(function (process){
/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */
function log(...args) {
	// This hackery is required for IE8/9, where
	// the `console.log` function doesn't have 'apply'
	return typeof console === 'object' &&
		console.log &&
		console.log(...args);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = require('./common')(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};

}).call(this,require('_process'))
},{"./common":79,"_process":279}],79:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = require('ms');

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* Active `debug` instances.
	*/
	createDebug.instances = [];

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return match;
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.enabled = createDebug.enabled(namespace);
		debug.useColors = createDebug.useColors();
		debug.color = selectColor(namespace);
		debug.destroy = destroy;
		debug.extend = extend;
		// Debug.formatArgs = formatArgs;
		// debug.rawLog = rawLog;

		// env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		createDebug.instances.push(debug);

		return debug;
	}

	function destroy() {
		const index = createDebug.instances.indexOf(this);
		if (index !== -1) {
			createDebug.instances.splice(index, 1);
			return true;
		}
		return false;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}

		for (i = 0; i < createDebug.instances.length; i++) {
			const instance = createDebug.instances[i];
			instance.enabled = createDebug.enabled(instance.namespace);
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;

},{"ms":104}],80:[function(require,module,exports){
/**
 * Module dependencies.
 */

var keys = require('./keys');
var hasBinary = require('has-binary2');
var sliceBuffer = require('arraybuffer.slice');
var after = require('after');
var utf8 = require('./utf8');

var base64encoder;
if (typeof ArrayBuffer !== 'undefined') {
  base64encoder = require('base64-arraybuffer');
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = require('blob');

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, { strict: false });
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '', n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || (length != (n = Number(length)))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    }

    // advance cursor
    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] === 255) break;

      // 310 = char length of Number.MAX_VALUE
      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

},{"./keys":81,"./utf8":82,"after":58,"arraybuffer.slice":59,"base64-arraybuffer":61,"blob":63,"has-binary2":95}],81:[function(require,module,exports){

/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};

},{}],82:[function(require,module,exports){
/*! https://mths.be/utf8js v2.1.2 by @mathias */

var stringFromCharCode = String.fromCharCode;

// Taken from https://mths.be/punycode
function ucs2decode(string) {
	var output = [];
	var counter = 0;
	var length = string.length;
	var value;
	var extra;
	while (counter < length) {
		value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// high surrogate, and there is a next character
			extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) { // low surrogate
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// unmatched surrogate; only append this code unit, in case the next
				// code unit is the high surrogate of a surrogate pair
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

// Taken from https://mths.be/punycode
function ucs2encode(array) {
	var length = array.length;
	var index = -1;
	var value;
	var output = '';
	while (++index < length) {
		value = array[index];
		if (value > 0xFFFF) {
			value -= 0x10000;
			output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
			value = 0xDC00 | value & 0x3FF;
		}
		output += stringFromCharCode(value);
	}
	return output;
}

function checkScalarValue(codePoint, strict) {
	if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
		if (strict) {
			throw Error(
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
				' is not a scalar value'
			);
		}
		return false;
	}
	return true;
}
/*--------------------------------------------------------------------------*/

function createByte(codePoint, shift) {
	return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
}

function encodeCodePoint(codePoint, strict) {
	if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
		return stringFromCharCode(codePoint);
	}
	var symbol = '';
	if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
		symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
	}
	else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
		if (!checkScalarValue(codePoint, strict)) {
			codePoint = 0xFFFD;
		}
		symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
		symbol += createByte(codePoint, 6);
	}
	else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
		symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
		symbol += createByte(codePoint, 12);
		symbol += createByte(codePoint, 6);
	}
	symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
	return symbol;
}

function utf8encode(string, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	var codePoints = ucs2decode(string);
	var length = codePoints.length;
	var index = -1;
	var codePoint;
	var byteString = '';
	while (++index < length) {
		codePoint = codePoints[index];
		byteString += encodeCodePoint(codePoint, strict);
	}
	return byteString;
}

/*--------------------------------------------------------------------------*/

function readContinuationByte() {
	if (byteIndex >= byteCount) {
		throw Error('Invalid byte index');
	}

	var continuationByte = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	if ((continuationByte & 0xC0) == 0x80) {
		return continuationByte & 0x3F;
	}

	// If we end up here, it’s not a continuation byte
	throw Error('Invalid continuation byte');
}

function decodeSymbol(strict) {
	var byte1;
	var byte2;
	var byte3;
	var byte4;
	var codePoint;

	if (byteIndex > byteCount) {
		throw Error('Invalid byte index');
	}

	if (byteIndex == byteCount) {
		return false;
	}

	// Read first byte
	byte1 = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	// 1-byte sequence (no continuation bytes)
	if ((byte1 & 0x80) == 0) {
		return byte1;
	}

	// 2-byte sequence
	if ((byte1 & 0xE0) == 0xC0) {
		byte2 = readContinuationByte();
		codePoint = ((byte1 & 0x1F) << 6) | byte2;
		if (codePoint >= 0x80) {
			return codePoint;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 3-byte sequence (may include unpaired surrogates)
	if ((byte1 & 0xF0) == 0xE0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
		if (codePoint >= 0x0800) {
			return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 4-byte sequence
	if ((byte1 & 0xF8) == 0xF0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		byte4 = readContinuationByte();
		codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
			(byte3 << 0x06) | byte4;
		if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
			return codePoint;
		}
	}

	throw Error('Invalid UTF-8 detected');
}

var byteArray;
var byteCount;
var byteIndex;
function utf8decode(byteString, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	byteArray = ucs2decode(byteString);
	byteCount = byteArray.length;
	byteIndex = 0;
	var codePoints = [];
	var tmp;
	while ((tmp = decodeSymbol(strict)) !== false) {
		codePoints.push(tmp);
	}
	return ucs2encode(codePoints);
}

module.exports = {
	version: '2.1.2',
	encode: utf8encode,
	decode: utf8decode
};

},{}],83:[function(require,module,exports){
/**
 * Module dependencies.
 */

var http = require('http');

/**
 * Invoking the library as a function delegates to attach if the first argument
 * is an `http.Server`.
 *
 * If there are no arguments or the first argument is an options object, then
 * a new Server instance is returned.
 *
 * @param {http.Server} server (if specified, will be attached to by the new Server instance)
 * @param {Object} options
 * @return {Server} engine server
 * @api public
 */

exports = module.exports = function () {
  // backwards compatible use as `.attach`
  // if first argument is an http server
  if (arguments.length && arguments[0] instanceof http.Server) {
    return attach.apply(this, arguments);
  }

  // if first argument is not an http server, then just make a regular eio server
  return exports.Server.apply(null, arguments);
};

/**
 * Protocol revision number.
 *
 * @api public
 */

exports.protocol = 1;

/**
 * Expose Server constructor.
 *
 * @api public
 */

exports.Server = require('./server');

/**
 * Expose Socket constructor.
 *
 * @api public
 */

exports.Socket = require('./socket');

/**
 * Expose Transport constructor.
 *
 * @api public
 */

exports.Transport = require('./transport');

/**
 * Expose mutable list of available transports.
 *
 * @api public
 */

exports.transports = require('./transports');

/**
 * Exports parser.
 *
 * @api public
 */

exports.parser = require('engine.io-parser');

/**
 * Creates an http.Server exclusively used for WS upgrades.
 *
 * @param {Number} port
 * @param {Function} callback
 * @param {Object} options
 * @return {Server} websocket.io server
 * @api public
 */

exports.listen = listen;

function listen (port, options, fn) {
  if ('function' === typeof options) {
    fn = options;
    options = {};
  }

  var server = http.createServer(function (req, res) {
    res.writeHead(501);
    res.end('Not Implemented');
  });

  // create engine server
  var engine = exports.attach(server, options);
  engine.httpServer = server;

  server.listen(port, fn);

  return engine;
}

/**
 * Captures upgrade requests for a http.Server.
 *
 * @param {http.Server} server
 * @param {Object} options
 * @return {Server} engine server
 * @api public
 */

exports.attach = attach;

function attach (server, options) {
  var engine = new exports.Server(options);
  engine.attach(server, options);
  return engine;
}

},{"./server":84,"./socket":85,"./transport":86,"./transports":87,"engine.io-parser":80,"http":318}],84:[function(require,module,exports){
(function (process,Buffer){

/**
 * Module dependencies.
 */

var qs = require('querystring');
var parse = require('url').parse;
var base64id = require('base64id');
var transports = require('./transports');
var EventEmitter = require('events').EventEmitter;
var Socket = require('./socket');
var util = require('util');
var debug = require('debug')('engine');
var cookieMod = require('cookie');

/**
 * Module exports.
 */

module.exports = Server;

/**
 * Server constructor.
 *
 * @param {Object} options
 * @api public
 */

function Server (opts) {
  if (!(this instanceof Server)) {
    return new Server(opts);
  }

  this.clients = {};
  this.clientsCount = 0;

  opts = opts || {};

  this.wsEngine = opts.wsEngine || process.env.EIO_WS_ENGINE || 'ws';
  this.pingTimeout = opts.pingTimeout || 5000;
  this.pingInterval = opts.pingInterval || 25000;
  this.upgradeTimeout = opts.upgradeTimeout || 10000;
  this.maxHttpBufferSize = opts.maxHttpBufferSize || 10E7;
  this.transports = opts.transports || Object.keys(transports);
  this.allowUpgrades = false !== opts.allowUpgrades;
  this.allowRequest = opts.allowRequest;
  this.cookie = false !== opts.cookie ? (opts.cookie || 'io') : false;
  this.cookiePath = false !== opts.cookiePath ? (opts.cookiePath || '/') : false;
  this.cookieHttpOnly = false !== opts.cookieHttpOnly;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || true) : false;
  this.httpCompression = false !== opts.httpCompression ? (opts.httpCompression || {}) : false;
  this.initialPacket = opts.initialPacket;

  var self = this;

  // initialize compression options
  ['perMessageDeflate', 'httpCompression'].forEach(function (type) {
    var compression = self[type];
    if (true === compression) self[type] = compression = {};
    if (compression && null == compression.threshold) {
      compression.threshold = 1024;
    }
  });

  this.init();
}

/**
 * Protocol errors mappings.
 */

Server.errors = {
  UNKNOWN_TRANSPORT: 0,
  UNKNOWN_SID: 1,
  BAD_HANDSHAKE_METHOD: 2,
  BAD_REQUEST: 3,
  FORBIDDEN: 4
};

Server.errorMessages = {
  0: 'Transport unknown',
  1: 'Session ID unknown',
  2: 'Bad handshake method',
  3: 'Bad request',
  4: 'Forbidden'
};

/**
 * Inherits from EventEmitter.
 */

util.inherits(Server, EventEmitter);

/**
 * Initialize websocket server
 *
 * @api private
 */

Server.prototype.init = function () {
  if (!~this.transports.indexOf('websocket')) return;

  if (this.ws) this.ws.close();

  // add explicit require for bundlers like webpack
  var wsModule = this.wsEngine === 'ws' ? require('ws') : require(this.wsEngine);
  this.ws = new wsModule.Server({
    noServer: true,
    clientTracking: false,
    perMessageDeflate: this.perMessageDeflate,
    maxPayload: this.maxHttpBufferSize
  });
};

/**
 * Returns a list of available transports for upgrade given a certain transport.
 *
 * @return {Array}
 * @api public
 */

Server.prototype.upgrades = function (transport) {
  if (!this.allowUpgrades) return [];
  return transports[transport].upgradesTo || [];
};

/**
 * Verifies a request.
 *
 * @param {http.IncomingMessage}
 * @return {Boolean} whether the request is valid
 * @api private
 */

Server.prototype.verify = function (req, upgrade, fn) {
  // transport check
  var transport = req._query.transport;
  if (!~this.transports.indexOf(transport)) {
    debug('unknown transport "%s"', transport);
    return fn(Server.errors.UNKNOWN_TRANSPORT, false);
  }

  // 'Origin' header check
  var isOriginInvalid = checkInvalidHeaderChar(req.headers.origin);
  if (isOriginInvalid) {
    req.headers.origin = null;
    debug('origin header invalid');
    return fn(Server.errors.BAD_REQUEST, false);
  }

  // sid check
  var sid = req._query.sid;
  if (sid) {
    if (!this.clients.hasOwnProperty(sid)) {
      debug('unknown sid "%s"', sid);
      return fn(Server.errors.UNKNOWN_SID, false);
    }
    if (!upgrade && this.clients[sid].transport.name !== transport) {
      debug('bad request: unexpected transport without upgrade');
      return fn(Server.errors.BAD_REQUEST, false);
    }
  } else {
    // handshake is GET only
    if ('GET' !== req.method) return fn(Server.errors.BAD_HANDSHAKE_METHOD, false);
    if (!this.allowRequest) return fn(null, true);
    return this.allowRequest(req, fn);
  }

  fn(null, true);
};

/**
 * Prepares a request by processing the query string.
 *
 * @api private
 */

Server.prototype.prepare = function (req) {
  // try to leverage pre-existing `req._query` (e.g: from connect)
  if (!req._query) {
    req._query = ~req.url.indexOf('?') ? qs.parse(parse(req.url).query) : {};
  }
};

/**
 * Closes all clients.
 *
 * @api public
 */

Server.prototype.close = function () {
  debug('closing all open clients');
  for (var i in this.clients) {
    if (this.clients.hasOwnProperty(i)) {
      this.clients[i].close(true);
    }
  }
  if (this.ws) {
    debug('closing webSocketServer');
    this.ws.close();
    // don't delete this.ws because it can be used again if the http server starts listening again
  }
  return this;
};

/**
 * Handles an Engine.IO HTTP request.
 *
 * @param {http.IncomingMessage} request
 * @param {http.ServerResponse|http.OutgoingMessage} response
 * @api public
 */

Server.prototype.handleRequest = function (req, res) {
  debug('handling "%s" http request "%s"', req.method, req.url);
  this.prepare(req);
  req.res = res;

  var self = this;
  this.verify(req, false, function (err, success) {
    if (!success) {
      sendErrorMessage(req, res, err);
      return;
    }

    if (req._query.sid) {
      debug('setting new request for existing client');
      self.clients[req._query.sid].transport.onRequest(req);
    } else {
      self.handshake(req._query.transport, req);
    }
  });
};

/**
 * Sends an Engine.IO Error Message
 *
 * @param {http.ServerResponse} response
 * @param {code} error code
 * @api private
 */

function sendErrorMessage (req, res, code) {
  var headers = { 'Content-Type': 'application/json' };

  var isForbidden = !Server.errorMessages.hasOwnProperty(code);
  if (isForbidden) {
    res.writeHead(403, headers);
    res.end(JSON.stringify({
      code: Server.errors.FORBIDDEN,
      message: code || Server.errorMessages[Server.errors.FORBIDDEN]
    }));
    return;
  }
  if (req.headers.origin) {
    headers['Access-Control-Allow-Credentials'] = 'true';
    headers['Access-Control-Allow-Origin'] = req.headers.origin;
  } else {
    headers['Access-Control-Allow-Origin'] = '*';
  }
  if (res !== undefined) {
    res.writeHead(400, headers);
    res.end(JSON.stringify({
      code: code,
      message: Server.errorMessages[code]
    }));
  }
}

/**
 * generate a socket id.
 * Overwrite this method to generate your custom socket id
 *
 * @param {Object} request object
 * @api public
 */

Server.prototype.generateId = function (req) {
  return base64id.generateId();
};

/**
 * Handshakes a new client.
 *
 * @param {String} transport name
 * @param {Object} request object
 * @api private
 */

Server.prototype.handshake = function (transportName, req) {
  var id = this.generateId(req);

  debug('handshaking client "%s"', id);

  try {
    var transport = new transports[transportName](req);
    if ('polling' === transportName) {
      transport.maxHttpBufferSize = this.maxHttpBufferSize;
      transport.httpCompression = this.httpCompression;
    } else if ('websocket' === transportName) {
      transport.perMessageDeflate = this.perMessageDeflate;
    }

    if (req._query && req._query.b64) {
      transport.supportsBinary = false;
    } else {
      transport.supportsBinary = true;
    }
  } catch (e) {
    debug('error handshaking to transport "%s"', transportName);
    sendErrorMessage(req, req.res, Server.errors.BAD_REQUEST);
    return;
  }
  var socket = new Socket(id, this, transport, req);
  var self = this;

  if (false !== this.cookie) {
    transport.on('headers', function (headers) {
      headers['Set-Cookie'] = cookieMod.serialize(self.cookie, id,
        {
          path: self.cookiePath,
          httpOnly: self.cookiePath ? self.cookieHttpOnly : false,
          sameSite: true
        });
    });
  }

  transport.onRequest(req);

  this.clients[id] = socket;
  this.clientsCount++;

  socket.once('close', function () {
    delete self.clients[id];
    self.clientsCount--;
  });

  this.emit('connection', socket);
};

/**
 * Handles an Engine.IO HTTP Upgrade.
 *
 * @api public
 */

Server.prototype.handleUpgrade = function (req, socket, upgradeHead) {
  this.prepare(req);

  var self = this;
  this.verify(req, true, function (err, success) {
    if (!success) {
      abortConnection(socket, err);
      return;
    }

    var head = Buffer.from(upgradeHead); // eslint-disable-line node/no-deprecated-api
    upgradeHead = null;

    // delegate to ws
    self.ws.handleUpgrade(req, socket, head, function (conn) {
      self.onWebSocket(req, conn);
    });
  });
};

/**
 * Called upon a ws.io connection.
 *
 * @param {ws.Socket} websocket
 * @api private
 */

Server.prototype.onWebSocket = function (req, socket) {
  socket.on('error', onUpgradeError);

  if (transports[req._query.transport] !== undefined && !transports[req._query.transport].prototype.handlesUpgrades) {
    debug('transport doesnt handle upgraded requests');
    socket.close();
    return;
  }

  // get client id
  var id = req._query.sid;

  // keep a reference to the ws.Socket
  req.websocket = socket;

  if (id) {
    var client = this.clients[id];
    if (!client) {
      debug('upgrade attempt for closed client');
      socket.close();
    } else if (client.upgrading) {
      debug('transport has already been trying to upgrade');
      socket.close();
    } else if (client.upgraded) {
      debug('transport had already been upgraded');
      socket.close();
    } else {
      debug('upgrading existing transport');

      // transport error handling takes over
      socket.removeListener('error', onUpgradeError);

      var transport = new transports[req._query.transport](req);
      if (req._query && req._query.b64) {
        transport.supportsBinary = false;
      } else {
        transport.supportsBinary = true;
      }
      transport.perMessageDeflate = this.perMessageDeflate;
      client.maybeUpgrade(transport);
    }
  } else {
    // transport error handling takes over
    socket.removeListener('error', onUpgradeError);

    this.handshake(req._query.transport, req);
  }

  function onUpgradeError () {
    debug('websocket error before upgrade');
    // socket.close() not needed
  }
};

/**
 * Captures upgrade requests for a http.Server.
 *
 * @param {http.Server} server
 * @param {Object} options
 * @api public
 */

Server.prototype.attach = function (server, options) {
  var self = this;
  options = options || {};
  var path = (options.path || '/engine.io').replace(/\/$/, '');

  var destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000;

  // normalize path
  path += '/';

  function check (req) {
    if ('OPTIONS' === req.method && false === options.handlePreflightRequest) {
      return false;
    }
    return path === req.url.substr(0, path.length);
  }

  // cache and clean up listeners
  var listeners = server.listeners('request').slice(0);
  server.removeAllListeners('request');
  server.on('close', self.close.bind(self));
  server.on('listening', self.init.bind(self));

  // add request handler
  server.on('request', function (req, res) {
    if (check(req)) {
      debug('intercepting request for path "%s"', path);
      if ('OPTIONS' === req.method && 'function' === typeof options.handlePreflightRequest) {
        options.handlePreflightRequest.call(server, req, res);
      } else {
        self.handleRequest(req, res);
      }
    } else {
      for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i].call(server, req, res);
      }
    }
  });

  if (~self.transports.indexOf('websocket')) {
    server.on('upgrade', function (req, socket, head) {
      if (check(req)) {
        self.handleUpgrade(req, socket, head);
      } else if (false !== options.destroyUpgrade) {
        // default node behavior is to disconnect when no handlers
        // but by adding a handler, we prevent that
        // and if no eio thing handles the upgrade
        // then the socket needs to die!
        setTimeout(function () {
          if (socket.writable && socket.bytesWritten <= 0) {
            return socket.end();
          }
        }, destroyUpgradeTimeout);
      }
    });
  }
};

/**
 * Closes the connection
 *
 * @param {net.Socket} socket
 * @param {code} error code
 * @api private
 */

function abortConnection (socket, code) {
  socket.on('error', () => {
    debug('ignoring error from closed connection');
  });
  if (socket.writable) {
    var message = Server.errorMessages.hasOwnProperty(code) ? Server.errorMessages[code] : String(code || '');
    var length = Buffer.byteLength(message);
    socket.write(
      'HTTP/1.1 400 Bad Request\r\n' +
      'Connection: close\r\n' +
      'Content-type: text/html\r\n' +
      'Content-Length: ' + length + '\r\n' +
      '\r\n' +
      message
    );
  }
  socket.destroy();
}

/* eslint-disable */

/**
 * From https://github.com/nodejs/node/blob/v8.4.0/lib/_http_common.js#L303-L354
 *
 * True if val contains an invalid field-vchar
 *  field-value    = *( field-content / obs-fold )
 *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 *  field-vchar    = VCHAR / obs-text
 *
 * checkInvalidHeaderChar() is currently designed to be inlinable by v8,
 * so take care when making changes to the implementation so that the source
 * code size does not exceed v8's default max_inlined_source_size setting.
 **/
var validHdrChars = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, // 0 - 15
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 32 - 47
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 48 - 63
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 80 - 95
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 112 - 127
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 128 ...
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // ... 255
];

function checkInvalidHeaderChar(val) {
  val += '';
  if (val.length < 1)
    return false;
  if (!validHdrChars[val.charCodeAt(0)]) {
    debug('invalid header, index 0, char "%s"', val.charCodeAt(0));
    return true;
  }
  if (val.length < 2)
    return false;
  if (!validHdrChars[val.charCodeAt(1)]) {
    debug('invalid header, index 1, char "%s"', val.charCodeAt(1));
    return true;
  }
  if (val.length < 3)
    return false;
  if (!validHdrChars[val.charCodeAt(2)]) {
    debug('invalid header, index 2, char "%s"', val.charCodeAt(2));
    return true;
  }
  if (val.length < 4)
    return false;
  if (!validHdrChars[val.charCodeAt(3)]) {
    debug('invalid header, index 3, char "%s"', val.charCodeAt(3));
    return true;
  }
  for (var i = 4; i < val.length; ++i) {
    if (!validHdrChars[val.charCodeAt(i)]) {
      debug('invalid header, index "%i", char "%s"', i, val.charCodeAt(i));
      return true;
    }
  }
  return false;
}

}).call(this,require('_process'),require("buffer").Buffer)
},{"./socket":85,"./transports":87,"_process":279,"base64id":62,"buffer":195,"cookie":92,"debug":93,"events":231,"querystring":289,"url":339,"util":344,"ws":140}],85:[function(require,module,exports){
(function (process){
/**
 * Module dependencies.
 */

var EventEmitter = require('events').EventEmitter;
var util = require('util');
var debug = require('debug')('engine:socket');

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Client class (abstract).
 *
 * @api private
 */

function Socket (id, server, transport, req) {
  this.id = id;
  this.server = server;
  this.upgrading = false;
  this.upgraded = false;
  this.readyState = 'opening';
  this.writeBuffer = [];
  this.packetsFn = [];
  this.sentCallbackFn = [];
  this.cleanupFn = [];
  this.request = req;

  // Cache IP since it might not be in the req later
  if (req.websocket && req.websocket._socket) {
    this.remoteAddress = req.websocket._socket.remoteAddress;
  } else {
    this.remoteAddress = req.connection.remoteAddress;
  }

  this.checkIntervalTimer = null;
  this.upgradeTimeoutTimer = null;
  this.pingTimeoutTimer = null;

  this.setTransport(transport);
  this.onOpen();
}

/**
 * Inherits from EventEmitter.
 */

util.inherits(Socket, EventEmitter);

/**
 * Called upon transport considered open.
 *
 * @api private
 */

Socket.prototype.onOpen = function () {
  this.readyState = 'open';

  // sends an `open` packet
  this.transport.sid = this.id;
  this.sendPacket('open', JSON.stringify({
    sid: this.id,
    upgrades: this.getAvailableUpgrades(),
    pingInterval: this.server.pingInterval,
    pingTimeout: this.server.pingTimeout
  }));

  if (this.server.initialPacket) {
    this.sendPacket('message', this.server.initialPacket);
  }

  this.emit('open');
  this.setPingTimeout();
};

/**
 * Called upon transport packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('open' === this.readyState) {
    // export packet event
    debug('packet');
    this.emit('packet', packet);

    // Reset ping timeout on any packet, incoming data is a good sign of
    // other side's liveness
    this.setPingTimeout();

    switch (packet.type) {
      case 'ping':
        debug('got ping');
        this.sendPacket('pong');
        this.emit('heartbeat');
        break;

      case 'error':
        this.onClose('parse error');
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with closed socket');
  }
};

/**
 * Called upon transport error.
 *
 * @param {Error} error object
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('transport error');
  this.onClose('transport error', err);
};

/**
 * Sets and resets ping timeout timer based on client pings.
 *
 * @api private
 */

Socket.prototype.setPingTimeout = function () {
  var self = this;
  clearTimeout(self.pingTimeoutTimer);
  self.pingTimeoutTimer = setTimeout(function () {
    self.onClose('ping timeout');
  }, self.server.pingInterval + self.server.pingTimeout);
};

/**
 * Attaches handlers for the given transport.
 *
 * @param {Transport} transport
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  var onError = this.onError.bind(this);
  var onPacket = this.onPacket.bind(this);
  var flush = this.flush.bind(this);
  var onClose = this.onClose.bind(this, 'transport close');

  this.transport = transport;
  this.transport.once('error', onError);
  this.transport.on('packet', onPacket);
  this.transport.on('drain', flush);
  this.transport.once('close', onClose);
  // this function will manage packet events (also message callbacks)
  this.setupSendCallback();

  this.cleanupFn.push(function () {
    transport.removeListener('error', onError);
    transport.removeListener('packet', onPacket);
    transport.removeListener('drain', flush);
    transport.removeListener('close', onClose);
  });
};

/**
 * Upgrades socket to the given transport
 *
 * @param {Transport} transport
 * @api private
 */

Socket.prototype.maybeUpgrade = function (transport) {
  debug('might upgrade socket transport from "%s" to "%s"'
    , this.transport.name, transport.name);

  this.upgrading = true;

  var self = this;

  // set transport upgrade timer
  self.upgradeTimeoutTimer = setTimeout(function () {
    debug('client did not complete upgrade - closing transport');
    cleanup();
    if ('open' === transport.readyState) {
      transport.close();
    }
  }, this.server.upgradeTimeout);

  function onPacket (packet) {
    if ('ping' === packet.type && 'probe' === packet.data) {
      transport.send([{ type: 'pong', data: 'probe' }]);
      self.emit('upgrading', transport);
      clearInterval(self.checkIntervalTimer);
      self.checkIntervalTimer = setInterval(check, 100);
    } else if ('upgrade' === packet.type && self.readyState !== 'closed') {
      debug('got upgrade packet - upgrading');
      cleanup();
      self.transport.discard();
      self.upgraded = true;
      self.clearTransport();
      self.setTransport(transport);
      self.emit('upgrade', transport);
      self.setPingTimeout();
      self.flush();
      if (self.readyState === 'closing') {
        transport.close(function () {
          self.onClose('forced close');
        });
      }
    } else {
      cleanup();
      transport.close();
    }
  }

  // we force a polling cycle to ensure a fast upgrade
  function check () {
    if ('polling' === self.transport.name && self.transport.writable) {
      debug('writing a noop packet to polling for fast upgrade');
      self.transport.send([{ type: 'noop' }]);
    }
  }

  function cleanup () {
    self.upgrading = false;

    clearInterval(self.checkIntervalTimer);
    self.checkIntervalTimer = null;

    clearTimeout(self.upgradeTimeoutTimer);
    self.upgradeTimeoutTimer = null;

    transport.removeListener('packet', onPacket);
    transport.removeListener('close', onTransportClose);
    transport.removeListener('error', onError);
    self.removeListener('close', onClose);
  }

  function onError (err) {
    debug('client did not complete upgrade - %s', err);
    cleanup();
    transport.close();
    transport = null;
  }

  function onTransportClose () {
    onError('transport closed');
  }

  function onClose () {
    onError('socket closed');
  }

  transport.on('packet', onPacket);
  transport.once('close', onTransportClose);
  transport.once('error', onError);

  self.once('close', onClose);
};

/**
 * Clears listeners and timers associated with current transport.
 *
 * @api private
 */

Socket.prototype.clearTransport = function () {
  var cleanup;

  var toCleanUp = this.cleanupFn.length;

  for (var i = 0; i < toCleanUp; i++) {
    cleanup = this.cleanupFn.shift();
    cleanup();
  }

  // silence further transport errors and prevent uncaught exceptions
  this.transport.on('error', function () {
    debug('error triggered by discarded transport');
  });

  // ensure transport won't stay open
  this.transport.close();

  clearTimeout(this.pingTimeoutTimer);
};

/**
 * Called upon transport considered closed.
 * Possible reasons: `ping timeout`, `client error`, `parse error`,
 * `transport error`, `server close`, `transport close`
 */

Socket.prototype.onClose = function (reason, description) {
  if ('closed' !== this.readyState) {
    this.readyState = 'closed';
    clearTimeout(this.pingTimeoutTimer);
    clearInterval(this.checkIntervalTimer);
    this.checkIntervalTimer = null;
    clearTimeout(this.upgradeTimeoutTimer);
    var self = this;
    // clean writeBuffer in next tick, so developers can still
    // grab the writeBuffer on 'close' event
    process.nextTick(function () {
      self.writeBuffer = [];
    });
    this.packetsFn = [];
    this.sentCallbackFn = [];
    this.clearTransport();
    this.emit('close', reason, description);
  }
};

/**
 * Setup and manage send callback
 *
 * @api private
 */

Socket.prototype.setupSendCallback = function () {
  var self = this;
  this.transport.on('drain', onDrain);

  this.cleanupFn.push(function () {
    self.transport.removeListener('drain', onDrain);
  });

  // the message was sent successfully, execute the callback
  function onDrain () {
    if (self.sentCallbackFn.length > 0) {
      var seqFn = self.sentCallbackFn.splice(0, 1)[0];
      if ('function' === typeof seqFn) {
        debug('executing send callback');
        seqFn(self.transport);
      } else if (Array.isArray(seqFn)) {
        debug('executing batch send callback');
        for (var l = seqFn.length, i = 0; i < l; i++) {
          if ('function' === typeof seqFn[i]) {
            seqFn[i](self.transport);
          }
        }
      }
    }
  }
};

/**
 * Sends a message packet.
 *
 * @param {String} message
 * @param {Object} options
 * @param {Function} callback
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.send =
Socket.prototype.write = function (data, options, callback) {
  this.sendPacket('message', data, options, callback);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type
 * @param {String} optional, data
 * @param {Object} options
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, callback) {
  if ('function' === typeof options) {
    callback = options;
    options = null;
  }

  options = options || {};
  options.compress = false !== options.compress;

  if ('closing' !== this.readyState && 'closed' !== this.readyState) {
    debug('sending packet "%s" (%s)', type, data);

    var packet = {
      type: type,
      options: options
    };
    if (data) packet.data = data;

    // exports packetCreate event
    this.emit('packetCreate', packet);

    this.writeBuffer.push(packet);

    // add send callback to object, if defined
    if (callback) this.packetsFn.push(callback);

    this.flush();
  }
};

/**
 * Attempts to flush the packets buffer.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState &&
                this.transport.writable &&
                this.writeBuffer.length) {
    debug('flushing buffer to transport');
    this.emit('flush', this.writeBuffer);
    this.server.emit('flush', this, this.writeBuffer);
    var wbuf = this.writeBuffer;
    this.writeBuffer = [];
    if (!this.transport.supportsFraming) {
      this.sentCallbackFn.push(this.packetsFn);
    } else {
      this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);
    }
    this.packetsFn = [];
    this.transport.send(wbuf);
    this.emit('drain');
    this.server.emit('drain', this);
  }
};

/**
 * Get available upgrades for this socket.
 *
 * @api private
 */

Socket.prototype.getAvailableUpgrades = function () {
  var availableUpgrades = [];
  var allUpgrades = this.server.upgrades(this.transport.name);
  for (var i = 0, l = allUpgrades.length; i < l; ++i) {
    var upg = allUpgrades[i];
    if (this.server.transports.indexOf(upg) !== -1) {
      availableUpgrades.push(upg);
    }
  }
  return availableUpgrades;
};

/**
 * Closes the socket and underlying transport.
 *
 * @param {Boolean} optional, discard
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.close = function (discard) {
  if ('open' !== this.readyState) return;

  this.readyState = 'closing';

  if (this.writeBuffer.length) {
    this.once('drain', this.closeTransport.bind(this, discard));
    return;
  }

  this.closeTransport(discard);
};

/**
 * Closes the underlying transport.
 *
 * @param {Boolean} discard
 * @api private
 */

Socket.prototype.closeTransport = function (discard) {
  if (discard) this.transport.discard();
  this.transport.close(this.onClose.bind(this, 'forced close'));
};

}).call(this,require('_process'))
},{"_process":279,"debug":93,"events":231,"util":344}],86:[function(require,module,exports){

/**
 * Module dependencies.
 */

var EventEmitter = require('events').EventEmitter;
var parser = require('engine.io-parser');
var util = require('util');
var debug = require('debug')('engine:transport');

/**
 * Expose the constructor.
 */

module.exports = Transport;

/**
 * Noop function.
 *
 * @api private
 */

function noop () {}

/**
 * Transport constructor.
 *
 * @param {http.IncomingMessage} request
 * @api public
 */

function Transport (req) {
  this.readyState = 'open';
  this.discarded = false;
}

/**
 * Inherits from EventEmitter.
 */

util.inherits(Transport, EventEmitter);

/**
 * Flags the transport as discarded.
 *
 * @api private
 */

Transport.prototype.discard = function () {
  this.discarded = true;
};

/**
 * Called with an incoming HTTP request.
 *
 * @param {http.IncomingMessage} request
 * @api private
 */

Transport.prototype.onRequest = function (req) {
  debug('setting request');
  this.req = req;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function (fn) {
  if ('closed' === this.readyState || 'closing' === this.readyState) return;

  this.readyState = 'closing';
  this.doClose(fn || noop);
};

/**
 * Called with a transport error.
 *
 * @param {String} message error
 * @param {Object} error description
 * @api private
 */

Transport.prototype.onError = function (msg, desc) {
  if (this.listeners('error').length) {
    var err = new Error(msg);
    err.type = 'TransportError';
    err.description = desc;
    this.emit('error', err);
  } else {
    debug('ignored transport error %s (%s)', msg, desc);
  }
};

/**
 * Called with parsed out a packets from the data stream.
 *
 * @param {Object} packet
 * @api private
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called with the encoded packet data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  this.onPacket(parser.decodePacket(data));
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

},{"debug":93,"engine.io-parser":80,"events":231,"util":344}],87:[function(require,module,exports){

/**
 * Module dependencies.
 */

var XHR = require('./polling-xhr');
var JSONP = require('./polling-jsonp');

/**
 * Export transports.
 */

module.exports = exports = {
  polling: polling,
  websocket: require('./websocket')
};

/**
 * Export upgrades map.
 */

exports.polling.upgradesTo = ['websocket'];

/**
 * Polling polymorphic constructor.
 *
 * @api private
 */

function polling (req) {
  if ('string' === typeof req._query.j) {
    return new JSONP(req);
  } else {
    return new XHR(req);
  }
}

},{"./polling-jsonp":88,"./polling-xhr":89,"./websocket":91}],88:[function(require,module,exports){

/**
 * Module dependencies.
 */

var Polling = require('./polling');
var qs = require('querystring');
var rDoubleSlashes = /\\\\n/g;
var rSlashes = /(\\)?\\n/g;
var util = require('util');

/**
 * Module exports.
 */

module.exports = JSONP;

/**
 * JSON-P polling transport.
 *
 * @api public
 */

function JSONP (req) {
  Polling.call(this, req);

  this.head = '___eio[' + (req._query.j || '').replace(/[^0-9]/g, '') + '](';
  this.foot = ');';
}

/**
 * Inherits from Polling.
 */

util.inherits(JSONP, Polling);

/**
 * Handles incoming data.
 * Due to a bug in \n handling by browsers, we expect a escaped string.
 *
 * @api private
 */

JSONP.prototype.onData = function (data) {
  // we leverage the qs module so that we get built-in DoS protection
  // and the fast alternative to decodeURIComponent
  data = qs.parse(data).d;
  if ('string' === typeof data) {
    // client will send already escaped newlines as \\\\n and newlines as \\n
    // \\n must be replaced with \n and \\\\n with \\n
    data = data.replace(rSlashes, function (match, slashes) {
      return slashes ? match : '\n';
    });
    Polling.prototype.onData.call(this, data.replace(rDoubleSlashes, '\\n'));
  }
};

/**
 * Performs the write.
 *
 * @api private
 */

JSONP.prototype.doWrite = function (data, options, callback) {
  // we must output valid javascript, not valid json
  // see: http://timelessrepo.com/json-isnt-a-javascript-subset
  var js = JSON.stringify(data)
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029');

  // prepare response
  data = this.head + js + this.foot;

  Polling.prototype.doWrite.call(this, data, options, callback);
};

},{"./polling":90,"querystring":289,"util":344}],89:[function(require,module,exports){

/**
 * Module dependencies.
 */

var Polling = require('./polling');
var util = require('util');

/**
 * Module exports.
 */

module.exports = XHR;

/**
 * Ajax polling transport.
 *
 * @api public
 */

function XHR (req) {
  Polling.call(this, req);
}

/**
 * Inherits from Polling.
 */

util.inherits(XHR, Polling);

/**
 * Overrides `onRequest` to handle `OPTIONS`..
 *
 * @param {http.IncomingMessage}
 * @api private
 */

XHR.prototype.onRequest = function (req) {
  if ('OPTIONS' === req.method) {
    var res = req.res;
    var headers = this.headers(req);
    headers['Access-Control-Allow-Headers'] = 'Content-Type';
    res.writeHead(200, headers);
    res.end();
  } else {
    Polling.prototype.onRequest.call(this, req);
  }
};

/**
 * Returns headers for a response.
 *
 * @param {http.IncomingMessage} request
 * @param {Object} extra headers
 * @api private
 */

XHR.prototype.headers = function (req, headers) {
  headers = headers || {};

  if (req.headers.origin) {
    headers['Access-Control-Allow-Credentials'] = 'true';
    headers['Access-Control-Allow-Origin'] = req.headers.origin;
  } else {
    headers['Access-Control-Allow-Origin'] = '*';
  }

  return Polling.prototype.headers.call(this, req, headers);
};

},{"./polling":90,"util":344}],90:[function(require,module,exports){
(function (Buffer){

/**
 * Module requirements.
 */

var Transport = require('../transport');
var parser = require('engine.io-parser');
var zlib = require('zlib');
var accepts = require('accepts');
var util = require('util');
var debug = require('debug')('engine:polling');

var compressionMethods = {
  gzip: zlib.createGzip,
  deflate: zlib.createDeflate
};

/**
 * Exports the constructor.
 */

module.exports = Polling;

/**
 * HTTP polling constructor.
 *
 * @api public.
 */

function Polling (req) {
  Transport.call(this, req);

  this.closeTimeout = 30 * 1000;
  this.maxHttpBufferSize = null;
  this.httpCompression = null;
}

/**
 * Inherits from Transport.
 *
 * @api public.
 */

util.inherits(Polling, Transport);

/**
 * Transport name
 *
 * @api public
 */

Polling.prototype.name = 'polling';

/**
 * Overrides onRequest.
 *
 * @param {http.IncomingMessage}
 * @api private
 */

Polling.prototype.onRequest = function (req) {
  var res = req.res;

  if ('GET' === req.method) {
    this.onPollRequest(req, res);
  } else if ('POST' === req.method) {
    this.onDataRequest(req, res);
  } else {
    res.writeHead(500);
    res.end();
  }
};

/**
 * The client sends a request awaiting for us to send data.
 *
 * @api private
 */

Polling.prototype.onPollRequest = function (req, res) {
  if (this.req) {
    debug('request overlap');
    // assert: this.res, '.req and .res should be (un)set together'
    this.onError('overlap from client');
    res.writeHead(500);
    res.end();
    return;
  }

  debug('setting request');

  this.req = req;
  this.res = res;

  var self = this;

  function onClose () {
    self.onError('poll connection closed prematurely');
  }

  function cleanup () {
    req.removeListener('close', onClose);
    self.req = self.res = null;
  }

  req.cleanup = cleanup;
  req.on('close', onClose);

  this.writable = true;
  this.emit('drain');

  // if we're still writable but had a pending close, trigger an empty send
  if (this.writable && this.shouldClose) {
    debug('triggering empty send to append close packet');
    this.send([{ type: 'noop' }]);
  }
};

/**
 * The client sends a request with data.
 *
 * @api private
 */

Polling.prototype.onDataRequest = function (req, res) {
  if (this.dataReq) {
    // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'
    this.onError('data request overlap from client');
    res.writeHead(500);
    res.end();
    return;
  }

  var isBinary = 'application/octet-stream' === req.headers['content-type'];

  this.dataReq = req;
  this.dataRes = res;

  var chunks = isBinary ? Buffer.concat([]) : '';
  var self = this;

  function cleanup () {
    req.removeListener('data', onData);
    req.removeListener('end', onEnd);
    req.removeListener('close', onClose);
    self.dataReq = self.dataRes = chunks = null;
  }

  function onClose () {
    cleanup();
    self.onError('data request connection closed prematurely');
  }

  function onData (data) {
    var contentLength;
    if (isBinary) {
      chunks = Buffer.concat([chunks, data]);
      contentLength = chunks.length;
    } else {
      chunks += data;
      contentLength = Buffer.byteLength(chunks);
    }

    if (contentLength > self.maxHttpBufferSize) {
      chunks = isBinary ? Buffer.concat([]) : '';
      req.connection.destroy();
    }
  }

  function onEnd () {
    self.onData(chunks);

    var headers = {
      // text/html is required instead of text/plain to avoid an
      // unwanted download dialog on certain user-agents (GH-43)
      'Content-Type': 'text/html',
      'Content-Length': 2
    };

    res.writeHead(200, self.headers(req, headers));
    res.end('ok');
    cleanup();
  }

  req.on('close', onClose);
  if (!isBinary) req.setEncoding('utf8');
  req.on('data', onData);
  req.on('end', onEnd);
};

/**
 * Processes the incoming data payload.
 *
 * @param {String} encoded payload
 * @api private
 */

Polling.prototype.onData = function (data) {
  debug('received "%s"', data);
  var self = this;
  var callback = function (packet) {
    if ('close' === packet.type) {
      debug('got xhr close packet');
      self.onClose();
      return false;
    }

    self.onPacket(packet);
  };

  parser.decodePayload(data, callback);
};

/**
 * Overrides onClose.
 *
 * @api private
 */

Polling.prototype.onClose = function () {
  if (this.writable) {
    // close pending poll request
    this.send([{ type: 'noop' }]);
  }
  Transport.prototype.onClose.call(this);
};

/**
 * Writes a packet payload.
 *
 * @param {Object} packet
 * @api private
 */

Polling.prototype.send = function (packets) {
  this.writable = false;

  if (this.shouldClose) {
    debug('appending close packet to payload');
    packets.push({ type: 'close' });
    this.shouldClose();
    this.shouldClose = null;
  }

  var self = this;
  parser.encodePayload(packets, this.supportsBinary, function (data) {
    var compress = packets.some(function (packet) {
      return packet.options && packet.options.compress;
    });
    self.write(data, { compress: compress });
  });
};

/**
 * Writes data as response to poll request.
 *
 * @param {String} data
 * @param {Object} options
 * @api private
 */

Polling.prototype.write = function (data, options) {
  debug('writing "%s"', data);
  var self = this;
  this.doWrite(data, options, function () {
    self.req.cleanup();
  });
};

/**
 * Performs the write.
 *
 * @api private
 */

Polling.prototype.doWrite = function (data, options, callback) {
  var self = this;

  // explicit UTF-8 is required for pages not served under utf
  var isString = typeof data === 'string';
  var contentType = isString
    ? 'text/plain; charset=UTF-8'
    : 'application/octet-stream';

  var headers = {
    'Content-Type': contentType
  };

  if (!this.httpCompression || !options.compress) {
    respond(data);
    return;
  }

  var len = isString ? Buffer.byteLength(data) : data.length;
  if (len < this.httpCompression.threshold) {
    respond(data);
    return;
  }

  var encoding = accepts(this.req).encodings(['gzip', 'deflate']);
  if (!encoding) {
    respond(data);
    return;
  }

  this.compress(data, encoding, function (err, data) {
    if (err) {
      self.res.writeHead(500);
      self.res.end();
      callback(err);
      return;
    }

    headers['Content-Encoding'] = encoding;
    respond(data);
  });

  function respond (data) {
    headers['Content-Length'] = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
    self.res.writeHead(200, self.headers(self.req, headers));
    self.res.end(data);
    callback();
  }
};

/**
 * Compresses data.
 *
 * @api private
 */

Polling.prototype.compress = function (data, encoding, callback) {
  debug('compressing');

  var buffers = [];
  var nread = 0;

  compressionMethods[encoding](this.httpCompression)
    .on('error', callback)
    .on('data', function (chunk) {
      buffers.push(chunk);
      nread += chunk.length;
    })
    .on('end', function () {
      callback(null, Buffer.concat(buffers, nread));
    })
    .end(data);
};

/**
 * Closes the transport.
 *
 * @api private
 */

Polling.prototype.doClose = function (fn) {
  debug('closing');

  var self = this;
  var closeTimeoutTimer;

  if (this.dataReq) {
    debug('aborting ongoing data request');
    this.dataReq.destroy();
  }

  if (this.writable) {
    debug('transport writable - closing right away');
    this.send([{ type: 'close' }]);
    onClose();
  } else if (this.discarded) {
    debug('transport discarded - closing right away');
    onClose();
  } else {
    debug('transport not writable - buffering orderly close');
    this.shouldClose = onClose;
    closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);
  }

  function onClose () {
    clearTimeout(closeTimeoutTimer);
    fn();
    self.onClose();
  }
};

/**
 * Returns headers for a response.
 *
 * @param {http.IncomingMessage} request
 * @param {Object} extra headers
 * @api private
 */

Polling.prototype.headers = function (req, headers) {
  headers = headers || {};

  // prevent XSS warnings on IE
  // https://github.com/LearnBoost/socket.io/pull/1333
  var ua = req.headers['user-agent'];
  if (ua && (~ua.indexOf(';MSIE') || ~ua.indexOf('Trident/'))) {
    headers['X-XSS-Protection'] = '0';
  }

  this.emit('headers', headers);
  return headers;
};

}).call(this,require("buffer").Buffer)
},{"../transport":86,"accepts":57,"buffer":195,"debug":93,"engine.io-parser":80,"util":344,"zlib":193}],91:[function(require,module,exports){
(function (Buffer){

/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parser = require('engine.io-parser');
var util = require('util');
var debug = require('debug')('engine:ws');

/**
 * Export the constructor.
 */

module.exports = WebSocket;

/**
 * WebSocket transport
 *
 * @param {http.IncomingMessage}
 * @api public
 */

function WebSocket (req) {
  Transport.call(this, req);
  var self = this;
  this.socket = req.websocket;
  this.socket.on('message', this.onData.bind(this));
  this.socket.once('close', this.onClose.bind(this));
  this.socket.on('error', this.onError.bind(this));
  this.socket.on('headers', onHeaders);
  this.writable = true;
  this.perMessageDeflate = null;

  function onHeaders (headers) {
    self.emit('headers', headers);
  }
}

/**
 * Inherits from Transport.
 */

util.inherits(WebSocket, Transport);

/**
 * Transport name
 *
 * @api public
 */

WebSocket.prototype.name = 'websocket';

/**
 * Advertise upgrade support.
 *
 * @api public
 */

WebSocket.prototype.handlesUpgrades = true;

/**
 * Advertise framing support.
 *
 * @api public
 */

WebSocket.prototype.supportsFraming = true;

/**
 * Processes the incoming data.
 *
 * @param {String} encoded packet
 * @api private
 */

WebSocket.prototype.onData = function (data) {
  debug('received "%s"', data);
  Transport.prototype.onData.call(this, data);
};

/**
 * Writes a packet payload.
 *
 * @param {Array} packets
 * @api private
 */

WebSocket.prototype.send = function (packets) {
  var self = this;

  for (var i = 0; i < packets.length; i++) {
    var packet = packets[i];
    parser.encodePacket(packet, self.supportsBinary, send);
  }

  function send (data) {
    debug('writing "%s"', data);

    // always creates a new object since ws modifies it
    var opts = {};
    if (packet.options) {
      opts.compress = packet.options.compress;
    }

    if (self.perMessageDeflate) {
      var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
      if (len < self.perMessageDeflate.threshold) {
        opts.compress = false;
      }
    }

    self.writable = false;
    self.socket.send(data, opts, onEnd);
  }

  function onEnd (err) {
    if (err) return self.onError('write error', err.stack);
    self.writable = true;
    self.emit('drain');
  }
};

/**
 * Closes the transport.
 *
 * @api private
 */

WebSocket.prototype.doClose = function (fn) {
  debug('closing');
  this.socket.close();
  fn && fn();
};

}).call(this,require("buffer").Buffer)
},{"../transport":86,"buffer":195,"debug":93,"engine.io-parser":80,"util":344}],92:[function(require,module,exports){
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module exports.
 * @public
 */

exports.parse = parse;
exports.serialize = serialize;

/**
 * Module variables.
 * @private
 */

var decode = decodeURIComponent;
var encode = encodeURIComponent;
var pairSplitRegExp = /; */;

/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {}
  var opt = options || {};
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode;

  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i];
    var eq_idx = pair.indexOf('=');

    // skip things that don't look like key=value
    if (eq_idx < 0) {
      continue;
    }

    var key = pair.substr(0, eq_idx).trim()
    var val = pair.substr(++eq_idx, pair.length).trim();

    // quoted values
    if ('"' == val[0]) {
      val = val.slice(1, -1);
    }

    // only assign once
    if (undefined == obj[key]) {
      obj[key] = tryDecode(val, dec);
    }
  }

  return obj;
}

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

function serialize(name, val, options) {
  var opt = options || {};
  var enc = opt.encode || encode;

  if (typeof enc !== 'function') {
    throw new TypeError('option encode is invalid');
  }

  if (!fieldContentRegExp.test(name)) {
    throw new TypeError('argument name is invalid');
  }

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) {
    throw new TypeError('argument val is invalid');
  }

  var str = name + '=' + value;

  if (null != opt.maxAge) {
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += '; Max-Age=' + Math.floor(maxAge);
  }

  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }

    str += '; Domain=' + opt.domain;
  }

  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }

    str += '; Path=' + opt.path;
  }

  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }

    str += '; Expires=' + opt.expires.toUTCString();
  }

  if (opt.httpOnly) {
    str += '; HttpOnly';
  }

  if (opt.secure) {
    str += '; Secure';
  }

  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string'
      ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }

  return str;
}

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}

},{}],93:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./common":94,"_process":279,"dup":78}],94:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"dup":79,"ms":104}],95:[function(require,module,exports){
(function (Buffer){
/* global Blob File */

/*
 * Module requirements.
 */

var isArray = require('isarray');

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' ||
                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' ||
                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary (obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
    (withNativeBlob && obj instanceof Blob) ||
    (withNativeFile && obj instanceof File)
  ) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}

}).call(this,require("buffer").Buffer)
},{"buffer":195,"isarray":98}],96:[function(require,module,exports){

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

},{}],97:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],98:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],99:[function(require,module,exports){
!function(e){function t(e,t){"use strict";var r,a=t.ready.then((function(){function a(){if(0!==r._sodium_init())throw new Error("libsodium was not correctly initialized.");for(var t=["crypto_aead_chacha20poly1305_decrypt","crypto_aead_chacha20poly1305_decrypt_detached","crypto_aead_chacha20poly1305_encrypt","crypto_aead_chacha20poly1305_encrypt_detached","crypto_aead_chacha20poly1305_ietf_decrypt","crypto_aead_chacha20poly1305_ietf_decrypt_detached","crypto_aead_chacha20poly1305_ietf_encrypt","crypto_aead_chacha20poly1305_ietf_encrypt_detached","crypto_aead_chacha20poly1305_ietf_keygen","crypto_aead_chacha20poly1305_keygen","crypto_aead_xchacha20poly1305_ietf_decrypt","crypto_aead_xchacha20poly1305_ietf_decrypt_detached","crypto_aead_xchacha20poly1305_ietf_encrypt","crypto_aead_xchacha20poly1305_ietf_encrypt_detached","crypto_aead_xchacha20poly1305_ietf_keygen","crypto_auth","crypto_auth_hmacsha256","crypto_auth_hmacsha256_keygen","crypto_auth_hmacsha256_verify","crypto_auth_hmacsha512","crypto_auth_hmacsha512_keygen","crypto_auth_hmacsha512_verify","crypto_auth_keygen","crypto_auth_verify","crypto_box_beforenm","crypto_box_curve25519xchacha20poly1305_keypair","crypto_box_curve25519xchacha20poly1305_seal","crypto_box_curve25519xchacha20poly1305_seal_open","crypto_box_detached","crypto_box_easy","crypto_box_easy_afternm","crypto_box_keypair","crypto_box_open_detached","crypto_box_open_easy","crypto_box_open_easy_afternm","crypto_box_seal","crypto_box_seal_open","crypto_box_seed_keypair","crypto_core_ristretto255_add","crypto_core_ristretto255_from_hash","crypto_core_ristretto255_is_valid_point","crypto_core_ristretto255_random","crypto_core_ristretto255_scalar_add","crypto_core_ristretto255_scalar_complement","crypto_core_ristretto255_scalar_invert","crypto_core_ristretto255_scalar_mul","crypto_core_ristretto255_scalar_negate","crypto_core_ristretto255_scalar_random","crypto_core_ristretto255_scalar_reduce","crypto_core_ristretto255_scalar_sub","crypto_core_ristretto255_sub","crypto_generichash","crypto_generichash_blake2b_salt_personal","crypto_generichash_final","crypto_generichash_init","crypto_generichash_keygen","crypto_generichash_update","crypto_hash","crypto_hash_sha256","crypto_hash_sha256_final","crypto_hash_sha256_init","crypto_hash_sha256_update","crypto_hash_sha512","crypto_hash_sha512_final","crypto_hash_sha512_init","crypto_hash_sha512_update","crypto_kdf_derive_from_key","crypto_kdf_keygen","crypto_kx_client_session_keys","crypto_kx_keypair","crypto_kx_seed_keypair","crypto_kx_server_session_keys","crypto_onetimeauth","crypto_onetimeauth_final","crypto_onetimeauth_init","crypto_onetimeauth_keygen","crypto_onetimeauth_update","crypto_onetimeauth_verify","crypto_pwhash","crypto_pwhash_scryptsalsa208sha256","crypto_pwhash_scryptsalsa208sha256_ll","crypto_pwhash_scryptsalsa208sha256_str","crypto_pwhash_scryptsalsa208sha256_str_verify","crypto_pwhash_str","crypto_pwhash_str_needs_rehash","crypto_pwhash_str_verify","crypto_scalarmult","crypto_scalarmult_base","crypto_scalarmult_ristretto255","crypto_scalarmult_ristretto255_base","crypto_secretbox_detached","crypto_secretbox_easy","crypto_secretbox_keygen","crypto_secretbox_open_detached","crypto_secretbox_open_easy","crypto_secretstream_xchacha20poly1305_init_pull","crypto_secretstream_xchacha20poly1305_init_push","crypto_secretstream_xchacha20poly1305_keygen","crypto_secretstream_xchacha20poly1305_pull","crypto_secretstream_xchacha20poly1305_push","crypto_secretstream_xchacha20poly1305_rekey","crypto_shorthash","crypto_shorthash_keygen","crypto_shorthash_siphashx24","crypto_sign","crypto_sign_detached","crypto_sign_ed25519_pk_to_curve25519","crypto_sign_ed25519_sk_to_curve25519","crypto_sign_ed25519_sk_to_pk","crypto_sign_ed25519_sk_to_seed","crypto_sign_final_create","crypto_sign_final_verify","crypto_sign_init","crypto_sign_keypair","crypto_sign_open","crypto_sign_seed_keypair","crypto_sign_update","crypto_sign_verify_detached","crypto_stream_chacha20","crypto_stream_chacha20_ietf_xor","crypto_stream_chacha20_ietf_xor_ic","crypto_stream_chacha20_keygen","crypto_stream_chacha20_xor","crypto_stream_chacha20_xor_ic","crypto_stream_keygen","crypto_stream_xchacha20_keygen","crypto_stream_xchacha20_xor","crypto_stream_xchacha20_xor_ic","randombytes_buf","randombytes_buf_deterministic","randombytes_close","randombytes_random","randombytes_set_implementation","randombytes_stir","randombytes_uniform","sodium_version_string"],a=[E,x,k,S,T,w,Y,B,A,K,M,I,N,L,U,O,C,R,P,G,X,D,F,V,H,z,j,q,W,J,Q,Z,$,ee,te,re,ae,_e,ne,se,ce,oe,he,pe,ye,ie,le,ue,de,ve,ge,be,fe,me,Ee,xe,ke,Se,Te,we,Ye,Be,Ae,Ke,Me,Ie,Ne,Le,Ue,Oe,Ce,Re,Pe,Ge,Xe,De,Fe,Ve,He,ze,je,qe,We,Je,Qe,Ze,$e,et,tt,rt,at,_t,nt,st,ct,ot,ht,pt,yt,it,lt,ut,dt,vt,gt,bt,ft,mt,Et,xt,kt,St,Tt,wt,Yt,Bt,At,Kt,Mt,It,Nt,Lt,Ut,Ot,Ct,Rt,Pt,Gt,Xt,Dt,Ft,Vt,Ht,zt,jt,qt],_=0;_<a.length;_++)"function"==typeof r["_"+t[_]]&&(e[t[_]]=a[_]);var n=["SODIUM_LIBRARY_VERSION_MAJOR","SODIUM_LIBRARY_VERSION_MINOR","crypto_aead_chacha20poly1305_ABYTES","crypto_aead_chacha20poly1305_IETF_ABYTES","crypto_aead_chacha20poly1305_IETF_KEYBYTES","crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX","crypto_aead_chacha20poly1305_IETF_NPUBBYTES","crypto_aead_chacha20poly1305_IETF_NSECBYTES","crypto_aead_chacha20poly1305_KEYBYTES","crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX","crypto_aead_chacha20poly1305_NPUBBYTES","crypto_aead_chacha20poly1305_NSECBYTES","crypto_aead_chacha20poly1305_ietf_ABYTES","crypto_aead_chacha20poly1305_ietf_KEYBYTES","crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX","crypto_aead_chacha20poly1305_ietf_NPUBBYTES","crypto_aead_chacha20poly1305_ietf_NSECBYTES","crypto_aead_xchacha20poly1305_IETF_ABYTES","crypto_aead_xchacha20poly1305_IETF_KEYBYTES","crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX","crypto_aead_xchacha20poly1305_IETF_NPUBBYTES","crypto_aead_xchacha20poly1305_IETF_NSECBYTES","crypto_aead_xchacha20poly1305_ietf_ABYTES","crypto_aead_xchacha20poly1305_ietf_KEYBYTES","crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX","crypto_aead_xchacha20poly1305_ietf_NPUBBYTES","crypto_aead_xchacha20poly1305_ietf_NSECBYTES","crypto_auth_BYTES","crypto_auth_KEYBYTES","crypto_auth_hmacsha256_BYTES","crypto_auth_hmacsha256_KEYBYTES","crypto_auth_hmacsha512256_BYTES","crypto_auth_hmacsha512256_KEYBYTES","crypto_auth_hmacsha512_BYTES","crypto_auth_hmacsha512_KEYBYTES","crypto_box_BEFORENMBYTES","crypto_box_MACBYTES","crypto_box_MESSAGEBYTES_MAX","crypto_box_NONCEBYTES","crypto_box_PUBLICKEYBYTES","crypto_box_SEALBYTES","crypto_box_SECRETKEYBYTES","crypto_box_SEEDBYTES","crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES","crypto_box_curve25519xchacha20poly1305_MACBYTES","crypto_box_curve25519xchacha20poly1305_MESSAGEBYTES_MAX","crypto_box_curve25519xchacha20poly1305_NONCEBYTES","crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES","crypto_box_curve25519xchacha20poly1305_SEALBYTES","crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES","crypto_box_curve25519xchacha20poly1305_SEEDBYTES","crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES","crypto_box_curve25519xsalsa20poly1305_MACBYTES","crypto_box_curve25519xsalsa20poly1305_MESSAGEBYTES_MAX","crypto_box_curve25519xsalsa20poly1305_NONCEBYTES","crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES","crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES","crypto_box_curve25519xsalsa20poly1305_SEEDBYTES","crypto_core_ed25519_BYTES","crypto_core_ed25519_HASHBYTES","crypto_core_ed25519_NONREDUCEDSCALARBYTES","crypto_core_ed25519_SCALARBYTES","crypto_core_ed25519_UNIFORMBYTES","crypto_core_hchacha20_CONSTBYTES","crypto_core_hchacha20_INPUTBYTES","crypto_core_hchacha20_KEYBYTES","crypto_core_hchacha20_OUTPUTBYTES","crypto_core_hsalsa20_CONSTBYTES","crypto_core_hsalsa20_INPUTBYTES","crypto_core_hsalsa20_KEYBYTES","crypto_core_hsalsa20_OUTPUTBYTES","crypto_core_ristretto255_BYTES","crypto_core_ristretto255_HASHBYTES","crypto_core_ristretto255_NONREDUCEDSCALARBYTES","crypto_core_ristretto255_SCALARBYTES","crypto_core_salsa2012_CONSTBYTES","crypto_core_salsa2012_INPUTBYTES","crypto_core_salsa2012_KEYBYTES","crypto_core_salsa2012_OUTPUTBYTES","crypto_core_salsa20_CONSTBYTES","crypto_core_salsa20_INPUTBYTES","crypto_core_salsa20_KEYBYTES","crypto_core_salsa20_OUTPUTBYTES","crypto_generichash_BYTES","crypto_generichash_BYTES_MAX","crypto_generichash_BYTES_MIN","crypto_generichash_KEYBYTES","crypto_generichash_KEYBYTES_MAX","crypto_generichash_KEYBYTES_MIN","crypto_generichash_blake2b_BYTES","crypto_generichash_blake2b_BYTES_MAX","crypto_generichash_blake2b_BYTES_MIN","crypto_generichash_blake2b_KEYBYTES","crypto_generichash_blake2b_KEYBYTES_MAX","crypto_generichash_blake2b_KEYBYTES_MIN","crypto_generichash_blake2b_PERSONALBYTES","crypto_generichash_blake2b_SALTBYTES","crypto_hash_BYTES","crypto_hash_sha256_BYTES","crypto_hash_sha512_BYTES","crypto_kdf_BYTES_MAX","crypto_kdf_BYTES_MIN","crypto_kdf_CONTEXTBYTES","crypto_kdf_KEYBYTES","crypto_kdf_blake2b_BYTES_MAX","crypto_kdf_blake2b_BYTES_MIN","crypto_kdf_blake2b_CONTEXTBYTES","crypto_kdf_blake2b_KEYBYTES","crypto_kx_PUBLICKEYBYTES","crypto_kx_SECRETKEYBYTES","crypto_kx_SEEDBYTES","crypto_kx_SESSIONKEYBYTES","crypto_onetimeauth_BYTES","crypto_onetimeauth_KEYBYTES","crypto_onetimeauth_poly1305_BYTES","crypto_onetimeauth_poly1305_KEYBYTES","crypto_pwhash_ALG_ARGON2I13","crypto_pwhash_ALG_ARGON2ID13","crypto_pwhash_ALG_DEFAULT","crypto_pwhash_BYTES_MAX","crypto_pwhash_BYTES_MIN","crypto_pwhash_MEMLIMIT_INTERACTIVE","crypto_pwhash_MEMLIMIT_MAX","crypto_pwhash_MEMLIMIT_MIN","crypto_pwhash_MEMLIMIT_MODERATE","crypto_pwhash_MEMLIMIT_SENSITIVE","crypto_pwhash_OPSLIMIT_INTERACTIVE","crypto_pwhash_OPSLIMIT_MAX","crypto_pwhash_OPSLIMIT_MIN","crypto_pwhash_OPSLIMIT_MODERATE","crypto_pwhash_OPSLIMIT_SENSITIVE","crypto_pwhash_PASSWD_MAX","crypto_pwhash_PASSWD_MIN","crypto_pwhash_SALTBYTES","crypto_pwhash_STRBYTES","crypto_pwhash_argon2i_BYTES_MAX","crypto_pwhash_argon2i_BYTES_MIN","crypto_pwhash_argon2i_SALTBYTES","crypto_pwhash_argon2i_STRBYTES","crypto_pwhash_argon2id_BYTES_MAX","crypto_pwhash_argon2id_BYTES_MIN","crypto_pwhash_argon2id_SALTBYTES","crypto_pwhash_argon2id_STRBYTES","crypto_pwhash_scryptsalsa208sha256_BYTES_MAX","crypto_pwhash_scryptsalsa208sha256_BYTES_MIN","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE","crypto_pwhash_scryptsalsa208sha256_SALTBYTES","crypto_pwhash_scryptsalsa208sha256_STRBYTES","crypto_scalarmult_BYTES","crypto_scalarmult_SCALARBYTES","crypto_scalarmult_curve25519_BYTES","crypto_scalarmult_curve25519_SCALARBYTES","crypto_scalarmult_ed25519_BYTES","crypto_scalarmult_ed25519_SCALARBYTES","crypto_scalarmult_ristretto255_BYTES","crypto_scalarmult_ristretto255_SCALARBYTES","crypto_secretbox_KEYBYTES","crypto_secretbox_MACBYTES","crypto_secretbox_MESSAGEBYTES_MAX","crypto_secretbox_NONCEBYTES","crypto_secretbox_xchacha20poly1305_KEYBYTES","crypto_secretbox_xchacha20poly1305_MACBYTES","crypto_secretbox_xchacha20poly1305_MESSAGEBYTES_MAX","crypto_secretbox_xchacha20poly1305_NONCEBYTES","crypto_secretbox_xsalsa20poly1305_KEYBYTES","crypto_secretbox_xsalsa20poly1305_MACBYTES","crypto_secretbox_xsalsa20poly1305_MESSAGEBYTES_MAX","crypto_secretbox_xsalsa20poly1305_NONCEBYTES","crypto_secretstream_xchacha20poly1305_ABYTES","crypto_secretstream_xchacha20poly1305_HEADERBYTES","crypto_secretstream_xchacha20poly1305_KEYBYTES","crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX","crypto_secretstream_xchacha20poly1305_NPUBBYTES","crypto_secretstream_xchacha20poly1305_TAG_FINAL","crypto_secretstream_xchacha20poly1305_TAG_MESSAGE","crypto_secretstream_xchacha20poly1305_TAG_PUSH","crypto_secretstream_xchacha20poly1305_TAG_REKEY","crypto_shorthash_BYTES","crypto_shorthash_KEYBYTES","crypto_shorthash_siphash24_BYTES","crypto_shorthash_siphash24_KEYBYTES","crypto_shorthash_siphashx24_BYTES","crypto_shorthash_siphashx24_KEYBYTES","crypto_sign_BYTES","crypto_sign_MESSAGEBYTES_MAX","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","crypto_sign_SEEDBYTES","crypto_sign_ed25519_BYTES","crypto_sign_ed25519_MESSAGEBYTES_MAX","crypto_sign_ed25519_PUBLICKEYBYTES","crypto_sign_ed25519_SECRETKEYBYTES","crypto_sign_ed25519_SEEDBYTES","crypto_stream_KEYBYTES","crypto_stream_MESSAGEBYTES_MAX","crypto_stream_NONCEBYTES","crypto_stream_chacha20_IETF_KEYBYTES","crypto_stream_chacha20_IETF_MESSAGEBYTES_MAX","crypto_stream_chacha20_IETF_NONCEBYTES","crypto_stream_chacha20_KEYBYTES","crypto_stream_chacha20_MESSAGEBYTES_MAX","crypto_stream_chacha20_NONCEBYTES","crypto_stream_chacha20_ietf_KEYBYTES","crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX","crypto_stream_chacha20_ietf_NONCEBYTES","crypto_stream_salsa2012_KEYBYTES","crypto_stream_salsa2012_MESSAGEBYTES_MAX","crypto_stream_salsa2012_NONCEBYTES","crypto_stream_salsa208_KEYBYTES","crypto_stream_salsa208_MESSAGEBYTES_MAX","crypto_stream_salsa208_NONCEBYTES","crypto_stream_salsa20_KEYBYTES","crypto_stream_salsa20_MESSAGEBYTES_MAX","crypto_stream_salsa20_NONCEBYTES","crypto_stream_xchacha20_KEYBYTES","crypto_stream_xchacha20_MESSAGEBYTES_MAX","crypto_stream_xchacha20_NONCEBYTES","crypto_stream_xsalsa20_KEYBYTES","crypto_stream_xsalsa20_MESSAGEBYTES_MAX","crypto_stream_xsalsa20_NONCEBYTES","crypto_verify_16_BYTES","crypto_verify_32_BYTES","crypto_verify_64_BYTES"];for(_=0;_<n.length;_++)"function"==typeof(c=r["_"+n[_].toLowerCase()])&&(e[n[_]]=c());var s=["SODIUM_VERSION_STRING","crypto_pwhash_STRPREFIX","crypto_pwhash_scryptsalsa208sha256_STRPREFIX"];for(_=0;_<s.length;_++){var c;"function"==typeof(c=r["_"+s[_].toLowerCase()])&&(e[s[_]]=r.UTF8ToString(c()))}}r=t;try{a();var _=new Uint8Array([98,97,108,108,115]),n=e.randombytes_buf(e.crypto_secretbox_NONCEBYTES),s=e.randombytes_buf(e.crypto_secretbox_KEYBYTES),c=e.crypto_secretbox_easy(_,n,s),o=e.crypto_secretbox_open_easy(c,n,s);if(e.memcmp(_,o))return}catch(e){if(null==r.useBackupModule)throw new Error("Both wasm and asm failed to load"+e)}r.useBackupModule(),a()}));function _(e){if("function"==typeof TextEncoder)return(new TextEncoder).encode(e);e=unescape(encodeURIComponent(e));for(var t=new Uint8Array(e.length),r=0,a=e.length;r<a;r++)t[r]=e.charCodeAt(r);return t}function n(e){if("function"==typeof TextDecoder)return new TextDecoder("utf-8",{fatal:!0}).decode(e);var t=Math.ceil(e.length/8192);if(t<=1)try{return decodeURIComponent(escape(String.fromCharCode.apply(null,e)))}catch(e){throw new TypeError("The encoded data was not valid.")}for(var r="",a=0,_=0;_<t;_++){var s=Array.prototype.slice.call(e,8192*_+a,8192*(_+1)+a);if(0!=s.length){var c,o=s.length,h=0;do{var p=s[--o];p>=240?(h=4,c=!0):p>=224?(h=3,c=!0):p>=192?(h=2,c=!0):p<128&&(h=1,c=!0)}while(!c);for(var y=h-(s.length-o),i=0;i<y;i++)a--,s.pop();r+=n(s)}}return r}function s(e){e=m(null,e,"input");for(var t,r,a,_="",n=0;n<e.length;n++)a=87+(r=15&e[n])+(r-10>>8&-39)<<8|87+(t=e[n]>>>4)+(t-10>>8&-39),_+=String.fromCharCode(255&a)+String.fromCharCode(a>>>8);return _}var c={ORIGINAL:1,ORIGINAL_NO_PADDING:3,URLSAFE:5,URLSAFE_NO_PADDING:7};function o(e){if(null==e)return c.URLSAFE_NO_PADDING;if(e!==c.ORIGINAL&&e!==c.ORIGINAL_NO_PADDING&&e!==c.URLSAFE&&e!=c.URLSAFE_NO_PADDING)throw new Error("unsupported base64 variant");return e}function h(e,t){t=o(t),e=m(_,e,"input");var a,_=[],s=0|Math.floor(e.length/3),c=e.length-3*s,h=4*s+(0!==c?0==(2&t)?4:2+(c>>>1):0),p=new l(h+1),y=u(e);return _.push(y),_.push(p.address),0===r._sodium_bin2base64(p.address,p.length,y,e.length,t)&&g(_,"conversion failed"),p.length=h,a=n(p.to_Uint8Array()),v(_),a}function p(e,t){var r=t||"uint8array";if(!y(r))throw new Error(r+" output format is not available");if(e instanceof l){if("uint8array"===r)return e.to_Uint8Array();if("text"===r)return n(e.to_Uint8Array());if("hex"===r)return s(e.to_Uint8Array());if("base64"===r)return h(e.to_Uint8Array(),c.URLSAFE_NO_PADDING);throw new Error('What is output format "'+r+'"?')}if("object"==typeof e){for(var a=Object.keys(e),_={},o=0;o<a.length;o++)_[a[o]]=p(e[a[o]],r);return _}if("string"==typeof e)return e;throw new TypeError("Cannot format output")}function y(e){for(var t=["uint8array","text","hex","base64"],r=0;r<t.length;r++)if(t[r]===e)return!0;return!1}function i(e){if(e){if("string"!=typeof e)throw new TypeError("When defined, the output format must be a string");if(!y(e))throw new Error(e+" is not a supported output format")}}function l(e){this.length=e,this.address=d(e)}function u(e){var t=d(e.length);return r.HEAPU8.set(e,t),t}function d(e){var t=r._malloc(e);if(0===t)throw{message:"_malloc() failed",length:e};return t}function v(e){if(e)for(var t=0;t<e.length;t++)a=e[t],r._free(a);var a}function g(e,t){throw v(e),new Error(t)}function b(e,t){throw v(e),new TypeError(t)}function f(e,t,r){null==t&&b(e,r+" cannot be null or undefined")}function m(e,t,r){return f(e,t,r),t instanceof Uint8Array?t:"string"==typeof t?_(t):void b(e,"unsupported input type for "+r)}function E(e,t,a,_,n,s){var c=[];i(s);var o=null;null!=e&&(o=u(e=m(c,e,"secret_nonce")),e.length,c.push(o)),t=m(c,t,"ciphertext");var h,y=r._crypto_aead_chacha20poly1305_abytes(),d=t.length;d<y&&b(c,"ciphertext is too short"),h=u(t),c.push(h);var f=null,E=0;null!=a&&(f=u(a=m(c,a,"additional_data")),E=a.length,c.push(f)),_=m(c,_,"public_nonce");var x,k=0|r._crypto_aead_chacha20poly1305_npubbytes();_.length!==k&&b(c,"invalid public_nonce length"),x=u(_),c.push(x),n=m(c,n,"key");var S,T=0|r._crypto_aead_chacha20poly1305_keybytes();n.length!==T&&b(c,"invalid key length"),S=u(n),c.push(S);var w=new l(d-r._crypto_aead_chacha20poly1305_abytes()|0),Y=w.address;if(c.push(Y),0===r._crypto_aead_chacha20poly1305_decrypt(Y,null,o,h,d,0,f,E,0,x,S)){var B=p(w,s);return v(c),B}g(c,"ciphertext cannot be decrypted using that key")}function x(e,t,a,_,n,s,c){var o=[];i(c);var h=null;null!=e&&(h=u(e=m(o,e,"secret_nonce")),e.length,o.push(h));var y=u(t=m(o,t,"ciphertext")),d=t.length;o.push(y),a=m(o,a,"mac");var f,E=0|r._crypto_box_macbytes();a.length!==E&&b(o,"invalid mac length"),f=u(a),o.push(f);var x=null,k=0;null!=_&&(x=u(_=m(o,_,"additional_data")),k=_.length,o.push(x)),n=m(o,n,"public_nonce");var S,T=0|r._crypto_aead_chacha20poly1305_npubbytes();n.length!==T&&b(o,"invalid public_nonce length"),S=u(n),o.push(S),s=m(o,s,"key");var w,Y=0|r._crypto_aead_chacha20poly1305_keybytes();s.length!==Y&&b(o,"invalid key length"),w=u(s),o.push(w);var B=new l(0|d),A=B.address;if(o.push(A),0===r._crypto_aead_chacha20poly1305_decrypt_detached(A,h,y,d,0,f,x,k,0,S,w)){var K=p(B,c);return v(o),K}g(o,"ciphertext cannot be decrypted using that key")}function k(e,t,a,_,n,s){var c=[];i(s);var o=u(e=m(c,e,"message")),h=e.length;c.push(o);var y=null,d=0;null!=t&&(y=u(t=m(c,t,"additional_data")),d=t.length,c.push(y));var f=null;null!=a&&(f=u(a=m(c,a,"secret_nonce")),a.length,c.push(f)),_=m(c,_,"public_nonce");var E,x=0|r._crypto_aead_chacha20poly1305_npubbytes();_.length!==x&&b(c,"invalid public_nonce length"),E=u(_),c.push(E),n=m(c,n,"key");var k,S=0|r._crypto_aead_chacha20poly1305_keybytes();n.length!==S&&b(c,"invalid key length"),k=u(n),c.push(k);var T=new l(h+r._crypto_aead_chacha20poly1305_abytes()|0),w=T.address;if(c.push(w),0===r._crypto_aead_chacha20poly1305_encrypt(w,null,o,h,0,y,d,0,f,E,k)){var Y=p(T,s);return v(c),Y}g(c,"invalid usage")}function S(e,t,a,_,n,s){var c=[];i(s);var o=u(e=m(c,e,"message")),h=e.length;c.push(o);var y=null,d=0;null!=t&&(y=u(t=m(c,t,"additional_data")),d=t.length,c.push(y));var f=null;null!=a&&(f=u(a=m(c,a,"secret_nonce")),a.length,c.push(f)),_=m(c,_,"public_nonce");var E,x=0|r._crypto_aead_chacha20poly1305_npubbytes();_.length!==x&&b(c,"invalid public_nonce length"),E=u(_),c.push(E),n=m(c,n,"key");var k,S=0|r._crypto_aead_chacha20poly1305_keybytes();n.length!==S&&b(c,"invalid key length"),k=u(n),c.push(k);var T=new l(0|h),w=T.address;c.push(w);var Y=new l(0|r._crypto_aead_chacha20poly1305_abytes()),B=Y.address;if(c.push(B),0===r._crypto_aead_chacha20poly1305_encrypt_detached(w,B,null,o,h,0,y,d,0,f,E,k)){var A=p({ciphertext:T,mac:Y},s);return v(c),A}g(c,"invalid usage")}function T(e,t,a,_,n,s){var c=[];i(s);var o=null;null!=e&&(o=u(e=m(c,e,"secret_nonce")),e.length,c.push(o)),t=m(c,t,"ciphertext");var h,y=r._crypto_aead_chacha20poly1305_ietf_abytes(),d=t.length;d<y&&b(c,"ciphertext is too short"),h=u(t),c.push(h);var f=null,E=0;null!=a&&(f=u(a=m(c,a,"additional_data")),E=a.length,c.push(f)),_=m(c,_,"public_nonce");var x,k=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==k&&b(c,"invalid public_nonce length"),x=u(_),c.push(x),n=m(c,n,"key");var S,T=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();n.length!==T&&b(c,"invalid key length"),S=u(n),c.push(S);var w=new l(d-r._crypto_aead_chacha20poly1305_ietf_abytes()|0),Y=w.address;if(c.push(Y),0===r._crypto_aead_chacha20poly1305_ietf_decrypt(Y,null,o,h,d,0,f,E,0,x,S)){var B=p(w,s);return v(c),B}g(c,"ciphertext cannot be decrypted using that key")}function w(e,t,a,_,n,s,c){var o=[];i(c);var h=null;null!=e&&(h=u(e=m(o,e,"secret_nonce")),e.length,o.push(h));var y=u(t=m(o,t,"ciphertext")),d=t.length;o.push(y),a=m(o,a,"mac");var f,E=0|r._crypto_box_macbytes();a.length!==E&&b(o,"invalid mac length"),f=u(a),o.push(f);var x=null,k=0;null!=_&&(x=u(_=m(o,_,"additional_data")),k=_.length,o.push(x)),n=m(o,n,"public_nonce");var S,T=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();n.length!==T&&b(o,"invalid public_nonce length"),S=u(n),o.push(S),s=m(o,s,"key");var w,Y=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();s.length!==Y&&b(o,"invalid key length"),w=u(s),o.push(w);var B=new l(0|d),A=B.address;if(o.push(A),0===r._crypto_aead_chacha20poly1305_ietf_decrypt_detached(A,h,y,d,0,f,x,k,0,S,w)){var K=p(B,c);return v(o),K}g(o,"ciphertext cannot be decrypted using that key")}function Y(e,t,a,_,n,s){var c=[];i(s);var o=u(e=m(c,e,"message")),h=e.length;c.push(o);var y=null,d=0;null!=t&&(y=u(t=m(c,t,"additional_data")),d=t.length,c.push(y));var f=null;null!=a&&(f=u(a=m(c,a,"secret_nonce")),a.length,c.push(f)),_=m(c,_,"public_nonce");var E,x=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==x&&b(c,"invalid public_nonce length"),E=u(_),c.push(E),n=m(c,n,"key");var k,S=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();n.length!==S&&b(c,"invalid key length"),k=u(n),c.push(k);var T=new l(h+r._crypto_aead_chacha20poly1305_ietf_abytes()|0),w=T.address;if(c.push(w),0===r._crypto_aead_chacha20poly1305_ietf_encrypt(w,null,o,h,0,y,d,0,f,E,k)){var Y=p(T,s);return v(c),Y}g(c,"invalid usage")}function B(e,t,a,_,n,s){var c=[];i(s);var o=u(e=m(c,e,"message")),h=e.length;c.push(o);var y=null,d=0;null!=t&&(y=u(t=m(c,t,"additional_data")),d=t.length,c.push(y));var f=null;null!=a&&(f=u(a=m(c,a,"secret_nonce")),a.length,c.push(f)),_=m(c,_,"public_nonce");var E,x=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==x&&b(c,"invalid public_nonce length"),E=u(_),c.push(E),n=m(c,n,"key");var k,S=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();n.length!==S&&b(c,"invalid key length"),k=u(n),c.push(k);var T=new l(0|h),w=T.address;c.push(w);var Y=new l(0|r._crypto_aead_chacha20poly1305_ietf_abytes()),B=Y.address;if(c.push(B),0===r._crypto_aead_chacha20poly1305_ietf_encrypt_detached(w,B,null,o,h,0,y,d,0,f,E,k)){var A=p({ciphertext:T,mac:Y},s);return v(c),A}g(c,"invalid usage")}function A(e){var t=[];i(e);var a=new l(0|r._crypto_aead_chacha20poly1305_ietf_keybytes()),_=a.address;t.push(_),r._crypto_aead_chacha20poly1305_ietf_keygen(_);var n=p(a,e);return v(t),n}function K(e){var t=[];i(e);var a=new l(0|r._crypto_aead_chacha20poly1305_keybytes()),_=a.address;t.push(_),r._crypto_aead_chacha20poly1305_keygen(_);var n=p(a,e);return v(t),n}function M(e,t,a,_,n,s){var c=[];i(s);var o=null;null!=e&&(o=u(e=m(c,e,"secret_nonce")),e.length,c.push(o)),t=m(c,t,"ciphertext");var h,y=r._crypto_aead_xchacha20poly1305_ietf_abytes(),d=t.length;d<y&&b(c,"ciphertext is too short"),h=u(t),c.push(h);var f=null,E=0;null!=a&&(f=u(a=m(c,a,"additional_data")),E=a.length,c.push(f)),_=m(c,_,"public_nonce");var x,k=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==k&&b(c,"invalid public_nonce length"),x=u(_),c.push(x),n=m(c,n,"key");var S,T=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();n.length!==T&&b(c,"invalid key length"),S=u(n),c.push(S);var w=new l(d-r._crypto_aead_xchacha20poly1305_ietf_abytes()|0),Y=w.address;if(c.push(Y),0===r._crypto_aead_xchacha20poly1305_ietf_decrypt(Y,null,o,h,d,0,f,E,0,x,S)){var B=p(w,s);return v(c),B}g(c,"ciphertext cannot be decrypted using that key")}function I(e,t,a,_,n,s,c){var o=[];i(c);var h=null;null!=e&&(h=u(e=m(o,e,"secret_nonce")),e.length,o.push(h));var y=u(t=m(o,t,"ciphertext")),d=t.length;o.push(y),a=m(o,a,"mac");var f,E=0|r._crypto_box_macbytes();a.length!==E&&b(o,"invalid mac length"),f=u(a),o.push(f);var x=null,k=0;null!=_&&(x=u(_=m(o,_,"additional_data")),k=_.length,o.push(x)),n=m(o,n,"public_nonce");var S,T=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();n.length!==T&&b(o,"invalid public_nonce length"),S=u(n),o.push(S),s=m(o,s,"key");var w,Y=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();s.length!==Y&&b(o,"invalid key length"),w=u(s),o.push(w);var B=new l(0|d),A=B.address;if(o.push(A),0===r._crypto_aead_xchacha20poly1305_ietf_decrypt_detached(A,h,y,d,0,f,x,k,0,S,w)){var K=p(B,c);return v(o),K}g(o,"ciphertext cannot be decrypted using that key")}function N(e,t,a,_,n,s){var c=[];i(s);var o=u(e=m(c,e,"message")),h=e.length;c.push(o);var y=null,d=0;null!=t&&(y=u(t=m(c,t,"additional_data")),d=t.length,c.push(y));var f=null;null!=a&&(f=u(a=m(c,a,"secret_nonce")),a.length,c.push(f)),_=m(c,_,"public_nonce");var E,x=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==x&&b(c,"invalid public_nonce length"),E=u(_),c.push(E),n=m(c,n,"key");var k,S=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();n.length!==S&&b(c,"invalid key length"),k=u(n),c.push(k);var T=new l(h+r._crypto_aead_xchacha20poly1305_ietf_abytes()|0),w=T.address;if(c.push(w),0===r._crypto_aead_xchacha20poly1305_ietf_encrypt(w,null,o,h,0,y,d,0,f,E,k)){var Y=p(T,s);return v(c),Y}g(c,"invalid usage")}function L(e,t,a,_,n,s){var c=[];i(s);var o=u(e=m(c,e,"message")),h=e.length;c.push(o);var y=null,d=0;null!=t&&(y=u(t=m(c,t,"additional_data")),d=t.length,c.push(y));var f=null;null!=a&&(f=u(a=m(c,a,"secret_nonce")),a.length,c.push(f)),_=m(c,_,"public_nonce");var E,x=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==x&&b(c,"invalid public_nonce length"),E=u(_),c.push(E),n=m(c,n,"key");var k,S=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();n.length!==S&&b(c,"invalid key length"),k=u(n),c.push(k);var T=new l(0|h),w=T.address;c.push(w);var Y=new l(0|r._crypto_aead_xchacha20poly1305_ietf_abytes()),B=Y.address;if(c.push(B),0===r._crypto_aead_xchacha20poly1305_ietf_encrypt_detached(w,B,null,o,h,0,y,d,0,f,E,k)){var A=p({ciphertext:T,mac:Y},s);return v(c),A}g(c,"invalid usage")}function U(e){var t=[];i(e);var a=new l(0|r._crypto_aead_xchacha20poly1305_ietf_keybytes()),_=a.address;t.push(_),r._crypto_aead_xchacha20poly1305_ietf_keygen(_);var n=p(a,e);return v(t),n}function O(e,t,a){var _=[];i(a);var n=u(e=m(_,e,"message")),s=e.length;_.push(n),t=m(_,t,"key");var c,o=0|r._crypto_auth_keybytes();t.length!==o&&b(_,"invalid key length"),c=u(t),_.push(c);var h=new l(0|r._crypto_auth_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_auth(y,n,s,0,c))){var d=p(h,a);return v(_),d}g(_,"invalid usage")}function C(e,t,a){var _=[];i(a);var n=u(e=m(_,e,"message")),s=e.length;_.push(n),t=m(_,t,"key");var c,o=0|r._crypto_auth_hmacsha256_keybytes();t.length!==o&&b(_,"invalid key length"),c=u(t),_.push(c);var h=new l(0|r._crypto_auth_hmacsha256_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_auth_hmacsha256(y,n,s,0,c))){var d=p(h,a);return v(_),d}g(_,"invalid usage")}function R(e){var t=[];i(e);var a=new l(0|r._crypto_auth_hmacsha256_keybytes()),_=a.address;t.push(_),r._crypto_auth_hmacsha256_keygen(_);var n=p(a,e);return v(t),n}function P(e,t,a){var _=[];e=m(_,e,"tag");var n,s=0|r._crypto_auth_hmacsha256_bytes();e.length!==s&&b(_,"invalid tag length"),n=u(e),_.push(n);var c=u(t=m(_,t,"message")),o=t.length;_.push(c),a=m(_,a,"key");var h,p=0|r._crypto_auth_hmacsha256_keybytes();a.length!==p&&b(_,"invalid key length"),h=u(a),_.push(h);var y=0==(0|r._crypto_auth_hmacsha256_verify(n,c,o,0,h));return v(_),y}function G(e,t,a){var _=[];i(a);var n=u(e=m(_,e,"message")),s=e.length;_.push(n),t=m(_,t,"key");var c,o=0|r._crypto_auth_hmacsha512_keybytes();t.length!==o&&b(_,"invalid key length"),c=u(t),_.push(c);var h=new l(0|r._crypto_auth_hmacsha512_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_auth_hmacsha512(y,n,s,0,c))){var d=p(h,a);return v(_),d}g(_,"invalid usage")}function X(e){var t=[];i(e);var a=new l(0|r._crypto_auth_hmacsha512_keybytes()),_=a.address;t.push(_),r._crypto_auth_hmacsha512_keygen(_);var n=p(a,e);return v(t),n}function D(e,t,a){var _=[];e=m(_,e,"tag");var n,s=0|r._crypto_auth_hmacsha512_bytes();e.length!==s&&b(_,"invalid tag length"),n=u(e),_.push(n);var c=u(t=m(_,t,"message")),o=t.length;_.push(c),a=m(_,a,"key");var h,p=0|r._crypto_auth_hmacsha512_keybytes();a.length!==p&&b(_,"invalid key length"),h=u(a),_.push(h);var y=0==(0|r._crypto_auth_hmacsha512_verify(n,c,o,0,h));return v(_),y}function F(e){var t=[];i(e);var a=new l(0|r._crypto_auth_keybytes()),_=a.address;t.push(_),r._crypto_auth_keygen(_);var n=p(a,e);return v(t),n}function V(e,t,a){var _=[];e=m(_,e,"tag");var n,s=0|r._crypto_auth_bytes();e.length!==s&&b(_,"invalid tag length"),n=u(e),_.push(n);var c=u(t=m(_,t,"message")),o=t.length;_.push(c),a=m(_,a,"key");var h,p=0|r._crypto_auth_keybytes();a.length!==p&&b(_,"invalid key length"),h=u(a),_.push(h);var y=0==(0|r._crypto_auth_verify(n,c,o,0,h));return v(_),y}function H(e,t,a){var _=[];i(a),e=m(_,e,"publicKey");var n,s=0|r._crypto_box_publickeybytes();e.length!==s&&b(_,"invalid publicKey length"),n=u(e),_.push(n),t=m(_,t,"privateKey");var c,o=0|r._crypto_box_secretkeybytes();t.length!==o&&b(_,"invalid privateKey length"),c=u(t),_.push(c);var h=new l(0|r._crypto_box_beforenmbytes()),y=h.address;if(_.push(y),0==(0|r._crypto_box_beforenm(y,n,c))){var d=p(h,a);return v(_),d}g(_,"invalid usage")}function z(e){var t=[];i(e);var a=new l(0|r._crypto_box_curve25519xchacha20poly1305_publickeybytes()),_=a.address;t.push(_);var n=new l(0|r._crypto_box_curve25519xchacha20poly1305_secretkeybytes()),s=n.address;t.push(s),r._crypto_box_curve25519xchacha20poly1305_keypair(_,s);var c=p({publicKey:a,privateKey:n,keyType:"curve25519"},e);return v(t),c}function j(e,t,a){var _=[];i(a);var n=u(e=m(_,e,"message")),s=e.length;_.push(n),t=m(_,t,"publicKey");var c,o=0|r._crypto_box_curve25519xchacha20poly1305_publickeybytes();t.length!==o&&b(_,"invalid publicKey length"),c=u(t),_.push(c);var h=new l(s+r._crypto_box_curve25519xchacha20poly1305_sealbytes()|0),y=h.address;_.push(y),r._crypto_box_curve25519xchacha20poly1305_seal(y,n,s,0,c);var d=p(h,a);return v(_),d}function q(e,t,a,_){var n=[];i(_),e=m(n,e,"ciphertext");var s,c=r._crypto_box_curve25519xchacha20poly1305_sealbytes(),o=e.length;o<c&&b(n,"ciphertext is too short"),s=u(e),n.push(s),t=m(n,t,"publicKey");var h,y=0|r._crypto_box_curve25519xchacha20poly1305_publickeybytes();t.length!==y&&b(n,"invalid publicKey length"),h=u(t),n.push(h),a=m(n,a,"secretKey");var d,g=0|r._crypto_box_curve25519xchacha20poly1305_secretkeybytes();a.length!==g&&b(n,"invalid secretKey length"),d=u(a),n.push(d);var f=new l(o-r._crypto_box_curve25519xchacha20poly1305_sealbytes()|0),E=f.address;n.push(E),r._crypto_box_curve25519xchacha20poly1305_seal_open(E,s,o,0,h,d);var x=p(f,_);return v(n),x}function W(e,t,a,_,n){var s=[];i(n);var c=u(e=m(s,e,"message")),o=e.length;s.push(c),t=m(s,t,"nonce");var h,y=0|r._crypto_box_noncebytes();t.length!==y&&b(s,"invalid nonce length"),h=u(t),s.push(h),a=m(s,a,"publicKey");var d,f=0|r._crypto_box_publickeybytes();a.length!==f&&b(s,"invalid publicKey length"),d=u(a),s.push(d),_=m(s,_,"privateKey");var E,x=0|r._crypto_box_secretkeybytes();_.length!==x&&b(s,"invalid privateKey length"),E=u(_),s.push(E);var k=new l(0|o),S=k.address;s.push(S);var T=new l(0|r._crypto_box_macbytes()),w=T.address;if(s.push(w),0==(0|r._crypto_box_detached(S,w,c,o,0,h,d,E))){var Y=p({ciphertext:k,mac:T},n);return v(s),Y}g(s,"invalid usage")}function J(e,t,a,_,n){var s=[];i(n);var c=u(e=m(s,e,"message")),o=e.length;s.push(c),t=m(s,t,"nonce");var h,y=0|r._crypto_box_noncebytes();t.length!==y&&b(s,"invalid nonce length"),h=u(t),s.push(h),a=m(s,a,"publicKey");var d,f=0|r._crypto_box_publickeybytes();a.length!==f&&b(s,"invalid publicKey length"),d=u(a),s.push(d),_=m(s,_,"privateKey");var E,x=0|r._crypto_box_secretkeybytes();_.length!==x&&b(s,"invalid privateKey length"),E=u(_),s.push(E);var k=new l(o+r._crypto_box_macbytes()|0),S=k.address;if(s.push(S),0==(0|r._crypto_box_easy(S,c,o,0,h,d,E))){var T=p(k,n);return v(s),T}g(s,"invalid usage")}function Q(e,t,a,_){var n=[];i(_);var s=u(e=m(n,e,"message")),c=e.length;n.push(s),t=m(n,t,"nonce");var o,h=0|r._crypto_box_noncebytes();t.length!==h&&b(n,"invalid nonce length"),o=u(t),n.push(o),a=m(n,a,"sharedKey");var y,d=0|r._crypto_box_beforenmbytes();a.length!==d&&b(n,"invalid sharedKey length"),y=u(a),n.push(y);var f=new l(c+r._crypto_box_macbytes()|0),E=f.address;if(n.push(E),0==(0|r._crypto_box_easy_afternm(E,s,c,0,o,y))){var x=p(f,_);return v(n),x}g(n,"invalid usage")}function Z(e){var t=[];i(e);var a=new l(0|r._crypto_box_publickeybytes()),_=a.address;t.push(_);var n=new l(0|r._crypto_box_secretkeybytes()),s=n.address;if(t.push(s),0==(0|r._crypto_box_keypair(_,s))){var c={publicKey:p(a,e),privateKey:p(n,e),keyType:"x25519"};return v(t),c}g(t,"internal error")}function $(e,t,a,_,n,s){var c=[];i(s);var o=u(e=m(c,e,"ciphertext")),h=e.length;c.push(o),t=m(c,t,"mac");var y,d=0|r._crypto_box_macbytes();t.length!==d&&b(c,"invalid mac length"),y=u(t),c.push(y),a=m(c,a,"nonce");var f,E=0|r._crypto_box_noncebytes();a.length!==E&&b(c,"invalid nonce length"),f=u(a),c.push(f),_=m(c,_,"publicKey");var x,k=0|r._crypto_box_publickeybytes();_.length!==k&&b(c,"invalid publicKey length"),x=u(_),c.push(x),n=m(c,n,"privateKey");var S,T=0|r._crypto_box_secretkeybytes();n.length!==T&&b(c,"invalid privateKey length"),S=u(n),c.push(S);var w=new l(0|h),Y=w.address;if(c.push(Y),0==(0|r._crypto_box_open_detached(Y,o,y,h,0,f,x,S))){var B=p(w,s);return v(c),B}g(c,"incorrect key pair for the given ciphertext")}function ee(e,t,a,_,n){var s=[];i(n),e=m(s,e,"ciphertext");var c,o=r._crypto_box_macbytes(),h=e.length;h<o&&b(s,"ciphertext is too short"),c=u(e),s.push(c),t=m(s,t,"nonce");var y,d=0|r._crypto_box_noncebytes();t.length!==d&&b(s,"invalid nonce length"),y=u(t),s.push(y),a=m(s,a,"publicKey");var f,E=0|r._crypto_box_publickeybytes();a.length!==E&&b(s,"invalid publicKey length"),f=u(a),s.push(f),_=m(s,_,"privateKey");var x,k=0|r._crypto_box_secretkeybytes();_.length!==k&&b(s,"invalid privateKey length"),x=u(_),s.push(x);var S=new l(h-r._crypto_box_macbytes()|0),T=S.address;if(s.push(T),0==(0|r._crypto_box_open_easy(T,c,h,0,y,f,x))){var w=p(S,n);return v(s),w}g(s,"incorrect key pair for the given ciphertext")}function te(e,t,a,_){var n=[];i(_);var s=u(e=m(n,e,"ciphertext")),c=e.length;n.push(s),t=m(n,t,"nonce");var o,h=0|r._crypto_box_noncebytes();t.length!==h&&b(n,"invalid nonce length"),o=u(t),n.push(o),a=m(n,a,"sharedKey");var y,d=0|r._crypto_box_beforenmbytes();a.length!==d&&b(n,"invalid sharedKey length"),y=u(a),n.push(y);var f=new l(c-r._crypto_box_macbytes()|0),E=f.address;if(n.push(E),0==(0|r._crypto_box_open_easy_afternm(E,s,c,0,o,y))){var x=p(f,_);return v(n),x}g(n,"incorrect secret key for the given ciphertext")}function re(e,t,a){var _=[];i(a);var n=u(e=m(_,e,"message")),s=e.length;_.push(n),t=m(_,t,"publicKey");var c,o=0|r._crypto_box_publickeybytes();t.length!==o&&b(_,"invalid publicKey length"),c=u(t),_.push(c);var h=new l(s+r._crypto_box_sealbytes()|0),y=h.address;if(_.push(y),0==(0|r._crypto_box_seal(y,n,s,0,c))){var d=p(h,a);return v(_),d}g(_,"invalid usage")}function ae(e,t,a,_){var n=[];i(_),e=m(n,e,"ciphertext");var s,c=r._crypto_box_sealbytes(),o=e.length;o<c&&b(n,"ciphertext is too short"),s=u(e),n.push(s),t=m(n,t,"publicKey");var h,y=0|r._crypto_box_publickeybytes();t.length!==y&&b(n,"invalid publicKey length"),h=u(t),n.push(h),a=m(n,a,"privateKey");var d,f=0|r._crypto_box_secretkeybytes();a.length!==f&&b(n,"invalid privateKey length"),d=u(a),n.push(d);var E=new l(o-r._crypto_box_sealbytes()|0),x=E.address;if(n.push(x),0==(0|r._crypto_box_seal_open(x,s,o,0,h,d))){var k=p(E,_);return v(n),k}g(n,"incorrect key pair for the given ciphertext")}function _e(e,t){var a=[];i(t),e=m(a,e,"seed");var _,n=0|r._crypto_box_seedbytes();e.length!==n&&b(a,"invalid seed length"),_=u(e),a.push(_);var s=new l(0|r._crypto_box_publickeybytes()),c=s.address;a.push(c);var o=new l(0|r._crypto_box_secretkeybytes()),h=o.address;if(a.push(h),0==(0|r._crypto_box_seed_keypair(c,h,_))){var y={publicKey:p(s,t),privateKey:p(o,t),keyType:"x25519"};return v(a),y}g(a,"invalid usage")}function ne(e,t,a){var _=[];i(a),e=m(_,e,"p");var n,s=0|r._crypto_core_ristretto255_bytes();e.length!==s&&b(_,"invalid p length"),n=u(e),_.push(n),t=m(_,t,"q");var c,o=0|r._crypto_core_ristretto255_bytes();t.length!==o&&b(_,"invalid q length"),c=u(t),_.push(c);var h=new l(0|r._crypto_core_ristretto255_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_core_ristretto255_add(y,n,c))){var d=p(h,a);return v(_),d}g(_,"inputs is invalid element")}function se(e,t){var a=[];i(t);var _=u(e=m(a,e,"r"));e.length,a.push(_);var n=new l(0|r._crypto_core_ristretto255_bytes()),s=n.address;if(a.push(s),0==(0|r._crypto_core_ristretto255_from_hash(s,_))){var c=p(n,t);return v(a),c}g(a,"invalid usage")}function ce(e,t){var a=[];i(t);var _=u(e=m(a,e,"point"));e.length,a.push(_);var n=1==(0|r._crypto_core_ristretto255_is_valid_point(_));return v(a),n}function oe(e){var t=[];i(e);var a=new l(0|r._crypto_core_ristretto255_bytes()),_=a.address;t.push(_),r._crypto_core_ristretto255_random(_);var n=p(a,e);return v(t),n}function he(e,t,a){var _=[];i(a),e=m(_,e,"x");var n,s=0|r._crypto_core_ristretto255_scalarbytes();e.length!==s&&b(_,"invalid x length"),n=u(e),_.push(n),t=m(_,t,"y");var c,o=0|r._crypto_core_ristretto255_scalarbytes();t.length!==o&&b(_,"invalid y length"),c=u(t),_.push(c);var h=new l(0|r._crypto_core_ristretto255_scalarbytes()),y=h.address;_.push(y),r._crypto_core_ristretto255_scalar_add(y,n,c);var d=p(h,a);return v(_),d}function pe(e,t){var a=[];i(t);var _=u(e=m(a,e,"s"));e.length,a.push(_);var n=new l(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;a.push(s),r._crypto_core_ristretto255_scalar_complement(s,_);var c=p(n,t);return v(a),c}function ye(e,t){var a=[];i(t);var _=u(e=m(a,e,"s"));e.length,a.push(_);var n=new l(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;if(a.push(s),0==(0|r._crypto_core_ristretto255_scalar_invert(s,_))){var c=p(n,t);return v(a),c}g(a,"invalid reciprocate")}function ie(e,t,a){var _=[];i(a),e=m(_,e,"x");var n,s=0|r._crypto_core_ristretto255_scalarbytes();e.length!==s&&b(_,"invalid x length"),n=u(e),_.push(n),t=m(_,t,"y");var c,o=0|r._crypto_core_ristretto255_scalarbytes();t.length!==o&&b(_,"invalid y length"),c=u(t),_.push(c);var h=new l(0|r._crypto_core_ristretto255_scalarbytes()),y=h.address;_.push(y),r._crypto_core_ristretto255_scalar_mul(y,n,c);var d=p(h,a);return v(_),d}function le(e,t){var a=[];i(t);var _=u(e=m(a,e,"s"));e.length,a.push(_);var n=new l(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;a.push(s),r._crypto_core_ristretto255_scalar_negate(s,_);var c=p(n,t);return v(a),c}function ue(e){var t=[];i(e);var a=new l(0|r._crypto_core_ristretto255_scalarbytes()),_=a.address;t.push(_),r._crypto_core_ristretto255_random(_);var n=p(a,e);return v(t),n}function de(e,t){var a=[];i(t);var _=u(e=m(a,e,"sample"));e.length,a.push(_);var n=new l(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;a.push(s),r._crypto_core_ristretto255_scalar_reduce(s,_);var c=p(n,t);return v(a),c}function ve(e,t,a){var _=[];i(a),e=m(_,e,"x");var n,s=0|r._crypto_core_ristretto255_scalarbytes();e.length!==s&&b(_,"invalid x length"),n=u(e),_.push(n),t=m(_,t,"y");var c,o=0|r._crypto_core_ristretto255_scalarbytes();t.length!==o&&b(_,"invalid y length"),c=u(t),_.push(c);var h=new l(0|r._crypto_core_ristretto255_scalarbytes()),y=h.address;_.push(y),r._crypto_core_ristretto255_scalar_sub(y,n,c);var d=p(h,a);return v(_),d}function ge(e,t,a){var _=[];i(a),e=m(_,e,"p");var n,s=0|r._crypto_core_ristretto255_bytes();e.length!==s&&b(_,"invalid p length"),n=u(e),_.push(n),t=m(_,t,"q");var c,o=0|r._crypto_core_ristretto255_bytes();t.length!==o&&b(_,"invalid q length"),c=u(t),_.push(c);var h=new l(0|r._crypto_core_ristretto255_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_core_ristretto255_sub(y,n,c))){var d=p(h,a);return v(_),d}g(_,"inputs is invalid element")}function be(e,t,a,_){var n=[];i(_),f(n,e,"hash_length"),("number"!=typeof e||(0|e)!==e||e<0)&&b(n,"hash_length must be an unsigned integer");var s=u(t=m(n,t,"message")),c=t.length;n.push(s);var o=null,h=0;null!=a&&(o=u(a=m(n,a,"key")),h=a.length,n.push(o));var y=new l(e|=0),d=y.address;if(n.push(d),0==(0|r._crypto_generichash(d,e,s,c,0,o,h))){var E=p(y,_);return v(n),E}g(n,"invalid usage")}function fe(e,t,a,_,n){var s=[];i(n),f(s,e,"subkey_len"),("number"!=typeof e||(0|e)!==e||e<0)&&b(s,"subkey_len must be an unsigned integer");var c=null,o=0;null!=t&&(c=u(t=m(s,t,"key")),o=t.length,s.push(c)),a=m(s,a,"id");var h,y=0|r._crypto_generichash_blake2b_saltbytes();a.length!==y&&b(s,"invalid id length"),h=u(a),s.push(h),_=m(s,_,"ctx");var d,E=0|r._crypto_generichash_blake2b_personalbytes();_.length!==E&&b(s,"invalid ctx length"),d=u(_),s.push(d);var x=new l(0|e),k=x.address;if(s.push(k),0==(0|r._crypto_generichash_blake2b_salt_personal(k,e,null,0,0,c,o,h,d))){var S=p(x,n);return v(s),S}g(s,"invalid usage")}function me(e,t,a){var _=[];i(a),f(_,e,"state_address"),f(_,t,"hash_length"),("number"!=typeof t||(0|t)!==t||t<0)&&b(_,"hash_length must be an unsigned integer");var n=new l(t|=0),s=n.address;if(_.push(s),0==(0|r._crypto_generichash_final(e,s,t))){var c=(r._free(e),p(n,a));return v(_),c}g(_,"invalid usage")}function Ee(e,t,a){var _=[];i(a);var n=null,s=0;null!=e&&(n=u(e=m(_,e,"key")),s=e.length,_.push(n)),f(_,t,"hash_length"),("number"!=typeof t||(0|t)!==t||t<0)&&b(_,"hash_length must be an unsigned integer");var c=new l(357).address;if(0==(0|r._crypto_generichash_init(c,n,s,t))){var o=c;return v(_),o}g(_,"invalid usage")}function xe(e){var t=[];i(e);var a=new l(0|r._crypto_generichash_keybytes()),_=a.address;t.push(_),r._crypto_generichash_keygen(_);var n=p(a,e);return v(t),n}function ke(e,t,a){var _=[];i(a),f(_,e,"state_address");var n=u(t=m(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_generichash_update(e,n,s))&&g(_,"invalid usage"),v(_)}function Se(e,t){var a=[];i(t);var _=u(e=m(a,e,"message")),n=e.length;a.push(_);var s=new l(0|r._crypto_hash_bytes()),c=s.address;if(a.push(c),0==(0|r._crypto_hash(c,_,n,0))){var o=p(s,t);return v(a),o}g(a,"invalid usage")}function Te(e,t){var a=[];i(t);var _=u(e=m(a,e,"message")),n=e.length;a.push(_);var s=new l(0|r._crypto_hash_sha256_bytes()),c=s.address;if(a.push(c),0==(0|r._crypto_hash_sha256(c,_,n,0))){var o=p(s,t);return v(a),o}g(a,"invalid usage")}function we(e,t){var a=[];i(t),f(a,e,"state_address");var _=new l(0|r._crypto_hash_sha256_bytes()),n=_.address;if(a.push(n),0==(0|r._crypto_hash_sha256_final(e,n))){var s=(r._free(e),p(_,t));return v(a),s}g(a,"invalid usage")}function Ye(e){var t=[];i(e);var a=new l(104).address;if(0==(0|r._crypto_hash_sha256_init(a))){var _=a;return v(t),_}g(t,"invalid usage")}function Be(e,t,a){var _=[];i(a),f(_,e,"state_address");var n=u(t=m(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_hash_sha256_update(e,n,s))&&g(_,"invalid usage"),v(_)}function Ae(e,t){var a=[];i(t);var _=u(e=m(a,e,"message")),n=e.length;a.push(_);var s=new l(0|r._crypto_hash_sha512_bytes()),c=s.address;if(a.push(c),0==(0|r._crypto_hash_sha512(c,_,n,0))){var o=p(s,t);return v(a),o}g(a,"invalid usage")}function Ke(e,t){var a=[];i(t),f(a,e,"state_address");var _=new l(0|r._crypto_hash_sha512_bytes()),n=_.address;if(a.push(n),0==(0|r._crypto_hash_sha512_final(e,n))){var s=(r._free(e),p(_,t));return v(a),s}g(a,"invalid usage")}function Me(e){var t=[];i(e);var a=new l(208).address;if(0==(0|r._crypto_hash_sha512_init(a))){var _=a;return v(t),_}g(t,"invalid usage")}function Ie(e,t,a){var _=[];i(a),f(_,e,"state_address");var n=u(t=m(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_hash_sha512_update(e,n,s))&&g(_,"invalid usage"),v(_)}function Ne(e,t,a,n,s){var c=[];i(s),f(c,e,"subkey_len"),("number"!=typeof e||(0|e)!==e||e<0)&&b(c,"subkey_len must be an unsigned integer"),f(c,t,"subkey_id"),("number"!=typeof t||(0|t)!==t||t<0)&&b(c,"subkey_id must be an unsigned integer"),"string"!=typeof a&&b(c,"ctx must be a string"),a=_(a+"\0"),null!=h&&a.length-1!==h&&b(c,"invalid ctx length");var o=u(a),h=a.length-1;c.push(o),n=m(c,n,"key");var y,d=0|r._crypto_kdf_keybytes();n.length!==d&&b(c,"invalid key length"),y=u(n),c.push(y);var g=new l(0|e),E=g.address;c.push(E),r._crypto_kdf_derive_from_key(E,e,t,t>>>24>>>8,o,y);var x=p(g,s);return v(c),x}function Le(e){var t=[];i(e);var a=new l(0|r._crypto_kdf_keybytes()),_=a.address;t.push(_),r._crypto_kdf_keygen(_);var n=p(a,e);return v(t),n}function Ue(e,t,a,_){var n=[];i(_),e=m(n,e,"clientPublicKey");var s,c=0|r._crypto_kx_publickeybytes();e.length!==c&&b(n,"invalid clientPublicKey length"),s=u(e),n.push(s),t=m(n,t,"clientSecretKey");var o,h=0|r._crypto_kx_secretkeybytes();t.length!==h&&b(n,"invalid clientSecretKey length"),o=u(t),n.push(o),a=m(n,a,"serverPublicKey");var y,d=0|r._crypto_kx_publickeybytes();a.length!==d&&b(n,"invalid serverPublicKey length"),y=u(a),n.push(y);var f=new l(0|r._crypto_kx_sessionkeybytes()),E=f.address;n.push(E);var x=new l(0|r._crypto_kx_sessionkeybytes()),k=x.address;if(n.push(k),0==(0|r._crypto_kx_client_session_keys(E,k,s,o,y))){var S=p({sharedRx:f,sharedTx:x},_);return v(n),S}g(n,"invalid usage")}function Oe(e){var t=[];i(e);var a=new l(0|r._crypto_kx_publickeybytes()),_=a.address;t.push(_);var n=new l(0|r._crypto_kx_secretkeybytes()),s=n.address;if(t.push(s),0==(0|r._crypto_kx_keypair(_,s))){var c={publicKey:p(a,e),privateKey:p(n,e),keyType:"x25519"};return v(t),c}g(t,"internal error")}function Ce(e,t){var a=[];i(t),e=m(a,e,"seed");var _,n=0|r._crypto_kx_seedbytes();e.length!==n&&b(a,"invalid seed length"),_=u(e),a.push(_);var s=new l(0|r._crypto_kx_publickeybytes()),c=s.address;a.push(c);var o=new l(0|r._crypto_kx_secretkeybytes()),h=o.address;if(a.push(h),0==(0|r._crypto_kx_seed_keypair(c,h,_))){var y={publicKey:p(s,t),privateKey:p(o,t),keyType:"x25519"};return v(a),y}g(a,"internal error")}function Re(e,t,a,_){var n=[];i(_),e=m(n,e,"serverPublicKey");var s,c=0|r._crypto_kx_publickeybytes();e.length!==c&&b(n,"invalid serverPublicKey length"),s=u(e),n.push(s),t=m(n,t,"serverSecretKey");var o,h=0|r._crypto_kx_secretkeybytes();t.length!==h&&b(n,"invalid serverSecretKey length"),o=u(t),n.push(o),a=m(n,a,"clientPublicKey");var y,d=0|r._crypto_kx_publickeybytes();a.length!==d&&b(n,"invalid clientPublicKey length"),y=u(a),n.push(y);var f=new l(0|r._crypto_kx_sessionkeybytes()),E=f.address;n.push(E);var x=new l(0|r._crypto_kx_sessionkeybytes()),k=x.address;if(n.push(k),0==(0|r._crypto_kx_server_session_keys(E,k,s,o,y))){var S=p({sharedRx:f,sharedTx:x},_);return v(n),S}g(n,"invalid usage")}function Pe(e,t,a){var _=[];i(a);var n=u(e=m(_,e,"message")),s=e.length;_.push(n),t=m(_,t,"key");var c,o=0|r._crypto_onetimeauth_keybytes();t.length!==o&&b(_,"invalid key length"),c=u(t),_.push(c);var h=new l(0|r._crypto_onetimeauth_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_onetimeauth(y,n,s,0,c))){var d=p(h,a);return v(_),d}g(_,"invalid usage")}function Ge(e,t){var a=[];i(t),f(a,e,"state_address");var _=new l(0|r._crypto_onetimeauth_bytes()),n=_.address;if(a.push(n),0==(0|r._crypto_onetimeauth_final(e,n))){var s=(r._free(e),p(_,t));return v(a),s}g(a,"invalid usage")}function Xe(e,t){var a=[];i(t);var _=null;null!=e&&(_=u(e=m(a,e,"key")),e.length,a.push(_));var n=new l(144).address;if(0==(0|r._crypto_onetimeauth_init(n,_))){var s=n;return v(a),s}g(a,"invalid usage")}function De(e){var t=[];i(e);var a=new l(0|r._crypto_onetimeauth_keybytes()),_=a.address;t.push(_),r._crypto_onetimeauth_keygen(_);var n=p(a,e);return v(t),n}function Fe(e,t,a){var _=[];i(a),f(_,e,"state_address");var n=u(t=m(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_onetimeauth_update(e,n,s))&&g(_,"invalid usage"),v(_)}function Ve(e,t,a){var _=[];e=m(_,e,"hash");var n,s=0|r._crypto_onetimeauth_bytes();e.length!==s&&b(_,"invalid hash length"),n=u(e),_.push(n);var c=u(t=m(_,t,"message")),o=t.length;_.push(c),a=m(_,a,"key");var h,p=0|r._crypto_onetimeauth_keybytes();a.length!==p&&b(_,"invalid key length"),h=u(a),_.push(h);var y=0==(0|r._crypto_onetimeauth_verify(n,c,o,0,h));return v(_),y}function He(e,t,a,_,n,s,c){var o=[];i(c),f(o,e,"keyLength"),("number"!=typeof e||(0|e)!==e||e<0)&&b(o,"keyLength must be an unsigned integer");var h=u(t=m(o,t,"password")),y=t.length;o.push(h),a=m(o,a,"salt");var d,E=0|r._crypto_pwhash_saltbytes();a.length!==E&&b(o,"invalid salt length"),d=u(a),o.push(d),f(o,_,"opsLimit"),("number"!=typeof _||(0|_)!==_||_<0)&&b(o,"opsLimit must be an unsigned integer"),f(o,n,"memLimit"),("number"!=typeof n||(0|n)!==n||n<0)&&b(o,"memLimit must be an unsigned integer"),f(o,s,"algorithm"),("number"!=typeof s||(0|s)!==s||s<0)&&b(o,"algorithm must be an unsigned integer");var x=new l(0|e),k=x.address;if(o.push(k),0==(0|r._crypto_pwhash(k,e,0,h,y,0,d,_,0,n,s))){var S=p(x,c);return v(o),S}g(o,"invalid usage")}function ze(e,t,a,_,n,s){var c=[];i(s),f(c,e,"keyLength"),("number"!=typeof e||(0|e)!==e||e<0)&&b(c,"keyLength must be an unsigned integer");var o=u(t=m(c,t,"password")),h=t.length;c.push(o),a=m(c,a,"salt");var y,d=0|r._crypto_pwhash_scryptsalsa208sha256_saltbytes();a.length!==d&&b(c,"invalid salt length"),y=u(a),c.push(y),f(c,_,"opsLimit"),("number"!=typeof _||(0|_)!==_||_<0)&&b(c,"opsLimit must be an unsigned integer"),f(c,n,"memLimit"),("number"!=typeof n||(0|n)!==n||n<0)&&b(c,"memLimit must be an unsigned integer");var E=new l(0|e),x=E.address;if(c.push(x),0==(0|r._crypto_pwhash_scryptsalsa208sha256(x,e,0,o,h,0,y,_,0,n))){var k=p(E,s);return v(c),k}g(c,"invalid usage")}function je(e,t,a,_,n,s,c){var o=[];i(c);var h=u(e=m(o,e,"password")),y=e.length;o.push(h);var d=u(t=m(o,t,"salt")),E=t.length;o.push(d),f(o,a,"opsLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&b(o,"opsLimit must be an unsigned integer"),f(o,_,"r"),("number"!=typeof _||(0|_)!==_||_<0)&&b(o,"r must be an unsigned integer"),f(o,n,"p"),("number"!=typeof n||(0|n)!==n||n<0)&&b(o,"p must be an unsigned integer"),f(o,s,"keyLength"),("number"!=typeof s||(0|s)!==s||s<0)&&b(o,"keyLength must be an unsigned integer");var x=new l(0|s),k=x.address;if(o.push(k),0==(0|r._crypto_pwhash_scryptsalsa208sha256_ll(h,y,d,E,a,0,_,n,k,s))){var S=p(x,c);return v(o),S}g(o,"invalid usage")}function qe(e,t,a,_){var n=[];i(_);var s=u(e=m(n,e,"password")),c=e.length;n.push(s),f(n,t,"opsLimit"),("number"!=typeof t||(0|t)!==t||t<0)&&b(n,"opsLimit must be an unsigned integer"),f(n,a,"memLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&b(n,"memLimit must be an unsigned integer");var o=new l(0|r._crypto_pwhash_scryptsalsa208sha256_strbytes()).address;if(n.push(o),0==(0|r._crypto_pwhash_scryptsalsa208sha256_str(o,s,c,0,t,0,a))){var h=r.UTF8ToString(o);return v(n),h}g(n,"invalid usage")}function We(e,t,a){var n=[];i(a),"string"!=typeof e&&b(n,"hashed_password must be a string"),e=_(e+"\0"),null!=c&&e.length-1!==c&&b(n,"invalid hashed_password length");var s=u(e),c=e.length-1;n.push(s);var o=u(t=m(n,t,"password")),h=t.length;n.push(o);var p=0==(0|r._crypto_pwhash_scryptsalsa208sha256_str_verify(s,o,h,0));return v(n),p}function Je(e,t,a,_){var n=[];i(_);var s=u(e=m(n,e,"password")),c=e.length;n.push(s),f(n,t,"opsLimit"),("number"!=typeof t||(0|t)!==t||t<0)&&b(n,"opsLimit must be an unsigned integer"),f(n,a,"memLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&b(n,"memLimit must be an unsigned integer");var o=new l(0|r._crypto_pwhash_strbytes()).address;if(n.push(o),0==(0|r._crypto_pwhash_str(o,s,c,0,t,0,a))){var h=r.UTF8ToString(o);return v(n),h}g(n,"invalid usage")}function Qe(e,t,a,n){var s=[];i(n),"string"!=typeof e&&b(s,"hashed_password must be a string"),e=_(e+"\0"),null!=o&&e.length-1!==o&&b(s,"invalid hashed_password length");var c=u(e),o=e.length-1;s.push(c),f(s,t,"opsLimit"),("number"!=typeof t||(0|t)!==t||t<0)&&b(s,"opsLimit must be an unsigned integer"),f(s,a,"memLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&b(s,"memLimit must be an unsigned integer");var h=0!=(0|r._crypto_pwhash_str_needs_rehash(c,t,0,a));return v(s),h}function Ze(e,t,a){var n=[];i(a),"string"!=typeof e&&b(n,"hashed_password must be a string"),e=_(e+"\0"),null!=c&&e.length-1!==c&&b(n,"invalid hashed_password length");var s=u(e),c=e.length-1;n.push(s);var o=u(t=m(n,t,"password")),h=t.length;n.push(o);var p=0==(0|r._crypto_pwhash_str_verify(s,o,h,0));return v(n),p}function $e(e,t,a){var _=[];i(a),e=m(_,e,"privateKey");var n,s=0|r._crypto_scalarmult_scalarbytes();e.length!==s&&b(_,"invalid privateKey length"),n=u(e),_.push(n),t=m(_,t,"publicKey");var c,o=0|r._crypto_scalarmult_scalarbytes();t.length!==o&&b(_,"invalid publicKey length"),c=u(t),_.push(c);var h=new l(0|r._crypto_scalarmult_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_scalarmult(y,n,c))){var d=p(h,a);return v(_),d}g(_,"weak public key")}function et(e,t){var a=[];i(t),e=m(a,e,"privateKey");var _,n=0|r._crypto_scalarmult_scalarbytes();e.length!==n&&b(a,"invalid privateKey length"),_=u(e),a.push(_);var s=new l(0|r._crypto_scalarmult_scalarbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_scalarmult_base(c,_))){var o=p(s,t);return v(a),o}g(a,"insecure scalar")}function tt(e,t,a){var _=[];i(a),e=m(_,e,"scalar");var n,s=0|r._crypto_scalarmult_ristretto255_scalarbytes();e.length!==s&&b(_,"invalid scalar length"),n=u(e),_.push(n),t=m(_,t,"privateKey");var c,o=0|r._crypto_scalarmult_ristretto255_bytes();t.length!==o&&b(_,"invalid privateKey length"),c=u(t),_.push(c);var h=new l(0|r._crypto_scalarmult_ristretto255_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_scalarmult_ristretto255(y,n,c))){var d=p(h,a);return v(_),d}g(_,"input is zero element")}function rt(e,t){var a=[];i(t);var _=u(e=m(a,e,"scalar"));e.length,a.push(_);var n=new l(0|r._crypto_core_ristretto255_bytes()),s=n.address;if(a.push(s),0==(0|r._crypto_scalarmult_ristretto255_base(s,_))){var c=p(n,t);return v(a),c}g(a,"scalar is 0")}function at(e,t,a,_){var n=[];i(_);var s=u(e=m(n,e,"message")),c=e.length;n.push(s),t=m(n,t,"nonce");var o,h=0|r._crypto_secretbox_noncebytes();t.length!==h&&b(n,"invalid nonce length"),o=u(t),n.push(o),a=m(n,a,"key");var y,d=0|r._crypto_secretbox_keybytes();a.length!==d&&b(n,"invalid key length"),y=u(a),n.push(y);var f=new l(0|c),E=f.address;n.push(E);var x=new l(0|r._crypto_secretbox_macbytes()),k=x.address;if(n.push(k),0==(0|r._crypto_secretbox_detached(E,k,s,c,0,o,y))){var S=p({mac:x,cipher:f},_);return v(n),S}g(n,"invalid usage")}function _t(e,t,a,_){var n=[];i(_);var s=u(e=m(n,e,"message")),c=e.length;n.push(s),t=m(n,t,"nonce");var o,h=0|r._crypto_secretbox_noncebytes();t.length!==h&&b(n,"invalid nonce length"),o=u(t),n.push(o),a=m(n,a,"key");var y,d=0|r._crypto_secretbox_keybytes();a.length!==d&&b(n,"invalid key length"),y=u(a),n.push(y);var f=new l(c+r._crypto_secretbox_macbytes()|0),E=f.address;if(n.push(E),0==(0|r._crypto_secretbox_easy(E,s,c,0,o,y))){var x=p(f,_);return v(n),x}g(n,"invalid usage")}function nt(e){var t=[];i(e);var a=new l(0|r._crypto_secretbox_keybytes()),_=a.address;t.push(_),r._crypto_secretbox_keygen(_);var n=p(a,e);return v(t),n}function st(e,t,a,_,n){var s=[];i(n);var c=u(e=m(s,e,"ciphertext")),o=e.length;s.push(c),t=m(s,t,"mac");var h,y=0|r._crypto_secretbox_macbytes();t.length!==y&&b(s,"invalid mac length"),h=u(t),s.push(h),a=m(s,a,"nonce");var d,f=0|r._crypto_secretbox_noncebytes();a.length!==f&&b(s,"invalid nonce length"),d=u(a),s.push(d),_=m(s,_,"key");var E,x=0|r._crypto_secretbox_keybytes();_.length!==x&&b(s,"invalid key length"),E=u(_),s.push(E);var k=new l(0|o),S=k.address;if(s.push(S),0==(0|r._crypto_secretbox_open_detached(S,c,h,o,0,d,E))){var T=p(k,n);return v(s),T}g(s,"wrong secret key for the given ciphertext")}function ct(e,t,a,_){var n=[];i(_),e=m(n,e,"ciphertext");var s,c=r._crypto_secretbox_macbytes(),o=e.length;o<c&&b(n,"ciphertext is too short"),s=u(e),n.push(s),t=m(n,t,"nonce");var h,y=0|r._crypto_secretbox_noncebytes();t.length!==y&&b(n,"invalid nonce length"),h=u(t),n.push(h),a=m(n,a,"key");var d,f=0|r._crypto_secretbox_keybytes();a.length!==f&&b(n,"invalid key length"),d=u(a),n.push(d);var E=new l(o-r._crypto_secretbox_macbytes()|0),x=E.address;if(n.push(x),0==(0|r._crypto_secretbox_open_easy(x,s,o,0,h,d))){var k=p(E,_);return v(n),k}g(n,"wrong secret key for the given ciphertext")}function ot(e,t,a){var _=[];i(a),e=m(_,e,"header");var n,s=0|r._crypto_secretstream_xchacha20poly1305_headerbytes();e.length!==s&&b(_,"invalid header length"),n=u(e),_.push(n),t=m(_,t,"key");var c,o=0|r._crypto_secretstream_xchacha20poly1305_keybytes();t.length!==o&&b(_,"invalid key length"),c=u(t),_.push(c);var h=new l(52).address;if(0==(0|r._crypto_secretstream_xchacha20poly1305_init_pull(h,n,c))){var p=h;return v(_),p}g(_,"invalid usage")}function ht(e,t){var a=[];i(t),e=m(a,e,"key");var _,n=0|r._crypto_secretstream_xchacha20poly1305_keybytes();e.length!==n&&b(a,"invalid key length"),_=u(e),a.push(_);var s=new l(52).address,c=new l(0|r._crypto_secretstream_xchacha20poly1305_headerbytes()),o=c.address;if(a.push(o),0==(0|r._crypto_secretstream_xchacha20poly1305_init_push(s,o,_))){var h={state:s,header:p(c,t)};return v(a),h}g(a,"invalid usage")}function pt(e){var t=[];i(e);var a=new l(0|r._crypto_secretstream_xchacha20poly1305_keybytes()),_=a.address;t.push(_),r._crypto_secretstream_xchacha20poly1305_keygen(_);var n=p(a,e);return v(t),n}function yt(e,t,a,_){var n=[];i(_),f(n,e,"state_address"),t=m(n,t,"cipher");var s,c=r._crypto_secretstream_xchacha20poly1305_abytes(),o=t.length;o<c&&b(n,"cipher is too short"),s=u(t),n.push(s);var h=null,y=0;null!=a&&(h=u(a=m(n,a,"ad")),y=a.length,n.push(h));var g=new l(o-r._crypto_secretstream_xchacha20poly1305_abytes()|0),E=g.address;n.push(E);var x,k=(x=d(1),n.push(x),(k=0===r._crypto_secretstream_xchacha20poly1305_pull(e,E,0,x,s,o,0,h,y)&&{tag:r.HEAPU8[x],message:g})&&{message:p(k.message,_),tag:k.tag});return v(n),k}function it(e,t,a,_,n){var s=[];i(n),f(s,e,"state_address");var c=u(t=m(s,t,"message_chunk")),o=t.length;s.push(c);var h=null,y=0;null!=a&&(h=u(a=m(s,a,"ad")),y=a.length,s.push(h)),f(s,_,"tag"),("number"!=typeof _||(0|_)!==_||_<0)&&b(s,"tag must be an unsigned integer");var d=new l(o+r._crypto_secretstream_xchacha20poly1305_abytes()|0),E=d.address;if(s.push(E),0==(0|r._crypto_secretstream_xchacha20poly1305_push(e,E,0,c,o,0,h,y,0,_))){var x=p(d,n);return v(s),x}g(s,"invalid usage")}function lt(e,t){var a=[];return i(t),f(a,e,"state_address"),r._crypto_secretstream_xchacha20poly1305_rekey(e),v(a),!0}function ut(e,t,a){var _=[];i(a);var n=u(e=m(_,e,"message")),s=e.length;_.push(n),t=m(_,t,"key");var c,o=0|r._crypto_shorthash_keybytes();t.length!==o&&b(_,"invalid key length"),c=u(t),_.push(c);var h=new l(0|r._crypto_shorthash_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_shorthash(y,n,s,0,c))){var d=p(h,a);return v(_),d}g(_,"invalid usage")}function dt(e){var t=[];i(e);var a=new l(0|r._crypto_shorthash_keybytes()),_=a.address;t.push(_),r._crypto_shorthash_keygen(_);var n=p(a,e);return v(t),n}function vt(e,t,a){var _=[];i(a);var n=u(e=m(_,e,"message")),s=e.length;_.push(n),t=m(_,t,"key");var c,o=0|r._crypto_shorthash_siphashx24_keybytes();t.length!==o&&b(_,"invalid key length"),c=u(t),_.push(c);var h=new l(0|r._crypto_shorthash_siphashx24_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_shorthash_siphashx24(y,n,s,0,c))){var d=p(h,a);return v(_),d}g(_,"invalid usage")}function gt(e,t,a){var _=[];i(a);var n=u(e=m(_,e,"message")),s=e.length;_.push(n),t=m(_,t,"privateKey");var c,o=0|r._crypto_sign_secretkeybytes();t.length!==o&&b(_,"invalid privateKey length"),c=u(t),_.push(c);var h=new l(e.length+r._crypto_sign_bytes()|0),y=h.address;if(_.push(y),0==(0|r._crypto_sign(y,null,n,s,0,c))){var d=p(h,a);return v(_),d}g(_,"invalid usage")}function bt(e,t,a){var _=[];i(a);var n=u(e=m(_,e,"message")),s=e.length;_.push(n),t=m(_,t,"privateKey");var c,o=0|r._crypto_sign_secretkeybytes();t.length!==o&&b(_,"invalid privateKey length"),c=u(t),_.push(c);var h=new l(0|r._crypto_sign_bytes()),y=h.address;if(_.push(y),0==(0|r._crypto_sign_detached(y,null,n,s,0,c))){var d=p(h,a);return v(_),d}g(_,"invalid usage")}function ft(e,t){var a=[];i(t),e=m(a,e,"edPk");var _,n=0|r._crypto_sign_publickeybytes();e.length!==n&&b(a,"invalid edPk length"),_=u(e),a.push(_);var s=new l(0|r._crypto_scalarmult_scalarbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_pk_to_curve25519(c,_))){var o=p(s,t);return v(a),o}g(a,"invalid key")}function mt(e,t){var a=[];i(t),e=m(a,e,"edSk");var _,n=0|r._crypto_sign_secretkeybytes();e.length!==n&&b(a,"invalid edSk length"),_=u(e),a.push(_);var s=new l(0|r._crypto_scalarmult_scalarbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_sk_to_curve25519(c,_))){var o=p(s,t);return v(a),o}g(a,"invalid key")}function Et(e,t){var a=[];i(t),e=m(a,e,"privateKey");var _,n=0|r._crypto_sign_secretkeybytes();e.length!==n&&b(a,"invalid privateKey length"),_=u(e),a.push(_);var s=new l(0|r._crypto_sign_publickeybytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_sk_to_pk(c,_))){var o=p(s,t);return v(a),o}g(a,"invalid key")}function xt(e,t){var a=[];i(t),e=m(a,e,"privateKey");var _,n=0|r._crypto_sign_secretkeybytes();e.length!==n&&b(a,"invalid privateKey length"),_=u(e),a.push(_);var s=new l(0|r._crypto_sign_seedbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_sk_to_seed(c,_))){var o=p(s,t);return v(a),o}g(a,"invalid key")}function kt(e,t,a){var _=[];i(a),f(_,e,"state_address"),t=m(_,t,"privateKey");var n,s=0|r._crypto_sign_secretkeybytes();t.length!==s&&b(_,"invalid privateKey length"),n=u(t),_.push(n);var c=new l(0|r._crypto_sign_bytes()),o=c.address;if(_.push(o),0==(0|r._crypto_sign_final_create(e,o,null,n))){var h=(r._free(e),p(c,a));return v(_),h}g(_,"invalid usage")}function St(e,t,a,_){var n=[];i(_),f(n,e,"state_address"),t=m(n,t,"signature");var s,c=0|r._crypto_sign_bytes();t.length!==c&&b(n,"invalid signature length"),s=u(t),n.push(s),a=m(n,a,"publicKey");var o,h=0|r._crypto_sign_publickeybytes();a.length!==h&&b(n,"invalid publicKey length"),o=u(a),n.push(o);var p=0==(0|r._crypto_sign_final_verify(e,s,o));return v(n),p}function Tt(e){var t=[];i(e);var a=new l(208).address;if(0==(0|r._crypto_sign_init(a))){var _=a;return v(t),_}g(t,"internal error")}function wt(e){var t=[];i(e);var a=new l(0|r._crypto_sign_publickeybytes()),_=a.address;t.push(_);var n=new l(0|r._crypto_sign_secretkeybytes()),s=n.address;if(t.push(s),0==(0|r._crypto_sign_keypair(_,s))){var c={publicKey:p(a,e),privateKey:p(n,e),keyType:"ed25519"};return v(t),c}g(t,"internal error")}function Yt(e,t,a){var _=[];i(a),e=m(_,e,"signedMessage");var n,s=r._crypto_sign_bytes(),c=e.length;c<s&&b(_,"signedMessage is too short"),n=u(e),_.push(n),t=m(_,t,"publicKey");var o,h=0|r._crypto_sign_publickeybytes();t.length!==h&&b(_,"invalid publicKey length"),o=u(t),_.push(o);var y=new l(c-r._crypto_sign_bytes()|0),d=y.address;if(_.push(d),0==(0|r._crypto_sign_open(d,null,n,c,0,o))){var f=p(y,a);return v(_),f}g(_,"incorrect signature for the given public key")}function Bt(e,t){var a=[];i(t),e=m(a,e,"seed");var _,n=0|r._crypto_sign_seedbytes();e.length!==n&&b(a,"invalid seed length"),_=u(e),a.push(_);var s=new l(0|r._crypto_sign_publickeybytes()),c=s.address;a.push(c);var o=new l(0|r._crypto_sign_secretkeybytes()),h=o.address;if(a.push(h),0==(0|r._crypto_sign_seed_keypair(c,h,_))){var y={publicKey:p(s,t),privateKey:p(o,t),keyType:"ed25519"};return v(a),y}g(a,"invalid usage")}function At(e,t,a){var _=[];i(a),f(_,e,"state_address");var n=u(t=m(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_sign_update(e,n,s))&&g(_,"invalid usage"),v(_)}function Kt(e,t,a){var _=[];e=m(_,e,"signature");var n,s=0|r._crypto_sign_bytes();e.length!==s&&b(_,"invalid signature length"),n=u(e),_.push(n);var c=u(t=m(_,t,"message")),o=t.length;_.push(c),a=m(_,a,"publicKey");var h,p=0|r._crypto_sign_publickeybytes();a.length!==p&&b(_,"invalid publicKey length"),h=u(a),_.push(h);var y=0==(0|r._crypto_sign_verify_detached(n,c,o,0,h));return v(_),y}function Mt(e,t,a,_){var n=[];i(_),f(n,e,"outLength"),("number"!=typeof e||(0|e)!==e||e<0)&&b(n,"outLength must be an unsigned integer"),t=m(n,t,"key");var s,c=0|r._crypto_stream_chacha20_keybytes();t.length!==c&&b(n,"invalid key length"),s=u(t),n.push(s),a=m(n,a,"nonce");var o,h=0|r._crypto_stream_chacha20_noncebytes();a.length!==h&&b(n,"invalid nonce length"),o=u(a),n.push(o);var y=new l(0|e),d=y.address;n.push(d),r._crypto_stream_chacha20(d,e,0,o,s);var g=p(y,_);return v(n),g}function It(e,t,a,_){var n=[];i(_);var s=u(e=m(n,e,"input_message")),c=e.length;n.push(s),t=m(n,t,"nonce");var o,h=0|r._crypto_stream_chacha20_ietf_noncebytes();t.length!==h&&b(n,"invalid nonce length"),o=u(t),n.push(o),a=m(n,a,"key");var y,d=0|r._crypto_stream_chacha20_ietf_keybytes();a.length!==d&&b(n,"invalid key length"),y=u(a),n.push(y);var f=new l(0|c),E=f.address;if(n.push(E),0===r._crypto_stream_chacha20_ietf_xor(E,s,c,0,o,y)){var x=p(f,_);return v(n),x}g(n,"invalid usage")}function Nt(e,t,a,_,n){var s=[];i(n);var c=u(e=m(s,e,"input_message")),o=e.length;s.push(c),t=m(s,t,"nonce");var h,y=0|r._crypto_stream_chacha20_ietf_noncebytes();t.length!==y&&b(s,"invalid nonce length"),h=u(t),s.push(h),f(s,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&b(s,"nonce_increment must be an unsigned integer"),_=m(s,_,"key");var d,E=0|r._crypto_stream_chacha20_ietf_keybytes();_.length!==E&&b(s,"invalid key length"),d=u(_),s.push(d);var x=new l(0|o),k=x.address;if(s.push(k),0===r._crypto_stream_chacha20_ietf_xor_ic(k,c,o,0,h,a,d)){var S=p(x,n);return v(s),S}g(s,"invalid usage")}function Lt(e){var t=[];i(e);var a=new l(0|r._crypto_stream_chacha20_keybytes()),_=a.address;t.push(_),r._crypto_stream_chacha20_keygen(_);var n=p(a,e);return v(t),n}function Ut(e,t,a,_){var n=[];i(_);var s=u(e=m(n,e,"input_message")),c=e.length;n.push(s),t=m(n,t,"nonce");var o,h=0|r._crypto_stream_chacha20_noncebytes();t.length!==h&&b(n,"invalid nonce length"),o=u(t),n.push(o),a=m(n,a,"key");var y,d=0|r._crypto_stream_chacha20_keybytes();a.length!==d&&b(n,"invalid key length"),y=u(a),n.push(y);var f=new l(0|c),E=f.address;if(n.push(E),0===r._crypto_stream_chacha20_xor(E,s,c,0,o,y)){var x=p(f,_);return v(n),x}g(n,"invalid usage")}function Ot(e,t,a,_,n){var s=[];i(n);var c=u(e=m(s,e,"input_message")),o=e.length;s.push(c),t=m(s,t,"nonce");var h,y=0|r._crypto_stream_chacha20_noncebytes();t.length!==y&&b(s,"invalid nonce length"),h=u(t),s.push(h),f(s,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&b(s,"nonce_increment must be an unsigned integer"),_=m(s,_,"key");var d,E=0|r._crypto_stream_chacha20_keybytes();_.length!==E&&b(s,"invalid key length"),d=u(_),s.push(d);var x=new l(0|o),k=x.address;if(s.push(k),0===r._crypto_stream_chacha20_xor_ic(k,c,o,0,h,a,0,d)){var S=p(x,n);return v(s),S}g(s,"invalid usage")}function Ct(e){var t=[];i(e);var a=new l(0|r._crypto_stream_keybytes()),_=a.address;t.push(_),r._crypto_stream_keygen(_);var n=p(a,e);return v(t),n}function Rt(e){var t=[];i(e);var a=new l(0|r._crypto_stream_xchacha20_keybytes()),_=a.address;t.push(_),r._crypto_stream_xchacha20_keygen(_);var n=p(a,e);return v(t),n}function Pt(e,t,a,_){var n=[];i(_);var s=u(e=m(n,e,"input_message")),c=e.length;n.push(s),t=m(n,t,"nonce");var o,h=0|r._crypto_stream_xchacha20_noncebytes();t.length!==h&&b(n,"invalid nonce length"),o=u(t),n.push(o),a=m(n,a,"key");var y,d=0|r._crypto_stream_xchacha20_keybytes();a.length!==d&&b(n,"invalid key length"),y=u(a),n.push(y);var f=new l(0|c),E=f.address;if(n.push(E),0===r._crypto_stream_xchacha20_xor(E,s,c,0,o,y)){var x=p(f,_);return v(n),x}g(n,"invalid usage")}function Gt(e,t,a,_,n){var s=[];i(n);var c=u(e=m(s,e,"input_message")),o=e.length;s.push(c),t=m(s,t,"nonce");var h,y=0|r._crypto_stream_xchacha20_noncebytes();t.length!==y&&b(s,"invalid nonce length"),h=u(t),s.push(h),f(s,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&b(s,"nonce_increment must be an unsigned integer"),_=m(s,_,"key");var d,E=0|r._crypto_stream_xchacha20_keybytes();_.length!==E&&b(s,"invalid key length"),d=u(_),s.push(d);var x=new l(0|o),k=x.address;if(s.push(k),0===r._crypto_stream_xchacha20_xor_ic(k,c,o,0,h,a,0,d)){var S=p(x,n);return v(s),S}g(s,"invalid usage")}function Xt(e,t){var a=[];i(t),f(a,e,"length"),("number"!=typeof e||(0|e)!==e||e<0)&&b(a,"length must be an unsigned integer");var _=new l(0|e),n=_.address;a.push(n),r._randombytes_buf(n,e);var s=p(_,t);return v(a),s}function Dt(e,t,a){var _=[];i(a),f(_,e,"length"),("number"!=typeof e||(0|e)!==e||e<0)&&b(_,"length must be an unsigned integer"),t=m(_,t,"seed");var n,s=0|r._randombytes_seedbytes();t.length!==s&&b(_,"invalid seed length"),n=u(t),_.push(n);var c=new l(0|e),o=c.address;_.push(o),r._randombytes_buf_deterministic(o,e,n);var h=p(c,a);return v(_),h}function Ft(e){i(e),r._randombytes_close()}function Vt(e){i(e);var t=r._randombytes_random()>>>0;return v([]),t}function Ht(e,t){var a=[];i(t);for(var _=r._malloc(24),n=0;n<6;n++)r.setValue(_+4*n,r.Runtime.addFunction(e[["implementation_name","random","stir","uniform","buf","close"][n]]),"i32");0!=(0|r._randombytes_set_implementation(_))&&g(a,"unsupported implementation"),v(a)}function zt(e){i(e),r._randombytes_stir()}function jt(e,t){var a=[];i(t),f(a,e,"upper_bound"),("number"!=typeof e||(0|e)!==e||e<0)&&b(a,"upper_bound must be an unsigned integer");var _=r._randombytes_uniform(e)>>>0;return v(a),_}function qt(){var e=r._sodium_version_string(),t=r.UTF8ToString(e);return v([]),t}return l.prototype.to_Uint8Array=function(){var e=new Uint8Array(this.length);return e.set(r.HEAPU8.subarray(this.address,this.address+this.length)),e},e.add=function(e,t){if(!(e instanceof Uint8Array&&t instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can added");var r=e.length,a=0,_=0;if(t.length!=e.length)throw new TypeError("Arguments must have the same length");for(_=0;_<r;_++)a>>=8,a+=e[_]+t[_],e[_]=255&a},e.base64_variants=c,e.compare=function(e,t){if(!(e instanceof Uint8Array&&t instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be compared");if(e.length!==t.length)throw new TypeError("Only instances of identical length can be compared");for(var r=0,a=1,_=e.length;_-- >0;)r|=t[_]-e[_]>>8&a,a&=(t[_]^e[_])-1>>8;return r+r+a-1},e.from_base64=function(e,t){t=o(t);var a,_=[],n=new l(3*(e=m(_,e,"input")).length/4),s=u(e),c=d(4),h=d(4);return _.push(s),_.push(n.address),_.push(n.result_bin_len_p),_.push(n.b64_end_p),0!==r._sodium_base642bin(n.address,n.length,s,e.length,0,c,h,t)&&g(_,"invalid input"),r.getValue(h,"i32")-s!==e.length&&g(_,"incomplete input"),n.length=r.getValue(c,"i32"),a=n.to_Uint8Array(),v(_),a},e.from_hex=function(e){var t,a=[],_=new l((e=m(a,e,"input")).length/2),n=u(e),s=d(4);return a.push(n),a.push(_.address),a.push(_.hex_end_p),0!==r._sodium_hex2bin(_.address,_.length,n,e.length,0,0,s)&&g(a,"invalid input"),r.getValue(s,"i32")-n!==e.length&&g(a,"incomplete input"),t=_.to_Uint8Array(),v(a),t},e.from_string=_,e.increment=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be incremented");for(var t=256,r=0,a=e.length;r<a;r++)t>>=8,t+=e[r],e[r]=255&t},e.is_zero=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be checked");for(var t=0,r=0,a=e.length;r<a;r++)t|=e[r];return 0===t},e.libsodium=t,e.memcmp=function(e,t){if(!(e instanceof Uint8Array&&t instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be compared");if(e.length!==t.length)throw new TypeError("Only instances of identical length can be compared");for(var r=0,a=0,_=e.length;a<_;a++)r|=e[a]^t[a];return 0===r},e.memzero=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be wiped");for(var t=0,r=e.length;t<r;t++)e[t]=0},e.output_formats=function(){return["uint8array","text","hex","base64"]},e.pad=function(e,t){if(!(e instanceof Uint8Array))throw new TypeError("buffer must be a Uint8Array");if((t|=0)<=0)throw new Error("block size must be > 0");var a,_=[],n=d(4),s=1,c=0,o=0|e.length,h=new l(o+t);_.push(n),_.push(h.address);for(var p=h.address,y=h.address+o+t;p<y;p++)r.HEAPU8[p]=e[c],c+=s=1&~((65535&((o-=s)>>>48|o>>>32|o>>>16|o))-1>>16);return 0!==r._sodium_pad(n,h.address,e.length,t,h.length)&&g(_,"internal error"),h.length=r.getValue(n,"i32"),a=h.to_Uint8Array(),v(_),a},e.unpad=function(e,t){if(!(e instanceof Uint8Array))throw new TypeError("buffer must be a Uint8Array");if((t|=0)<=0)throw new Error("block size must be > 0");var a=[],_=u(e),n=d(4);return a.push(_),a.push(n),0!==r._sodium_unpad(n,_,e.length,t)&&g(a,"unsupported/invalid padding"),e=(e=new Uint8Array(e)).subarray(0,r.getValue(n,"i32")),v(a),e},e.ready=a,e.symbols=function(){return Object.keys(e).sort()},e.to_base64=h,e.to_hex=s,e.to_string=n,e}var r="object"==typeof e.sodium&&"function"==typeof e.sodium.onload?e.sodium.onload:null;"function"==typeof define&&define.amd?define(["exports","libsodium"],t):"object"==typeof exports&&"string"!=typeof exports.nodeName?t(exports,require("libsodium")):e.sodium=t(e.commonJsStrict={},e.libsodium),r&&e.sodium.ready.then((function(){r(e.sodium)}))}(this);

},{"libsodium":100}],100:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__dirname){
!function(A){function I(A){"use strict";var I;void 0===(I=A)&&(I={});var g=I;"object"!=typeof g.sodium&&("object"==typeof global?g=global:"object"==typeof window&&(g=window)),"object"==typeof g.sodium&&"number"==typeof g.sodium.totalMemory&&(I.TOTAL_MEMORY=g.sodium.totalMemory);var B=I;return I.ready=new Promise((function(A,I){(C=B).onAbort=I,C.print=function(A){},C.printErr=function(A){},C.onRuntimeInitialized=function(){try{C._crypto_secretbox_keybytes(),A()}catch(A){I(A)}},C.useBackupModule=function(){var A,I=void 0!==(I={})?I:{},g={};for(A in I)I.hasOwnProperty(A)&&(g[A]=I[A]);var C=[],Q=!1,E=!1,i=!1,n=!1;Q="object"==typeof window,E="function"==typeof importScripts,i="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,n=!Q&&!i&&!E;var a,r,o,e,t="";function c(A){return I.locateFile?I.locateFile(A,t):t+A}i?(t=E?require("path").dirname(t)+"/":__dirname+"/",a=function(A,I){var g=SA(A);return g?I?g:g.toString():(o||(o=require("fs")),e||(e=require("path")),A=e.normalize(A),o.readFileSync(A,I?null:"utf8"))},r=function(A){var I=a(A,!0);return I.buffer||(I=new Uint8Array(I)),l(I.buffer),I},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),C=process.argv.slice(2),"undefined"!=typeof module&&(module.exports=I),process.on("unhandledRejection",EA),I.inspect=function(){return"[Emscripten Module object]"}):n?("undefined"!=typeof read&&(a=function(A){var I=SA(A);return I?mA(I):read(A)}),r=function(A){var I;return(I=SA(A))?I:"function"==typeof readbuffer?new Uint8Array(readbuffer(A)):(l("object"==typeof(I=read(A,"binary"))),I)},"undefined"!=typeof scriptArgs?C=scriptArgs:void 0!==arguments&&(C=arguments),"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(Q||E)&&(E?t=self.location.href:document.currentScript&&(t=document.currentScript.src),t=0!==t.indexOf("blob:")?t.substr(0,t.lastIndexOf("/")+1):"",a=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.send(null),I.responseText}catch(I){var g=SA(A);if(g)return mA(g);throw I}},E&&(r=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)}catch(I){var g=SA(A);if(g)return g;throw I}})),I.print;var f,y=I.printErr||void 0;for(A in g)g.hasOwnProperty(A)&&(I[A]=g[A]);g=null,I.arguments&&(C=I.arguments),I.thisProgram&&I.thisProgram,I.quit&&I.quit,I.wasmBinary&&(f=I.wasmBinary),I.noExitRuntime&&I.noExitRuntime;var s,w={Memory:function(A){this.buffer=new ArrayBuffer(65536*A.initial),this.grow=function(A){return PA(A)}},Table:function(A){var I=new Array(A.initial);return I.grow=function(A){I.length>=22&&EA("Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH."),I.push(null)},I.set=function(A,g){I[A]=g},I.get=function(A){return I[A]},I},Module:function(A){},Instance:function(A,I){this.exports=function(A,I,g){for(var B=new Uint8Array(I.buffer),C=new Uint8Array(123),Q=25;Q>=0;--Q)C[48+Q]=52+Q,C[65+Q]=Q,C[97+Q]=26+Q;function E(A,I,g){for(var B,Q,E=0,i=I,n=g.length,a=I+(3*n>>2)-("="==g[n-2])-("="==g[n-1]);E<n;E+=4)B=C[g.charCodeAt(E+1)],Q=C[g.charCodeAt(E+2)],A[i++]=C[g.charCodeAt(E)]<<2|B>>4,i<a&&(A[i++]=B<<4|Q>>2),i<a&&(A[i++]=Q<<6|C[g.charCodeAt(E+3)])}return C[43]=62,C[47]=63,E(B,1024,"InsgcmV0dXJuIE1vZHVsZS5nZXRSYW5kb21WYWx1ZSgpOyB9IgB7IGlmIChNb2R1bGUuZ2V0UmFuZG9tVmFsdWUgPT09IHVuZGVmaW5lZCkgeyB0cnkgeyB2YXIgd2luZG93XyA9ICdvYmplY3QnID09PSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogc2VsZjsgdmFyIGNyeXB0b18gPSB0eXBlb2Ygd2luZG93Xy5jcnlwdG8gIT09ICd1bmRlZmluZWQnID8gd2luZG93Xy5jcnlwdG8gOiB3aW5kb3dfLm1zQ3J5cHRvOyB2YXIgcmFuZG9tVmFsdWVzU3RhbmRhcmQgPSBmdW5jdGlvbigpIHsgdmFyIGJ1ZiA9IG5ldyBVaW50MzJBcnJheSgxKTsgY3J5cHRvXy5nZXRSYW5kb21WYWx1ZXMoYnVmKTsgcmV0dXJuIGJ1ZlswXSA+Pj4gMDsgfTsgcmFuZG9tVmFsdWVzU3RhbmRhcmQoKTsgTW9kdWxlLmdldFJhbmRvbVZhbHVlID0gcmFuZG9tVmFsdWVzU3RhbmRhcmQ7IH0gY2F0Y2ggKGUpIHsgdHJ5IHsgdmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpOyB2YXIgcmFuZG9tVmFsdWVOb2RlSlMgPSBmdW5jdGlvbigpIHsgdmFyIGJ1ZiA9IGNyeXB0b1sncmFuZG9tQnl0ZXMnXSg0KTsgcmV0dXJuIChidWZbMF0gPDwgMjQgfCBidWZbMV0gPDwgMTYgfCBidWZbMl0gPDwgOCB8IGJ1ZlszXSkgPj4+IDA7IH07IHJhbmRvbVZhbHVlTm9kZUpTKCk7IE1vZHVsZS5nZXRSYW5kb21WYWx1ZSA9IHJhbmRvbVZhbHVlTm9kZUpTOyB9IGNhdGNoIChlKSB7IHRocm93ICdObyBzZWN1cmUgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgZm91bmQnOyB9IH0gfSB9AExpYnNvZGl1bURSR2J1Zl9sZW4gPD0gU0laRV9NQVgAcmFuZG9tYnl0ZXMvcmFuZG9tYnl0ZXMuYwByYW5kb21ieXRlcwBTLT5idWZsZW4gPD0gQkxBS0UyQl9CTE9DS0JZVEVTAGNyeXB0b19nZW5lcmljaGFzaC9ibGFrZTJiL3JlZi9ibGFrZTJiLXJlZi5jAGJsYWtlMmJfZmluYWwAAAAAAAAAAAjJvPNn5glqO6fKhIWuZ7sr+JT+cvNuPPE2HV869U+l0YLmrX9SDlEfbD4rjGgFm2u9Qfur2YMfeSF+ExnN4FtvdXRsZW4gPD0gVUlOVDhfTUFYAGNyeXB0b19nZW5lcmljaGFzaC9ibGFrZTJiL3JlZi9nZW5lcmljaGFzaF9ibGFrZTJiLmMAY3J5cHRvX2dlbmVyaWNoYXNoX2JsYWtlMmJfZmluYWwAAAAAAAAAtnhZ/4Vy0wC9bhX/DwpqACnAAQCY6Hn/vDyg/5lxzv8At+L+tA1I/wAAAAAAAAAAsKAO/tPJhv+eGI8Af2k1AGAMvQCn1/v/n0yA/mpl4f8e/AQAkgyu"),E(B,2224,"WfGy/grlpv973Sr+HhTUAFKAAwAw0fMAd3lA/zLjnP8AbsUBZxuQ"),E(B,2272,"hTuMAb3xJP/4JcMBYNw3ALdMPv/DQj0AMkykAeGkTP9MPaP/dT4fAFGRQP92QQ4AonPW/waKLgB85vT/CoqPADQawgC49EwAgY8pAb70E/97qnr/YoFEAHnVkwBWZR7/oWebAIxZQ//v5b4BQwu1AMbwif7uRbz/Q5fuABMqbP/lVXEBMkSH/xFqCQAyZwH/UAGoASOYHv8QqLkBOFno/2XS/AAp+kcAzKpP/w4u7/9QTe8AvdZL/xGN+QAmUEz/vlV1AFbkqgCc2NABw8+k/5ZCTP+v4RD/jVBiAUzb8gDGonIALtqYAJsr8f6boGj/M7ulAAIRrwBCVKAB9zoeACNBNf5F7L8ALYb1AaN73QAgbhT/NBelALrWRwDpsGAA8u82ATlZigBTAFT/iKBkAFyOeP5ofL4AtbE+//opVQCYgioBYPz2AJeXP/7vhT4AIDicAC2nvf+OhbMBg1bTALuzlv76qg7/0qNOACU0lwBjTRoA7pzV/9XA0QFJLlQAFEEpATbOTwDJg5L+qm8Y/7EhMv6rJsv/Tvd0ANHdmQCFgLIBOiwZAMknOwG9E/wAMeXSAXW7dQC1s7gBAHLbADBekwD1KTgAfQ3M/vStdwAs3SD+VOoUAPmgxgHsfur/L2Oo/qrimf9ms9gA4o16/3pCmf629YYA4+QZAdY56//YrTj/tefSAHeAnf+BX4j/bn4zAAKpt/8HgmL+RbBe/3QE4wHZ8pH/yq0fAWkBJ/8ur0UA5C86/9fgRf7POEX/EP6L/xfP1P/KFH7/X9Vg/wmwIQDIBc//8SqA/iMhwP/45cQBgRF4APtnl/8HNHD/jDhC/yji9f/ZRiX+rNYJ/0hDhgGSwNb/LCZwAES4S//OWvsAleuNALWqOgB09O8AXJ0CAGatYgDpiWABfzHLAAWblAAXlAn/03oMACKGGv/bzIgAhggp/+BTK/5VGfcAbX8A/qmIMADud9v/563VAM4S/v4Iugf/fgkHAW8qSABvNOz+YD+NAJO/f/7NTsD/DmrtAbvbTACv87v+aVmtAFUZWQGi85QAAnbR/iGeCQCLoy7/XUYoAGwqjv5v/I7/m9+QADPlp/9J/Jv/XnQM/5ig2v+c7iX/s+rP/8UAs/+apI0A4cRoAAojGf7R1PL/Yf3e/rhl5QDeEn8BpIiH/x7PjP6SYfMAgcAa/slUIf9vCk7/k1Gy/wQEGACh7tf/Bo0hADXXDv8ptdD/54udALPL3f//uXEAveKs/3FC1v/KPi3/ZkAI/06uEP6FdUT/"),E(B,3264,"AQ=="),E(B,3296,"JuiVj8KyJ7BFw/SJ8u+Y8NXfrAXTxjM5sTgCiG1T/AXHF2pwPU3YT7o8C3YNEGcPKiBT+iw5zMZOx/13kqwDeuz///////////////////////////////////////9/7f///////////////////////////////////////3/u////////////////////////////////////////f+3T9VwaYxJY1pz3ot753hQ="),E(B,3487,""),E(B,34460,"AQ=="),E(B,34496,"AQ=="),E(B,34528,"4Ot6fDtBuK4WVuP68Z/EatoJjeucMrH9hmIFFl9JuABfnJW8o1CMJLHQsVWcg+9bBERcxFgcjobYIk7d0J8RV+z///////////////////////////////////////9/7f///////////////////////////////////////3/u////////////////////////////////////////fw=="),E(B,34720,"CMm882fmCWo7p8qEha5nuyv4lP5y82488TYdXzr1T6XRguatf1IOUR9sPiuMaAWba71B+6vZgx95IX4TGc3gWyKuKNeYL4pCzWXvI5FEN3EvO03sz/vAtbzbiYGl27XpOLVI81vCVjkZ0AW28RHxWZtPGa+kgj+SGIFt2tVeHKtCAgOjmKoH2L5vcEUBW4MSjLLkTr6FMSTitP/Vw30MVW+Je/J0Xb5ysZYWO/6x3oA1Esclpwbcm5Qmac908ZvB0krxnsFpm+TjJU84hke+77XVjIvGncEPZZysd8yhDCR1AitZbyzpLYPkpm6qhHRK1PtBvdypsFy1UxGD2oj5dqvfZu5SUT6YEDK0LW3GMag/IfuYyCcDsOQO777Hf1m/wo+oPfML4MYlpwqTR5Gn1W+CA+BRY8oGcG4OCmcpKRT8L9JGhQq3JybJJlw4IRsu7SrEWvxtLE3fs5WdEw04U95jr4tUcwplqLJ3PLsKanbmru1HLsnCgTs1ghSFLHKSZAPxTKHov6IBMEK8S2YaqJGX+NBwi0vCML5UBqNRbMcYUu/WGeiS0RCpZVUkBpnWKiBxV4U1DvS40bsycKBqEMjQ0rgWwaQZU6tBUQhsNx6Z647fTHdIJ6hIm+G1vLA0Y1rJxbMMHDnLikHjSqrYTnPjY3dPypxbo7iy1vNvLmj8su9d7oKPdGAvF0NvY6V4cqvwoRR4yITsOWQaCALHjCgeYyP6/76Q6b2C3utsUKQVecay96P5vitTcuPyeHHGnGEm6s4+J8oHwsAhx7iG0R7r4M3WfdrqeNFu7n9PffW6bxdyqmfwBqaYyKLFfWMKrg35vgSYPxEbRxwTNQtxG4R9BCP1d9sokyTHQHuryjK8vskVCr6ePEwNEJzEZx1DtkI+y77UxUwqfmX8nCl/Wez61jqrb8tfF1hHSowZRGyA"),E(B,35568,"YjY0X3BvcyA8PSBiNjRfbGVuAHNvZGl1bS9jb2RlY3MuYwBzb2RpdW1fYmluMmJhc2U2NAAkYXJnb24yaWQAJGFyZ29uMmkAJHY9ACRtPQAsdD0ALHA9ACRhcmdvbjJpZCR2PQAkYXJnb24yaSR2PQAkYXJnb24yaWQkACRhcmdvbjJpJA=="),E(B,35728,"U2lnRWQyNTUxOSBubyBFZDI1NTE5IGNvbGxpc2lvbnMBADEuMC4xOA=="),E(B,35773,"QAAAAQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQ=="),function(A,I,B){var C=I.memory,Q=g,E=new A.Int8Array(B),i=new A.Int16Array(B),n=new A.Int32Array(B),a=new A.Uint8Array(B),r=(new A.Uint16Array(B),new A.Uint32Array(B)),o=(new A.Float32Array(B),new A.Float64Array(B),A.Math.imul),e=(A.Math.fround,A.Math.abs,A.Math.clz32),t=(A.Math.min,A.Math.max,A.Math.floor,A.Math.ceil,A.Math.sqrt,I.abort),c=(A.NaN,A.Infinity,I.a),f=I.b,y=I.c,s=I.d,w=I.e,h=I.f,D=5279472,u=0,p=0,l=0;function F(A,I){var g,B,C,Q,i,r,o,e,t=0,c=0,f=0,y=0,s=0,w=0,h=0,u=0,p=0,F=0,G=0,k=0,_=0,H=0,Y=0,b=0,m=0,U=0,v=0,S=0,N=0,R=0,M=0,d=0,P=0,J=0,x=0,L=0,K=0,q=0,X=0,V=0,T=0,W=0,Z=0,O=0,z=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,QA=0,EA=0,iA=0,nA=0,aA=0,rA=0,oA=0,eA=0,tA=0,cA=0,fA=0,yA=0,sA=0,wA=0,hA=0,DA=0,uA=0;for(D=$=D-256|0;aA=(F=BA<<3)+($+128|0)|0,O=a[4+(F=I+F|0)|0]|a[F+5|0]<<8|a[F+6|0]<<16|a[F+7|0]<<24,n[aA>>2]=a[0|F]|a[F+1|0]<<8|a[F+2|0]<<16|a[F+3|0]<<24,n[aA+4>>2]=O,16!=(0|(BA=BA+1|0)););for(F=j($,A,64),n[(I=F)+88>>2]=1595750129,n[I+92>>2]=-1521486534,G=a[(I=A)+88|0]|a[I+89|0]<<8|a[I+90|0]<<16|a[I+91|0]<<24,aA=a[I+92|0]|a[I+93|0]<<8|a[I+94|0]<<16|a[I+95|0]<<24,s=a[I+72|0]|a[I+73|0]<<8|a[I+74|0]<<16|a[I+75|0]<<24,O=a[I+76|0]|a[I+77|0]<<8|a[I+78|0]<<16|a[I+79|0]<<24,rA=a[I+80|0]|a[I+81|0]<<8|a[I+82|0]<<16|a[I+83|0]<<24,eA=a[I+84|0]|a[I+85|0]<<8|a[I+86|0]<<16|a[I+87|0]<<24,CA=n[F+4>>2],$=F,I=(t=n[F+36>>2])+n[F+132>>2]|0,(nA=(f=n[F+32>>2])+(BA=n[F+128>>2])|0)>>>0<BA>>>0&&(I=I+1|0),I=I+CA|0,nA=I=(BA=nA+n[F>>2]|0)>>>0<nA>>>0?I+1|0:I,BA=jg((CA=BA)^(a[(BA=A)+64|0]|a[BA+65|0]<<8|a[BA+66|0]<<16|a[BA+67|0]<<24)^-1377402159,I^(a[BA+68|0]|a[BA+69|0]<<8|a[BA+70|0]<<16|a[BA+71|0]<<24)^1359893119,32),u=I=l,I=I+1779033703|0,(BA=(y=BA)+-205731576|0)>>>0<4089235720&&(I=I+1|0),c=f^(R=BA),f=I,c=jg(c,t^I,24),BA=n[(t=F)+136>>2],I=nA+(w=l)|0,(nA=c+CA|0)>>>0<CA>>>0&&(I=I+1|0),nA=BA+nA|0,I=(g=n[t+140>>2])+I|0,q=jg((_=nA)^y,(L=_>>>0<BA>>>0?I+1|0:I)^u,16),nA=I=l,n[$+96>>2]=q,n[$+100>>2]=I,I=f+I|0,(CA=R+q|0)>>>0<R>>>0&&(I=I+1|0),y=CA,n[F+64>>2]=y,n[$+68>>2]=I,m=I,CA=jg(c^y,w^I,63),u=I=l,n[F+32>>2]=CA,n[F+36>>2]=I,t=n[F+12>>2],H=s,I=(cA=n[F+148>>2])+(s=n[F+44>>2])|0,(w=(f=n[F+144>>2])+(c=n[F+40>>2])|0)>>>0<c>>>0&&(I=I+1|0),I=I+t|0,t=O,O=I=(R=w+n[F+8>>2]|0)>>>0<w>>>0?I+1|0:I,w=t=jg(H^R^725511199,t^I^-1694144372,32),EA=I=l,I=I+-1150833019|0,(t=t+-2067093701|0)>>>0<2227873595&&(I=I+1|0),H=c^t,c=I,s=jg(H,s^I,24),I=O+(h=l)|0,(O=s+R|0)>>>0<R>>>0&&(I=I+1|0),O=(R=n[F+152>>2])+O|0,I=n[F+156>>2]+I|0,AA=jg((v=O)^w,(d=v>>>0<R>>>0?I+1|0:I)^EA,16),w=I=l,n[$+104>>2]=AA,n[$+108>>2]=I,I=c+I|0,(O=t+AA|0)>>>0<t>>>0&&(I=I+1|0),p=O,n[F+72>>2]=p,n[$+76>>2]=I,P=I,R=jg(s^p,h^I,63),t=l,O=n[F+20>>2],H=rA,I=(tA=n[F+164>>2])+(rA=n[F+52>>2])|0,(c=(K=n[F+160>>2])+(s=n[F+48>>2])|0)>>>0<s>>>0&&(I=I+1|0),I=I+O|0,Y=jg(H^(U=$=c+n[F+16>>2]|0)^-79577749,(O=U>>>0<c>>>0?I+1|0:I)^eA^528734635,32),eA=I=l,I=I+1013904242|0,($=Y+-23791573|0)>>>0<4271175723&&(I=I+1|0),H=s^(c=$),s=I,rA=$=jg(H,rA^I,24),EA=I=l,h=eA,I=I+O|0,(O=U+$|0)>>>0<$>>>0&&(I=I+1|0),I=I+(k=B=n[F+172>>2])|0,V=jg((x=$=(eA=n[F+168>>2])+O|0)^Y,(M=x>>>0<O>>>0?I+1|0:I)^h,16),I=s+(Z=l)|0,($=c+V|0)>>>0<c>>>0&&(I=I+1|0),H=I,c=jg((U=$)^rA,I^EA,63),s=l,rA=n[F+28>>2],k=G,I=(C=n[F+180>>2])+(Y=n[F+60>>2])|0,(EA=($=n[F+176>>2])+(G=n[F+56>>2])|0)>>>0<G>>>0&&(I=I+1|0),I=I+rA|0,I=(O=EA+n[F+24>>2]|0)>>>0<EA>>>0?I+1|0:I,EA=O,h=I,J=jg(k^O^327033209,I^aA^1541459225,32),aA=I=l,I=I+-1521486534|0,(O=J+1595750129|0)>>>0<1595750129&&(I=I+1|0),rA=O,G=O=jg(G^O,I^Y,24),k=rA,b=I,N=aA,rA=n[F+188>>2],I=h+(Y=l)|0,(O=G+EA|0)>>>0<EA>>>0&&(I=I+1|0),EA=O,I=I+(S=rA)|0,T=O=(aA=n[F+184>>2])+O|0,EA=jg(O^J,(h=N)^(N=O>>>0<EA>>>0?I+1|0:I),16),S=G,I=(G=l)+b|0,(h=(O=EA)+k|0)>>>0<O>>>0&&(I=I+1|0),J=h,O=I,h=jg(S^h,I^Y,63),Y=l,I=t+L|0,(L=_+R|0)>>>0<R>>>0&&(I=I+1|0),I=I+(k=fA=n[F+196>>2])|0,EA=jg((b=EA)^(k=EA=(wA=n[F+192>>2])+L|0),(_=G)^(G=k>>>0<L>>>0?I+1|0:I),32),L=F,_=I=l,S=R,I=H+I|0,(R=U+(b=EA)|0)>>>0<U>>>0&&(I=I+1|0),H=t,t=I,X=jg(S^R,H^I,24),EA=F,U=n[F+200>>2],S=b,I=G+(b=l)|0,(H=k+X|0)>>>0<k>>>0&&(I=I+1|0),G=U+H|0,I=(yA=n[EA+204>>2])+I|0,sA=G,gA=jg(S^G,(H=_)^(_=G>>>0<U>>>0?I+1|0:I),16),H=I=l,n[L+120>>2]=gA,n[L+124>>2]=I,I=t+I|0,(t=R+gA|0)>>>0<R>>>0&&(I=I+1|0),G=t,n[F+80>>2]=t,n[EA+84>>2]=I,t^=X,X=I,k=jg(t,b^I,63),b=l,EA=s,I=s+d|0,(c=v+(t=c)|0)>>>0<v>>>0&&(I=I+1|0),s=c,I=I+(L=i=n[F+212>>2])|0,nA=jg((S=q)^(q=c=(R=n[F+208>>2])+c|0),(c=c>>>0<s>>>0?I+1|0:I)^nA,32),v=t,I=(t=l)+O|0,(s=(O=nA)+J|0)>>>0<O>>>0&&(I=I+1|0),v=O=jg(v^s,I^EA,24),d=I,r=n[F+220>>2],z=nA,I=(EA=l)+c|0,(nA=q+v|0)>>>0<v>>>0&&(I=I+1|0),I=I+(S=r)|0,t=jg(z^(J=O=(L=n[F+216>>2])+nA|0),(q=J>>>0<nA>>>0?I+1|0:I)^t,16),I=(I=d)+(d=l)|0,(nA=t+s|0)>>>0<t>>>0&&(I=I+1|0),s=I,c=jg((S=nA)^v,I^EA,63),v=l,O=h,z=Y,I=Y+M|0,(h=h+x|0)>>>0<x>>>0&&(I=I+1|0),Y=h,I=I+(W=EA=n[F+228>>2])|0,W=h=(nA=n[F+224>>2])+h|0,AA=jg(h^AA,(M=w)^(w=h>>>0<Y>>>0?I+1|0:I),32),Y=O,I=m+(h=l)|0,(O=y+AA|0)>>>0<y>>>0&&(I=I+1|0),m=O=jg(Y^(y=O),I^z,24),x=I,M=h,QA=n[F+236>>2],I=(Y=l)+w|0,(w=m+W|0)>>>0<m>>>0&&(I=I+1|0),I=I+(IA=QA)|0,z=O=(h=n[F+232>>2])+w|0,w=jg(O^AA,(W=M)^(M=O>>>0<w>>>0?I+1|0:I),16),I=(I=x)+(x=l)|0,(y=y+w|0)>>>0<w>>>0&&(I=I+1|0),AA=y,y=I,Y=jg(AA^m,I^Y,63),m=l,IA=u,I=u+N|0,(u=(W=CA)+T|0)>>>0<W>>>0&&(I=I+1|0),I=I+(Q=n[F+244>>2])|0,N=Z,Z=I=(CA=(O=n[F+240>>2])+u|0)>>>0<u>>>0?I+1|0:I,V=jg((u=CA)^V,N^I,32),N=y,y=t,I=P+(CA=l)|0,(t=p+V|0)>>>0<p>>>0&&(I=I+1|0),p=I,W=jg(t^W,I^IA,24),T=I=l,P=CA,I=I+Z|0,(Z=u+(IA=W)|0)>>>0<u>>>0&&(I=I+1|0),I=I+(oA=e=n[F+252>>2])|0,I=(u=(CA=n[F+248>>2])+Z|0)>>>0<Z>>>0?I+1|0:I,Z=u,W=P,P=I,oA=jg(u^V,W^I,16),V=IA,I=p+(W=l)|0,(u=t+oA|0)>>>0<t>>>0&&(I=I+1|0),IA=u,t=I,V=jg(V^u,I^T,63),T=I=l,u=I,iA=y,I=_+Q|0,(p=(y=O)+sA|0)>>>0<y>>>0&&(I=I+1|0),I=I+u|0,u=y=p+V|0,y=jg(iA^y,(_=d)^(d=y>>>0<p>>>0?I+1|0:I),32),p=F,I=(I=N)+(N=l)|0,(AA=y+AA|0)>>>0<y>>>0&&(I=I+1|0),_=AA,AA=I,iA=T=jg(V^_,T^I,24),hA=I=l,V=I,sA=y,I=d+i|0,(y=u+R|0)>>>0<u>>>0&&(I=I+1|0),u=y,I=I+V|0,o=y=y+T|0,sA=jg(sA^y,(d=N)^(N=y>>>0<u>>>0?I+1|0:I),16),I=AA+(V=l)|0,(y=_+sA|0)>>>0<_>>>0&&(I=I+1|0),_=y,AA=I,u=jg(y^iA,I^hA,63),d=I=l,n[p+32>>2]=u,n[p+36>>2]=I,T=t,iA=w,I=tA+(p=b)|0,(t=K+(y=k)|0)>>>0<K>>>0&&(I=I+1|0),I=I+q|0,w=t=t+J|0,t=jg(iA^t,(k=t>>>0<J>>>0?I+1|0:I)^x,32),q=y,I=(y=l)+T|0,(K=t+IA|0)>>>0<t>>>0&&(I=I+1|0),J=p,p=I,J=x=jg(q^(b=K),J^I,24),q=I=l,K=I,T=t,I=k+fA|0,(t=w+wA|0)>>>0<w>>>0&&(I=I+1|0),w=t,I=I+K|0,k=t=t+x|0,T=jg(T^t,(K=t>>>0<w>>>0?I+1|0:I)^y,16),y=J,I=p+(x=l)|0,(t=b+T|0)>>>0<b>>>0&&(I=I+1|0),J=t,w=q,q=I,w=jg(y^t,w^I,63),t=l,y=c,I=(p=v)+yA|0,(U=c+U|0)>>>0<c>>>0&&(I=I+1|0),I=I+M|0,b=jg((v=c=U+z|0)^oA,(c=c>>>0<z>>>0?I+1|0:I)^W,32),M=y,I=X+(y=l)|0,(U=G+b|0)>>>0<G>>>0&&(I=I+1|0),G=p,p=I,X=M=jg(M^U,G^I,24),z=I=l,G=I,W=b,I=c+e|0,(b=(c=CA)+v|0)>>>0<c>>>0&&(I=I+1|0),I=I+G|0,I=(c=b+M|0)>>>0<b>>>0?I+1|0:I,b=c,v=I,tA=jg(W^c,I^y,16),G=X,I=p+(M=l)|0,(c=U+tA|0)>>>0<U>>>0&&(I=I+1|0),X=c,y=I,p=jg(G^c,I^z,63),U=l,z=m,I=m+QA|0,(Y=(G=Y)+(c=h)|0)>>>0<c>>>0&&(I=I+1|0),I=I+P|0,P=c=Y+Z|0,c=jg(c^gA,(Y=c>>>0<Z>>>0?I+1|0:I)^H,32),m=G,I=(I=s)+(s=l)|0,(G=c+S|0)>>>0<c>>>0&&(I=I+1|0),H=G,S=Z=jg(m^G,I^z,24),z=G=l,m=I,W=c,I=Y+C|0,(Y=(c=$)+P|0)>>>0<c>>>0&&(I=I+1|0),I=I+G|0,P=c=Y+Z|0,Y=jg(W^c,(Z=c>>>0<Y>>>0?I+1|0:I)^s,16),G=S,I=(I=m)+(m=l)|0,(s=(c=Y)+H|0)>>>0<c>>>0&&(I=I+1|0),S=s,s=I,H=jg(G^S,I^z,63),c=l,G=F,z=w,W=t,gA=Y,IA=w,I=N+g|0,(Y=(w=BA)+o|0)>>>0<w>>>0&&(I=I+1|0),I=I+t|0,t=jg(gA^(IA=w=IA+Y|0),(w=w>>>0<Y>>>0?I+1|0:I)^m,32),I=(gA=l)+y|0,(Y=t+X|0)>>>0<t>>>0&&(I=I+1|0),y=Y,Y=I,z=jg(y^z,I^W,24),m=I=l,N=I,I=w+EA|0,(X=(w=nA)+IA|0)>>>0<w>>>0&&(I=I+1|0),I=I+N|0,N=w=X+z|0,oA=jg(t^w,gA^(X=w>>>0<X>>>0?I+1|0:I),16),w=I=l,n[G+120>>2]=oA,n[G+124>>2]=I,G=z,I=I+Y|0,(t=y+oA|0)>>>0<y>>>0&&(I=I+1|0),z=t,y=I,Y=jg(G^t,I^m,63),G=l,m=p,W=U,I=U+K|0,(t=p+k|0)>>>0<k>>>0&&(I=I+1|0),p=t,I=I+(gA=yA=n[F+132>>2])|0,I=(t=(IA=n[F+128>>2])+t|0)>>>0<p>>>0?I+1|0:I,p=t,U=I,t=jg(t^sA,I^V,32),K=m,I=(I=s)+(s=l)|0,(m=t+S|0)>>>0<t>>>0&&(I=I+1|0),V=S=jg(K^(k=m),I^W,24),gA=m=l,K=I,iA=t,I=U+cA|0,(t=f+p|0)>>>0<p>>>0&&(I=I+1|0),p=t,I=I+m|0,S=t=t+S|0,t=jg(iA^t,(W=t>>>0<p>>>0?I+1|0:I)^s,16),I=(p=l)+K|0,(U=t+k|0)>>>0<t>>>0&&(I=I+1|0),K=U,s=U^V,V=I,s=jg(s,I^gA,63),U=l,m=c,gA=T,k=H,I=v+r|0,(H=b+L|0)>>>0<b>>>0&&(I=I+1|0),I=I+c|0,T=H=(T=k)+(b=H)|0,x=jg(gA^H,(c=H>>>0<b>>>0?I+1|0:I)^x,32),v=k,I=AA+(H=l)|0,(k=_+x|0)>>>0<_>>>0&&(I=I+1|0),AA=m=jg(v^k,I^m,24),gA=b=l,v=I,iA=x,_=m,I=c+rA|0,(m=(c=aA)+T|0)>>>0<c>>>0&&(I=I+1|0),I=I+b|0,x=c=_+m|0,H=jg(iA^c,(_=c>>>0<m>>>0?I+1|0:I)^H,16),m=AA,I=(AA=l)+v|0,(k=(c=H)+k|0)>>>0<c>>>0&&(I=I+1|0),v=k,c=I,k=jg(m^k,I^gA,63),b=l,T=d,I=d+B|0,(d=(m=u)+(u=eA)|0)>>>0<u>>>0&&(I=I+1|0),I=I+Z|0,d=I=(u=d+P|0)>>>0<P>>>0?I+1|0:I,gA=jg(u^tA,I^M,32),P=v,M=c,v=t,I=q+(t=l)|0,(c=J+gA|0)>>>0<J>>>0&&(I=I+1|0),q=J=jg(c^m,I^T,24),tA=T=l,m=I,Z=t,I=d+T|0,(d=u+J|0)>>>0<u>>>0&&(I=I+1|0),I=I+(iA=sA=n[F+156>>2])|0,I=(u=(t=n[F+152>>2])+d|0)>>>0<d>>>0?I+1|0:I,d=u,J=Z,Z=I,u=jg(u^gA,J^I,16),T=q,I=(J=l)+m|0,(m=(m=c)+(c=u)|0)>>>0<c>>>0&&(I=I+1|0),q=m,c=I,T=jg(T^m,I^tA,63),gA=I=l,m=I,iA=v,I=X+r|0,(v=N+L|0)>>>0<N>>>0&&(I=I+1|0),N=v,I=I+m|0,m=v=v+T|0,p=jg(iA^v,(N=v>>>0<N>>>0?I+1|0:I)^p,32),v=F,I=(I=M)+(M=l)|0,(X=p+P|0)>>>0<p>>>0&&(I=I+1|0),P=X,X=I,tA=gA=jg(T^P,gA^I,24),iA=I=l,T=I,hA=p,I=N+fA|0,(p=m+wA|0)>>>0<m>>>0&&(I=I+1|0),m=p,I=I+T|0,wA=p=p+gA|0,fA=jg(hA^p,(N=M)^(M=p>>>0<m>>>0?I+1|0:I),16),I=X+(N=l)|0,(p=P+fA|0)>>>0<P>>>0&&(I=I+1|0),P=p,X=I,p=jg(p^tA,I^iA,63),m=I=l,n[v+32>>2]=p,n[v+36>>2]=I,v=Y,T=G,gA=c,I=G+EA|0,(Y=(c=nA)+Y|0)>>>0<c>>>0&&(I=I+1|0),I=I+W|0,I=(c=Y+S|0)>>>0<S>>>0?I+1|0:I,S=c,Y=I,c=jg(c^H,I^AA,32),W=v,I=(H=l)+gA|0,(v=c+q|0)>>>0<c>>>0&&(I=I+1|0),G=v,v=I,W=AA=jg(W^G,I^T,24),gA=I=l,q=I,T=c,I=Y+yA|0,(c=S+IA|0)>>>0<IA>>>0&&(I=I+1|0),Y=c,I=I+q|0,tA=c=c+AA|0,T=jg(T^c,(q=c>>>0<Y>>>0?I+1|0:I)^H,16),I=v+(S=l)|0,(c=G+T|0)>>>0<G>>>0&&(I=I+1|0),AA=c,c^=W,W=I,Y=jg(c,I^gA,63),c=l,v=u,I=B+(G=U)|0,(u=(H=s)+(s=eA)|0)>>>0<s>>>0&&(I=I+1|0),I=I+_|0,u=s=u+x|0,s=jg(v^s,(U=s>>>0<x>>>0?I+1|0:I)^J,32),I=(I=y)+(y=l)|0,(v=s+z|0)>>>0<s>>>0&&(I=I+1|0),J=x=jg((_=H)^(H=v),I^G,24),_=G=l,v=I,z=s,I=U+cA|0,(s=f+u|0)>>>0<u>>>0&&(I=I+1|0),u=s,I=I+G|0,gA=s=s+x|0,U=jg(z^s,(x=s>>>0<u>>>0?I+1|0:I)^y,16),G=J,I=(J=l)+v|0,(y=(s=U)+H|0)>>>0<s>>>0&&(I=I+1|0),v=y,u=I,H=jg(G^y,I^_,63),s=l,I=e+(G=b)|0,(b=(y=k)+(k=CA)|0)>>>0<k>>>0&&(I=I+1|0),k=b+d|0,I=I+Z|0,b=w,w=I=k>>>0<d>>>0?I+1|0:I,Z=jg(k^oA,b^I,32),_=y,I=V+(y=l)|0,(b=K+Z|0)>>>0<K>>>0&&(I=I+1|0),d=G,G=I,_=K=jg(_^b,d^I,24),z=I=l,d=I,I=w+QA|0,(w=h+k|0)>>>0<k>>>0&&(I=I+1|0),k=w,I=I+d|0,K=w=w+K|0,IA=jg(d=w^Z,(Z=w>>>0<k>>>0?I+1|0:I)^y,16),k=_,I=G+(d=l)|0,(y=b+IA|0)>>>0<b>>>0&&(I=I+1|0),_=y,w=I,G=jg(k^y,I^z,63),y=l,k=F,b=Y,z=c,I=M+i|0,(M=(Y=R)+wA|0)>>>0<Y>>>0&&(I=I+1|0),I=I+c|0,I=(Y=(V=b)+M|0)>>>0<M>>>0?I+1|0:I,M=Y,Y=I,c=jg(M^IA,I^d,32),d=b,I=(IA=l)+u|0,(b=c+v|0)>>>0<c>>>0&&(I=I+1|0),u=b,b=I,z=jg(d^u,I^z,24),v=I=l,d=I,I=Y+Q|0,(M=(Y=O)+M|0)>>>0<Y>>>0&&(I=I+1|0),I=I+d|0,yA=Y=M+z|0,oA=jg(c^Y,IA^(M=Y>>>0<M>>>0?I+1|0:I),16),Y=I=l,n[k+120>>2]=oA,n[k+124>>2]=I,k=z,I=I+b|0,(c=u+oA|0)>>>0<u>>>0&&(I=I+1|0),z=c,u=I,k=jg(k^c,I^v,63),b=l,v=H,d=s,c=H,I=q+sA|0,(H=t+tA|0)>>>0<t>>>0&&(I=I+1|0),I=I+s|0,q=c=c+H|0,c=jg(c^fA,(s=c>>>0<H>>>0?I+1|0:I)^N,32),N=v,I=(I=w)+(w=l)|0,(v=c+_|0)>>>0<c>>>0&&(I=I+1|0),IA=N=jg(N^(H=v),I^d,24),V=v=l,d=I,iA=c,I=s+C|0,(s=(c=$)+q|0)>>>0<c>>>0&&(I=I+1|0),I=I+v|0,N=c=s+N|0,c=jg(iA^c,(_=c>>>0<s>>>0?I+1|0:I)^w,16),I=(w=l)+d|0,(H=c+H|0)>>>0<c>>>0&&(I=I+1|0),q=H,s=H^IA,IA=I,s=jg(s,I^V,63),H=l,v=G,d=y,V=G,I=x+rA|0,(x=(G=aA)+gA|0)>>>0<G>>>0&&(I=I+1|0),I=I+y|0,V=G=V+x|0,x=jg(G^T,(y=G>>>0<x>>>0?I+1|0:I)^S,32),S=v,I=X+(G=l)|0,(v=P+x|0)>>>0<P>>>0&&(I=I+1|0),S=X=jg(S^v,I^d,24),T=d=l,P=I,gA=x,I=y+g|0,(x=(y=BA)+V|0)>>>0<y>>>0&&(I=I+1|0),I=I+d|0,I=(y=x+X|0)>>>0<x>>>0?I+1|0:I,x=y,X=I,G=jg(gA^y,I^G,16),d=S,I=(S=l)+P|0,(v=(y=G)+v|0)>>>0<y>>>0&&(I=I+1|0),P=v,y=I,v=jg(d^v,I^T,63),d=l,V=p,T=m,iA=U,I=m+Z|0,(p=p+K|0)>>>0<K>>>0&&(I=I+1|0),U=p,I=I+(gA=fA=n[F+204>>2])|0,I=(p=(wA=n[F+200>>2])+p|0)>>>0<U>>>0?I+1|0:I,U=p,m=I,gA=jg(iA^p,I^J,32),K=y,y=c,I=W+(c=l)|0,(p=AA+gA|0)>>>0<AA>>>0&&(I=I+1|0),V=AA=jg(p^V,I^T,24),T=W=l,Z=p,J=I,I=m+W|0,(m=U+AA|0)>>>0<U>>>0&&(I=I+1|0),I=I+(iA=tA=n[F+164>>2])|0,AA=U=(p=n[F+160>>2])+m|0,U=jg(U^gA,(W=U>>>0<m>>>0?I+1|0:I)^c,16),I=(I=J)+(J=l)|0,(m=(c=U)+Z|0)>>>0<c>>>0&&(I=I+1|0),Z=m,c=I,V=jg(m^V,I^T,63),T=I=l,m=I,gA=y,I=M+rA|0,(M=(y=aA)+yA|0)>>>0<y>>>0&&(I=I+1|0),I=I+m|0,I=(y=M+V|0)>>>0<M>>>0?I+1|0:I,M=y,m=w,w=I,y=jg(gA^y,m^I,32),m=F,I=(I=K)+(K=l)|0,(gA=y+P|0)>>>0<y>>>0&&(I=I+1|0),iA=yA=jg(V^(P=gA),I^T,24),hA=V=l,T=P,gA=I,P=y,I=w+fA|0,(y=M+wA|0)>>>0<M>>>0&&(I=I+1|0),w=y,I=I+V|0,yA=y=y+yA|0,P=jg(P^y,(M=y>>>0<w>>>0?I+1|0:I)^K,16),I=(V=l)+gA|0,(w=(y=P)+T|0)>>>0<y>>>0&&(I=I+1|0),T=w,y=I,w=jg(w^iA,I^hA,63),K=I=l,n[m+32>>2]=w,n[m+36>>2]=I,m=k,gA=b,iA=G,I=b+sA|0,(G=t+k|0)>>>0<t>>>0&&(I=I+1|0),I=I+_|0,I=(t=G+N|0)>>>0<N>>>0?I+1|0:I,N=t,G=I,t=jg(iA^t,I^S,32),I=(I=c)+(c=l)|0,(b=t+Z|0)>>>0<t>>>0&&(I=I+1|0),_=Z=jg((k=b)^m,I^gA,24),S=b=l,m=I,iA=t,I=G+g|0,(G=(t=BA)+N|0)>>>0<t>>>0&&(I=I+1|0),I=I+b|0,gA=t=G+Z|0,G=jg(iA^t,(b=t>>>0<G>>>0?I+1|0:I)^c,16),I=(I=m)+(m=l)|0,(c=(t=G)+k|0)>>>0<t>>>0&&(I=I+1|0),Z=c,N=I,k=jg(c^_,I^S,63),t=l,_=s,S=H,I=H+QA|0,(c=s+h|0)>>>0<s>>>0&&(I=I+1|0),I=I+X|0,s=c=c+x|0,c=jg(c^U,(h=c>>>0<x>>>0?I+1|0:I)^J,32),I=(I=u)+(u=l)|0,(H=c+z|0)>>>0<c>>>0&&(I=I+1|0),U=H,H=I,_=J=jg(U^_,I^S,24),X=I=l,x=I,S=c,I=h+EA|0,(c=s+nA|0)>>>0<s>>>0&&(I=I+1|0),s=c,I=I+x|0,sA=c=c+J|0,QA=jg(S^c,(x=c>>>0<s>>>0?I+1|0:I)^u,16),I=H+(J=l)|0,(c=U+QA|0)>>>0<U>>>0&&(I=I+1|0),H=c,u=I,h=jg(c^_,I^X,63),c=l,I=r+(U=d)|0,(d=(s=v)+(v=L)|0)>>>0<v>>>0&&(I=I+1|0),I=I+W|0,X=v=d+AA|0,_=jg(v^oA,(_=Y)^(Y=v>>>0<AA>>>0?I+1|0:I),32),S=s,I=IA+(s=l)|0,(v=_+q|0)>>>0<q>>>0&&(I=I+1|0),q=U,U=I,S=q=jg(S^v,q^I,24),z=I=l,d=I,W=_,I=Y+Q|0,(_=(Y=O)+X|0)>>>0<Y>>>0&&(I=I+1|0),I=I+d|0,d=Y=_+q|0,AA=jg(W^Y,(_=Y>>>0<_>>>0?I+1|0:I)^s,16),I=U+(X=l)|0,(s=v+AA|0)>>>0<v>>>0&&(I=I+1|0),v=s,q=I,Y=jg(s^S,I^z,63),s=l,U=F,S=k,z=t,I=M+cA|0,(M=f+yA|0)>>>0<f>>>0&&(I=I+1|0),I=I+t|0,t=jg((W=k=M+k|0)^AA,(k=k>>>0<M>>>0?I+1|0:I)^X,32),I=(IA=l)+u|0,(H=t+H|0)>>>0<t>>>0&&(I=I+1|0),M=I,AA=jg((u=H)^S,I^z,24),X=I=l,H=I,I=k+C|0,(S=(k=$)+W|0)>>>0<k>>>0&&(I=I+1|0),I=I+H|0,I=(k=S+AA|0)>>>0<S>>>0?I+1|0:I,S=k,z=I,oA=jg(t^k,IA^I,16),H=I=l,n[U+120>>2]=oA,n[U+124>>2]=I,I=I+M|0,(t=u+oA|0)>>>0<u>>>0&&(I=I+1|0),M=t,u=I,U=jg(t^AA,I^X,63),k=l,X=c,t=h,I=b+B|0,(b=(h=eA)+gA|0)>>>0<h>>>0&&(I=I+1|0),I=I+c|0,AA=h=(W=t)+b|0,P=jg(h^P,(c=h>>>0<b>>>0?I+1|0:I)^V,32),b=t,I=q+(t=l)|0,(h=v+P|0)>>>0<v>>>0&&(I=I+1|0),W=X=jg(b^h,I^X,24),IA=b=l,v=I,V=P,I=c+i|0,(P=(c=R)+AA|0)>>>0<c>>>0&&(I=I+1|0),I=I+b|0,X=c=P+X|0,t=jg(V^c,(q=c>>>0<P>>>0?I+1|0:I)^t,16),I=(P=l)+v|0,(h=t+h|0)>>>0<t>>>0&&(I=I+1|0),AA=h,c=h^W,W=I,b=jg(c,I^IA,63),v=l,IA=s,V=G,h=Y,I=x+tA|0,(Y=(c=p)+sA|0)>>>0<c>>>0&&(I=I+1|0),I=I+s|0,G=c=(G=h)+Y|0,c=jg(V^c,(s=m)^(m=c>>>0<Y>>>0?I+1|0:I),32),s=h,I=(I=y)+(y=l)|0,(h=c+T|0)>>>0<c>>>0&&(I=I+1|0),x=s=jg(s^h,I^IA,24),IA=Y=l,V=I,iA=c,I=m+Y|0,(c=s+G|0)>>>0<G>>>0&&(I=I+1|0),s=c,I=I+(gA=sA=n[F+132>>2])|0,T=c=(Y=n[F+128>>2])+c|0,s=jg(iA^c,(gA=c>>>0<s>>>0?I+1|0:I)^y,16),G=x,I=(x=l)+V|0,(y=(c=s)+h|0)>>>0<c>>>0&&(I=I+1|0),c=I,G=jg(G^y,I^IA,63),m=l,IA=K,I=K+e|0,(K=(h=w)+(w=CA)|0)>>>0<w>>>0&&(I=I+1|0),I=I+_|0,K=I=(w=d+K|0)>>>0<d>>>0?I+1|0:I,d=jg(w^QA,I^J,32),J=y,_=c,y=t,I=N+(t=l)|0,(c=d+Z|0)>>>0<Z>>>0&&(I=I+1|0),V=N=jg(c^h,I^IA,24),QA=IA=l,h=c,Z=I,hA=d,I=K+IA|0,(c=w+N|0)>>>0<w>>>0&&(I=I+1|0),w=c,I=I+(iA=yA=n[F+196>>2])|0,N=c=(d=n[F+192>>2])+c|0,c=jg(hA^c,(IA=c>>>0<w>>>0?I+1|0:I)^t,16),K=V,I=(I=Z)+(Z=l)|0,(w=(t=c)+h|0)>>>0<t>>>0&&(I=I+1|0),V=w,t=I,QA=jg(K^w,I^QA,63),iA=I=l,w=I,K=y,I=z+fA|0,(y=S+wA|0)>>>0<S>>>0&&(I=I+1|0),h=y,I=I+w|0,I=(y=y+QA|0)>>>0<h>>>0?I+1|0:I,h=y,w=P,P=I,y=jg(K^y,w^I,32),w=F,I=(K=l)+_|0,(_=y+J|0)>>>0<y>>>0&&(I=I+1|0),J=_,QA=z=jg(QA^_,I^iA,24),fA=_=l,S=I,iA=y,I=P+sA|0,(y=h+Y|0)>>>0<h>>>0&&(I=I+1|0),h=y,I=I+_|0,wA=y=y+z|0,P=jg(iA^y,(_=y>>>0<h>>>0?I+1|0:I)^K,16),I=(I=S)+(S=l)|0,(h=(y=P)+J|0)>>>0<y>>>0&&(I=I+1|0),J=h,y=I,h=jg(h^QA,I^fA,63),K=I=l,n[w+32>>2]=h,n[w+36>>2]=I,z=k,QA=t,iA=s,I=k+B|0,(s=(w=U)+(t=eA)|0)>>>0<t>>>0&&(I=I+1|0),I=I+q|0,q=t=s+X|0,t=jg(iA^t,(s=t>>>0<X>>>0?I+1|0:I)^x,32),x=w,I=(w=l)+QA|0,(k=t+V|0)>>>0<t>>>0&&(I=I+1|0),U=k,V=z=jg(x^k,I^z,24),QA=k=l,x=U,X=I,U=t,I=s+rA|0,(s=(t=aA)+q|0)>>>0<t>>>0&&(I=I+1|0),I=I+k|0,q=t=s+z|0,U=jg(U^t,(z=t>>>0<s>>>0?I+1|0:I)^w,16),I=(I=X)+(X=l)|0,(s=(t=U)+x|0)>>>0<t>>>0&&(I=I+1|0),x=s,w=I,k=jg(s^V,I^QA,63),t=l,V=v,QA=c,I=v+cA|0,(b=(s=b)+(c=f)|0)>>>0<c>>>0&&(I=I+1|0),I=I+gA|0,b=c=b+T|0,c=jg(QA^c,(v=c>>>0<T>>>0?I+1|0:I)^Z,32),Z=s,I=(s=l)+u|0,(M=c+M|0)>>>0<c>>>0&&(I=I+1|0),u=M,M=I,T=V=jg(Z^u,I^V,24),QA=I=l,Z=I,gA=c,I=v+tA|0,(c=p+b|0)>>>0<b>>>0&&(I=I+1|0),p=c,I=I+Z|0,fA=c=c+V|0,gA=jg(gA^c,(v=c>>>0<p>>>0?I+1|0:I)^s,16),I=M+(Z=l)|0,(c=u+gA|0)>>>0<u>>>0&&(I=I+1|0),b=c,u=I,p=jg(c^T,I^QA,63),c=l,M=m,I=m+i|0,(m=(s=G)+(G=R)|0)>>>0<G>>>0&&(I=I+1|0),I=I+IA|0,IA=G=m+N|0,N=jg(G^oA,(m=H)^(H=G>>>0<N>>>0?I+1|0:I),32),V=s,I=W+(s=l)|0,(G=N+AA|0)>>>0<AA>>>0&&(I=I+1|0),m=I,W=AA=jg(V^G,I^M,24),V=I=l,M=I,T=N,I=H+e|0,(N=(H=CA)+IA|0)>>>0<H>>>0&&(I=I+1|0),I=I+M|0,M=H=N+AA|0,T=jg(T^H,(N=H>>>0<N>>>0?I+1|0:I)^s,16),I=m+(AA=l)|0,(s=G+T|0)>>>0<G>>>0&&(I=I+1|0),m=s,s^=W,W=I,H=jg(s,I^V,63),s=l,G=F,IA=k,V=t,QA=T,T=k,I=_+Q|0,(_=(k=O)+wA|0)>>>0<k>>>0&&(I=I+1|0),I=I+t|0,t=jg(QA^(T=k=T+_|0),(k=k>>>0<_>>>0?I+1|0:I)^AA,32),I=(QA=l)+u|0,(b=t+b|0)>>>0<t>>>0&&(I=I+1|0),_=I,V=jg(b^IA,I^V,24),AA=I=l,u=I,I=k+g|0,(IA=(k=BA)+T|0)>>>0<k>>>0&&(I=I+1|0),I=I+u|0,wA=k=IA+V|0,oA=jg(t^k,QA^(IA=k>>>0<IA>>>0?I+1|0:I),16),u=I=l,n[G+120>>2]=oA,n[G+124>>2]=I,I=I+_|0,(t=b+oA|0)>>>0<b>>>0&&(I=I+1|0),_=t,G=AA,AA=I,G=jg(t^V,G^I,63),k=l,b=c,V=P,t=p,I=z+r|0,(p=L+q|0)>>>0<q>>>0&&(I=I+1|0),P=p,I=I+c|0,q=p=(T=t)+p|0,P=jg(V^p,(c=p>>>0<P>>>0?I+1|0:I)^S,32),S=t,I=W+(t=l)|0,(p=m+P|0)>>>0<m>>>0&&(I=I+1|0),m=b,b=I,z=S=jg(S^p,m^I,24),W=I=l,m=I,V=P,I=c+EA|0,(P=(c=nA)+q|0)>>>0<c>>>0&&(I=I+1|0),I=I+m|0,m=c=P+S|0,c=jg(V^c,(P=c>>>0<P>>>0?I+1|0:I)^t,16),I=b+(q=l)|0,(t=c+p|0)>>>0<p>>>0&&(I=I+1|0),S=t,t^=z,z=I,p=jg(t,I^W,63),b=l,W=H,V=s,T=U,I=v+C|0,(U=(t=$)+fA|0)>>>0<t>>>0&&(I=I+1|0),I=I+s|0,s=t=U+H|0,t=jg(T^t,(U=t>>>0<U>>>0?I+1|0:I)^X,32),I=(I=y)+(y=l)|0,(v=t+J|0)>>>0<t>>>0&&(I=I+1|0),W=X=jg((H=v)^W,I^V,24),V=v=l,J=I,T=t,I=U+yA|0,(t=s+d|0)>>>0<s>>>0&&(I=I+1|0),s=t,I=I+v|0,v=t=t+X|0,s=jg(T^t,(X=t>>>0<s>>>0?I+1|0:I)^y,16),U=W,I=(I=J)+(J=l)|0,(y=(t=s)+H|0)>>>0<t>>>0&&(I=I+1|0),W=y,t=I,U=jg(U^y,I^V,63),H=l,V=h,T=K,iA=gA,I=N+K|0,(y=h+M|0)>>>0<M>>>0&&(I=I+1|0),h=y,I=I+(QA=fA=n[F+156>>2])|0,I=(y=(gA=n[F+152>>2])+y|0)>>>0<h>>>0?I+1|0:I,h=y,K=I,y=jg(iA^y,I^Z,32),M=t,I=(t=l)+w|0,(x=y+x|0)>>>0<y>>>0&&(I=I+1|0),V=N=jg((w=x)^V,I^T,24),QA=T=l,x=I,hA=y,I=K+T|0,(y=h+N|0)>>>0<h>>>0&&(I=I+1|0),h=y,I=I+(iA=tA=n[F+236>>2])|0,K=y=(Z=n[F+232>>2])+y|0,t=jg(hA^y,(N=y>>>0<h>>>0?I+1|0:I)^t,16),y=V,I=(I=x)+(x=l)|0,(w=t+w|0)>>>0<t>>>0&&(I=I+1|0),V=w,T=I,QA=jg(y^w,I^QA,63),iA=I=l,y=I,w=c,I=IA+cA|0,(c=f+wA|0)>>>0<f>>>0&&(I=I+1|0),I=I+y|0,IA=f=c+QA|0,f=jg(w^f,(y=f>>>0<c>>>0?I+1|0:I)^q,32),c=F,I=(w=l)+M|0,(M=f+W|0)>>>0<f>>>0&&(I=I+1|0),QA=W=jg(QA^(h=M),I^iA,24),cA=M=l,q=I,iA=f,I=y+EA|0,(y=(f=nA)+IA|0)>>>0<f>>>0&&(I=I+1|0),I=I+M|0,M=f=y+W|0,w=jg(iA^f,(W=f>>>0<y>>>0?I+1|0:I)^w,16),I=(I=q)+(q=l)|0,(y=(f=w)+h|0)>>>0<f>>>0&&(I=I+1|0),IA=y,f=y^QA,QA=I,y=jg(f,I^cA,63),h=I=l,n[c+32>>2]=y,n[c+36>>2]=I,iA=s,I=C+(c=k)|0,(G=(f=G)+(s=$)|0)>>>0<s>>>0&&(I=I+1|0),I=I+P|0,m=jg(iA^(P=s=G+m|0),(s=s>>>0<m>>>0?I+1|0:I)^J,32),k=f,I=T+(f=l)|0,(G=m+V|0)>>>0<V>>>0&&(I=I+1|0),J=c,c=I,V=J=jg(k^G,J^I,24),cA=I=l,k=I,T=m,I=s+i|0,(m=(s=R)+P|0)>>>0<s>>>0&&(I=I+1|0),I=I+k|0,wA=s=m+J|0,T=jg(T^s,(m=s>>>0<m>>>0?I+1|0:I)^f,16),I=c+(P=l)|0,(f=G+T|0)>>>0<G>>>0&&(I=I+1|0),J=f,c=f^V,V=I,G=jg(c,I^cA,63),k=l,iA=t,I=sA+(c=b)|0,(t=Y+(f=p)|0)>>>0<Y>>>0&&(I=I+1|0),I=I+X|0,s=I=(t=t+v|0)>>>0<v>>>0?I+1|0:I,b=jg(iA^t,I^x,32),v=f,I=AA+(f=l)|0,(p=b+_|0)>>>0<_>>>0&&(I=I+1|0),_=c,c=I,x=v=jg(v^p,_^I,24),_=I=l,Y=I,I=s+r|0,(s=t+L|0)>>>0<t>>>0&&(I=I+1|0),I=I+Y|0,cA=t=s+v|0,AA=jg(v=t^b,(b=t>>>0<s>>>0?I+1|0:I)^f,16),I=c+(v=l)|0,(f=p+AA|0)>>>0<p>>>0&&(I=I+1|0),Y=f,c=I,L=jg(f^x,I^_,63),f=l,I=yA+(s=H)|0,(p=d+(t=U)|0)>>>0<d>>>0&&(I=I+1|0),I=I+N|0,d=p=p+K|0,H=jg(p^oA,(H=u)^(u=p>>>0<K>>>0?I+1|0:I),32),U=t,I=z+(t=l)|0,(p=H+S|0)>>>0<S>>>0&&(I=I+1|0),_=s,s=I,x=K=jg(U^p,_^I,24),N=I=l,U=I,_=H,I=u+fA|0,(u=d+gA|0)>>>0<gA>>>0&&(I=I+1|0),H=u,I=I+U|0,I=(u=u+K|0)>>>0<H>>>0?I+1|0:I,H=u,d=I,X=jg(_^u,I^t,16),I=s+(U=l)|0,(t=p+X|0)>>>0<p>>>0&&(I=I+1|0),K=t,s=I,u=jg(t^x,I^N,63),t=l,p=F,x=G,N=k,_=c,I=k+W|0,(c=G+M|0)>>>0<M>>>0&&(I=I+1|0),G=c,I=I+(S=n[F+164>>2])|0,M=c=c+n[F+160>>2]|0,c=jg(c^X,(k=U)^(U=c>>>0<G>>>0?I+1|0:I),32),I=(I=_)+(_=l)|0,(G=c+Y|0)>>>0<c>>>0&&(I=I+1|0),k=I,N=jg(G^x,I^N,24),x=I=l,Y=I,I=U+tA|0,(U=M+Z|0)>>>0<Z>>>0&&(I=I+1|0),M=U,I=I+Y|0,gA=U=U+N|0,z=jg(c^U,_^(M=U>>>0<M>>>0?I+1|0:I),16),Y=I=l,n[p+120>>2]=z,n[p+124>>2]=I,I=I+k|0,(c=G+z|0)>>>0<G>>>0&&(I=I+1|0),G=c,k=I,p=jg(c^N,I^x,63),U=l,x=f,_=w,c=L,I=m+rA|0,(L=(w=aA)+wA|0)>>>0<w>>>0&&(I=I+1|0),I=I+f|0,f=jg(_^(Z=w=(S=c)+L|0),(w=w>>>0<L>>>0?I+1|0:I)^q,32),m=c,I=(c=l)+s|0,(L=f+K|0)>>>0<f>>>0&&(I=I+1|0),N=K=jg(m^(s=L),I^x,24),_=L=l,m=I,S=f,I=w+B|0,(w=(f=eA)+Z|0)>>>0<f>>>0&&(I=I+1|0),I=I+L|0,K=f=w+K|0,f=jg(S^f,(x=f>>>0<w>>>0?I+1|0:I)^c,16),I=(I=m)+(m=l)|0,(s=(c=f)+s|0)>>>0<c>>>0&&(I=I+1|0),Z=s,c=I,s=jg(s^N,I^_,63),w=l,L=u,N=t,_=u,I=b+e|0,(b=(u=CA)+cA|0)>>>0<u>>>0&&(I=I+1|0),I=I+t|0,X=u=_+b|0,_=jg(u^T,(t=u>>>0<b>>>0?I+1|0:I)^P,32),S=L,I=QA+(u=l)|0,(L=_+IA|0)>>>0<IA>>>0&&(I=I+1|0),b=I,q=N=jg(S^L,I^N,24),S=I=l,P=I,T=N,I=t+Q|0,(N=(t=O)+X|0)>>>0<t>>>0&&(I=I+1|0),I=I+P|0,P=t=T+N|0,W=jg(t^_,(N=t>>>0<N>>>0?I+1|0:I)^u,16),I=b+(_=l)|0,(t=L+W|0)>>>0<L>>>0&&(I=I+1|0),b=t,t=I,u=jg(b^q,I^S,63),L=l,q=h,I=h+g|0,(h=(X=y)+(y=BA)|0)>>>0<y>>>0&&(I=I+1|0),I=I+d|0,h=I=(y=h+H|0)>>>0<H>>>0?I+1|0:I,S=jg(y^AA,I^v,32),H=t,I=V+(t=l)|0,(v=J+S|0)>>>0<J>>>0&&(I=I+1|0),d=I,q=J=jg(v^X,I^q,24),IA=I=l,I=I+h|0,(h=y+J|0)>>>0<y>>>0&&(I=I+1|0),I=I+(X=n[F+204>>2])|0,J=y=h+n[F+200>>2]|0,AA=jg(y^S,(X=y>>>0<h>>>0?I+1|0:I)^t,16),y=q,I=d+(q=l)|0,(t=v+AA|0)>>>0<v>>>0&&(I=I+1|0),h=t,v=I,d=jg(y^t,I^IA,63),S=I=l,t=I,V=f,I=M+EA|0,(y=(f=nA)+gA|0)>>>0<f>>>0&&(I=I+1|0),I=I+t|0,M=f=y+d|0,f=jg(V^f,(y=f>>>0<y>>>0?I+1|0:I)^m,32),t=F,I=(I=H)+(H=l)|0,(m=f+b|0)>>>0<f>>>0&&(I=I+1|0),b=m,m=I,V=S=jg(d^b,S^I,24),T=I=l,d=I,IA=f,I=y+B|0,(y=(f=eA)+M|0)>>>0<f>>>0&&(I=I+1|0),I=I+d|0,d=f=y+S|0,IA=jg(IA^f,(S=H)^(H=f>>>0<y>>>0?I+1|0:I),16),I=m+(M=l)|0,(f=b+IA|0)>>>0<b>>>0&&(I=I+1|0),b=f,m=I,f=jg(f^V,I^T,63),y=I=l,n[t+32>>2]=f,n[t+36>>2]=I,S=U,I=U+g|0,(U=(t=p)+(p=BA)|0)>>>0<p>>>0&&(I=I+1|0),I=I+x|0,K=jg((x=p=U+K|0)^W,(p=p>>>0<K>>>0?I+1|0:I)^_,32),_=t,I=v+(t=l)|0,(U=h+K|0)>>>0<h>>>0&&(I=I+1|0),h=U,U=I,S=_=jg(_^h,I^S,24),V=I=l,v=I,W=K,I=p+e|0,(K=(p=CA)+x|0)>>>0<p>>>0&&(I=I+1|0),I=I+v|0,T=p=K+_|0,W=jg(W^p,(v=p>>>0<K>>>0?I+1|0:I)^t,16),I=U+(K=l)|0,(t=h+W|0)>>>0<h>>>0&&(I=I+1|0),U=t,x=I,h=jg(t^S,I^V,63),p=l,_=w,I=w+Q|0,(w=(t=s)+(s=O)|0)>>>0<s>>>0&&(I=I+1|0),I=I+N|0,w=I=(s=w+P|0)>>>0<P>>>0?I+1|0:I,q=jg(s^AA,I^q,32),S=t,I=k+(P=l)|0,(t=G+q|0)>>>0<G>>>0&&(I=I+1|0),G=t,k=I,N=t=jg(S^t,I^_,24),_=I=l,S=q,I=w+I|0,(t=t+s|0)>>>0<s>>>0&&(I=I+1|0),s=t,I=I+(AA=n[F+236>>2])|0,q=t=t+n[F+232>>2]|0,V=jg(S^t,(w=P)^(P=t>>>0<s>>>0?I+1|0:I),16),w=N,I=k+(N=l)|0,(t=G+V|0)>>>0<G>>>0&&(I=I+1|0),G=t,s=I,w=jg(w^t,I^_,63),t=l,k=u,S=c,I=X+(_=L)|0,(c=u+J|0)>>>0<J>>>0&&(I=I+1|0),u=c,I=I+(AA=n[F+164>>2])|0,J=c=c+n[F+160>>2]|0,c=jg(c^z,(u=c>>>0<u>>>0?I+1|0:I)^Y,32),X=k,I=(L=l)+S|0,(k=c+Z|0)>>>0<c>>>0&&(I=I+1|0),Y=k,k=I,X=_=jg(X^Y,I^_,24),S=I=l,Z=I,z=c,I=u+i|0,(u=(c=R)+J|0)>>>0<c>>>0&&(I=I+1|0),I=I+Z|0,gA=c=u+_|0,z=jg(z^c,(Z=c>>>0<u>>>0?I+1|0:I)^L,16),I=k+(J=l)|0,(c=Y+z|0)>>>0<Y>>>0&&(I=I+1|0),k=c,c=I,u=jg(k^X,I^S,63),L=l,Y=F,_=h,X=p,S=s,QA=z,I=p+H|0,(s=h+d|0)>>>0<d>>>0&&(I=I+1|0),h=s,I=I+(AA=n[F+132>>2])|0,z=s=s+n[F+128>>2]|0,s=jg(QA^s,(h=s>>>0<h>>>0?I+1|0:I)^J,32),d=_,I=(_=l)+S|0,(H=s+G|0)>>>0<s>>>0&&(I=I+1|0),p=H,H=I,J=jg(d^p,I^X,24),G=I=l,d=I,I=h+rA|0,(X=(h=aA)+z|0)>>>0<h>>>0&&(I=I+1|0),I=I+d|0,QA=h=X+J|0,AA=jg(s^h,_^(d=h>>>0<X>>>0?I+1|0:I),16),s=I=l,n[Y+120>>2]=AA,n[Y+124>>2]=I,I=I+H|0,(h=p+AA|0)>>>0<p>>>0&&(I=I+1|0),H=h,p=G,G=I,h=jg(h^J,p^I,63),p=l,Y=w,J=t,_=c,S=w,I=v+C|0,(w=(c=$)+T|0)>>>0<c>>>0&&(I=I+1|0),I=I+t|0,X=c=S+w|0,c=jg(c^IA,(w=c>>>0<w>>>0?I+1|0:I)^M,32),S=Y,I=(Y=l)+_|0,(k=(t=c)+k|0)>>>0<t>>>0&&(I=I+1|0),v=I,M=t=jg(S^k,I^J,24),J=I=l,z=c,I=w+I|0,(c=t+X|0)>>>0<t>>>0&&(I=I+1|0),I=I+(S=n[F+156>>2])|0,_=t=c+n[F+152>>2]|0,z=jg(z^t,(X=t>>>0<c>>>0?I+1|0:I)^Y,16),I=v+(Y=l)|0,(t=k+z|0)>>>0<k>>>0&&(I=I+1|0),k=t,v=I,c=jg(t^M,I^J,63),w=l,I=P+(M=L)|0,(u=q+(t=u)|0)>>>0<q>>>0&&(I=I+1|0),L=u,I=I+(J=n[F+204>>2])|0,L=I=(u=u+n[F+200>>2]|0)>>>0<L>>>0?I+1|0:I,J=jg(u^W,I^K,32),S=t,I=m+(P=l)|0,(t=b+J|0)>>>0<b>>>0&&(I=I+1|0),b=t,m=I,K=t=jg(S^t,I^M,24),M=I=l,q=J,I=L+I|0,(t=t+u|0)>>>0<u>>>0&&(I=I+1|0),u=t,I=I+(S=n[F+148>>2])|0,J=t=t+n[F+144>>2]|0,W=jg(q^t,(S=P)^(P=t>>>0<u>>>0?I+1|0:I),16),u=K,I=m+(K=l)|0,(t=b+W|0)>>>0<b>>>0&&(I=I+1|0),b=I,u=jg(u^t,I^M,63),L=l,m=f,M=y,I=y+Z|0,(y=f+gA|0)>>>0<f>>>0&&(I=I+1|0),I=I+(q=n[F+196>>2])|0,q=f=y+n[F+192>>2]|0,N=jg(f^V,(y=f>>>0<y>>>0?I+1|0:I)^N,32),S=m,I=x+(m=l)|0,(f=U+N|0)>>>0<U>>>0&&(I=I+1|0),U=f,M=f=jg(S^f,I^M,24),Z=I,V=n[F+220>>2],S=N,I=(x=l)+y|0,(y=f+q|0)>>>0<f>>>0&&(I=I+1|0),I=I+(IA=V)|0,q=f=(N=n[F+216>>2])+y|0,y=jg(S^f,(T=m)^(m=f>>>0<y>>>0?I+1|0:I),16),S=M,I=(M=l)+Z|0,(U=(f=y)+U|0)>>>0<f>>>0&&(I=I+1|0),f=x,x=I,Z=f=jg(S^U,f^I,63),S=I=l,I=d+I|0,(d=f+QA|0)>>>0<f>>>0&&(I=I+1|0),I=I+(T=n[F+236>>2])|0,T=f=d+n[F+232>>2]|0,IA=jg(f^z,(IA=Y)^(Y=f>>>0<d>>>0?I+1|0:I),32),I=b+(d=l)|0,(f=t+IA|0)>>>0<t>>>0&&(I=I+1|0),b=f,t=f^Z,Z=I,f=jg(t,I^S,24),t=F,S=f,z=I=l,I=Y+I|0,(Y=f+T|0)>>>0<f>>>0&&(I=I+1|0),I=I+V|0,V=f=Y+N|0,IA=jg(f^IA,(Y=d)^(d=f>>>0<N>>>0?I+1|0:I),16),I=Z+(N=l)|0,(f=b+IA|0)>>>0<b>>>0&&(I=I+1|0),b=f,Z=I,f=jg(f^S,I^z,63),Y=I=l,n[t+32>>2]=f,n[t+36>>2]=I,S=p,I=p+rA|0,(p=(t=h)+(h=aA)|0)>>>0<h>>>0&&(I=I+1|0),I=I+X|0,_=jg((X=h=p+_|0)^W,(h=h>>>0<_>>>0?I+1|0:I)^K,32),K=t,I=x+(t=l)|0,(p=U+_|0)>>>0<U>>>0&&(I=I+1|0),U=I,z=x=jg(K^p,I^S,24),W=I=l,K=I,S=x,I=h+Q|0,(x=(h=O)+X|0)>>>0<h>>>0&&(I=I+1|0),I=I+K|0,T=h=S+x|0,S=jg(h^_,(K=h>>>0<x>>>0?I+1|0:I)^t,16),I=U+(x=l)|0,(t=p+S|0)>>>0<p>>>0&&(I=I+1|0),_=t,X=I,h=jg(t^z,I^W,63),t=l,U=w,z=y,I=w+EA|0,(y=(p=c)+(c=nA)|0)>>>0<c>>>0&&(I=I+1|0),I=I+P|0,I=(c=y+J|0)>>>0<J>>>0?I+1|0:I,J=c,c=I,P=jg(z^J,I^M,32),I=G+(y=l)|0,(w=H+P|0)>>>0<H>>>0&&(I=I+1|0),H=w^p,p=I,M=H=jg(H,I^U,24),W=I=l,U=I,G=H,I=c+g|0,(H=(c=BA)+J|0)>>>0<c>>>0&&(I=I+1|0),I=I+U|0,I=(c=G+H|0)>>>0<H>>>0?I+1|0:I,H=c,G=I,z=jg(c^P,I^y,16),I=p+(P=l)|0,(c=w+z|0)>>>0<w>>>0&&(I=I+1|0),p=c,U=I,y=jg(c^M,I^W,63),c=l,I=m+(M=L)|0,(u=q+(w=u)|0)>>>0<q>>>0&&(I=I+1|0),L=u,I=I+(J=n[F+156>>2])|0,L=I=(u=u+n[F+152>>2]|0)>>>0<L>>>0?I+1|0:I,J=jg(u^AA,I^s,32),m=w,I=v+(w=l)|0,(s=k+J|0)>>>0<k>>>0&&(I=I+1|0),k=s,v=I,m=s=jg(m^s,I^M,24),M=I=l,I=L+I|0,(s=s+u|0)>>>0<u>>>0&&(I=I+1|0),u=s,I=I+(AA=n[F+204>>2])|0,gA=s=s+n[F+200>>2]|0,q=jg(q=s^J,(J=s>>>0<u>>>0?I+1|0:I)^w,16),I=v+(L=l)|0,(s=k+q|0)>>>0<k>>>0&&(I=I+1|0),k=s,v=I,s=jg(s^m,I^M,63),u=l,w=F,m=h,M=t,W=h,I=d+B|0,(d=(h=eA)+V|0)>>>0<h>>>0&&(I=I+1|0),I=I+t|0,d=jg((t=h=W+d|0)^q,(h=L)^(L=t>>>0<d>>>0?I+1|0:I),32),I=U+(q=l)|0,(h=p+d|0)>>>0<p>>>0&&(I=I+1|0),p=I,M=jg(h^m,I^M,24),I=L+(U=l)|0,(L=t+M|0)>>>0<t>>>0&&(I=I+1|0),t=(t=L)+(L=n[F+128>>2])|0,I=n[F+132>>2]+I|0,V=t,AA=jg(d^t,q^(m=t>>>0<L>>>0?I+1|0:I),16),L=I=l,n[w+120>>2]=AA,n[w+124>>2]=I,I=p+I|0,(t=h+AA|0)>>>0<h>>>0&&(I=I+1|0),d=t,t^=M,M=I,w=jg(t,I^U,63),h=l,p=c,t=y,I=K+e|0,(U=(y=CA)+T|0)>>>0<y>>>0&&(I=I+1|0),I=I+c|0,q=y=(q=t)+U|0,K=jg(y^IA,(c=y>>>0<U>>>0?I+1|0:I)^N,32),N=t,I=v+(y=l)|0,(t=k+K|0)>>>0<k>>>0&&(I=I+1|0),U=t,k=p,p=I,k=t=jg(N^t,k^I,24),v=I=l,T=K,I=c+I|0,(c=t+q|0)>>>0<t>>>0&&(I=I+1|0),I=I+(W=n[F+164>>2])|0,K=t=c+n[F+160>>2]|0,c=jg(T^t,(N=t>>>0<c>>>0?I+1|0:I)^y,16),q=k,I=p+(y=l)|0,(t=c+U|0)>>>0<U>>>0&&(I=I+1|0),k=t,p=v,v=I,p=jg(q^t,p^I,63),U=l,q=u,I=u+G|0,(s=H+(t=s)|0)>>>0<H>>>0&&(I=I+1|0),u=s,I=I+(W=n[F+196>>2])|0,x=jg((T=S)^(S=s=s+n[F+192>>2]|0),(s=s>>>0<u>>>0?I+1|0:I)^x,32),G=t,I=Z+(t=l)|0,(u=b+x|0)>>>0<b>>>0&&(I=I+1|0),H=I,Z=b=jg(G^u,I^q,24),q=I=l,G=I,T=b,I=s+C|0,(b=(s=$)+S|0)>>>0<s>>>0&&(I=I+1|0),I=I+G|0,G=s=T+b|0,W=jg(s^x,(b=s>>>0<b>>>0?I+1|0:I)^t,16),I=H+(x=l)|0,(t=u+W|0)>>>0<u>>>0&&(I=I+1|0),H=t,t=I,s=jg(H^Z,I^q,63),u=l,Z=f,q=Y,I=Y+J|0,(Y=f+gA|0)>>>0<f>>>0&&(I=I+1|0),I=I+(S=n[F+148>>2])|0,S=jg((T=z)^(z=f=Y+n[F+144>>2]|0),(f=f>>>0<Y>>>0?I+1|0:I)^P,32),Y=t,I=X+(t=l)|0,(P=_+S|0)>>>0<_>>>0&&(I=I+1|0),_=P^Z,Z=I,X=_=jg(_,I^q,24),q=I=l,J=I,T=_,I=f+i|0,(_=(f=R)+z|0)>>>0<f>>>0&&(I=I+1|0),I=I+J|0,J=f=T+_|0,IA=jg(f^S,(_=f>>>0<_>>>0?I+1|0:I)^t,16),t=X,I=Z+(X=l)|0,(f=P+IA|0)>>>0<P>>>0&&(I=I+1|0),P=f,Z=I,q=jg(t^f,I^q,63),S=I=l,f=I,T=c,I=m+C|0,(c=(t=$)+V|0)>>>0<t>>>0&&(I=I+1|0),I=I+f|0,z=t=c+q|0,f=jg(T^t,(c=t>>>0<c>>>0?I+1|0:I)^y,32),t=F,I=(y=l)+Y|0,(H=f+H|0)>>>0<f>>>0&&(I=I+1|0),Y=H,H=I,S=q=jg(q^Y,S^I,24),T=I=l,m=I,V=f,I=c+e|0,(c=(f=CA)+z|0)>>>0<f>>>0&&(I=I+1|0),I=I+m|0,cA=f=c+q|0,V=jg(V^f,(m=f>>>0<c>>>0?I+1|0:I)^y,16),c=S,I=H+(q=l)|0,(f=Y+V|0)>>>0<Y>>>0&&(I=I+1|0),S=f,z=I,y=jg(c^f,I^T,63),Y=I=l,n[t+32>>2]=y,n[t+36>>2]=I,I=Q+(t=h)|0,(w=(f=w)+(c=O)|0)>>>0<c>>>0&&(I=I+1|0),I=I+N|0,w=I=(c=w+K|0)>>>0<K>>>0?I+1|0:I,x=jg(c^W,I^x,32),N=f,I=Z+(h=l)|0,(f=P+x|0)>>>0<P>>>0&&(I=I+1|0),H=f,P=t,t=I,P=f=jg(N^f,P^I,24),K=I=l,I=w+I|0,(f=c+f|0)>>>0<c>>>0&&(I=I+1|0),I=I+(N=n[F+204>>2])|0,W=f=(c=f)+n[F+200>>2]|0,gA=jg(w=f^x,(x=f>>>0<c>>>0?I+1|0:I)^h,16),c=P,I=t+(P=l)|0,(f=H+gA|0)>>>0<H>>>0&&(I=I+1|0),Z=f,t=K,K=I,w=jg(c^f,t^I,63),f=l,I=b+(c=U)|0,(h=G+(t=p)|0)>>>0<G>>>0&&(I=I+1|0),p=h,I=I+(H=n[F+220>>2])|0,p=I=(h=h+n[F+216>>2]|0)>>>0<p>>>0?I+1|0:I,N=jg(h^IA,I^X,32),G=t,I=M+(U=l)|0,(t=N+d|0)>>>0<d>>>0&&(I=I+1|0),H=t,b=c,c=I,G=t=jg(G^t,b^I,24),b=I=l,I=p+I|0,(t=t+h|0)>>>0<h>>>0&&(I=I+1|0),h=t,I=I+(M=n[F+156>>2])|0,IA=t=t+n[F+152>>2]|0,QA=jg(t^N,(d=t>>>0<h>>>0?I+1|0:I)^U,16),I=c+(M=l)|0,(t=H+QA|0)>>>0<H>>>0&&(I=I+1|0),p=t,U=I,t=jg(t^G,I^b,63),h=l,H=u,I=u+_|0,(s=J+(c=s)|0)>>>0<J>>>0&&(I=I+1|0),u=s,I=I+(G=n[F+132>>2])|0,u=I=(s=s+n[F+128>>2]|0)>>>0<u>>>0?I+1|0:I,N=jg(s^AA,I^L,32),b=c,I=v+(L=l)|0,(c=k+N|0)>>>0<k>>>0&&(I=I+1|0),G=c,k=H,H=I,k=c=jg(b^c,k^I,24),b=I=l,I=u+I|0,(c=c+s|0)>>>0<s>>>0&&(I=I+1|0),s=c,I=I+(J=n[F+196>>2])|0,v=c=c+n[F+192>>2]|0,J=jg(u=c^N,(N=c>>>0<s>>>0?I+1|0:I)^L,16),I=H+(L=l)|0,(c=G+J|0)>>>0<G>>>0&&(I=I+1|0),H=c,G=I,u=jg(c^k,I^b,63),c=l,s=F,k=w,b=f,_=w,I=m+EA|0,(m=(w=nA)+cA|0)>>>0<w>>>0&&(I=I+1|0),I=I+f|0,_=jg((f=w=_+m|0)^J,(w=L)^(L=f>>>0<m>>>0?I+1|0:I),32),I=U+(AA=l)|0,(w=p+_|0)>>>0<p>>>0&&(I=I+1|0),p=w,U=I,X=jg(w^k,I^b,24),k=F,w=n[F+144>>2],I=L+(b=l)|0,(L=f+X|0)>>>0<f>>>0&&(I=I+1|0),L=(f=w)+L|0,I=(m=n[k+148>>2])+I|0,T=jg(k=_^(J=L),AA^(_=J>>>0<f>>>0?I+1|0:I),16),L=I=l,n[s+120>>2]=T,n[s+124>>2]=I,k=X,I=U+I|0,(f=p+T|0)>>>0<p>>>0&&(I=I+1|0),X=f,s=I,p=jg(k^f,I^b,63),U=l,f=t,k=h,I=h+x|0,(h=t+W|0)>>>0<t>>>0&&(I=I+1|0),I=I+(b=n[F+236>>2])|0,b=jg((x=t=h+n[F+232>>2]|0)^V,(t=t>>>0<h>>>0?I+1|0:I)^q,32),q=f,I=G+(f=l)|0,(h=b+H|0)>>>0<H>>>0&&(I=I+1|0),H=I,q=k=jg(q^h,I^k,24),W=I=l,G=I,V=b,b=k,I=t+rA|0,(k=(t=aA)+x|0)>>>0<t>>>0&&(I=I+1|0),I=I+G|0,b=t=b+k|0,t=jg(V^t,(x=t>>>0<k>>>0?I+1|0:I)^f,16),G=q,I=H+(q=l)|0,(f=t+h|0)>>>0<h>>>0&&(I=I+1|0),AA=f,H=W,W=I,h=jg(G^f,H^I,63),H=l,G=c,f=u,I=d+g|0,(k=(u=BA)+IA|0)>>>0<u>>>0&&(I=I+1|0),I=I+c|0,V=jg((c=u=(V=f)+k|0)^gA,(u=c>>>0<k>>>0?I+1|0:I)^P,32),P=f,I=z+(k=l)|0,(f=S+V|0)>>>0<S>>>0&&(I=I+1|0),d=f,P=f=jg(P^f,I^G,24),S=I,z=I=n[F+164>>2],IA=I,I=u+(G=l)|0,(f=c+f|0)>>>0<c>>>0&&(I=I+1|0),I=I+IA|0,IA=f=(cA=n[F+160>>2])+(c=f)|0,u=jg(u=f^V,(V=f>>>0<c>>>0?I+1|0:I)^k,16),k=P,I=(P=l)+S|0,(c=(f=u)+d|0)>>>0<f>>>0&&(I=I+1|0),f=I,G=jg(k^c,I^G,63),k=l,S=Y,I=Y+i|0,(Y=(d=y)+(y=R)|0)>>>0<y>>>0&&(I=I+1|0),I=I+N|0,M=jg((N=y=Y+v|0)^QA,(y=y>>>0<v>>>0?I+1|0:I)^M,32),I=K+(Y=l)|0,(v=M+Z|0)>>>0<Z>>>0&&(I=I+1|0),K=v^d,d=I,gA=Z=jg(K,I^S,24),QA=I=l,K=I,S=M,I=y+B|0,(M=(y=eA)+N|0)>>>0<y>>>0&&(I=I+1|0),I=I+K|0,K=y=M+Z|0,S=jg(S^y,(N=Y)^(Y=y>>>0<M>>>0?I+1|0:I),16),I=d+(M=l)|0,(y=v+S|0)>>>0<v>>>0&&(I=I+1|0),v=I,gA=jg(y^gA,I^QA,63),QA=I=l,d=I,N=t,I=_+i|0,(R=R+J|0)>>>0<J>>>0&&(I=I+1|0),I=I+d|0,d=R=(t=R)+gA|0,R=jg(N^R,(Z=R>>>0<t>>>0?I+1|0:I)^q,32),I=(N=l)+f|0,(t=(f=R)+c|0)>>>0<f>>>0&&(I=I+1|0),c=t,J=I,f=jg(gA^t,QA^I,24),t=F,_=f,q=I=l,gA=R,I=Z+I|0,(R=f+d|0)>>>0<d>>>0&&(I=I+1|0),I=I+m|0,QA=R=(f=R)+w|0,gA=jg(gA^R,(m=R>>>0<f>>>0?I+1|0:I)^N,16),I=J+(d=l)|0,(R=c+gA|0)>>>0<c>>>0&&(I=I+1|0),Z=R,c=I,R=jg(R^_,I^q,63),w=I=l,n[t+32>>2]=R,n[t+36>>2]=I,_=u,I=x+(t=U)|0,(u=b+(f=p)|0)>>>0<b>>>0&&(I=I+1|0),p=u,I=I+(N=n[F+196>>2])|0,P=jg(_^(x=u=u+n[F+192>>2]|0),(u=u>>>0<p>>>0?I+1|0:I)^P,32),U=f,I=v+(p=l)|0,(f=y+P|0)>>>0<y>>>0&&(I=I+1|0),y=f,v=t,t=I,U=f=jg(U^f,v^I,24),b=I=l,I=u+I|0,(u=f+x|0)>>>0<f>>>0&&(I=I+1|0),I=I+z|0,q=f=u+cA|0,z=jg(f^P,(v=f>>>0<u>>>0?I+1|0:I)^p,16),I=t+(P=l)|0,(f=y+z|0)>>>0<y>>>0&&(I=I+1|0),x=f,y=I,u=jg(f^U,I^b,63),f=l,p=h,I=rA+(U=H)|0,(h=(t=aA)+h|0)>>>0<t>>>0&&(I=I+1|0),I=I+V|0,b=t=h+IA|0,t=jg(t^S,(h=t>>>0<IA>>>0?I+1|0:I)^M,32),_=p,I=(I=s)+(s=l)|0,(H=t+X|0)>>>0<t>>>0&&(I=I+1|0),p=H,H=U,U=I,N=M=jg(_^p,H^I,24),J=I=l,H=I,_=t,I=h+C|0,(h=(t=$)+b|0)>>>0<t>>>0&&(I=I+1|0),I=I+H|0,H=t=h+M|0,S=jg(_^t,(b=t>>>0<h>>>0?I+1|0:I)^s,16),I=U+(M=l)|0,(t=p+S|0)>>>0<p>>>0&&(I=I+1|0),U=t,s=I,t=jg(t^N,I^J,63),h=l,N=k,I=k+g|0,(k=(p=G)+(G=BA)|0)>>>0<G>>>0&&(I=I+1|0),I=I+Y|0,J=G=k+K|0,K=jg(G^T,(k=L)^(L=G>>>0<K>>>0?I+1|0:I),32),k=p,I=W+(p=l)|0,(Y=K+AA|0)>>>0<AA>>>0&&(I=I+1|0),G=I,_=N=jg(k^Y,I^N,24),AA=I=l,k=I,X=K,I=L+B|0,(K=(L=eA)+J|0)>>>0<L>>>0&&(I=I+1|0),I=I+k|0,IA=L=K+N|0,X=jg(X^L,(k=L>>>0<K>>>0?I+1|0:I)^p,16),I=G+(K=l)|0,(L=Y+X|0)>>>0<Y>>>0&&(I=I+1|0),N=I,L=jg((G=L)^_,I^AA,63),p=l,Y=F,J=u,_=f,V=u,I=m+e|0,(m=(u=CA)+QA|0)>>>0<u>>>0&&(I=I+1|0),I=I+f|0,m=I=(u=V+m|0)>>>0<m>>>0?I+1|0:I,f=jg(u^X,I^K,32),I=(X=l)+s|0,(U=f+U|0)>>>0<f>>>0&&(I=I+1|0),AA=U,U=I,J=jg(AA^J,I^_,24),I=m+(K=l)|0,(s=u+J|0)>>>0<u>>>0&&(I=I+1|0),s=(u=n[F+216>>2])+s|0,I=n[F+220>>2]+I|0,V=s,s=jg(f^s,X^(m=s>>>0<u>>>0?I+1|0:I),16),u=I=l,n[Y+120>>2]=s,n[Y+124>>2]=I,_=J,I=I+U|0,(Y=(f=s)+AA|0)>>>0<f>>>0&&(I=I+1|0),J=Y,f=K,K=I,f=jg(_^Y,f^I,63),Y=l,U=t,_=h,I=h+v|0,(h=t+q|0)>>>0<t>>>0&&(I=I+1|0),I=I+(X=n[F+204>>2])|0,d=jg((X=t=h+n[F+200>>2]|0)^gA,(t=t>>>0<h>>>0?I+1|0:I)^d,32),v=U,I=N+(h=l)|0,(U=G+d|0)>>>0<G>>>0&&(I=I+1|0),G=I,_=N=jg(v^U,I^_,24),q=I=l,v=I,W=d,I=t+Q|0,(d=(t=O)+X|0)>>>0<t>>>0&&(I=I+1|0),I=I+v|0,T=t=d+N|0,AA=jg(W^t,(v=t>>>0<d>>>0?I+1|0:I)^h,16),I=G+(d=l)|0,(t=U+AA|0)>>>0<U>>>0&&(I=I+1|0),G=t,t=I,h=jg(G^_,I^q,63),U=l,_=p,X=c,q=I=n[F+156>>2],c=I,I=p+b|0,(L=H+(N=L)|0)>>>0<H>>>0&&(I=I+1|0),I=I+c|0,c=jg((W=z)^(z=L=(gA=n[F+152>>2])+(p=L)|0),(L=L>>>0<p>>>0?I+1|0:I)^P,32),I=(p=l)+X|0,(b=c+Z|0)>>>0<c>>>0&&(I=I+1|0),H=b,b=I,N=Z=jg(H^N,I^_,24),_=I=l,P=I,X=c,I=L+EA|0,(L=(c=nA)+z|0)>>>0<c>>>0&&(I=I+1|0),I=I+P|0,P=c=L+Z|0,W=jg(X^c,(Z=c>>>0<L>>>0?I+1|0:I)^p,16),X=N,I=b+(N=l)|0,(c=H+W|0)>>>0<H>>>0&&(I=I+1|0),p=c,H=I,c=jg(X^c,I^_,63),L=l,_=w,X=y,z=S,I=w+k|0,(w=(b=R)+IA|0)>>>0<b>>>0&&(I=I+1|0),I=I+(y=n[F+236>>2])|0,S=R=w+n[F+232>>2]|0,y=jg(z^R,(w=R>>>0<w>>>0?I+1|0:I)^M,32),R=b,I=(k=l)+X|0,(b=y+x|0)>>>0<y>>>0&&(I=I+1|0),M=R=jg(R^b,I^_,24),_=I,z=n[F+132>>2],QA=y,I=(x=l)+w|0,(w=R+S|0)>>>0<R>>>0&&(I=I+1|0),I=I+(IA=z)|0,X=R=(y=n[F+128>>2])+w|0,w=jg(QA^R,(S=k)^(k=R>>>0<w>>>0?I+1|0:I),16),R=M,I=(M=l)+_|0,(b=w+b|0)>>>0<w>>>0&&(I=I+1|0),_=x,x=I,_=R=jg(R^b,_^I,63),S=I=l,IA=AA,I=m+I|0,(m=R+V|0)>>>0<R>>>0&&(I=I+1|0),I=I+z|0,AA=R=y+m|0,z=jg(IA^R,(y=R>>>0<y>>>0?I+1|0:I)^d,32),R=F,I=H+(m=l)|0,(H=p+z|0)>>>0<p>>>0&&(I=I+1|0),p=H,H=I,S=_=jg(p^_,I^S,24),V=I=l,d=I,IA=_,I=y+g|0,(_=(y=BA)+AA|0)>>>0<y>>>0&&(I=I+1|0),I=I+d|0,d=y=IA+_|0,IA=jg(y^z,(IA=m)^(m=y>>>0<_>>>0?I+1|0:I),16),AA=S,I=H+(_=l)|0,(y=p+IA|0)>>>0<p>>>0&&(I=I+1|0),S=y,z=I,y=jg(AA^y,I^V,63),p=I=l,n[R+32>>2]=y,n[R+36>>2]=I,R=f,H=Y,I=Y+v|0,(Y=f+T|0)>>>0<f>>>0&&(I=I+1|0),I=I+(AA=n[F+148>>2])|0,N=jg((AA=f=Y+n[F+144>>2]|0)^W,(f=f>>>0<Y>>>0?I+1|0:I)^N,32),v=R,I=x+(Y=l)|0,(R=b+N|0)>>>0<b>>>0&&(I=I+1|0),b=R,R=H,H=I,R=jg(v^b,R^I,24),x=I=l,I=f+I|0,(f=(v=R)+AA|0)>>>0<v>>>0&&(I=I+1|0),I=I+q|0,V=R=f+gA|0,q=jg(q=R^N,(N=R>>>0<f>>>0?I+1|0:I)^Y,16),f=v,I=H+(v=l)|0,(R=b+q|0)>>>0<b>>>0&&(I=I+1|0),H=x,x=I,Y=jg(f^(b=R),H^I,63),H=l,R=h,T=w,I=Z+(f=U)|0,(w=h+P|0)>>>0<P>>>0&&(I=I+1|0),I=I+(AA=n[F+164>>2])|0,P=jg(T^(Z=w=(h=w)+n[F+160>>2]|0),(w=w>>>0<h>>>0?I+1|0:I)^M,32),U=R,I=K+(R=l)|0,(h=P+J|0)>>>0<J>>>0&&(I=I+1|0),M=f,f=I,M=K=jg(U^h,M^I,24),J=I=l,U=I,W=P,I=w+B|0,(P=(w=eA)+Z|0)>>>0<w>>>0&&(I=I+1|0),I=I+U|0,T=w=P+K|0,W=jg(W^w,(U=w>>>0<P>>>0?I+1|0:I)^R,16),I=f+(P=l)|0,(R=h+W|0)>>>0<h>>>0&&(I=I+1|0),K=I,R=jg((h=R)^M,I^J,63),w=l,M=c,Z=L,I=L+C|0,(c=(f=$)+c|0)>>>0<f>>>0&&(I=I+1|0),I=I+k|0,k=f=c+X|0,f=jg(f^s,(c=f>>>0<X>>>0?I+1|0:I)^u,32),I=(I=t)+(t=l)|0,(u=f+G|0)>>>0<f>>>0&&(I=I+1|0),s=u,u=I,M=G=jg(s^M,I^Z,24),Z=I=l,L=I,J=f,I=c+rA|0,(c=(f=aA)+k|0)>>>0<f>>>0&&(I=I+1|0),I=I+L|0,G=f=c+G|0,J=jg(J^f,(k=f>>>0<c>>>0?I+1|0:I)^t,16),t=M,I=u+(L=l)|0,(f=s+J|0)>>>0<s>>>0&&(I=I+1|0),M=f,c=I,s=jg(t^f,I^Z,63),f=l,Z=H,I=H+m|0,(Y=d+(u=Y)|0)>>>0<d>>>0&&(I=I+1|0),H=Y,I=I+(X=n[(t=F)+196>>2])|0,I=(Y=Y+n[t+192>>2]|0)>>>0<H>>>0?I+1|0:I,H=L,L=I,d=jg(Y^J,H^I,32),m=u,I=K+(J=l)|0,(u=h+d|0)>>>0<h>>>0&&(I=I+1|0),H=I,K=jg(m^(h=u),I^Z,24),I=L+(m=l)|0,(u=Y+K|0)>>>0<Y>>>0&&(I=I+1|0),u=(L=n[F+200>>2])+u|0,I=n[F+204>>2]+I|0,gA=u,AA=jg(d^u,J^(Y=u>>>0<L>>>0?I+1|0:I),16),u=I=l,n[t+120>>2]=AA,n[t+124>>2]=I,I=I+H|0,(t=h+AA|0)>>>0<h>>>0&&(I=I+1|0),H=t,h=m,m=I,t=jg(t^K,h^I,63),L=l,d=w,K=c,I=w+N|0,(w=(h=R)+V|0)>>>0<h>>>0&&(I=I+1|0),I=I+(c=QA=n[F+212>>2])|0,J=R=(Z=n[F+208>>2])+w|0,c=jg(R^IA,(w=R>>>0<w>>>0?I+1|0:I)^_,32),_=h,I=(h=l)+K|0,(K=c+M|0)>>>0<c>>>0&&(I=I+1|0),R=d,d=I,M=R=jg(_^K,R^I,24),N=I=l,_=c,I=w+I|0,(c=R+J|0)>>>0<R>>>0&&(I=I+1|0),I=I+(X=n[F+220>>2])|0,IA=R=c+n[F+216>>2]|0,c=jg(_^R,(J=R>>>0<c>>>0?I+1|0:I)^h,16),w=M,I=d+(M=l)|0,(R=c+K|0)>>>0<K>>>0&&(I=I+1|0),d=R,K=I,w=jg(w^R,I^N,63),h=l,R=s,N=f,_=q,q=s,I=U+EA|0,(U=(s=nA)+T|0)>>>0<s>>>0&&(I=I+1|0),I=I+f|0,q=s=q+U|0,X=jg(_^s,(f=s>>>0<U>>>0?I+1|0:I)^v,32),_=R,I=z+(s=l)|0,(R=S+X|0)>>>0<S>>>0&&(I=I+1|0),v=I,N=R=jg(_^(U=R),I^N,24),_=I=l,S=X,I=f+I|0,(f=R+q|0)>>>0<R>>>0&&(I=I+1|0),I=I+(z=n[F+236>>2])|0,X=R=f+n[F+232>>2]|0,S=jg(S^R,(q=R>>>0<f>>>0?I+1|0:I)^s,16),s=N,I=v+(N=l)|0,(R=U+S|0)>>>0<U>>>0&&(I=I+1|0),U=I,R=jg(s^(f=R),I^_,63),s=l,_=p,I=p+Q|0,(p=(v=y)+(y=O)|0)>>>0<y>>>0&&(I=I+1|0),I=I+k|0,P=jg((z=y=p+G|0)^W,(y=y>>>0<G>>>0?I+1|0:I)^P,32),I=x+(p=l)|0,(G=b+P|0)>>>0<b>>>0&&(I=I+1|0),k=I,x=v=jg(G^v,I^_,24),W=I=l,b=I,_=v,I=y+e|0,(v=(y=CA)+z|0)>>>0<y>>>0&&(I=I+1|0),I=I+b|0,_=jg((z=y=_+v|0)^P,(y=y>>>0<v>>>0?I+1|0:I)^p,16),I=k+(p=l)|0,(k=G+_|0)>>>0<G>>>0&&(I=I+1|0),G=k,k=I,v=jg(G^x,I^W,63),P=I=l,b=I,x=c,I=Y+Q|0,(c=O+gA|0)>>>0<O>>>0&&(I=I+1|0),I=I+b|0,W=O=c+v|0,x=jg(x^O,(c=O>>>0<c>>>0?I+1|0:I)^M,32),I=U+(Y=l)|0,(O=f+x|0)>>>0<f>>>0&&(I=I+1|0),b=I,O=jg(v^(U=O),P^I,24),f=F,P=I=l,I=c+I|0,(c=(v=O)+W|0)>>>0<v>>>0&&(I=I+1|0),I=I+QA|0,W=O=c+Z|0,M=jg(O^x,(c=Y)^(Y=O>>>0<Z>>>0?I+1|0:I),16),c=v,I=b+(v=l)|0,(O=U+M|0)>>>0<U>>>0&&(I=I+1|0),b=I,O=jg(c^(U=O),I^P,63),c=I=l,n[f+32>>2]=O,n[f+36>>2]=I,f=t,I=(P=L)+J|0,(L=t+IA|0)>>>0<t>>>0&&(I=I+1|0),I=I+(x=n[F+164>>2])|0,Z=jg((J=t=L+n[F+160>>2]|0)^S,(t=t>>>0<L>>>0?I+1|0:I)^N,32),S=f,I=k+(L=l)|0,(f=G+Z|0)>>>0<G>>>0&&(I=I+1|0),G=f,k=I,P=f=jg(S^f,I^P,24),x=I=l,I=t+I|0,(t=f+J|0)>>>0<f>>>0&&(I=I+1|0),I=I+(S=n[F+196>>2])|0,S=f=t+n[F+192>>2]|0,Z=jg(f^Z,(N=L)^(L=f>>>0<t>>>0?I+1|0:I),16),I=k+(IA=l)|0,(f=G+Z|0)>>>0<G>>>0&&(I=I+1|0),G=f,k=I,x=jg(f^P,I^x,63),f=l,P=h,I=h+q|0,(w=X+(t=w)|0)>>>0<X>>>0&&(I=I+1|0),I=I+(N=n[F+204>>2])|0,N=jg((J=w=(h=w)+n[F+200>>2]|0)^_,(w=w>>>0<h>>>0?I+1|0:I)^p,32),_=t,I=m+(t=l)|0,(h=H+N|0)>>>0<H>>>0&&(I=I+1|0),p=I,P=m=jg(_^h,I^P,24),_=I=l,H=I,I=w+e|0,(w=J+CA|0)>>>0<CA>>>0&&(I=I+1|0),I=I+H|0,N=jg((X=CA=w+m|0)^N,(w=X>>>0<w>>>0?I+1|0:I)^t,16),I=p+(H=l)|0,(CA=h+N|0)>>>0<h>>>0&&(I=I+1|0),p=I,CA=jg((h=CA)^P,I^_,63),t=l,m=R,P=s,I=y+s|0,(s=R+z|0)>>>0<R>>>0&&(I=I+1|0),I=I+(J=n[F+236>>2])|0,J=jg((_=R=s+n[F+232>>2]|0)^AA,(R=R>>>0<s>>>0?I+1|0:I)^u,32),I=K+(s=l)|0,(y=d+J|0)>>>0<d>>>0&&(I=I+1|0),u=I,P=d=jg(y^m,I^P,24),q=I=l,m=I,I=R+C|0,(R=_+$|0)>>>0<$>>>0&&(I=I+1|0),I=I+m|0,K=jg((m=$=R+d|0)^J,(d=m>>>0<R>>>0?I+1|0:I)^s,16),I=u+(J=l)|0,($=y+K|0)>>>0<y>>>0&&(I=I+1|0),u=I,R=jg((y=$)^P,I^q,63),s=l,$=F,I=Y+g|0,(Y=W+BA|0)>>>0<BA>>>0&&(I=I+1|0),I=I+(P=f)|0,_=EA,EA=I=(BA=Y+x|0)>>>0<Y>>>0?I+1|0:I,I=_+I|0,(Y=BA+nA|0)>>>0<BA>>>0&&(I=I+1|0),nA=I,EA=jg(K^BA,J^EA,32),I=p+(P=l)|0,(BA=h+EA|0)>>>0<h>>>0&&(I=I+1|0),h=f,f=I,BA=jg((p=BA)^x,h^I,24),I=(K=l)+nA|0,(h=Y+BA|0)>>>0<BA>>>0&&(I=I+1|0),n[$>>2]=h,n[$+4>>2]=I,nA=I,$=jg(h^EA,I^P,16),I=l,n[F+120>>2]=$,n[F+124>>2]=I,I=f+I|0,(f=p+$|0)>>>0<$>>>0&&(I=I+1|0),n[F+80>>2]=f,n[F+84>>2]=I,DA=F,uA=jg(f^BA,I^K,63),n[DA+40>>2]=uA,n[F+44>>2]=l,BA=F,f=t,I=t+L|0,(t=($=CA)+S|0)>>>0<$>>>0&&(I=I+1|0),I=I+(EA=n[F+132>>2])|0,t=I=(CA=t+n[F+128>>2]|0)>>>0<t>>>0?I+1|0:I,EA=jg(CA^M,I^v,32),p=$,I=u+(L=l)|0,($=y+EA|0)>>>0<y>>>0&&(I=I+1|0),y=$,$=I,f=jg(p^y,I^f,24),I=t+(u=l)|0,(t=f+CA|0)>>>0<CA>>>0&&(I=I+1|0),CA=(p=t)+(t=n[F+144>>2])|0,I=n[F+148>>2]+I|0,I=CA>>>0<t>>>0?I+1|0:I,n[BA+8>>2]=CA,n[BA+12>>2]=I,BA=jg(CA^EA,I^L,16),I=l,n[F+96>>2]=BA,n[F+100>>2]=I,I=I+$|0,($=y+BA|0)>>>0<BA>>>0&&(I=I+1|0),n[F+88>>2]=$,n[F+92>>2]=I,DA=F,uA=jg(f^$,I^u,63),n[DA+48>>2]=uA,n[F+52>>2]=l,BA=F,I=s+w|0,(f=R+X|0)>>>0<R>>>0&&(I=I+1|0),I=I+(CA=n[F+220>>2])|0,CA=I=($=f+n[F+216>>2]|0)>>>0<f>>>0?I+1|0:I,I=I+rA|0,(f=$+aA|0)>>>0<$>>>0&&(I=I+1|0),t=f,aA=I,f=jg($^Z,IA^CA,32),u=R,I=b+(R=l)|0,($=f+U|0)>>>0<U>>>0&&(I=I+1|0),CA=I,$=jg(u^(y=$),I^s,24),I=(s=l)+aA|0,(t=t+$|0)>>>0<$>>>0&&(I=I+1|0),n[BA+16>>2]=t,n[BA+20>>2]=I,BA=jg(f^t,I^R,16),I=l,n[F+104>>2]=BA,n[F+108>>2]=I,I=I+CA|0,(CA=y+BA|0)>>>0<BA>>>0&&(I=I+1|0),BA=CA,n[F+64>>2]=BA,n[F+68>>2]=I,DA=F,uA=jg($^BA,I^s,63),n[DA+56>>2]=uA,n[F+60>>2]=l,BA=F,aA=c,I=c+B|0,(CA=($=O)+eA|0)>>>0<$>>>0&&(I=I+1|0),I=I+d|0,CA=I=(O=m+CA|0)>>>0<m>>>0?I+1|0:I,eA=jg(O^N,I^H,32),t=$,I=k+(f=l)|0,($=G+eA|0)>>>0<G>>>0&&(I=I+1|0),c=aA,aA=I,R=jg(t^$,c^I,24),I=CA+(t=l)|0,(CA=R+O|0)>>>0<O>>>0&&(I=I+1|0),O=(c=CA)+(CA=n[F+152>>2])|0,I=n[F+156>>2]+I|0,I=O>>>0<CA>>>0?I+1|0:I,n[BA+24>>2]=O,n[BA+28>>2]=I,O=jg(O^eA,I^f,16),n[F+112>>2]=O,I=l,n[F+116>>2]=I,I=I+aA|0,(aA=$+O|0)>>>0<$>>>0&&(I=I+1|0),$=aA,n[F+72>>2]=$,n[BA+76>>2]=I,DA=F,uA=jg(R^$,I^t,63),n[DA+32>>2]=uA,n[F+36>>2]=l,I=A,BA=n[F+68>>2]^(a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24)^nA,$=n[F+64>>2]^(a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24)^h,E[0|I]=$,E[I+1|0]=$>>>8,E[I+2|0]=$>>>16,E[I+3|0]=$>>>24,E[I+4|0]=BA,E[I+5|0]=BA>>>8,E[I+6|0]=BA>>>16,E[I+7|0]=BA>>>24,BA=1;I=($=BA<<3)+A|0,aA=$=F+$|0,O=n[$>>2]^(a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24),CA=n[($=$- -64|0)>>2],$=n[$+4>>2]^n[aA+4>>2]^(a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24),aA=O^CA,E[0|I]=aA,E[I+1|0]=aA>>>8,E[I+2|0]=aA>>>16,E[I+3|0]=aA>>>24,E[I+4|0]=$,E[I+5|0]=$>>>8,E[I+6|0]=$>>>16,E[I+7|0]=$>>>24,8!=(0|(BA=BA+1|0)););D=F+256|0}function G(A,I,g,B){var C=0,Q=0,E=0,i=0,a=0,r=0,o=0,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0,D=0,u=0,p=0,F=0,G=0,k=0,_=0,H=0,Y=0,b=0,m=0,U=0,v=0,S=0,N=0,R=0,M=0,d=0,P=0,J=0,x=0;for(function(A,I){for(var g=0,B=0,C=0,Q=0,E=0;Q=C=(B=g<<3)+A|0,E=zA(I+B|0),n[Q>>2]=E,n[C+4>>2]=l,16!=(0|(g=g+1|0)););}(g,I),I=j(B,A,64),E=n[g>>2],a=n[g+4>>2],B=0;;){if(C=jg(k=n[(Q=I)+32>>2],c=n[Q+36>>2],14),o=l,C=jg(k,c,18)^C,t=l^o,i=E,E=jg(k,c,41)^C,C=(l^t)+a|0,C=(o=i+E|0)>>>0<E>>>0?C+1|0:C,E=o,h=n[Q+48>>2],E=(t=n[(a=34784+(J=B<<3)|0)>>2])+E|0,C=n[a+4>>2]+C|0,C=E>>>0<t>>>0?C+1|0:C,E=(a=h^((_=n[Q+40>>2])^h)&k)+E|0,C=(((y=n[Q+52>>2])^(G=n[Q+44>>2]))&c^y)+C|0,C=E>>>0<a>>>0?C+1|0:C,o=(a=E)+(E=n[Q+56>>2])|0,C=n[Q+60>>2]+C|0,C=o>>>0<E>>>0?C+1|0:C,a=o+(t=n[Q+24>>2])|0,E=C,C=C+n[Q+28>>2]|0,D=C=(i=a)>>>0<t>>>0?C+1|0:C,n[Q+24>>2]=i,n[Q+28>>2]=C,C=jg(f=n[Q>>2],a=n[Q+4>>2],28),t=l,C=jg(f,a,34)^C,s=l^t,t=o+(jg(f,a,39)^C)|0,C=E+(l^s)|0,C=t>>>0<o>>>0?C+1|0:C,o=(r=t)+(t=f&((s=n[Q+16>>2])|(E=n[Q+8>>2]))|E&s)|0,C=(a&((e=n[Q+20>>2])|(w=n[Q+12>>2]))|e&w)+C|0,C=o>>>0<t>>>0?C+1|0:C,t=o,o=C,n[Q+56>>2]=t,n[Q+60>>2]=C,r=s,C=jg(i,D,14),s=l,u=jg(i,D,18)^C,m=l^s,C=((c^G)&D^G)+y|0,(h=(s=(k^_)&i^_)+h|0)>>>0<s>>>0&&(C=C+1|0),s=h,h=jg(i,D,41)^u,C=(l^m)+C|0,C=(s=s+h|0)>>>0<h>>>0?C+1|0:C,s=(u=n[(y=m=(h=(1|B)<<3)+g|0)>>2])+s|0,C=n[y+4>>2]+C|0,C=s>>>0<u>>>0?C+1|0:C,s=(y=n[(h=h+34784|0)>>2])+s|0,C=n[h+4>>2]+C|0,y=C=s>>>0<y>>>0?C+1|0:C,C=C+e|0,(r=(e=s)+r|0)>>>0<e>>>0&&(C=C+1|0),e=r,h=C,n[Q+16>>2]=r,n[Q+20>>2]=C,r=I,C=jg(t,o,28),Q=l,u=jg(t,o,34)^C,p=l^Q,C=((a|w)&o|a&w)+y|0,(s=(Q=(E|f)&t|E&f)+s|0)>>>0<Q>>>0&&(C=C+1|0),Q=s,s=jg(t,o,39)^u,C=(l^p)+C|0,C=(Q=Q+s|0)>>>0<s>>>0?C+1|0:C,s=Q,Q=C,n[r+48>>2]=s,n[r+52>>2]=C,u=I,r=E,C=jg(e,h,14),E=l,y=jg(e,h,18)^C,p=l^E,C=((c^D)&h^c)+G|0,(_=(E=(i^k)&e^k)+_|0)>>>0<E>>>0&&(C=C+1|0),y=jg(e,h,41)^y,C=(l^p)+C|0,C=(E=y+_|0)>>>0<y>>>0?C+1|0:C,E=(G=n[(_=S=(y=(2|B)<<3)+g|0)>>2])+E|0,C=n[_+4>>2]+C|0,C=E>>>0<G>>>0?C+1|0:C,E=(_=n[(y=y+34784|0)>>2])+E|0,C=n[y+4>>2]+C|0,y=w,w=C=E>>>0<_>>>0?C+1|0:C,C=y+C|0,(y=E+r|0)>>>0<E>>>0&&(C=C+1|0),r=y,y=C,n[u+8>>2]=r,n[u+12>>2]=C,C=jg(s,Q,28),_=l,G=jg(s,Q,34)^C,_^=l,C=((a|o)&Q|a&o)+w|0,(w=(w=E)+(E=(t|f)&s|t&f)|0)>>>0<E>>>0&&(C=C+1|0),E=w,w=jg(s,Q,39)^G,C=(l^_)+C|0,C=(E=E+w|0)>>>0<w>>>0?C+1|0:C,w=E,E=C,n[u+40>>2]=w,n[u+44>>2]=C,_=I,u=a,C=jg(r,y,14),a=l,G=jg(r,y,18)^C,p=l^a,C=(D^(h^D)&y)+c|0,(c=(a=i^(i^e)&r)+k|0)>>>0<a>>>0&&(C=C+1|0),a=c,c=jg(r,y,41)^G,C=(l^p)+C|0,C=(a=a+c|0)>>>0<c>>>0?C+1|0:C,a=(p=n[(G=k=(c=(3|B)<<3)+g|0)>>2])+a|0,C=n[G+4>>2]+C|0,C=a>>>0<p>>>0?C+1|0:C,a=(G=n[(c=c+34784|0)>>2])+a|0,C=n[c+4>>2]+C|0,G=C=a>>>0<G>>>0?C+1|0:C,C=C+u|0,(c=a+f|0)>>>0<a>>>0&&(C=C+1|0),u=C,n[_>>2]=c,n[_+4>>2]=C,C=jg(w,E,28),f=l,p=jg(w,E,34)^C,f^=l,C=((Q|o)&E|Q&o)+G|0,(G=(F=a)+(a=(t|s)&w|t&s)|0)>>>0<a>>>0&&(C=C+1|0),a=G,G=jg(w,E,39)^p,C=(l^f)+C|0,f=a=a+G|0,a=C=a>>>0<G>>>0?C+1|0:C,n[_+32>>2]=f,n[_+36>>2]=C,G=o,C=jg(c,u,14),o=l,p=jg(c,u,18)^C,F=l^o,C=D+(h^(y^h)&u)|0,(o=i+(e^(r^e)&c)|0)>>>0<i>>>0&&(C=C+1|0),i=jg(c,u,41)^p,C=(l^F)+C|0,C=(o=i+o|0)>>>0<i>>>0?C+1|0:C,o=(p=n[(D=d=(i=(4|B)<<3)+g|0)>>2])+o|0,C=n[D+4>>2]+C|0,C=o>>>0<p>>>0?C+1|0:C,o=(D=n[(i=i+34784|0)>>2])+o|0,C=n[i+4>>2]+C|0,i=G,G=C=o>>>0<D>>>0?C+1|0:C,C=i+C|0,(i=o+t|0)>>>0<o>>>0&&(C=C+1|0),D=C,n[_+56>>2]=i,n[_+60>>2]=C,C=jg(f,a,28),t=l,p=jg(f,a,34)^C,t^=l,C=((Q|E)&a|Q&E)+G|0,(G=(F=o)+(o=(s|w)&f|s&w)|0)>>>0<o>>>0&&(C=C+1|0),o=G,G=jg(f,a,39)^p,C=(l^t)+C|0,t=o=o+G|0,o=C=o>>>0<G>>>0?C+1|0:C,n[_+24>>2]=t,n[_+28>>2]=C,G=I,p=Q,C=jg(i,D,14),Q=l,_=jg(i,D,18)^C,F=l^Q,C=h+(y^(y^u)&D)|0,(Q=e+(r^(r^c)&i)|0)>>>0<e>>>0&&(C=C+1|0),e=jg(i,D,41)^_,C=(l^F)+C|0,C=(Q=e+Q|0)>>>0<e>>>0?C+1|0:C,Q=(F=n[(h=_=(e=(5|B)<<3)+g|0)>>2])+Q|0,C=n[h+4>>2]+C|0,C=Q>>>0<F>>>0?C+1|0:C,Q=(h=n[(e=e+34784|0)>>2])+Q|0,C=n[e+4>>2]+C|0,e=p,p=C=Q>>>0<h>>>0?C+1|0:C,C=e+C|0,(e=Q+s|0)>>>0<Q>>>0&&(C=C+1|0),h=C,n[G+48>>2]=e,n[G+52>>2]=C,C=jg(t,o,28),s=l,F=jg(t,o,34)^C,s^=l,C=((E|a)&o|E&a)+p|0,(p=(p=Q)+(Q=(f|w)&t|f&w)|0)>>>0<Q>>>0&&(C=C+1|0),Q=p,p=jg(t,o,39)^F,C=(l^s)+C|0,s=Q=Q+p|0,Q=C=Q>>>0<p>>>0?C+1|0:C,n[G+16>>2]=s,n[G+20>>2]=C,p=E,C=jg(e,h,14),E=l,F=jg(e,h,18)^C,N=l^E,C=y+(u^(D^u)&h)|0,(E=r+(c^(i^c)&e)|0)>>>0<r>>>0&&(C=C+1|0),r=jg(e,h,41)^F,C=(l^N)+C|0,C=(E=r+E|0)>>>0<r>>>0?C+1|0:C,E=(F=n[(y=x=(r=(6|B)<<3)+g|0)>>2])+E|0,C=n[y+4>>2]+C|0,C=E>>>0<F>>>0?C+1|0:C,E=(y=n[(r=r+34784|0)>>2])+E|0,C=n[r+4>>2]+C|0,r=p,p=C=E>>>0<y>>>0?C+1|0:C,C=r+C|0,(r=E+w|0)>>>0<E>>>0&&(C=C+1|0),y=C,n[G+40>>2]=r,n[G+44>>2]=C,C=jg(s,Q,28),w=l,F=jg(s,Q,34)^C,w^=l,C=((a|o)&Q|a&o)+p|0,(p=(p=E)+(E=(t|f)&s|t&f)|0)>>>0<E>>>0&&(C=C+1|0),E=p,p=jg(s,Q,39)^F,C=(l^w)+C|0,w=E=E+p|0,E=C=E>>>0<p>>>0?C+1|0:C,n[G+8>>2]=w,n[G+12>>2]=C,p=I,F=a,C=jg(r,y,14),a=l,G=jg(r,y,18)^C,N=l^a,C=u+(D^(h^D)&y)|0,(a=c+(i^(i^e)&r)|0)>>>0<c>>>0&&(C=C+1|0),c=jg(r,y,41)^G,C=(l^N)+C|0,C=(a=c+a|0)>>>0<c>>>0?C+1|0:C,a=(N=n[(u=G=(c=(7|B)<<3)+g|0)>>2])+a|0,C=n[u+4>>2]+C|0,C=a>>>0<N>>>0?C+1|0:C,a=(u=n[(c=c+34784|0)>>2])+a|0,C=n[c+4>>2]+C|0,c=F,F=C=a>>>0<u>>>0?C+1|0:C,C=c+C|0,(c=a+f|0)>>>0<a>>>0&&(C=C+1|0),u=C,n[p+32>>2]=c,n[p+36>>2]=C,C=jg(w,E,28),f=l,N=jg(w,E,34)^C,f^=l,C=((Q|o)&E|Q&o)+F|0,(F=(F=a)+(a=(t|s)&w|t&s)|0)>>>0<a>>>0&&(C=C+1|0),a=F,F=jg(w,E,39)^N,C=(l^f)+C|0,f=a=a+F|0,a=C=a>>>0<F>>>0?C+1|0:C,n[p>>2]=f,n[p+4>>2]=C,F=o,C=jg(c,u,14),o=l,N=jg(c,u,18)^C,U=l^o,C=D+(h^(y^h)&u)|0,(o=i+(e^(r^e)&c)|0)>>>0<i>>>0&&(C=C+1|0),i=jg(c,u,41)^N,C=(l^U)+C|0,C=(o=i+o|0)>>>0<i>>>0?C+1|0:C,o=(U=n[(D=N=(i=(8|B)<<3)+g|0)>>2])+o|0,C=n[D+4>>2]+C|0,C=o>>>0<U>>>0?C+1|0:C,o=(D=n[(i=i+34784|0)>>2])+o|0,C=n[i+4>>2]+C|0,i=F,F=C=o>>>0<D>>>0?C+1|0:C,C=i+C|0,(i=o+t|0)>>>0<o>>>0&&(C=C+1|0),D=C,n[p+24>>2]=i,n[p+28>>2]=C,C=jg(f,a,28),t=l,U=jg(f,a,34)^C,t^=l,C=((Q|E)&a|Q&E)+F|0,(F=(F=o)+(o=(s|w)&f|s&w)|0)>>>0<o>>>0&&(C=C+1|0),o=F,F=jg(f,a,39)^U,C=(l^t)+C|0,t=o=o+F|0,o=C=o>>>0<F>>>0?C+1|0:C,n[p+56>>2]=t,n[p+60>>2]=C,F=I,U=Q,C=jg(i,D,14),Q=l,p=jg(i,D,18)^C,v=l^Q,C=h+(y^(y^u)&D)|0,(Q=e+(r^(r^c)&i)|0)>>>0<e>>>0&&(C=C+1|0),e=jg(i,D,41)^p,C=(l^v)+C|0,C=(Q=e+Q|0)>>>0<e>>>0?C+1|0:C,Q=(v=n[(h=p=(e=(9|B)<<3)+g|0)>>2])+Q|0,C=n[h+4>>2]+C|0,C=Q>>>0<v>>>0?C+1|0:C,Q=(h=n[(e=e+34784|0)>>2])+Q|0,C=n[e+4>>2]+C|0,e=U,U=C=Q>>>0<h>>>0?C+1|0:C,C=e+C|0,(e=Q+s|0)>>>0<Q>>>0&&(C=C+1|0),h=C,n[F+16>>2]=e,n[F+20>>2]=C,C=jg(t,o,28),s=l,v=jg(t,o,34)^C,s^=l,C=((E|a)&o|E&a)+U|0,(U=(U=Q)+(Q=(f|w)&t|f&w)|0)>>>0<Q>>>0&&(C=C+1|0),Q=U,U=jg(t,o,39)^v,C=(l^s)+C|0,s=Q=Q+U|0,Q=C=Q>>>0<U>>>0?C+1|0:C,n[F+48>>2]=s,n[F+52>>2]=C,v=E,C=jg(e,h,14),E=l,U=jg(e,h,18)^C,Y=l^E,C=y+(u^(D^u)&h)|0,(E=r+(c^(i^c)&e)|0)>>>0<r>>>0&&(C=C+1|0),r=jg(e,h,41)^U,C=(l^Y)+C|0,C=(E=r+E|0)>>>0<r>>>0?C+1|0:C,E=(Y=n[(y=U=(r=(10|B)<<3)+g|0)>>2])+E|0,C=n[y+4>>2]+C|0,C=E>>>0<Y>>>0?C+1|0:C,E=(y=n[(r=r+34784|0)>>2])+E|0,C=n[r+4>>2]+C|0,r=C=E>>>0<y>>>0?C+1|0:C,C=C+v|0,(y=E+w|0)>>>0<E>>>0&&(C=C+1|0),w=y,y=C,n[F+8>>2]=w,n[F+12>>2]=C,C=jg(s,Q,28),v=l,Y=jg(s,Q,34)^C,v^=l,C=((a|o)&Q|a&o)+r|0,(r=(r=E)+(E=(t|f)&s|t&f)|0)>>>0<E>>>0&&(C=C+1|0),E=r,r=jg(s,Q,39)^Y,C=(l^v)+C|0,r=C=(E=E+r|0)>>>0<r>>>0?C+1|0:C,n[F+40>>2]=E,n[F+44>>2]=C,v=I,Y=a,C=jg(w,y,14),a=l,F=jg(w,y,18)^C,b=l^a,C=u+(D^(h^D)&y)|0,(a=c+(i^(i^e)&w)|0)>>>0<c>>>0&&(C=C+1|0),c=jg(w,y,41)^F,C=(l^b)+C|0,C=(a=c+a|0)>>>0<c>>>0?C+1|0:C,a=(b=n[(u=F=(c=(11|B)<<3)+g|0)>>2])+a|0,C=n[u+4>>2]+C|0,C=a>>>0<b>>>0?C+1|0:C,a=(u=n[(c=c+34784|0)>>2])+a|0,C=n[c+4>>2]+C|0,c=C=a>>>0<u>>>0?C+1|0:C,C=C+Y|0,(u=a+f|0)>>>0<a>>>0&&(C=C+1|0),f=u,u=C,n[v>>2]=f,n[v+4>>2]=C,C=jg(E,r,28),Y=l,b=jg(E,r,34)^C,Y^=l,C=((Q|o)&r|Q&o)+c|0,(c=(c=a)+(a=(t|s)&E|t&s)|0)>>>0<a>>>0&&(C=C+1|0),a=c,c=jg(E,r,39)^b,C=(l^Y)+C|0,c=C=(a=a+c|0)>>>0<c>>>0?C+1|0:C,n[v+32>>2]=a,n[v+36>>2]=C,Y=I,b=o,C=jg(f,u,14),o=l,v=jg(f,u,18)^C,R=l^o,C=D+(h^(y^h)&u)|0,(o=i+(e^(e^w)&f)|0)>>>0<i>>>0&&(C=C+1|0),i=jg(f,u,41)^v,C=(l^R)+C|0,C=(o=i+o|0)>>>0<i>>>0?C+1|0:C,o=(R=n[(D=v=(i=(12|B)<<3)+g|0)>>2])+o|0,C=n[D+4>>2]+C|0,C=o>>>0<R>>>0?C+1|0:C,o=(D=n[(i=i+34784|0)>>2])+o|0,C=n[i+4>>2]+C|0,i=b,b=C=o>>>0<D>>>0?C+1|0:C,C=i+C|0,(i=o+t|0)>>>0<o>>>0&&(C=C+1|0),R=i,i=C,n[Y+56>>2]=R,n[Y+60>>2]=C,D=I,C=jg(a,c,28),t=l,Y=jg(a,c,34)^C,t^=l,C=((Q|r)&c|Q&r)+b|0,(b=(b=o)+(o=(E|s)&a|E&s)|0)>>>0<o>>>0&&(C=C+1|0),Y=jg(a,c,39)^Y,C=(l^t)+C|0,b=o=Y+b|0,t=C=o>>>0<Y>>>0?C+1|0:C,n[D+24>>2]=o,n[D+28>>2]=C,o=I,D=s,Y=Q,C=jg(R,i,14),Q=l,s=jg(R,i,18)^C,H=l^Q,C=h+(y^(y^u)&i)|0,(Q=e+(w^(f^w)&R)|0)>>>0<e>>>0&&(C=C+1|0),s=jg(R,i,41)^s,C=(l^H)+C|0,C=(Q=s+Q|0)>>>0<s>>>0?C+1|0:C,Q=(H=n[(s=(e=(13|B)<<3)+g|0)>>2])+Q|0,C=n[s+4>>2]+C|0,C=Q>>>0<H>>>0?C+1|0:C,Q=(h=n[(e=e+34784|0)>>2])+Q|0,C=n[e+4>>2]+C|0,h=C=Q>>>0<h>>>0?C+1|0:C,C=C+Y|0,(D=Q+D|0)>>>0<Q>>>0&&(C=C+1|0),Y=D,e=C,n[o+48>>2]=D,n[o+52>>2]=C,C=jg(b,t,28),D=l,H=jg(b,t,34)^C,D^=l,C=((r|c)&t|r&c)+h|0,(h=(h=Q)+(Q=(E|a)&b|E&a)|0)>>>0<Q>>>0&&(C=C+1|0),Q=h,h=jg(b,t,39)^H,C=(l^D)+C|0,C=(Q=Q+h|0)>>>0<h>>>0?C+1|0:C,h=Q,Q=C,n[o+16>>2]=h,n[o+20>>2]=C,C=jg(Y,e,14),D=l,H=jg(Y,e,18)^C,D^=l,C=y+(u^(i^u)&e)|0,(y=w+(f^(f^R)&Y)|0)>>>0<w>>>0&&(C=C+1|0),w=y,y=jg(Y,e,41)^H,C=(l^D)+C|0,C=(w=w+y|0)>>>0<y>>>0?C+1|0:C,w=(M=n[(D=(y=(14|B)<<3)+g|0)>>2])+w|0,C=n[D+4>>2]+C|0,C=w>>>0<M>>>0?C+1|0:C,w=(H=n[(y=y+34784|0)>>2])+w|0,C=n[y+4>>2]+C|0,C=w>>>0<H>>>0?C+1|0:C,H=w,w=C,C=r+C|0,(r=E+H|0)>>>0<E>>>0&&(C=C+1|0),y=r,E=C,n[o+40>>2]=r,n[o+44>>2]=C,C=jg(h,Q,28),r=l,M=jg(h,Q,34)^C,r^=l,C=((t|c)&Q|t&c)+w|0,(H=(w=(a|b)&h|a&b)+H|0)>>>0<w>>>0&&(C=C+1|0),w=H,H=jg(h,Q,39)^M,C=(l^r)+C|0,C=(w=w+H|0)>>>0<H>>>0?C+1|0:C,H=w,r=C,n[o+8>>2]=w,n[o+12>>2]=C,C=jg(y,E,14),w=l,M=jg(y,E,18)^C,w^=l,C=u+(i^(i^e)&E)|0,(i=f+(R^(Y^R)&y)|0)>>>0<f>>>0&&(C=C+1|0),f=jg(y,E,41)^M,C=(l^w)+C|0,C=(E=f+i|0)>>>0<f>>>0?C+1|0:C,E=(e=n[(i=w=(f=(15|B)<<3)+g|0)>>2])+E|0,C=n[i+4>>2]+C|0,C=E>>>0<e>>>0?C+1|0:C,E=(i=n[(f=f+34784|0)>>2])+E|0,C=n[f+4>>2]+C|0,f=E,C=c+(E=E>>>0<i>>>0?C+1|0:C)|0,(i=a+f|0)>>>0<a>>>0&&(C=C+1|0),n[o+32>>2]=i,n[o+36>>2]=C,C=jg(H,r,28),o=l,a=jg(H,r,34)^C,i=l^o,C=((Q|t)&r|Q&t)+E|0,(E=(Q=(h|b)&H|h&b)+f|0)>>>0<Q>>>0&&(C=C+1|0),Q=(Q=E)+(E=jg(H,r,39)^a)|0,C=(l^i)+C|0,n[(o=I)>>2]=Q,n[o+4>>2]=Q>>>0<E>>>0?C+1|0:C,64==(0|B)){for(;o=g=(B=P<<3)+A|0,B=(Q=n[(C=I+B|0)>>2])+n[o>>2]|0,C=n[o+4>>2]+n[C+4>>2]|0,n[o>>2]=B,n[o+4>>2]=B>>>0<Q>>>0?C+1|0:C,8!=(0|(P=P+1|0)););break}f=((B=B+16|0)<<3)+g|0,Y=o=n[D+4>>2],C=o>>>6|0,o=((63&o)<<26|(b=n[D>>2])>>>6)^jg(b,o,19),C^=l,o=jg(b,Y,61)^o,C=(a=n[p+4>>2])+(l^C)|0,(Q=(Q=o)+(o=y=n[p>>2])|0)>>>0<o>>>0&&(C=C+1|0),o=(i=Q)+(E=n[(Q=g+J|0)>>2])|0,C=n[Q+4>>2]+C|0,o=(i=o)>>>0<E>>>0?C+1|0:C,E=Q=n[m+4>>2],C=Q>>>7|0,Q=((127&Q)<<25|(t=n[m>>2])>>>7)^jg(t,Q,1),C^=l,r=i,i=jg(t,E,8)^Q,C=(l^C)+o|0,r=Q=r+i|0,Q=C=Q>>>0<i>>>0?C+1|0:C,n[f>>2]=r,n[f+4>>2]=C,C=n[(i=m)+76>>2]+E|0,(E=(o=n[i+72>>2])+t|0)>>>0<o>>>0&&(C=C+1|0),f=E,E=C,C=(o=t=n[w+4>>2])>>>6|0,t=((63&o)<<26|(h=n[w>>2])>>>6)^jg(h,o,19),C^=l,e=f,f=jg(h,o,61)^t,C=(l^C)+E|0,c=t=e+f|0,E=t>>>0<f>>>0?C+1|0:C,t=e=n[m+12>>2],C=e>>>7|0,e=((127&e)<<25|(f=n[m+8>>2])>>>7)^jg(f,e,1),C^=l,u=c,c=jg(f,t,8)^e,C=(l^C)+E|0,C=(e=u+c|0)>>>0<c>>>0?C+1|0:C,c=e,E=C,n[i+128>>2]=e,n[i+132>>2]=C,i=S,e=t,C=jg(r,Q,19),u=l,t=C,C=Q>>>6|0,Q=jg(r,Q,61)^t^((63&Q)<<26|r>>>6),r=f,C=(t=n[F+4>>2])+(l^C^u)|0,(f=(f=Q)+(Q=u=n[F>>2])|0)>>>0<Q>>>0&&(C=C+1|0),C=C+e|0,m=Q=r+f|0,Q=Q>>>0<f>>>0?C+1|0:C,f=e=n[k+4>>2],C=e>>>7|0,e=((127&e)<<25|(r=n[k>>2])>>>7)^jg(r,e,1),C^=l,H=m,m=jg(r,f,8)^e,C=(l^C)+Q|0,C=(e=H+m|0)>>>0<m>>>0?C+1|0:C,m=e,Q=C,n[i+128>>2]=e,n[i+132>>2]=C,C=n[(e=k)+76>>2]+f|0,(i=(f=n[e+72>>2])+r|0)>>>0<f>>>0&&(C=C+1|0),f=i,i=C,C=jg(c,E,19),r=l,H=f,f=C,C=E>>>6|0,f=jg(c,E,61)^f^((63&E)<<26|c>>>6),C=(l^C^r)+i|0,c=E=H+f|0,E=E>>>0<f>>>0?C+1|0:C,f=r=n[k+12>>2],C=r>>>7|0,r=((127&r)<<25|(i=n[k+8>>2])>>>7)^jg(i,r,1),C^=l,k=c,c=jg(i,f,8)^r,C=(l^C)+E|0,C=(r=k+c|0)>>>0<c>>>0?C+1|0:C,c=r,E=C,n[e+128>>2]=r,n[e+132>>2]=C,e=d,r=f,C=jg(m,Q,19),k=l,f=C,C=Q>>>6|0,Q=jg(m,Q,61)^f^((63&Q)<<26|m>>>6),H=i,C=(f=n[s+4>>2])+(l^C^k)|0,(i=(i=Q)+(Q=m=n[s>>2])|0)>>>0<Q>>>0&&(C=C+1|0),C=C+r|0,S=Q=H+i|0,Q=Q>>>0<i>>>0?C+1|0:C,C=(i=k=n[_+4>>2])>>>7|0,k=((127&i)<<25|(r=n[_>>2])>>>7)^jg(r,i,1),C^=l,H=S,S=jg(r,i,8)^k,C=(l^C)+Q|0,Q=C=(k=H+S|0)>>>0<S>>>0?C+1|0:C,n[e+128>>2]=k,n[e+132>>2]=C,C=n[(e=_)+76>>2]+i|0,(r=(i=n[e+72>>2])+r|0)>>>0<i>>>0&&(C=C+1|0),i=r,r=C,C=jg(c,E,19),S=l,H=i,i=C,C=E>>>6|0,i=jg(c,E,61)^i^((63&E)<<26|c>>>6),C=(l^C^S)+r|0,c=E=H+i|0,E=E>>>0<i>>>0?C+1|0:C,C=(i=r=n[_+12>>2])>>>7|0,r=((127&i)<<25|(S=n[_+8>>2])>>>7)^jg(S,i,1),C^=l,_=c,c=jg(S,i,8)^r,C=(l^C)+E|0,_=r=_+c|0,E=C=r>>>0<c>>>0?C+1|0:C,n[e+128>>2]=r,n[e+132>>2]=C,e=x,r=i,C=jg(k,Q,19),d=l,i=C,C=Q>>>6|0,i=jg(k,Q,61)^i^((63&Q)<<26|k>>>6),C=(l^C^d)+o|0,C=(Q=i+h|0)>>>0<i>>>0?C+1|0:C,i=Q,C=C+r|0,k=Q=Q+S|0,Q=Q>>>0<i>>>0?C+1|0:C,C=(i=c=n[G+4>>2])>>>7|0,c=((127&i)<<25|(r=n[G>>2])>>>7)^jg(r,i,1),C^=l,H=k,k=jg(r,i,8)^c,C=(l^C)+Q|0,Q=C=(c=H+k|0)>>>0<k>>>0?C+1|0:C,n[e+128>>2]=c,n[e+132>>2]=C,C=n[(e=G)+76>>2]+i|0,(r=(i=n[e+72>>2])+r|0)>>>0<i>>>0&&(C=C+1|0),i=r,r=C,C=jg(_,E,19),k=l,H=i,i=C,C=E>>>6|0,i=jg(_,E,61)^i^((63&E)<<26|_>>>6),C=(l^C^k)+r|0,k=E=H+i|0,E=E>>>0<i>>>0?C+1|0:C,C=(i=r=n[G+12>>2])>>>7|0,r=((127&i)<<25|(_=n[G+8>>2])>>>7)^jg(_,i,1),C^=l,G=k,k=jg(_,i,8)^r,C=(l^C)+E|0,C=(r=G+k|0)>>>0<k>>>0?C+1|0:C,k=r,E=C,n[e+128>>2]=r,n[e+132>>2]=C,r=i,C=jg(c,Q,19),G=l,i=C,C=Q>>>6|0,Q=(Q=jg(c,Q,61)^i^((63&Q)<<26|c>>>6))+(i=n[(e=N)+72>>2])|0,C=n[e+76>>2]+(l^C^G)|0,C=Q>>>0<i>>>0?C+1|0:C,i=Q,C=C+r|0,i=C=(Q=Q+_|0)>>>0<i>>>0?C+1|0:C,C=jg(y,a,1),r=l,G=Q,c=C,C=(Q=a)>>>7|0,c=c^((127&Q)<<25|y>>>7)^jg(y,Q,8),C=(l^C^r)+i|0,r=Q=G+c|0,Q=C=Q>>>0<c>>>0?C+1|0:C,n[e+128>>2]=r,n[e+132>>2]=C,C=n[(i=p)+76>>2]+a|0,(e=(a=n[i+72>>2])+y|0)>>>0<a>>>0&&(C=C+1|0),a=e,e=C,C=jg(k,E,19),c=l,y=a,a=C,C=E>>>6|0,a=jg(k,E,61)^a^((63&E)<<26|k>>>6),C=(l^C^c)+e|0,c=E=y+a|0,E=E>>>0<a>>>0?C+1|0:C,C=(a=e=n[p+12>>2])>>>7|0,e=((127&a)<<25|(y=n[p+8>>2])>>>7)^jg(y,a,1),C^=l,p=c,c=jg(y,a,8)^e,C=(l^C)+E|0,C=(e=p+c|0)>>>0<c>>>0?C+1|0:C,c=e,E=C,n[i+128>>2]=e,n[i+132>>2]=C,e=a,C=jg(r,Q,19),k=l,a=C,C=Q>>>6|0,Q=(Q=jg(r,Q,61)^a^((63&Q)<<26|r>>>6))+(a=n[(i=U)+72>>2])|0,C=n[i+76>>2]+(l^C^k)|0,C=Q>>>0<a>>>0?C+1|0:C,a=Q,C=C+e|0,a=C=(Q=Q+y|0)>>>0<a>>>0?C+1|0:C,C=jg(u,t,1),e=l,y=Q,r=C,C=(Q=t)>>>7|0,r=r^((127&Q)<<25|u>>>7)^jg(u,Q,8),C=(l^C^e)+a|0,e=Q=y+r|0,Q=C=Q>>>0<r>>>0?C+1|0:C,n[i+128>>2]=e,n[i+132>>2]=C,C=n[(i=F)+76>>2]+t|0,(t=(a=n[i+72>>2])+u|0)>>>0<a>>>0&&(C=C+1|0),a=t,t=C,C=jg(c,E,19),r=l,y=a,a=C,C=E>>>6|0,a=jg(c,E,61)^a^((63&E)<<26|c>>>6),C=(l^C^r)+t|0,r=E=y+a|0,E=E>>>0<a>>>0?C+1|0:C,C=(a=t=n[F+12>>2])>>>7|0,t=((127&a)<<25|(c=n[F+8>>2])>>>7)^jg(c,a,1),C^=l,y=r,r=jg(c,a,8)^t,C=(l^C)+E|0,C=(t=y+r|0)>>>0<r>>>0?C+1|0:C,r=t,E=C,n[i+128>>2]=r,n[i+132>>2]=C,i=a,C=jg(e,Q,19),y=l,a=C,C=Q>>>6|0,Q=(Q=jg(e,Q,61)^a^((63&Q)<<26|e>>>6))+(a=n[(t=v)+72>>2])|0,C=n[t+76>>2]+(l^C^y)|0,C=Q>>>0<a>>>0?C+1|0:C,a=Q,C=C+i|0,a=C=(Q=Q+c|0)>>>0<a>>>0?C+1|0:C,C=jg(m,f,1),i=l,c=Q,e=C,C=(Q=f)>>>7|0,e=e^((127&Q)<<25|m>>>7)^jg(m,Q,8),C=(l^C^i)+a|0,i=Q=c+e|0,Q=C=Q>>>0<e>>>0?C+1|0:C,n[t+128>>2]=i,n[t+132>>2]=C,C=n[(a=s)+76>>2]+f|0,(f=(t=n[a+72>>2])+m|0)>>>0<t>>>0&&(C=C+1|0),t=f,f=C,C=jg(r,E,19),e=l,c=t,t=C,C=E>>>6|0,t=jg(r,E,61)^t^((63&E)<<26|r>>>6),C=(l^C^e)+f|0,e=E=c+t|0,E=E>>>0<t>>>0?C+1|0:C,f=t=n[s+12>>2],C=t>>>7|0,t=((127&t)<<25|(s=n[s+8>>2])>>>7)^jg(s,t,1),C^=l,s=jg(s,f,8)^t,C=(l^C)+E|0,f=t=s+e|0,E=C=t>>>0<s>>>0?C+1|0:C,n[a+128>>2]=t,n[a+132>>2]=C,C=n[(a=D)+76>>2]+Y|0,(s=(t=n[a+72>>2])+b|0)>>>0<t>>>0&&(C=C+1|0),t=s,s=C,C=jg(i,Q,19),e=l,r=t,t=C,C=Q>>>6|0,t=jg(i,Q,61)^t^((63&Q)<<26|i>>>6),C=(l^C^e)+s|0,t=C=(Q=r+t|0)>>>0<t>>>0?C+1|0:C,C=jg(h,o,1),s=l,r=Q,i=C,C=(Q=o)>>>7|0,Q=r+(i=i^((127&Q)<<25|h>>>7)^jg(h,Q,8))|0,C=(l^C^s)+t|0,n[a+128>>2]=Q,n[a+132>>2]=Q>>>0<i>>>0?C+1|0:C,C=n[(Q=w)+76>>2]+o|0,(a=(o=n[Q+72>>2])+h|0)>>>0<o>>>0&&(C=C+1|0),o=a,a=C,C=jg(f,E,19),t=l,i=C,C=E>>>6|0,E=jg(f,E,61)^i^((63&E)<<26|f>>>6),C=(l^C^t)+a|0,s=o=E+o|0,o=o>>>0<E>>>0?C+1|0:C,C=(a=t=n[w+12>>2])>>>7|0,t=((127&a)<<25|(E=n[w+8>>2])>>>7)^jg(E,a,1),C^=l,t=(i=s)+(s=jg(E,a,8)^t)|0,C=(l^C)+o|0,n[Q+128>>2]=t,n[Q+132>>2]=t>>>0<s>>>0?C+1|0:C}}function k(A){var I,g,B,C,Q,i,n,r,o,e,t,c,f,y,s,w,h,D,u,p=0,F=0,G=0,k=0,_=0,H=0,Y=0,b=0,m=0,U=0,v=0,S=0,N=0,R=0,M=0,d=0,P=0,J=0,x=0,L=0,K=0,q=0,X=0,V=0,T=0,W=0,j=0,Z=0,O=0,z=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,QA=0,EA=0,iA=0;y=Cg(A),s=a[A+2|0]|a[A+3|0]<<8|a[A+4|0]<<16|a[A+5|0]<<24,w=Cg(A+5|0),h=l,gA=a[A+7|0]|a[A+8|0]<<8|a[A+9|0]<<16|a[A+10|0]<<24,BA=a[A+10|0]|a[A+11|0]<<8|a[A+12|0]<<16|a[A+13|0]<<24,D=Cg(A+13|0),CA=l,M=a[A+15|0]|a[A+16|0]<<8|a[A+17|0]<<16|a[A+18|0]<<24,O=Cg(A+18|0),d=l,U=Cg(A+21|0),H=a[A+23|0]|a[A+24|0]<<8|a[A+25|0]<<16|a[A+26|0]<<24,_=Cg(A+26|0),G=l,IA=a[A+28|0]|a[A+29|0]<<8|a[A+30|0]<<16|a[A+31|0]<<24,X=a[A+31|0]|a[A+32|0]<<8|a[A+33|0]<<16|a[A+34|0]<<24,j=Cg(A+34|0),W=l,P=a[A+36|0]|a[A+37|0]<<8|a[A+38|0]<<16|a[A+39|0]<<24,z=Cg(A+39|0),x=l,b=Cg(A+42|0),k=a[A+44|0]|a[A+45|0]<<8|a[A+46|0]<<16|a[A+47|0]<<24,u=A,F=Cg(A+47|0),p=xg(I=2097151&((3&(Y=l))<<30|F>>>2),0,136657,0),F=l,(p=(G=2097151&((3&G)<<30|_>>>2))+p|0)>>>0<G>>>0&&(F=F+1|0),_=(G=xg(g=(a[A+49|0]|a[A+50|0]<<8|a[A+51|0]<<16|a[A+52|0]<<24)>>>7&2097151,0,-997805,-1))+p|0,p=l+F|0,p=_>>>0<G>>>0?p+1|0:p,F=xg(B=(a[A+52|0]|a[A+53|0]<<8|a[A+54|0]<<16|a[A+55|0]<<24)>>>4&2097151,0,654183,0),G=l+p|0,G=(_=F+_|0)>>>0<F>>>0?G+1|0:G,p=_,F=Cg(A+55|0),_=p+(F=xg(C=2097151&((1&(_=l))<<31|F>>>1),0,470296,0))|0,p=l+G|0,p=_>>>0<F>>>0?p+1|0:p,G=xg(Q=(a[A+57|0]|a[A+58|0]<<8|a[A+59|0]<<16|a[A+60|0]<<24)>>>6&2097151,0,666643,0),F=l+p|0,S=F=(_=G+_|0)>>>0<G>>>0?F+1|0:F,G=F,m=k>>>5&2097151,F=2097151&b,k=xg(i=(a[A+60|0]|a[A+61|0]<<8|a[A+62|0]<<16|a[A+63|0]<<24)>>>3|0,0,-683901,-1)+F|0,p=l,b=k,N=p=k>>>0<F>>>0?p+1|0:p,R=(p=k)- -1048576|0,K=k=N-((p>>>0<4293918720)+-1|0)|0,p=k>>21,r=m=(k=(2097151&k)<<11|R>>>21)+m|0,T=F=m>>>0<k>>>0?p+1|0:p,p=xg(m,F,-683901,-1),F=l+G|0,Z=Y=p+_|0,v=Y>>>0<p>>>0?F+1|0:F,F=xg(I,0,-997805,-1),p=l,(F=(G=H>>>5&2097151)+F|0)>>>0<G>>>0&&(p=p+1|0),Y=(G=F)+(F=xg(g,0,654183,0))|0,G=l+p|0,G=Y>>>0<F>>>0?G+1|0:G,p=xg(B,0,470296,0),F=l+G|0,F=(Y=p+Y|0)>>>0<p>>>0?F+1|0:F,G=xg(C,0,666643,0),p=l+F|0,G=(H=Y=G+Y|0)>>>0<G>>>0?p+1|0:p,p=2097151&U,Y=xg(I,0,654183,0)+p|0,F=l,F=Y>>>0<p>>>0?F+1|0:F,k=(p=Y)+(Y=xg(g,0,470296,0))|0,p=l+F|0,p=k>>>0<Y>>>0?p+1|0:p,Y=xg(B,0,666643,0),F=l+p|0,m=k=Y+k|0,k=F=k>>>0<Y>>>0?F+1|0:F,$=(p=m)- -1048576|0,J=Y=F-((p>>>0<4293918720)+-1|0)|0,G=(p=Y>>>21|0)+G|0,U=G=(H=Y=(F=(2097151&Y)<<11|$>>>21)+H|0)>>>0<F>>>0?G+1|0:G,q=(p=H)- -1048576|0,c=_- -1048576|0,S=S-((_>>>0<4293918720)+-1|0)|0,F=(p=(G=L=G-((p>>>0<4293918720)+-1|0)|0)>>21)+v|0,S=(F=(L=(_=(2097151&G)<<11|q>>>21)+Z|0)>>>0<_>>>0?F+1|0:F)-(((_=L)>>>0<(p=-2097152&c)>>>0)+(Y=S)|0)|0,QA=(p=_-p|0)-(F=-2097152&(f=p- -1048576|0))|0,EA=S-((p>>>0<F>>>0)+(_=S-((p>>>0<4293918720)+-1|0)|0)|0)|0,F=xg(r,T,136657,0)+H|0,p=U+l|0,p=F>>>0<H>>>0?p+1|0:p,AA=(H=F)-(F=-2097152&q)|0,Z=p-((H>>>0<F>>>0)+G|0)|0,S=b-(p=-2097152&R)|0,v=N-((b>>>0<p>>>0)+K|0)|0,p=xg(i,0,136657,0),F=l,(p=(G=2097151&((7&x)<<29|z>>>3))+p|0)>>>0<G>>>0&&(F=F+1|0),H=(G=xg(Q,0,-683901,-1))+p|0,p=l+F|0,b=H,H=H>>>0<G>>>0?p+1|0:p,p=xg(C,0,-683901,-1),F=l,(p=(G=P>>>6&2097151)+p|0)>>>0<G>>>0&&(F=F+1|0),U=(G=p)+(p=xg(i,0,-997805,-1))|0,G=l+F|0,G=U>>>0<p>>>0?G+1|0:G,F=xg(Q,0,136657,0),p=l+G|0,q=F=(R=p=(U=F+U|0)>>>0<F>>>0?p+1|0:p)-(((p=U)>>>0<4293918720)+-1|0)|0,p=(2097151&F)<<11|(z=p- -1048576|0)>>>21,F=(F>>21)+H|0,N=F=(b=p+b|0)>>>0<p>>>0?F+1|0:F,L=(p=b)- -1048576|0,K=F=F-((p>>>0<4293918720)+-1|0)|0,p=(G=F>>21)+v|0,o=H=(F=(2097151&F)<<11|L>>>21)+S|0,V=p=H>>>0<F>>>0?p+1|0:p,F=xg(H,p,-683901,-1),p=l+Z|0,iA=G=F+AA|0,P=G>>>0<F>>>0?p+1|0:p,v=m,p=xg(I,0,470296,0),F=l,(p=(G=2097151&((7&d)<<29|O>>>3))+p|0)>>>0<G>>>0&&(F=F+1|0),G=p,p=xg(g,0,666643,0),F=l+F|0,S=G=G+p|0,G=G>>>0<p>>>0?F+1|0:F,F=xg(I,0,666643,0),p=l,(F=(H=M>>>6&2097151)+F|0)>>>0<H>>>0&&(p=p+1|0),m=F,d=H=(M=p)-(((p=F)>>>0<4293918720)+-1|0)|0,F=(F=H>>>21|0)+G|0,x=F=(H=(p=(2097151&H)<<11|(AA=p- -1048576|0)>>>21)+S|0)>>>0<p>>>0?F+1|0:F,O=F-(((p=H)>>>0<4293918720)+-1|0)|0,Z=p- -1048576|0,n=b-(p=-2097152&L)|0,e=G=N-((b>>>0<p>>>0)+K|0)|0,p=((S=O)>>>21|0)+k|0,p=(v=(b=(2097151&S)<<11|Z>>>21)+v|0)>>>0<b>>>0?p+1|0:p,v=(k=xg(r,T,-997805,-1))+((b=v)-(F=-2097152&$)|0)|0,F=l+(p-((8191&J)+(b>>>0<F>>>0)|0)|0)|0,F=v>>>0<k>>>0?F+1|0:F,p=xg(o,V,136657,0),F=l+F|0,F=(k=p+v|0)>>>0<p>>>0?F+1|0:F,G=xg(n,G,-683901,-1),p=l+F|0,N=p=(k=G+k|0)>>>0<G>>>0?p+1|0:p,L=(p=k)- -1048576|0,K=G=N-((p>>>0<4293918720)+-1|0)|0,F=(p=G>>21)+P|0,v=F=(b=(G=(2097151&G)<<11|L>>>21)+iA|0)>>>0<G>>>0?F+1|0:F,J=(p=G=b)- -1048576|0,p=(p=(b=P=F-((p>>>0<4293918720)+-1|0)|0)>>21)+EA|0,QA=P=(F=(2097151&b)<<11|J>>>21)+QA|0,P=P>>>0<F>>>0?p+1|0:p,EA=G-(p=-2097152&J)|0,iA=v-((G>>>0<p>>>0)+b|0)|0,O=k-(p=-2097152&L)|0,$=N-((k>>>0<p>>>0)+K|0)|0,p=xg(r,T,654183,0),G=l+(x-((8191&S)+(H>>>0<(F=-2097152&Z)>>>0)|0)|0)|0,G=(k=p+(H-F|0)|0)>>>0<p>>>0?G+1|0:G,F=xg(o,V,-997805,-1),p=l+G|0,p=(k=F+k|0)>>>0<F>>>0?p+1|0:p,G=xg(n,e,136657,0),F=l+p|0,L=k=G+k|0,b=k>>>0<G>>>0?F+1|0:F,J=U-(p=-2097152&z)|0,x=R-((U>>>0<p>>>0)+q|0)|0,F=xg(B,0,-683901,-1),p=l,(F=(G=2097151&((1&W)<<31|j>>>1))+F|0)>>>0<G>>>0&&(p=p+1|0),G=F,F=xg(C,0,136657,0),p=l+p|0,p=(G=G+F|0)>>>0<F>>>0?p+1|0:p,k=(F=G)+(G=xg(i,0,654183,0))|0,F=l+p|0,F=k>>>0<G>>>0?F+1|0:F,p=xg(Q,0,-997805,-1),F=l+F|0,U=G=p+k|0,k=G>>>0<p>>>0?F+1|0:F,p=xg(g,0,-683901,-1),G=l,(p=(F=X>>>4&2097151)+p|0)>>>0<F>>>0&&(G=G+1|0),H=(F=xg(B,0,136657,0))+p|0,p=l+G|0,p=H>>>0<F>>>0?p+1|0:p,G=xg(C,0,-997805,-1),F=l+p|0,F=(H=G+H|0)>>>0<G>>>0?F+1|0:F,G=xg(i,0,470296,0),p=l+F|0,p=(H=G+H|0)>>>0<G>>>0?p+1|0:p,G=xg(Q,0,654183,0),F=l+p|0,N=F=(H=G+H|0)>>>0<G>>>0?F+1|0:F,q=(p=H)- -1048576|0,K=G=F-((p>>>0<4293918720)+-1|0)|0,p=(p=G>>21)+k|0,k=G=(F=(2097151&G)<<11|q>>>21)+U|0,v=p=G>>>0<F>>>0?p+1|0:p,S=(p=G)- -1048576|0,U=G=v-((p>>>0<4293918720)+-1|0)|0,F=(p=G>>21)+x|0,t=R=(G=(2097151&G)<<11|S>>>21)+J|0,X=F=R>>>0<G>>>0?F+1|0:F,p=xg(R,F,-683901,-1),G=l+b|0,x=F=p+L|0,b=F>>>0<p>>>0?G+1|0:G,j=k-(p=-2097152&S)|0,W=U=v-((k>>>0<p>>>0)+U|0)|0,G=(p=xg(r,T,470296,0))+(m-(F=-2097152&AA)|0)|0,F=l+(M-((2047&d)+(m>>>0<F>>>0)|0)|0)|0,F=G>>>0<p>>>0?F+1|0:F,p=xg(o,V,654183,0),F=l+F|0,F=(G=p+G|0)>>>0<p>>>0?F+1|0:F,k=(p=xg(n,e,-997805,-1))+G|0,G=l+F|0,G=k>>>0<p>>>0?G+1|0:G,F=xg(R,X,136657,0),p=l+G|0,p=(k=F+k|0)>>>0<F>>>0?p+1|0:p,G=xg(j,U,-683901,-1),F=l+p|0,v=F=(k=G+k|0)>>>0<G>>>0?F+1|0:F,d=(p=k)- -1048576|0,U=G=F-((p>>>0<4293918720)+-1|0)|0,p=(p=G>>21)+b|0,b=p=(G=(F=(2097151&G)<<11|d>>>21)+x|0)>>>0<F>>>0?p+1|0:p,S=(p=G)- -1048576|0,F=(p=(m=x=b-((p>>>0<4293918720)+-1|0)|0)>>21)+$|0,O=M=(x=(2097151&m)<<11|S>>>21)+O|0,x=M>>>0<x>>>0?F+1|0:F,$=G-(p=-2097152&S)|0,z=b-((G>>>0<p>>>0)+m|0)|0,L=k-(p=-2097152&d)|0,R=v-((k>>>0<p>>>0)+U|0)|0,F=xg(r,T,666643,0),p=l,(F=(G=2097151&((1&CA)<<31|D>>>1))+F|0)>>>0<G>>>0&&(p=p+1|0),k=(G=xg(o,V,470296,0))+F|0,F=l+p|0,F=k>>>0<G>>>0?F+1|0:F,G=xg(n,e,654183,0),p=l+F|0,p=(k=G+k|0)>>>0<G>>>0?p+1|0:p,F=xg(t,X,-997805,-1),G=l+p|0,G=(k=F+k|0)>>>0<F>>>0?G+1|0:G,p=xg(j,W,136657,0),F=l+G|0,U=k=p+k|0,m=k>>>0<p>>>0?F+1|0:F,b=H-(p=-2097152&q)|0,H=N-((H>>>0<p>>>0)+K|0)|0,p=xg(I,0,-683901,-1),F=l,(p=(G=IA>>>7&2097151)+p|0)>>>0<G>>>0&&(F=F+1|0),k=(G=p)+(p=xg(g,0,136657,0))|0,G=l+F|0,G=k>>>0<p>>>0?G+1|0:G,F=xg(B,0,-997805,-1),p=l+G|0,p=(k=F+k|0)>>>0<F>>>0?p+1|0:p,G=xg(C,0,654183,0),F=l+p|0,F=(k=G+k|0)>>>0<G>>>0?F+1|0:F,G=xg(i,0,666643,0),p=l+F|0,p=(k=G+k|0)>>>0<G>>>0?p+1|0:p,G=xg(Q,0,470296,0),F=l+p|0,p=F=(k=G+k|0)>>>0<G>>>0?F+1|0:F,F=Y>>21,k=(Y=(2097151&Y)<<11|c>>>21)+(G=k)|0,G=p+F|0,K=G=k>>>0<Y>>>0?G+1|0:G,N=(p=k)- -1048576|0,v=G=G-((p>>>0<4293918720)+-1|0)|0,p=(F=G>>21)+H|0,T=Y=(G=(2097151&G)<<11|N>>>21)+b|0,J=p=Y>>>0<G>>>0?p+1|0:p,p=xg(Y,p,-683901,-1),F=l+m|0,m=G=p+U|0,Y=G>>>0<p>>>0?F+1|0:F,p=xg(o,V,666643,0),G=l,(p=(F=BA>>>4&2097151)+p|0)>>>0<F>>>0&&(G=G+1|0),H=(F=xg(n,e,470296,0))+p|0,p=l+G|0,p=H>>>0<F>>>0?p+1|0:p,G=xg(t,X,654183,0),F=l+p|0,F=(H=G+H|0)>>>0<G>>>0?F+1|0:F,p=xg(j,W,-997805,-1),F=l+F|0,F=(G=p+H|0)>>>0<p>>>0?F+1|0:F,H=(p=G)+(G=xg(T,J,136657,0))|0,p=l+F|0,U=p=H>>>0<G>>>0?p+1|0:p,M=(p=H)- -1048576|0,b=G=U-((p>>>0<4293918720)+-1|0)|0,p=(F=G>>21)+Y|0,G=p=(Y=m=(G=(2097151&G)<<11|M>>>21)+m|0)>>>0<G>>>0?p+1|0:p,d=(p=Y)- -1048576|0,p=(F=(m=S=G-((p>>>0<4293918720)+-1|0)|0)>>21)+R|0,AA=q=(S=(2097151&m)<<11|d>>>21)+L|0,S=q>>>0<S>>>0?p+1|0:p,p=k-(F=-2097152&N)|0,k=K-((k>>>0<F>>>0)+v|0)|0,v=p,p=(p=_>>21)+k|0,N=p=(k=_=v+(F=(2097151&_)<<11|f>>>21)|0)>>>0<F>>>0?p+1|0:p,q=(p=k)- -1048576|0,K=_=N-((p>>>0<4293918720)+-1|0)|0,R=p=_>>21,p=xg(V=(2097151&_)<<11|q>>>21,p,-683901,-1),F=l+G|0,F=(_=p+Y|0)>>>0<p>>>0?F+1|0:F,Z=(G=_)-(p=-2097152&d)|0,L=F-((G>>>0<p>>>0)+m|0)|0,F=xg(V,R,136657,0)+H|0,p=U+l|0,p=F>>>0<H>>>0?p+1|0:p,IA=(G=F)-(F=-2097152&M)|0,M=p-((G>>>0<F>>>0)+b|0)|0,p=xg(n,e,666643,0),F=l,(p=(G=gA>>>7&2097151)+p|0)>>>0<G>>>0&&(F=F+1|0),_=(G=p)+(p=xg(t,X,470296,0))|0,G=l+F|0,G=_>>>0<p>>>0?G+1|0:G,F=xg(j,W,654183,0),p=l+G|0,p=(_=F+_|0)>>>0<F>>>0?p+1|0:p,F=xg(T,J,-997805,-1),p=l+p|0,b=G=F+_|0,G=G>>>0<F>>>0?p+1|0:p,p=xg(t,X,666643,0),F=l,(p=(_=2097151&((3&h)<<30|w>>>2))+p|0)>>>0<_>>>0&&(F=F+1|0),_=p,p=xg(j,W,470296,0),F=l+F|0,F=(_=_+p|0)>>>0<p>>>0?F+1|0:F,Y=(p=_)+(_=xg(T,J,654183,0))|0,p=l+F|0,m=p=Y>>>0<_>>>0?p+1|0:p,d=(p=_=Y)- -1048576|0,p=(F=(H=Y=m-((p>>>0<4293918720)+-1|0)|0)>>21)+G|0,U=b=(Y=(2097151&H)<<11|d>>>21)+b|0,G=p=b>>>0<Y>>>0?p+1|0:p,b=(p=b)- -1048576|0,p=(F=(Y=v=G-((p>>>0<4293918720)+-1|0)|0)>>21)+M|0,gA=X=(v=(2097151&Y)<<11|b>>>21)+IA|0,v=X>>>0<v>>>0?p+1|0:p,p=xg(V,R,-997805,-1),G=l+G|0,G=(F=p+U|0)>>>0<p>>>0?G+1|0:G,BA=F-(p=-2097152&b)|0,CA=G-((F>>>0<p>>>0)+Y|0)|0,p=xg(V,R,654183,0)+_|0,F=m+l|0,F=p>>>0<_>>>0?F+1|0:F,IA=(G=p)-(p=-2097152&d)|0,X=F-((G>>>0<p>>>0)+H|0)|0,p=xg(j,W,666643,0),G=l,(p=(F=s>>>5&2097151)+p|0)>>>0<F>>>0&&(G=G+1|0),_=(F=xg(T,J,470296,0))+p|0,p=l+G|0,H=_,G=_>>>0<F>>>0?p+1|0:p,F=2097151&y,_=xg(T,J,666643,0)+F|0,p=l,Y=_,b=_=(U=p=_>>>0<F>>>0?p+1|0:p)-(((p=_)>>>0<4293918720)+-1|0)|0,G=(F=_>>21)+G|0,m=G=(_=(p=(2097151&_)<<11|(M=p- -1048576|0)>>>21)+H|0)>>>0<p>>>0?G+1|0:G,d=(p=_)- -1048576|0,H=G=G-((p>>>0<4293918720)+-1|0)|0,p=(F=G>>21)+X|0,G=p=(J=(G=(2097151&G)<<11|d>>>21)+IA|0)>>>0<G>>>0?p+1|0:p,p=xg(V,R,470296,0)+_|0,F=m+l|0,H=(F=p>>>0<_>>>0?F+1|0:F)-(((m=p)>>>0<(_=-2097152&d)>>>0)+H|0)|0,m=p=p-_|0,_=(F=xg(V,R,666643,0))+(Y-(p=-2097152&M)|0)|0,p=l+(U-((Y>>>0<p>>>0)+b|0)|0)|0,Y=_,F=(F=(p=_>>>0<F>>>0?p+1|0:p)>>21)+H|0,W=_=m+(p=(2097151&p)<<11|_>>>21)|0,G=(p=(F=_>>>0<p>>>0?F+1|0:F)>>21)+G|0,H=_=(F=(2097151&F)<<11|_>>>21)+J|0,F=(G=(p=_)>>>0<F>>>0?G+1|0:G)>>21,G=(2097151&G)<<11|p>>>21,p=F+CA|0,b=_=G+BA|0,G=(p=(F=_)>>>0<G>>>0?p+1|0:p)>>21,p=(2097151&p)<<11|F>>>21,F=G+v|0,v=_=p+gA|0,p=(p=(F=(G=_)>>>0<p>>>0?F+1|0:F)>>21)+L|0,J=G=(F=(2097151&F)<<11|G>>>21)+Z|0,F=(F=(p=G>>>0<F>>>0?p+1|0:p)>>21)+S|0,R=G=(p=(2097151&p)<<11|G>>>21)+AA|0,p=(F=G>>>0<p>>>0?F+1|0:F)>>21,F=(2097151&F)<<11|G>>>21,G=p+z|0,M=_=F+$|0,F=(G=(p=_)>>>0<F>>>0?G+1|0:G)>>21,G=(2097151&G)<<11|p>>>21,p=F+x|0,d=_=G+O|0,G=(p=(F=_)>>>0<G>>>0?p+1|0:p)>>21,p=(2097151&p)<<11|F>>>21,F=G+iA|0,x=_=p+EA|0,p=(p=(F=(G=_)>>>0<p>>>0?F+1|0:F)>>21)+P|0,S=G=(F=(2097151&F)<<11|G>>>21)+QA|0,F=(p=G>>>0<F>>>0?p+1|0:p)>>21,_=(2097151&p)<<11|G>>>21,p=k-(G=-2097152&q)|0,G=(N-((k>>>0<G>>>0)+K|0)|0)+F|0,K=_=_+p|0,P=(2097151&(G=(F=_)>>>0<p>>>0?G+1|0:G))<<11|F>>>21,U=p=G>>21,F=2097151&Y,G=xg(P,p,666643,0)+F|0,p=l,m=G,_=p=G>>>0<F>>>0?p+1|0:p,E[0|u]=G,E[A+1|0]=(255&p)<<24|G>>>8,p=2097151&W,G=xg(P,U,470296,0)+p|0,F=l,F=G>>>0<p>>>0?F+1|0:F,Y=G,k=(2097151&(G=_))<<11|m>>>21,G=(p=G>>21)+F|0,G=(N=Y+k|0)>>>0<k>>>0?G+1|0:G,k=N,E[A+4|0]=(2047&G)<<21|k>>>11,p=F=G,G=k,E[A+3|0]=(7&p)<<29|G>>>3,G=2097151&H,H=xg(P,U,654183,0)+G|0,p=l,p=H>>>0<G>>>0?p+1|0:p,G=H,H=(2097151&F)<<11|k>>>21,F=(F>>21)+p|0,F=(N=G+H|0)>>>0<H>>>0?F+1|0:F,H=N,p=F,E[A+6|0]=(63&p)<<26|H>>>6,Y=0,G=31&((65535&_)<<16|m>>>16),F=m=2097151&k,E[A+2|0]=G|F<<5,G=2097151&b,k=xg(P,U,-997805,-1)+G|0,F=l,G=F=k>>>0<G>>>0?F+1|0:F,G=(F=p>>21)+G|0,b=k=(p=(2097151&p)<<11|H>>>21)+k|0,G=k>>>0<p>>>0?G+1|0:G,E[A+9|0]=(511&G)<<23|k>>>9,p=F=G,G=k,E[A+8|0]=(1&p)<<31|G>>>1,k=0,G=H&=2097151,E[A+5|0]=(524287&Y)<<13|m>>>19|G<<2,G=2097151&v,Y=xg(P,U,136657,0)+G|0,p=l,p=(p=Y>>>0<G>>>0?p+1|0:p)+(G=F>>21)|0,m=Y=(F=(2097151&F)<<11|b>>>21)+Y|0,p=Y>>>0<F>>>0?p+1|0:p,F=Y,E[A+12|0]=(4095&p)<<20|F>>>12,G=p,E[A+11|0]=(15&p)<<28|F>>>4,Y=0,F=v=2097151&b,E[A+7|0]=(16383&k)<<18|H>>>14|F<<7,p=2097151&J,k=xg(P,U,-683901,-1)+p|0,F=l,F=k>>>0<p>>>0?F+1|0:F,F=(p=G>>21)+F|0,H=k=(G=(2097151&G)<<11|m>>>21)+k|0,p=F=k>>>0<G>>>0?F+1|0:F,E[A+14|0]=(127&p)<<25|k>>>7,k=0,G=b=2097151&m,E[A+10|0]=(131071&Y)<<15|v>>>17|G<<4,F=p>>21,G=(m=(p=(2097151&p)<<11|H>>>21)+(2097151&R)|0)>>>0<p>>>0?F+1|0:F,E[A+17|0]=(1023&G)<<22|m>>>10,p=G,G=m,E[A+16|0]=(3&p)<<30|G>>>2,G=U=2097151&H,E[A+13|0]=(1048575&k)<<12|b>>>20|G<<1,G=(2097151&p)<<11|m>>>21,p>>=21,p=(H=G+(2097151&M)|0)>>>0<G>>>0?p+1|0:p,F=H,E[A+20|0]=(8191&p)<<19|F>>>13,E[A+19|0]=(31&p)<<27|F>>>5,F=b=2097151&m,E[A+15|0]=(32767&Y)<<17|U>>>15|F<<6,_=(2097151&p)<<11|H>>>21,p=F=p>>21,_=p=(U=_+(2097151&d)|0)>>>0<_>>>0?p+1|0:p,E[A+21|0]=U,p=H,E[A+18|0]=(262143&k)<<14|b>>>18|p<<3,p=_,E[A+22|0]=(255&p)<<24|U>>>8,G=p,p>>=21,G=(H=(Y=(2097151&G)<<11|U>>>21)+(2097151&x)|0)>>>0<Y>>>0?p+1|0:p,E[(F=A)+25|0]=(2047&G)<<21|H>>>11,p=G,G=H,E[F+24|0]=(7&p)<<29|G>>>3,G=F,Y=(2097151&p)<<11|H>>>21,p>>=21,F=p=(k=m=Y+(2097151&S)|0)>>>0<Y>>>0?p+1|0:p,E[G+27|0]=(63&p)<<26|k>>>6,Y=0,p=m=2097151&H,E[G+23|0]=31&((65535&_)<<16|U>>>16)|p<<5,F=(p=F)>>21,F=(_=(p=(2097151&p)<<11|k>>>21)+(2097151&K)|0)>>>0<p>>>0?F+1|0:F,G=_,E[A+31|0]=(131071&F)<<15|G>>>17,p=F,E[A+30|0]=(511&p)<<23|G>>>9,E[A+29|0]=(1&p)<<31|G>>>1,F=0,k&=2097151,E[A+26|0]=(524287&Y)<<13|m>>>19|k<<2,E[A+28|0]=(16383&F)<<18|k>>>14|G<<7}function _(A){var I,g=0,B=0,C=0,Q=0,E=0,i=0,o=0,e=0,c=0,f=0,y=0,s=0,w=0;D=I=D-16|0;A:{I:{g:{B:{C:{Q:{E:{i:{n:{a:{r:{o:{if((A|=0)>>>0<=244){if(3&(g=(Q=n[8961])>>>(A=(i=A>>>0<11?16:A+11&-8)>>>3|0)|0)){A=(g=n[35892+(E=(B=A+(1&(-1^g))|0)<<3)>>2])+8|0,(0|(C=n[g+8>>2]))!=(0|(E=E+35884|0))?(n[C+12>>2]=E,n[E+8>>2]=C):(s=35844,w=ng(-2,B)&Q,n[s>>2]=w),B<<=3,n[g+4>>2]=3|B,n[4+(g=g+B|0)>>2]=1|n[g+4>>2];break A}if(i>>>0<=(e=n[8963])>>>0)break o;if(g){B=g=(A=(0-(A=(0-(B=2<<A)|B)&g<<A)&A)-1|0)>>>12&16,B|=g=(A=A>>>g|0)>>>5&8,B|=g=(A=A>>>g|0)>>>2&4,g=n[35892+(C=(B=((B|=g=(A=A>>>g|0)>>>1&2)|(g=(A=A>>>g|0)>>>1&1))+(A>>>g|0)|0)<<3)>>2],(0|(A=n[g+8>>2]))!=(0|(C=C+35884|0))?(n[A+12>>2]=C,n[C+8>>2]=A):(Q=ng(-2,B)&Q,n[8961]=Q),A=g+8|0,n[g+4>>2]=3|i,E=(B<<=3)-i|0,n[4+(o=g+i|0)>>2]=1|E,n[g+B>>2]=E,e&&(g=35884+((B=e>>>3|0)<<3)|0,C=n[8966],(B=1<<B)&Q?B=n[g+8>>2]:(n[8961]=B|Q,B=g),n[g+8>>2]=C,n[B+12>>2]=C,n[C+12>>2]=g,n[C+8>>2]=B),n[8966]=o,n[8963]=E;break A}if(!(f=n[8962]))break o;for(B=g=(A=(f&0-f)-1|0)>>>12&16,B|=g=(A=A>>>g|0)>>>5&8,B|=g=(A=A>>>g|0)>>>2&4,g=n[36148+(((B|=g=(A=A>>>g|0)>>>1&2)|(g=(A=A>>>g|0)>>>1&1))+(A>>>g|0)<<2)>>2],C=(-8&n[g+4>>2])-i|0,B=g;(A=n[B+16>>2])||(A=n[B+20>>2]);)C=(B=(E=(-8&n[A+4>>2])-i|0)>>>0<C>>>0)?E:C,g=B?A:g,B=A;if((y=g+i|0)>>>0<=g>>>0)break r;if(c=n[g+24>>2],(0|(E=n[g+12>>2]))!=(0|g)){A=n[g+8>>2],n[A+12>>2]=E,n[E+8>>2]=A;break I}if(!(A=n[(B=g+20|0)>>2])){if(!(A=n[g+16>>2]))break a;B=g+16|0}for(;o=B,E=A,(A=n[(B=A+20|0)>>2])||(B=E+16|0,A=n[E+16>>2]););n[o>>2]=0;break I}if(i=-1,!(A>>>0>4294967231)&&(i=-8&(g=A+11|0),e=n[8962])){B=0-i|0,Q=0,(g=g>>>8|0)&&(Q=31,i>>>0>16777215||(Q=28+((A=((Q=(g<<=C=g+1048320>>>16&8)<<(A=g+520192>>>16&4))<<(g=Q+245760>>>16&2)>>>15|0)-(g|A|C)|0)<<1|i>>>A+21&1)|0));e:{t:{if(C=n[36148+(Q<<2)>>2])for(g=i<<(31==(0|Q)?0:25-(Q>>>1|0)|0),A=0;;){if(!((o=(-8&n[C+4>>2])-i|0)>>>0>=B>>>0||(E=C,B=o))){B=0,A=C;break t}if(o=n[C+20>>2],C=n[16+((g>>>29&4)+C|0)>>2],A=o?(0|o)==(0|C)?A:o:A,g<<=0!=(0|C),!C)break}else A=0;if(!(A|E)){if(!(A=(0-(A=2<<Q)|A)&e))break o;C=g=(A=(A&0-A)-1|0)>>>12&16,C|=g=(A=A>>>g|0)>>>5&8,C|=g=(A=A>>>g|0)>>>2&4,A=n[36148+(((C|=g=(A=A>>>g|0)>>>1&2)|(g=(A=A>>>g|0)>>>1&1))+(A>>>g|0)<<2)>>2]}if(!A)break e}for(;B=(g=(C=(-8&n[A+4>>2])-i|0)>>>0<B>>>0)?C:B,E=g?A:E,A=(g=n[A+16>>2])||n[A+20>>2];);}if(!(!E|B>>>0>=n[8963]-i>>>0)){if((Q=E+i|0)>>>0<=E>>>0)break r;if(c=n[E+24>>2],(0|E)!=(0|(g=n[E+12>>2]))){A=n[E+8>>2],n[A+12>>2]=g,n[g+8>>2]=A;break g}if(!(A=n[(C=E+20|0)>>2])){if(!(A=n[E+16>>2]))break n;C=E+16|0}for(;o=C,g=A,(A=n[(C=A+20|0)>>2])||(C=g+16|0,A=n[g+16>>2]););n[o>>2]=0;break g}}}if((g=n[8963])>>>0>=i>>>0){A=n[8966],(B=g-i|0)>>>0>=16?(n[8963]=B,C=A+i|0,n[8966]=C,n[C+4>>2]=1|B,n[A+g>>2]=B,n[A+4>>2]=3|i):(n[8966]=0,n[8963]=0,n[A+4>>2]=3|g,n[4+(g=A+g|0)>>2]=1|n[g+4>>2]),A=A+8|0;break A}if((C=n[8964])>>>0>i>>>0){g=C-i|0,n[8964]=g,B=(A=n[8967])+i|0,n[8967]=B,n[B+4>>2]=1|g,n[A+4>>2]=3|i,A=A+8|0;break A}if(A=0,B=E=i+47|0,n[9079]?g=n[9081]:(n[9082]=-1,n[9083]=-1,n[9080]=4096,n[9081]=4096,n[9079]=I+12&-16^1431655768,n[9084]=0,n[9072]=0,g=4096),(B=(Q=B+g|0)&(o=0-g|0))>>>0<=i>>>0)break A;if((g=n[9071])&&(c=(e=n[9069])+B|0)>>>0<=e>>>0|c>>>0>g>>>0)break A;if(4&a[36288])break Q;o:{e:{if(g=n[8967])for(A=36292;;){if((e=n[A>>2])+n[A+4>>2]>>>0>g>>>0&&e>>>0<=g>>>0)break e;if(!(A=n[A+8>>2]))break}if(-1==(0|(g=FI(0))))break E;if(Q=B,(C=(A=n[9080])+-1|0)&g&&(Q=(B-g|0)+(g+C&0-A)|0),Q>>>0<=i>>>0|Q>>>0>2147483646)break E;if((A=n[9071])&&(o=(C=n[9069])+Q|0)>>>0<=C>>>0|o>>>0>A>>>0)break E;if((0|g)!=(0|(A=FI(Q))))break o;break C}if((Q=o&Q-C)>>>0>2147483646)break E;if((0|(g=FI(Q)))==(n[A>>2]+n[A+4>>2]|0))break i;A=g}if(!(-1==(0|A)|i+48>>>0<=Q>>>0)){if((g=(g=n[9081])+(E-Q|0)&0-g)>>>0>2147483646){g=A;break C}if(-1!=(0|FI(g))){Q=g+Q|0,g=A;break C}FI(0-Q|0);break E}if(g=A,-1!=(0|A))break C;break E}t()}E=0;break I}g=0;break g}if(-1!=(0|g))break C}n[9072]=4|n[9072]}if(B>>>0>2147483646)break B;if((g=FI(B))>>>0>=(A=FI(0))>>>0|-1==(0|g)|-1==(0|A))break B;if((Q=A-g|0)>>>0<=i+40>>>0)break B}A=n[9069]+Q|0,n[9069]=A,A>>>0>r[9070]&&(n[9070]=A);C:{Q:{E:{if(B=n[8967]){for(A=36292;;){if(((C=n[A>>2])+(E=n[A+4>>2])|0)==(0|g))break E;if(!(A=n[A+8>>2]))break}break Q}for(g>>>0>=(A=n[8965])>>>0&&A||(n[8965]=g),A=0,n[9074]=Q,n[9073]=g,n[8969]=-1,n[8970]=n[9079],n[9076]=0;C=35884+(B=A<<3)|0,n[B+35892>>2]=C,n[B+35896>>2]=C,32!=(0|(A=A+1|0)););C=(A=Q+-40|0)-(B=g+8&7?-8-g&7:0)|0,n[8964]=C,B=g+B|0,n[8967]=B,n[B+4>>2]=1|C,n[4+(A+g|0)>>2]=40,n[8968]=n[9083];break C}if(!(8&a[A+12|0]|g>>>0<=B>>>0|C>>>0>B>>>0)){n[A+4>>2]=Q+E,g=(A=B+8&7?-8-B&7:0)+B|0,n[8967]=g,A=(C=n[8964]+Q|0)-A|0,n[8964]=A,n[g+4>>2]=1|A,n[4+(B+C|0)>>2]=40,n[8968]=n[9083];break C}}g>>>0<(E=n[8965])>>>0&&(n[8965]=g,E=0),C=g+Q|0,A=36292;Q:{E:{i:{n:{a:{r:{for(;;){if((0|C)!=n[A>>2]){if(A=n[A+8>>2])continue;break r}break}if(!(8&a[A+12|0]))break a}for(A=36292;;){if((C=n[A>>2])>>>0<=B>>>0&&(E=C+n[A+4>>2]|0)>>>0>B>>>0)break n;A=n[A+8>>2]}}if(n[A>>2]=g,n[A+4>>2]=n[A+4>>2]+Q,n[4+(c=(g+8&7?-8-g&7:0)+g|0)>>2]=3|i,A=((g=C+(C+8&7?-8-C&7:0)|0)-c|0)-i|0,o=i+c|0,(0|g)==(0|B)){n[8967]=o,A=n[8964]+A|0,n[8964]=A,n[o+4>>2]=1|A;break E}if(n[8966]==(0|g)){n[8966]=o,A=n[8963]+A|0,n[8963]=A,n[o+4>>2]=1|A,n[A+o>>2]=A;break E}if(1==(3&(B=n[g+4>>2]))){f=-8&B;a:if(B>>>0<=255){if(E=B>>>3|0,B=n[g+8>>2],(0|(C=n[g+12>>2]))==(0|B)){s=35844,w=n[8961]&ng(-2,E),n[s>>2]=w;break a}n[B+12>>2]=C,n[C+8>>2]=B}else{if(e=n[g+24>>2],(0|(Q=n[g+12>>2]))==(0|g))if((i=n[(C=g+20|0)>>2])||(i=n[(C=g+16|0)>>2])){for(;B=C,(i=n[(C=(Q=i)+20|0)>>2])||(C=Q+16|0,i=n[Q+16>>2]););n[B>>2]=0}else Q=0;else B=n[g+8>>2],n[B+12>>2]=Q,n[Q+8>>2]=B;if(e){B=n[g+28>>2];r:{if(n[(C=36148+(B<<2)|0)>>2]==(0|g)){if(n[C>>2]=Q,Q)break r;s=35848,w=n[8962]&ng(-2,B),n[s>>2]=w;break a}if(n[e+(n[e+16>>2]==(0|g)?16:20)>>2]=Q,!Q)break a}n[Q+24>>2]=e,(B=n[g+16>>2])&&(n[Q+16>>2]=B,n[B+24>>2]=Q),(B=n[g+20>>2])&&(n[Q+20>>2]=B,n[B+24>>2]=Q)}}g=g+f|0,A=A+f|0}if(n[g+4>>2]=-2&n[g+4>>2],n[o+4>>2]=1|A,n[A+o>>2]=A,A>>>0<=255){A=35884+((g=A>>>3|0)<<3)|0,(B=n[8961])&(g=1<<g)?g=n[A+8>>2]:(n[8961]=g|B,g=A),n[A+8>>2]=o,n[g+12>>2]=o,n[o+12>>2]=A,n[o+8>>2]=g;break E}if(g=0,(C=A>>>8|0)&&(g=31,A>>>0>16777215||(g=28+((g=((i=(C<<=E=C+1048320>>>16&8)<<(g=C+520192>>>16&4))<<(C=i+245760>>>16&2)>>>15|0)-(C|g|E)|0)<<1|A>>>g+21&1)|0)),n[(B=o)+28>>2]=g,n[o+16>>2]=0,n[o+20>>2]=0,B=36148+(g<<2)|0,(C=n[8962])&(E=1<<g)){for(C=A<<(31==(0|g)?0:25-(g>>>1|0)|0),g=n[B>>2];;){if(B=g,(-8&n[g+4>>2])==(0|A))break i;if(g=C>>>29|0,C<<=1,!(g=n[16+(E=(4&g)+B|0)>>2]))break}n[E+16>>2]=o}else n[8962]=C|E,n[B>>2]=o;n[o+24>>2]=B,n[o+12>>2]=o,n[o+8>>2]=o;break E}for(o=(A=Q+-40|0)-(C=g+8&7?-8-g&7:0)|0,n[8964]=o,C=g+C|0,n[8967]=C,n[C+4>>2]=1|o,n[4+(A+g|0)>>2]=40,n[8968]=n[9083],n[(C=(A=(E+(E+-39&7?39-E&7:0)|0)-47|0)>>>0<B+16>>>0?B:A)+4>>2]=27,A=n[9076],n[C+16>>2]=n[9075],n[C+20>>2]=A,A=n[9074],n[C+8>>2]=n[9073],n[C+12>>2]=A,n[9075]=C+8,n[9074]=Q,n[9073]=g,n[9076]=0,A=C+24|0;n[A+4>>2]=7,g=A+8|0,A=A+4|0,E>>>0>g>>>0;);if((0|B)==(0|C))break C;if(n[C+4>>2]=-2&n[C+4>>2],E=C-B|0,n[B+4>>2]=1|E,n[C>>2]=E,E>>>0<=255){A=35884+((g=E>>>3|0)<<3)|0,(C=n[8961])&(g=1<<g)?g=n[A+8>>2]:(n[8961]=g|C,g=A),n[A+8>>2]=B,n[g+12>>2]=B,n[B+12>>2]=A,n[B+8>>2]=g;break C}if(n[B+16>>2]=0,n[B+20>>2]=0,A=0,(C=E>>>8|0)&&(A=31,E>>>0>16777215||(A=28+((A=((o=(C<<=Q=C+1048320>>>16&8)<<(A=C+520192>>>16&4))<<(C=o+245760>>>16&2)>>>15|0)-(C|A|Q)|0)<<1|E>>>A+21&1)|0)),n[(g=B)+28>>2]=A,g=36148+(A<<2)|0,(C=n[8962])&(Q=1<<A)){for(A=E<<(31==(0|A)?0:25-(A>>>1|0)|0),g=n[g>>2];;){if(C=g,(0|E)==(-8&n[g+4>>2]))break Q;if(g=A>>>29|0,A<<=1,!(g=n[16+(Q=C+(4&g)|0)>>2]))break}n[Q+16>>2]=B,n[B+24>>2]=C}else n[8962]=C|Q,n[g>>2]=B,n[B+24>>2]=g;n[B+12>>2]=B,n[B+8>>2]=B;break C}A=n[B+8>>2],n[A+12>>2]=o,n[B+8>>2]=o,n[o+24>>2]=0,n[o+12>>2]=B,n[o+8>>2]=A}A=c+8|0;break A}A=n[C+8>>2],n[A+12>>2]=B,n[C+8>>2]=B,n[B+24>>2]=0,n[B+12>>2]=C,n[B+8>>2]=A}if(!((A=n[8964])>>>0<=i>>>0)){g=A-i|0,n[8964]=g,B=(A=n[8967])+i|0,n[8967]=B,n[B+4>>2]=1|g,n[A+4>>2]=3|i,A=A+8|0;break A}}n[8960]=48,A=0;break A}g:if(c){A=n[E+28>>2];B:{if(n[(C=36148+(A<<2)|0)>>2]==(0|E)){if(n[C>>2]=g,g)break B;e=ng(-2,A)&e,n[8962]=e;break g}if(n[c+(n[c+16>>2]==(0|E)?16:20)>>2]=g,!g)break g}n[g+24>>2]=c,(A=n[E+16>>2])&&(n[g+16>>2]=A,n[A+24>>2]=g),(A=n[E+20>>2])&&(n[g+20>>2]=A,n[A+24>>2]=g)}g:if(B>>>0<=15)A=B+i|0,n[E+4>>2]=3|A,n[4+(A=A+E|0)>>2]=1|n[A+4>>2];else if(n[E+4>>2]=3|i,n[Q+4>>2]=1|B,n[B+Q>>2]=B,B>>>0<=255)A=35884+((g=B>>>3|0)<<3)|0,(B=n[8961])&(g=1<<g)?g=n[A+8>>2]:(n[8961]=g|B,g=A),n[A+8>>2]=Q,n[g+12>>2]=Q,n[Q+12>>2]=A,n[Q+8>>2]=g;else{A=0,(C=B>>>8|0)&&(A=31,B>>>0>16777215||(A=28+((A=((o=(C<<=i=C+1048320>>>16&8)<<(A=C+520192>>>16&4))<<(C=o+245760>>>16&2)>>>15|0)-(C|A|i)|0)<<1|B>>>A+21&1)|0)),n[(g=Q)+28>>2]=A,n[Q+16>>2]=0,n[Q+20>>2]=0,g=36148+(A<<2)|0;B:{if((C=1<<A)&e){for(A=B<<(31==(0|A)?0:25-(A>>>1|0)|0),i=n[g>>2];;){if((-8&n[(g=i)+4>>2])==(0|B))break B;if(C=A>>>29|0,A<<=1,!(i=n[16+(C=(4&C)+g|0)>>2]))break}n[C+16>>2]=Q}else n[8962]=C|e,n[g>>2]=Q;n[Q+24>>2]=g,n[Q+12>>2]=Q,n[Q+8>>2]=Q;break g}A=n[g+8>>2],n[A+12>>2]=Q,n[g+8>>2]=Q,n[Q+24>>2]=0,n[Q+12>>2]=g,n[Q+8>>2]=A}A=E+8|0;break A}I:if(c){A=n[g+28>>2];g:{if(n[(B=36148+(A<<2)|0)>>2]==(0|g)){if(n[B>>2]=E,E)break g;s=35848,w=ng(-2,A)&f,n[s>>2]=w;break I}if(n[c+(n[c+16>>2]==(0|g)?16:20)>>2]=E,!E)break I}n[E+24>>2]=c,(A=n[g+16>>2])&&(n[E+16>>2]=A,n[A+24>>2]=E),(A=n[g+20>>2])&&(n[E+20>>2]=A,n[A+24>>2]=E)}C>>>0<=15?(A=C+i|0,n[g+4>>2]=3|A,n[4+(A=A+g|0)>>2]=1|n[A+4>>2]):(n[g+4>>2]=3|i,n[y+4>>2]=1|C,n[C+y>>2]=C,e&&(A=35884+((B=e>>>3|0)<<3)|0,E=n[8966],(B=1<<B)&Q?B=n[A+8>>2]:(n[8961]=B|Q,B=A),n[A+8>>2]=E,n[B+12>>2]=E,n[E+12>>2]=A,n[E+8>>2]=B),n[8966]=y,n[8963]=C),A=g+8|0}return D=I+16|0,0|A}function H(A,I,g){var B,C,Q,E,i,a,r,e,t,c,f,y,s,w,h,D,u,p,F,G,k,_,H,Y,b,m,U,v,S,N,R,M,d,P,J,x,L,K,q,X,V,T,W,j,Z,O,z,$,AA,IA,gA,BA,CA,QA,EA=0,iA=0,nA=0,aA=0,rA=0,oA=0,eA=0,tA=0,cA=0,fA=0,yA=0,sA=0,wA=0,hA=0,DA=0,uA=0,pA=0,lA=0,FA=0,GA=0,kA=0,_A=0,HA=0,YA=0,bA=0;eA=A,e=EA=_A=n[g+4>>2],t=EA>>31,L=EA=(DA=n[I+20>>2])<<1,EA=xg(e,t,EA,H=EA>>31),nA=l,iA=EA,B=EA=n[g>>2],C=EA>>31,c=EA=n[I+24>>2],rA=xg(B,C,EA,Q=EA>>31),EA=l+nA|0,EA=(iA=iA+rA|0)>>>0<rA>>>0?EA+1|0:EA,nA=iA,Y=iA=oA=n[g+8>>2],u=iA>>31,f=iA=n[I+16>>2],iA=nA+(rA=xg(oA,u,iA,E=iA>>31))|0,nA=l+EA|0,nA=iA>>>0<rA>>>0?nA+1|0:nA,K=EA=pA=n[g+12>>2],p=EA>>31,q=EA=(sA=n[I+12>>2])<<1,EA=(rA=xg(pA,p,EA,b=EA>>31))+iA|0,iA=l+nA|0,iA=EA>>>0<rA>>>0?iA+1|0:iA,nA=EA,O=EA=uA=n[g+16>>2],k=EA>>31,y=EA=n[I+8>>2],rA=xg(uA,k,EA,i=EA>>31),EA=l+iA|0,EA=(nA=nA+rA|0)>>>0<rA>>>0?EA+1|0:EA,aA=nA,z=iA=fA=n[g+20>>2],m=iA>>31,X=iA=(tA=n[I+4>>2])<<1,nA=xg(fA,m,iA,U=iA>>31),EA=l+EA|0,EA=(iA=aA+nA|0)>>>0<nA>>>0?EA+1|0:EA,nA=iA,$=iA=yA=n[g+24>>2],V=iA>>31,s=iA=n[I>>2],rA=xg(yA,V,iA,a=iA>>31),iA=l+EA|0,iA=(nA=nA+rA|0)>>>0<rA>>>0?iA+1|0:iA,lA=n[g+28>>2],F=EA=o(lA,19),G=EA>>31,T=EA=(wA=n[I+36>>2])<<1,EA=(rA=xg(F,G,EA,v=EA>>31))+nA|0,nA=l+iA|0,nA=EA>>>0<rA>>>0?nA+1|0:nA,iA=EA,hA=n[g+32>>2],FA=EA=o(hA,19),GA=EA>>31,w=EA=n[I+32>>2],rA=xg(FA,GA,EA,r=EA>>31),EA=l+nA|0,EA=(iA=iA+rA|0)>>>0<rA>>>0?EA+1|0:EA,nA=iA,AA=n[g+36>>2],h=g=o(AA,19),D=g>>31,W=g=(I=n[I+28>>2])<<1,iA=xg(h,D,g,S=g>>31),EA=l+EA|0,cA=g=nA+iA|0,g=g>>>0<iA>>>0?EA+1|0:EA,EA=xg(f,E,e,t),iA=l,DA=xg(B,C,rA=DA,N=rA>>31),nA=l+iA|0,nA=(EA=DA+EA|0)>>>0<DA>>>0?nA+1|0:nA,DA=sA,sA=xg(oA,u,sA,R=sA>>31),iA=l+nA|0,iA=(EA=sA+EA|0)>>>0<sA>>>0?iA+1|0:iA,nA=(sA=xg(y,i,pA,p))+EA|0,EA=l+iA|0,EA=nA>>>0<sA>>>0?EA+1|0:EA,iA=nA,sA=tA,nA=xg(uA,k,tA,M=tA>>31),EA=l+EA|0,EA=(iA=iA+nA|0)>>>0<nA>>>0?EA+1|0:EA,nA=xg(s,a,fA,m),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,nA=iA,d=iA=o(yA,19),iA=nA+(wA=xg(iA,_=iA>>31,tA=wA,P=tA>>31))|0,nA=l+EA|0,nA=iA>>>0<wA>>>0?nA+1|0:nA,EA=(wA=xg(w,r,F,G))+iA|0,iA=l+nA|0,iA=EA>>>0<wA>>>0?iA+1|0:iA,wA=I,I=(nA=xg(FA,GA,I,J=I>>31))+EA|0,EA=l+iA|0,EA=I>>>0<nA>>>0?EA+1|0:EA,iA=xg(h,D,c,Q),EA=l+EA|0,HA=I=iA+I|0,I=I>>>0<iA>>>0?EA+1|0:EA,EA=xg(e,t,q,b),nA=l,iA=(yA=xg(B,C,f,E))+EA|0,EA=l+nA|0,EA=iA>>>0<yA>>>0?EA+1|0:EA,yA=xg(y,i,oA,u),nA=l+EA|0,nA=(iA=yA+iA|0)>>>0<yA>>>0?nA+1|0:nA,EA=(yA=xg(pA,p,X,U))+iA|0,iA=l+nA|0,iA=EA>>>0<yA>>>0?iA+1|0:iA,nA=(yA=xg(s,a,uA,k))+EA|0,EA=l+iA|0,EA=nA>>>0<yA>>>0?EA+1|0:EA,aA=nA,j=iA=o(fA,19),nA=xg(iA,x=iA>>31,T,v),EA=l+EA|0,EA=(iA=aA+nA|0)>>>0<nA>>>0?EA+1|0:EA,nA=xg(w,r,d,_),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,fA=xg(F,G,W,S),nA=l+EA|0,nA=(iA=fA+iA|0)>>>0<fA>>>0?nA+1|0:nA,EA=(fA=xg(FA,GA,c,Q))+iA|0,iA=l+nA|0,iA=EA>>>0<fA>>>0?iA+1|0:iA,nA=(fA=xg(h,D,L,H))+EA|0,EA=l+iA|0,EA=nA>>>0<fA>>>0?EA+1|0:EA,fA=nA,gA=EA,(iA=nA+33554432|0)>>>0<33554432&&(EA=EA+1|0),yA=iA,BA=EA,nA=HA,HA=(67108863&EA)<<6|iA>>>26,EA=(EA>>26)+I|0,EA=(nA=nA+HA|0)>>>0<HA>>>0?EA+1|0:EA,HA=nA,nA=EA,(I=HA+16777216|0)>>>0<16777216&&(nA=nA+1|0),CA=I,EA=g+(iA=nA>>25)|0,EA=(I=(nA=(33554431&nA)<<7|I>>>25)+cA|0)>>>0<nA>>>0?EA+1|0:EA,(I=(g=I)+33554432|0)>>>0<33554432&&(EA=EA+1|0),YA=I,I=EA,EA=-67108864&YA,n[eA+24>>2]=g-EA,cA=A,g=xg(e,t,X,U),EA=l,iA=xg(B,C,y,i),nA=l+EA|0,nA=(g=iA+g|0)>>>0<iA>>>0?nA+1|0:nA,iA=xg(s,a,Y,u),EA=l+nA|0,EA=(g=iA+g|0)>>>0<iA>>>0?EA+1|0:EA,nA=g,eA=g=o(pA,19),iA=xg(g,pA=g>>31,T,v),EA=l+EA|0,EA=(g=nA+iA|0)>>>0<iA>>>0?EA+1|0:EA,iA=g,IA=g=o(uA,19),g=iA+(nA=xg(w,r,g,Z=g>>31))|0,iA=l+EA|0,iA=g>>>0<nA>>>0?iA+1|0:iA,nA=xg(W,S,j,x),EA=l+iA|0,EA=(g=nA+g|0)>>>0<nA>>>0?EA+1|0:EA,iA=xg(c,Q,d,_),nA=l+EA|0,nA=(g=iA+g|0)>>>0<iA>>>0?nA+1|0:nA,iA=xg(F,G,L,H),EA=l+nA|0,EA=(g=iA+g|0)>>>0<iA>>>0?EA+1|0:EA,iA=xg(FA,GA,f,E),EA=l+EA|0,EA=(g=iA+g|0)>>>0<iA>>>0?EA+1|0:EA,nA=xg(h,D,q,b),iA=l+EA|0,aA=g=nA+g|0,g=g>>>0<nA>>>0?iA+1|0:iA,EA=xg(s,a,e,t),nA=l,iA=(uA=xg(B,C,sA,M))+EA|0,EA=l+nA|0,EA=iA>>>0<uA>>>0?EA+1|0:EA,nA=iA,uA=iA=o(oA,19),iA=nA+(oA=xg(iA,kA=iA>>31,tA,P))|0,nA=l+EA|0,nA=iA>>>0<oA>>>0?nA+1|0:nA,oA=xg(w,r,eA,pA),EA=l+nA|0,EA=(iA=oA+iA|0)>>>0<oA>>>0?EA+1|0:EA,nA=xg(IA,Z,wA,J),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,nA=(oA=xg(c,Q,j,x))+iA|0,iA=l+EA|0,iA=nA>>>0<oA>>>0?iA+1|0:iA,oA=xg(d,_,rA,N),EA=l+iA|0,EA=(nA=oA+nA|0)>>>0<oA>>>0?EA+1|0:EA,iA=(oA=xg(f,E,F,G))+nA|0,nA=l+EA|0,nA=iA>>>0<oA>>>0?nA+1|0:nA,oA=xg(FA,GA,DA,R),EA=l+nA|0,EA=(iA=oA+iA|0)>>>0<oA>>>0?EA+1|0:EA,nA=xg(h,D,y,i),EA=l+EA|0,bA=iA=nA+iA|0,oA=iA>>>0<nA>>>0?EA+1|0:EA,EA=xg(EA=o(_A,19),EA>>31,T,v),iA=l,nA=xg(B,C,s,a),iA=l+iA|0,iA=(EA=nA+EA|0)>>>0<nA>>>0?iA+1|0:iA,nA=(_A=xg(w,r,uA,kA))+EA|0,EA=l+iA|0,iA=(eA=xg(eA,pA,W,S))+nA|0,nA=l+(nA>>>0<_A>>>0?EA+1|0:EA)|0,nA=iA>>>0<eA>>>0?nA+1|0:nA,eA=xg(c,Q,IA,Z),EA=l+nA|0,EA=(iA=eA+iA|0)>>>0<eA>>>0?EA+1|0:EA,nA=xg(L,H,j,x),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,nA=(eA=xg(f,E,d,_))+iA|0,iA=l+EA|0,iA=nA>>>0<eA>>>0?iA+1|0:iA,eA=xg(F,G,q,b),EA=l+iA|0,EA=(nA=eA+nA|0)>>>0<eA>>>0?EA+1|0:EA,iA=(eA=xg(FA,GA,y,i))+nA|0,nA=l+EA|0,nA=iA>>>0<eA>>>0?nA+1|0:nA,eA=xg(h,D,X,U),EA=l+nA|0,EA=(iA=eA+iA|0)>>>0<eA>>>0?EA+1|0:EA,eA=iA,_A=EA,(iA=iA+33554432|0)>>>0<33554432&&(EA=EA+1|0),pA=iA,uA=EA,kA=(67108863&EA)<<6|iA>>>26,iA=(nA=EA>>26)+oA|0,oA=EA=kA+bA|0,nA=aA,EA=EA>>>0<kA>>>0?iA+1|0:iA,(iA=oA+16777216|0)>>>0<16777216&&(EA=EA+1|0),QA=iA,aA=(33554431&EA)<<7|iA>>>25,EA=(EA>>25)+g|0,EA=(iA=nA+aA|0)>>>0<aA>>>0?EA+1|0:EA,(g=iA+33554432|0)>>>0<33554432&&(EA=EA+1|0),kA=g,g=EA,EA=-67108864&kA,n[cA+8>>2]=iA-EA,aA=A,EA=xg(c,Q,e,t),nA=l,iA=(cA=xg(B,C,wA,J))+EA|0,EA=l+nA|0,EA=iA>>>0<cA>>>0?EA+1|0:EA,nA=xg(Y,u,rA,N),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,nA=xg(f,E,K,p),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,cA=xg(O,k,DA,R),nA=l+EA|0,nA=(iA=cA+iA|0)>>>0<cA>>>0?nA+1|0:nA,EA=(cA=xg(y,i,z,m))+iA|0,iA=l+nA|0,iA=EA>>>0<cA>>>0?iA+1|0:iA,nA=(cA=xg(sA,M,$,V))+EA|0,EA=l+iA|0,EA=nA>>>0<cA>>>0?EA+1|0:EA,iA=nA,nA=xg(s,a,cA=lA,bA=cA>>31),EA=l+EA|0,EA=(iA=iA+nA|0)>>>0<nA>>>0?EA+1|0:EA,nA=xg(FA,GA,tA,P),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,lA=xg(h,D,w,r),nA=l+EA|0,nA=(iA=lA+iA|0)>>>0<lA>>>0?nA+1|0:nA,EA=I>>26,I=(lA=(67108863&I)<<6|YA>>>26)+iA|0,iA=EA+nA|0,EA=iA=I>>>0<lA>>>0?iA+1|0:iA,(I=(nA=I)+16777216|0)>>>0<16777216&&(EA=EA+1|0),YA=I,I=EA,EA=-33554432&YA,n[aA+28>>2]=nA-EA,lA=A,EA=xg(y,i,e,t),iA=l,aA=xg(B,C,DA,R),nA=l+iA|0,nA=(EA=aA+EA|0)>>>0<aA>>>0?nA+1|0:nA,aA=xg(Y,u,sA,M),iA=l+nA|0,iA=(EA=aA+EA|0)>>>0<aA>>>0?iA+1|0:iA,nA=(aA=xg(s,a,K,p))+EA|0,EA=l+iA|0,EA=nA>>>0<aA>>>0?EA+1|0:EA,iA=nA,nA=xg(IA,Z,tA,P),EA=l+EA|0,EA=(iA=iA+nA|0)>>>0<nA>>>0?EA+1|0:EA,nA=xg(w,r,j,x),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,aA=xg(d,_,wA,J),nA=l+EA|0,nA=(iA=aA+iA|0)>>>0<aA>>>0?nA+1|0:nA,EA=(aA=xg(c,Q,F,G))+iA|0,iA=l+nA|0,iA=EA>>>0<aA>>>0?iA+1|0:iA,nA=(aA=xg(FA,GA,rA,N))+EA|0,EA=l+iA|0,EA=nA>>>0<aA>>>0?EA+1|0:EA,iA=nA,nA=xg(h,D,f,E),EA=l+EA|0,aA=iA=iA+nA|0,EA=(EA=iA>>>0<nA>>>0?EA+1|0:EA)+(iA=g>>26)|0,nA=EA=(g=aA+(nA=(67108863&g)<<6|kA>>>26)|0)>>>0<nA>>>0?EA+1|0:EA,(g=(iA=g)+16777216|0)>>>0<16777216&&(nA=nA+1|0),FA=g,g=nA,EA=-33554432&FA,n[lA+12>>2]=iA-EA,EA=xg(e,t,W,S),nA=l,iA=(aA=xg(B,C,w,r))+EA|0,EA=l+nA|0,EA=iA>>>0<aA>>>0?EA+1|0:EA,nA=xg(c,Q,Y,u),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,aA=xg(K,p,L,H),nA=l+EA|0,nA=(iA=aA+iA|0)>>>0<aA>>>0?nA+1|0:nA,EA=(aA=xg(f,E,O,k))+iA|0,iA=l+nA|0,iA=EA>>>0<aA>>>0?iA+1|0:iA,nA=(aA=xg(q,b,z,m))+EA|0,EA=l+iA|0,EA=nA>>>0<aA>>>0?EA+1|0:EA,iA=nA,nA=xg(y,i,$,V),EA=l+EA|0,EA=(iA=iA+nA|0)>>>0<nA>>>0?EA+1|0:EA,nA=xg(cA,bA,X,U),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,hA=xg(s,a,aA=hA,GA=aA>>31),nA=l+EA|0,nA=(iA=hA+iA|0)>>>0<hA>>>0?nA+1|0:nA,EA=(hA=xg(h,D,T,v))+iA|0,iA=l+nA|0,iA=EA>>>0<hA>>>0?iA+1|0:iA,hA=EA,EA=(EA=I>>25)+iA|0,EA=(I=hA+(nA=(33554431&I)<<7|YA>>>25)|0)>>>0<nA>>>0?EA+1|0:EA,(I=(iA=I)+33554432|0)>>>0<33554432&&(EA=EA+1|0),hA=I,I=EA,EA=-67108864&hA,n[lA+32>>2]=iA-EA,nA=iA=fA-(EA=-67108864&yA)|0,EA=(EA=gA-((fA>>>0<EA>>>0)+BA|0)|0)+(iA=g>>25)|0,EA=(g=nA+(fA=(33554431&g)<<7|FA>>>25)|0)>>>0<fA>>>0?EA+1|0:EA,(iA=g+33554432|0)>>>0<33554432&&(EA=EA+1|0),nA=(HA-(-33554432&CA)|0)+((67108863&EA)<<6|iA>>>26)|0,n[A+20>>2]=nA,EA=-67108864&iA,n[A+16>>2]=g-EA,EA=xg(w,r,e,t),nA=l,iA=(tA=xg(B,C,tA,P))+EA|0,EA=l+nA|0,EA=iA>>>0<tA>>>0?EA+1|0:EA,nA=(tA=xg(Y,u,wA,J))+iA|0,iA=l+EA|0,iA=nA>>>0<tA>>>0?iA+1|0:iA,EA=(tA=xg(c,Q,K,p))+nA|0,nA=l+iA|0,iA=(rA=xg(O,k,rA,N))+EA|0,EA=l+(EA>>>0<tA>>>0?nA+1|0:nA)|0,EA=iA>>>0<rA>>>0?EA+1|0:EA,nA=xg(f,E,z,m),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,nA=xg(DA,R,$,V),EA=l+EA|0,EA=(iA=nA+iA|0)>>>0<nA>>>0?EA+1|0:EA,nA=(rA=xg(y,i,cA,bA))+iA|0,iA=l+EA|0,iA=nA>>>0<rA>>>0?iA+1|0:iA,EA=(rA=xg(aA,GA,sA,M))+nA|0,nA=l+iA|0,nA=EA>>>0<rA>>>0?nA+1|0:nA,iA=(rA=xg(s,a,AA,AA>>31))+EA|0,EA=l+nA|0,g=iA,EA=(EA=iA>>>0<rA>>>0?EA+1|0:EA)+(iA=I>>26)|0,EA=(I=g+(nA=(67108863&I)<<6|hA>>>26)|0)>>>0<nA>>>0?EA+1|0:EA,nA=g=I,(I=g+16777216|0)>>>0<16777216&&(EA=EA+1|0),I=-33554432&(iA=I),n[A+36>>2]=g-I,g=A,nA=oA-(-33554432&QA)|0,rA=eA-(I=-67108864&pA)|0,DA=_A-((eA>>>0<I>>>0)+uA|0)|0,EA=xg((33554431&(I=EA))<<7|iA>>>25,EA>>=25,19,0),iA=l+DA|0,aA=g,EA=iA=(I=EA+rA|0)>>>0<EA>>>0?iA+1|0:iA,(g=I+33554432|0)>>>0<33554432&&(EA=EA+1|0),iA=((67108863&EA)<<6|(iA=g)>>>26)+nA|0,n[aA+4>>2]=iA,iA=A,A=-67108864&g,n[iA>>2]=I-A}function Y(A,I){var g,B,C,Q,E,i,a,r,e,t,c,f,y,s,w,h,D,u,p,F,G,k,_,H,Y,b,m,U,v,S,N,R,M,d,P,J,x,L=0,K=0,q=0,X=0,V=0,T=0,W=0,j=0,Z=0,O=0,z=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,QA=0,EA=0,iA=0,nA=0;iA=A,Q=L=(V=n[I+12>>2])<<1,E=L>>31,i=L=(Z=n[I+4>>2])<<1,L=xg(Q,E,L,g=L>>31),q=l,K=L,k=L=IA=n[I+8>>2],X=xg(L,$=L>>31,L,$),L=l+q|0,L=(K=K+X|0)>>>0<X>>>0?L+1|0:L,X=K,a=K=BA=n[I+16>>2],r=K>>31,e=K=(CA=n[I>>2])<<1,q=xg(a,r,K,B=K>>31),L=l+L|0,L=(K=X+q|0)>>>0<q>>>0?L+1|0:L,W=K,q=n[I+28>>2],p=K=o(q,38),v=q,X=xg(K,h=K>>31,q,_=q>>31),L=l+L|0,L=(K=W+X|0)>>>0<X>>>0?L+1|0:L,T=K,W=n[I+32>>2],j=xg(c=K=o(W,19),f=K>>31,K=(X=n[I+24>>2])<<1,K>>31),K=l+L|0,K=(O=T+j|0)>>>0<j>>>0?K+1|0:K,T=O,AA=n[I+36>>2],t=L=o(AA,38),C=L>>31,D=I=(O=n[I+20>>2])<<1,j=xg(L,C,I,s=I>>31),I=l+K|0,H=(L=T+j|0)<<1,d=L=(L>>>0<j>>>0?I+1|0:I)<<1|L>>>31,(I=H+33554432|0)>>>0<33554432&&(L=L+1|0),S=I,P=L,I=L>>26,L=(67108863&L)<<6|S>>>26,K=xg(i,g,a,r),j=l,T=L,u=L=IA<<1,QA=V,V=xg(L,w=L>>31,V,Y=V>>31),L=l+j|0,L=(K=V+K|0)>>>0<V>>>0?L+1|0:L,IA=O,V=(j=xg(O,F=O>>31,e,B))+K|0,K=l+L|0,K=V>>>0<j>>>0?K+1|0:K,gA=V,N=L=q<<1,V=xg(c,f,L,b=L>>31),L=l+K|0,L=(q=gA+V|0)>>>0<V>>>0?L+1|0:L,K=q,V=X,q=xg(t,C,X,y=X>>31),L=l+L|0,L=(K=K+q|0)>>>0<q>>>0?L+1|0:L,q=K,I=I+(K=L<<1|K>>>31)|0,EA=L=T+(q<<=1)|0,L=L>>>0<q>>>0?I+1|0:I,(I=EA+16777216|0)>>>0<16777216&&(L=L+1|0),J=I,I=(33554431&L)<<7|I>>>25,q=L>>25,L=xg(Q,E,QA,Y),K=l,T=I,I=(j=xg(a,r,u,w))+L|0,L=l+K|0,L=I>>>0<j>>>0?L+1|0:L,K=xg(i,g,D,s),L=l+L|0,L=(I=K+I|0)>>>0<K>>>0?L+1|0:L,K=(j=xg(e,B,V,y))+I|0,I=l+L|0,I=K>>>0<j>>>0?I+1|0:I,j=W,W=xg(c,f,W,G=W>>31),L=l+I|0,L=(K=W+K|0)>>>0<W>>>0?L+1|0:L,I=(W=xg(t,C,N,b))+K|0,K=l+L|0,I=((L=I)>>>0<W>>>0?K+1|0:K)<<1|L>>>31,W=L<<1,L=I+q|0,L=(K=T+W|0)>>>0<W>>>0?L+1|0:L,(K=(I=K)+33554432|0)>>>0<33554432&&(L=L+1|0),gA=K,q=L,L=-67108864&K,n[iA+24>>2]=I-L,W=A,I=xg(I=o(O,38),I>>31,IA,F),L=l,T=I,O=xg(I=CA,K=I>>31,I,K),K=l+L|0,K=(I=T+O|0)>>>0<O>>>0?K+1|0:K,L=I,z=I=o(X,19),m=I>>31,R=I=BA<<1,I=L+(X=xg(z,m,I,U=I>>31))|0,L=l+K|0,L=I>>>0<X>>>0?L+1|0:L,K=xg(Q,E,p,h),L=l+L|0,L=(I=K+I|0)>>>0<K>>>0?L+1|0:L,K=(X=xg(c,f,u,w))+I|0,I=l+L|0,I=K>>>0<X>>>0?I+1|0:I,X=xg(i,g,t,C),L=l+I|0,iA=L=((I=K=X+K|0)>>>0<X>>>0?L+1|0:L)<<1|I>>>31,K=L,(I=33554432+(O=I<<1)|0)>>>0<33554432&&(K=K+1|0),CA=I,BA=K,I=(67108863&K)<<6|I>>>26,X=K>>26,L=xg(z,m,D,s),K=l,nA=I,I=(Z=xg(e,B,T=Z,M=T>>31))+L|0,L=l+K|0,L=I>>>0<Z>>>0?L+1|0:L,K=(Z=xg(a,r,p,h))+I|0,I=l+L|0,I=K>>>0<Z>>>0?I+1|0:I,Z=xg(c,f,Q,E),L=l+I|0,L=(K=Z+K|0)>>>0<Z>>>0?L+1|0:L,I=(Z=xg(t,C,k,$))+K|0,K=l+L|0,I=((L=I)>>>0<Z>>>0?K+1|0:K)<<1|L>>>31,Z=L<<1,L=I+X|0,L=(K=nA+Z|0)>>>0<Z>>>0?L+1|0:L,Z=K,(I=K+16777216|0)>>>0<16777216&&(L=L+1|0),nA=I,K=I,I=L>>25,L=(33554431&L)<<7|K>>>25,X=I,I=xg(e,B,k,$),K=l,x=L,T=xg(i,g,T,M),L=l+K|0,L=(I=T+I|0)>>>0<T>>>0?L+1|0:L,T=xg(z,m,V,y),K=l+L|0,K=(I=T+I|0)>>>0<T>>>0?K+1|0:K,T=xg(D,s,p,h),L=l+K|0,L=(I=T+I|0)>>>0<T>>>0?L+1|0:L,K=xg(c,f,R,U),L=l+L|0,L=(I=K+I|0)>>>0<K>>>0?L+1|0:L,K=(T=xg(t,C,Q,E))+I|0,I=l+L|0,L=(L=(I=K>>>0<T>>>0?I+1|0:I)<<1|K>>>31)+X|0,K=L=(I=x+(K<<=1)|0)>>>0<K>>>0?L+1|0:L,(L=I+33554432|0)>>>0<33554432&&(K=K+1|0),T=L,X=K,L&=-67108864,n[W+8>>2]=I-L,I=xg(u,w,IA,F),K=l,L=(z=xg(a,r,Q,E))+I|0,I=l+K|0,I=L>>>0<z>>>0?I+1|0:I,K=(z=xg(i,g,V,y))+L|0,L=l+I|0,L=K>>>0<z>>>0?L+1|0:L,I=(z=xg(e,B,v,_))+K|0,K=l+L|0,K=I>>>0<z>>>0?K+1|0:K,z=xg(t,C,j,G),L=l+K|0,L=(L=(L=(I=z+I|0)>>>0<z>>>0?L+1|0:L)<<1|I>>>31)+(K=q>>26)|0,K=I=(q=(67108863&q)<<6|gA>>>26)+(I<<1)|0,I=L=I>>>0<q>>>0?L+1|0:L,(L=K+16777216|0)>>>0<16777216&&(I=I+1|0),gA=L,q=I,I=-33554432&L,n[W+28>>2]=K-I,I=xg(e,B,QA,Y),L=l,K=xg(i,g,k,$),L=l+L|0,L=(I=K+I|0)>>>0<K>>>0?L+1|0:L,K=xg(V,y,p,h),L=l+L|0,L=(I=K+I|0)>>>0<K>>>0?L+1|0:L,K=($=xg(c,f,D,s))+I|0,I=l+L|0,I=K>>>0<$>>>0?I+1|0:I,L=($=xg(t,C,a,r))+K|0,K=l+I|0,I=L,L=(L>>>0<$>>>0?K+1|0:K)<<1|L>>>31,K=I<<1,L=(I=X>>26)+L|0,L=(K=K+(X=(67108863&X)<<6|T>>>26)|0)>>>0<X>>>0?L+1|0:L,(K=(I=K)+16777216|0)>>>0<16777216&&(L=L+1|0),QA=K,X=L,L=-33554432&K,n[W+12>>2]=I-L,$=A,I=xg(V,y,u,w),L=l,K=xg(a,r,a,r),L=l+L|0,L=(I=K+I|0)>>>0<K>>>0?L+1|0:L,K=xg(Q,E,D,s),L=l+L|0,L=(I=K+I|0)>>>0<K>>>0?L+1|0:L,K=xg(i,g,N,b),L=l+L|0,L=(I=K+I|0)>>>0<K>>>0?L+1|0:L,K=(W=xg(e,B,j,G))+I|0,I=l+L|0,I=K>>>0<W>>>0?I+1|0:I,L=(AA=xg(t,C,W=AA,T=W>>31))+K|0,K=l+I|0,I=L,L=(L>>>0<AA>>>0?K+1|0:K)<<1|L>>>31,K=I<<1,L=(I=q>>25)+L|0,L=(K=K+(q=(33554431&q)<<7|gA>>>25)|0)>>>0<q>>>0?L+1|0:L,(K=(I=K)+33554432|0)>>>0<33554432&&(L=L+1|0),AA=K,q=L,L=-67108864&K,n[$+32>>2]=I-L,L=X>>25,K=(X=(33554431&X)<<7|QA>>>25)+(H-(I=-67108864&S)|0)|0,I=L+(d-((H>>>0<I>>>0)+P|0)|0)|0,L=I=K>>>0<X>>>0?I+1|0:I,(I=K+33554432|0)>>>0<33554432&&(L=L+1|0),X=((67108863&L)<<6|I>>>26)+(EA=EA-(-33554432&J)|0)|0,n[$+20>>2]=X,I&=-67108864,n[A+16>>2]=K-I,I=xg(Q,E,V,y),K=l,L=(V=xg(IA,F,R,U))+I|0,I=l+K|0,I=L>>>0<V>>>0?I+1|0:I,K=(V=xg(u,w,v,_))+L|0,L=l+I|0,L=K>>>0<V>>>0?L+1|0:L,I=(V=xg(i,g,j,G))+K|0,K=l+L|0,K=I>>>0<V>>>0?K+1|0:K,V=xg(e,B,W,T),L=l+K|0,L=(L=(L=(I=V+I|0)>>>0<V>>>0?L+1|0:L)<<1|I>>>31)+(K=q>>26)|0,L=(I=(q=(67108863&q)<<6|AA>>>26)+(I<<1)|0)>>>0<q>>>0?L+1|0:L,K=I,q=I,X=I,I=L,(L=K+16777216|0)>>>0<16777216&&(I=I+1|0),K=-33554432&L,n[A+36>>2]=q-K,q=A,X=Z-(-33554432&nA)|0,I=(L=xg((33554431&I)<<7|L>>>25,I>>25,19,0))+(O-(K=-67108864&CA)|0)|0,K=l+(iA-((O>>>0<K>>>0)+BA|0)|0)|0,K=I>>>0<L>>>0?K+1|0:K,L=I,V=q,I=K,(K=L+33554432|0)>>>0<33554432&&(I=I+1|0),q=((67108863&I)<<6|K>>>26)+X|0,n[V+4>>2]=q,I=A,A=-67108864&K,n[I>>2]=L-A}function b(A,I,g){var B,C=0,Q=0,E=0,i=0,a=0,r=0,o=0,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0,u=0,p=0,F=0,G=0,k=0,_=0,H=0,Y=0,b=0,m=0,U=0,v=0,S=0,N=0,R=0,M=0,d=0,P=0,J=0,x=0,L=0,K=0,q=0,X=0,V=0,T=0,W=0,j=0,Z=0,O=0,z=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0;for(D=B=D-2048|0,BB(B+1024|0,I),YI(B+1024|0,A),BB(B,B+1024|0),YI(B,g),I=0;e=n[(i=(B+1024|0)+(96|(A=M<<7))|0)>>2],Q=n[i+4>>2],a=k=jg((C=e)^(e=MI(e=n[(r=o=A+(B+1024|0)|0)>>2],a=n[r+4>>2],E=n[(r=(B+1024|0)+(32|A)|0)>>2],t=n[r+4>>2])),(a=Q)^(Q=l),32),y=e,w=Q,C=jg((k=MI(C=n[(Q=e=(B+1024|0)+(64|A)|0)>>2],s=n[Q+4>>2],k,Q=l))^E,(C=t)^(t=l),24),E=jg(a^(S=MI(y,w,C,s=l)),(U=l)^Q,16),a=Q=l,n[i>>2]=E,n[i+4>>2]=Q,t=MI(k,t,E,Q),h=Q=l,n[e>>2]=t,n[e+4>>2]=Q,k=jg(C^t,Q^s,63),s=Q=l,n[r>>2]=k,n[r+4>>2]=Q,C=n[(Q=m=(B+1024|0)+(104|A)|0)>>2],b=n[Q+4>>2],_=n[(Q=(B+1024|0)+(72|A)|0)>>2],f=n[Q+4>>2],c=C,u=MI(u=n[(C=w=(B+1024|0)+(8|A)|0)>>2],F=n[C+4>>2],y=n[(C=G=(B+1024|0)+(40|A)|0)>>2],v=n[C+4>>2]),C=MI(_,f,P=jg(c^u,(C=b)^(b=l),32),F=l),Z=MI(c=u,b,v=jg(_=C^y,(y=l)^v,24),u=l),C=MI(C,y,b=jg(Z^P,(O=l)^F,16),z=l),y=P=l,n[Q>>2]=C,n[Q+4>>2]=y,v=jg(C^v,y^u,63),u=l,J=n[(F=P=(B+1024|0)+(112|A)|0)>>2],N=n[F+4>>2],H=n[(F=(B+1024|0)+(80|A)|0)>>2],L=n[F+4>>2],d=jg((f=J)^(Y=MI(Y=n[(_=J=(B+1024|0)+(16|A)|0)>>2],p=n[_+4>>2],R=n[(c=_=(B+1024|0)+(48|A)|0)>>2],c=n[c+4>>2])),(p=N)^(N=l),32),c=jg(H=(f=MI(H,L,d,p=l))^R,c^(R=l),24),IA=jg(($=MI(Y,H=N,c,N=l))^d,(AA=l)^p,16),N=jg(c^(L=MI(f,R,IA,gA=l)),(V=l)^N,63),c=l,d=n[(Y=R=(B+1024|0)+(120|A)|0)>>2],p=n[Y+4>>2],q=n[(f=Y=(B+1024|0)+(88|A)|0)>>2],j=n[f+4>>2],x=jg((X=d)^(W=MI(T=n[(f=d=(B+1024|0)+(24|A)|0)>>2],x=n[f+4>>2],H=n[(A=(B+1024|0)+(56|A)|0)>>2],f=n[A+4>>2])),(T=p)^(p=l),32),f=jg(X=(q=MI(q,j,x,K=l))^H,f^(H=l),24),X=H,x=jg((H=MI(W,H=p,f,p=l))^x,(W=l)^K,16),p=jg(f^(q=MI(q,X,x,K=l)),(j=l)^p,63),f=l,X=L,T=V,L=jg(x^(S=MI(S,U,v,u)),K^(U=l),32),v=jg((x=MI(X,T,L,V=l))^v,(K=l)^u,24),u=MI(u=S,U,v,S=l),U=l,n[o>>2]=u,n[o+4>>2]=U,o=jg(u^L,V^U,16),u=l,n[R>>2]=o,n[R+4>>2]=u,o=MI(x,K,o,u),u=l,n[F>>2]=o,n[F+4>>2]=u,BA=G,CA=jg(o^v,u^S,63),n[BA>>2]=CA,n[G+4>>2]=l,G=jg((o=MI(Z,O,N,c))^E,(u=a)^(a=l),32),E=jg((u=MI(q,j,G,v=l))^N,(F=l)^c,24),o=MI(o,c=a,E,a=l),c=N=l,n[w>>2]=o,n[w+4>>2]=c,o=jg(o^G,c^v,16),w=l,n[i>>2]=o,n[i+4>>2]=w,i=MI(u,F,o,w),n[Y>>2]=i,o=l,n[Y+4>>2]=o,BA=_,CA=jg(E^i,o^a,63),n[BA>>2]=CA,n[_+4>>2]=l,w=t,E=MI($,AA,p,f),h=MI(w,h,o=jg(b^E,z^(t=l),32),a=l),E=MI(E,c=t,i=jg(h^p,(w=l)^f,24),t=l),G=l,n[J>>2]=E,n[J+4>>2]=G,E=jg(E^o,a^G,16),o=l,n[m>>2]=E,n[m+4>>2]=o,E=MI(h,w,E,o),n[e>>2]=E,a=e,e=l,n[a+4>>2]=e,BA=A,CA=jg(E^i,e^t,63),n[BA>>2]=CA,n[A+4>>2]=l,A=k,i=MI(H,W,k,s),k=MI(C,y,E=jg(IA^i,gA^(e=l),32),t=l),i=MI(i,a=e,A=jg(A^k,(C=l)^s,24),e=l),o=l,n[d>>2]=i,n[d+4>>2]=o,i=jg(E^i,t^o,16),E=l,n[P>>2]=i,n[P+4>>2]=E,i=MI(k,C,i,E),n[Q>>2]=i,C=Q,Q=l,n[C+4>>2]=Q,BA=r,CA=jg(A^i,Q^e,63),n[BA>>2]=CA,n[r+4>>2]=l,8!=(0|(M=M+1|0)););for(;r=n[(i=768+(A=(Q=I<<4)+(B+1024|0)|0)|0)>>2],i=n[i+4>>2],C=r,r=n[A+256>>2],e=n[A+260>>2],t=jg(C^(E=MI(n[A>>2],n[A+4>>2],r,e)),(t=i)^(i=l),32),a=i,i=l,k=jg((C=r)^(r=MI(n[A+512>>2],n[A+516>>2],t,i)),(s=e)^(e=l),24),i=jg(t^(b=MI(E,a,k,C=l)),(y=l)^i,16),E=t=l,n[A+768>>2]=i,n[A+772>>2]=E,r=MI(r,e,i,E),t=e=l,n[A+512>>2]=r,n[A+516>>2]=e,e=jg(r^k,C^e,63),k=C=l,n[A+256>>2]=e,n[A+260>>2]=C,M=n[A+780>>2],w=n[A+520>>2],c=n[A+524>>2],s=n[A+776>>2],Q=C=(B+1024|0)+(8|Q)|0,o=n[A+264>>2],a=n[A+268>>2],h=MI(n[Q>>2],n[Q+4>>2],o,a),Q=MI(w,c,s=jg(s^h,(Q=M)^(M=l),32),m=l),v=MI(w=h,M,a=jg(c=Q^o,a^(o=l),24),h=l),Q=MI(Q,o,M=jg(v^s,(u=l)^m,16),P=l),o=s=l,n[A+520>>2]=Q,n[A+524>>2]=o,a=jg(Q^a,o^h,63),h=l,s=n[A+900>>2],_=n[A+640>>2],f=n[A+644>>2],F=n[A+896>>2],m=n[A+384>>2],w=n[A+388>>2],F=jg(F^(G=MI(n[A+128>>2],n[A+132>>2],m,w)),(c=s)^(s=l),32),w=jg(c=(_=MI(_,f,F,J=l))^m,w^(m=l),24),c=_,_=jg((_=F)^(F=MI(G,f=s,w,s=l)),(f=J)^(J=l),16),s=jg(w^(c=MI(c,m,_,N=l)),(R=l)^s,63),m=l,w=n[A+908>>2],S=n[A+648>>2],U=n[A+652>>2],p=n[A+904>>2],G=n[A+392>>2],Y=n[A+396>>2],p=jg(p^(d=MI(n[A+136>>2],n[A+140>>2],G,Y)),(f=w)^(w=l),32),H=Y=jg(U=(S=MI(S,U,p,f=l))^G,Y^(G=l),24),p=jg((Y=MI(d,U=w,Y,w=l))^p,(d=l)^f,16),w=jg(H^(S=MI(S,G,p,f=l)),(U=l)^w,63),G=l,H=c,L=R,c=jg(p^(b=MI(b,y,a,h)),f^(y=l),32),a=jg((p=MI(H,L,c,R=l))^a,(f=l)^h,24),h=MI(h=b,y,a,b=l),y=l,n[A>>2]=h,n[A+4>>2]=y,h=jg(h^c,R^y,16),y=l,n[A+904>>2]=h,n[A+908>>2]=y,h=MI(p,f,h,y),y=l,n[A+640>>2]=h,n[A+644>>2]=y,BA=A,CA=jg(a^h,y^b,63),n[BA+264>>2]=CA,n[A+268>>2]=l,y=s,h=jg((a=MI(v,u,s,m))^i,(s=E)^(E=l),32),i=jg(y^(b=MI(S,U,h,s=l)),(c=m)^(m=l),24),E=MI(y=a,E,i,a=l),y=l,n[C>>2]=E,n[C+4>>2]=y,E=jg(E^h,s^y,16),C=l,n[A+768>>2]=E,n[A+772>>2]=C,E=MI(b,m,E,C),n[A+648>>2]=E,C=l,n[A+652>>2]=C,BA=A,CA=jg(E^i,C^a,63),n[BA+384>>2]=CA,n[A+388>>2]=l,a=r,s=t,r=MI(F,J,w,G),M=MI(a,s,t=jg(M^r,P^(E=l),32),C=l),r=MI(r,s=E,i=jg(M^w,(a=l)^G,24),E=l),h=l,n[A+128>>2]=r,n[A+132>>2]=h,r=jg(r^t,C^h,16),C=t=l,n[A+776>>2]=r,n[A+780>>2]=C,r=MI(M,a,r,C),n[A+512>>2]=r,t=l,n[A+516>>2]=t,BA=A,CA=jg(i^r,E^t,63),n[BA+392>>2]=CA,n[A+396>>2]=l,C=e,t=Q,Q=jg(_^(r=MI(Y,d,e,k)),N^(e=l),32),i=jg(C^(t=MI(t,o,Q,E=l)),(a=k)^(k=l),24),r=MI(r,C=e,i,e=l),C=l,n[A+136>>2]=r,n[A+140>>2]=C,r=jg(Q^r,E^C,16),Q=l,n[A+896>>2]=r,n[A+900>>2]=Q,r=MI(t,k,r,Q),n[A+520>>2]=r,Q=l,n[A+524>>2]=Q,BA=A,CA=jg(i^r,Q^e,63),n[BA+256>>2]=CA,n[A+260>>2]=l,8!=(0|(I=I+1|0)););BB(g,B),YI(g,B+1024|0),D=B+2048|0}function m(A,I,g){var B,C=0,Q=0,E=0,i=0,a=0,r=0,o=0,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0,u=0,p=0,F=0,G=0,k=0,_=0,H=0,Y=0,b=0,m=0,U=0,v=0,S=0,N=0,R=0,M=0,d=0,P=0,J=0,x=0,L=0,K=0,q=0,X=0,V=0,T=0,W=0,j=0,Z=0,O=0,z=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0;for(D=B=D-2048|0,BB(B+1024|0,I),YI(B+1024|0,A),BB(B,B+1024|0),I=0;e=n[(i=(B+1024|0)+(96|(A=M<<7))|0)>>2],Q=n[i+4>>2],a=k=jg((C=e)^(e=MI(e=n[(r=o=A+(B+1024|0)|0)>>2],a=n[r+4>>2],E=n[(r=(B+1024|0)+(32|A)|0)>>2],t=n[r+4>>2])),(a=Q)^(Q=l),32),y=e,w=Q,C=jg((k=MI(C=n[(Q=e=(B+1024|0)+(64|A)|0)>>2],s=n[Q+4>>2],k,Q=l))^E,(C=t)^(t=l),24),E=jg(a^(S=MI(y,w,C,s=l)),(U=l)^Q,16),a=Q=l,n[i>>2]=E,n[i+4>>2]=Q,t=MI(k,t,E,Q),h=Q=l,n[e>>2]=t,n[e+4>>2]=Q,k=jg(C^t,Q^s,63),s=Q=l,n[r>>2]=k,n[r+4>>2]=Q,C=n[(Q=m=(B+1024|0)+(104|A)|0)>>2],b=n[Q+4>>2],_=n[(Q=(B+1024|0)+(72|A)|0)>>2],f=n[Q+4>>2],c=C,u=MI(u=n[(C=w=(B+1024|0)+(8|A)|0)>>2],F=n[C+4>>2],y=n[(C=G=(B+1024|0)+(40|A)|0)>>2],v=n[C+4>>2]),C=MI(_,f,P=jg(c^u,(C=b)^(b=l),32),F=l),Z=MI(c=u,b,v=jg(_=C^y,(y=l)^v,24),u=l),C=MI(C,y,b=jg(Z^P,(O=l)^F,16),z=l),y=P=l,n[Q>>2]=C,n[Q+4>>2]=y,v=jg(C^v,y^u,63),u=l,J=n[(F=P=(B+1024|0)+(112|A)|0)>>2],N=n[F+4>>2],H=n[(F=(B+1024|0)+(80|A)|0)>>2],L=n[F+4>>2],d=jg((f=J)^(Y=MI(Y=n[(_=J=(B+1024|0)+(16|A)|0)>>2],p=n[_+4>>2],R=n[(c=_=(B+1024|0)+(48|A)|0)>>2],c=n[c+4>>2])),(p=N)^(N=l),32),c=jg(H=(f=MI(H,L,d,p=l))^R,c^(R=l),24),IA=jg(($=MI(Y,H=N,c,N=l))^d,(AA=l)^p,16),N=jg(c^(L=MI(f,R,IA,gA=l)),(V=l)^N,63),c=l,d=n[(Y=R=(B+1024|0)+(120|A)|0)>>2],p=n[Y+4>>2],q=n[(f=Y=(B+1024|0)+(88|A)|0)>>2],j=n[f+4>>2],x=jg((X=d)^(W=MI(T=n[(f=d=(B+1024|0)+(24|A)|0)>>2],x=n[f+4>>2],H=n[(A=(B+1024|0)+(56|A)|0)>>2],f=n[A+4>>2])),(T=p)^(p=l),32),f=jg(X=(q=MI(q,j,x,K=l))^H,f^(H=l),24),X=H,x=jg((H=MI(W,H=p,f,p=l))^x,(W=l)^K,16),p=jg(f^(q=MI(q,X,x,K=l)),(j=l)^p,63),f=l,X=L,T=V,L=jg(x^(S=MI(S,U,v,u)),K^(U=l),32),v=jg((x=MI(X,T,L,V=l))^v,(K=l)^u,24),u=MI(u=S,U,v,S=l),U=l,n[o>>2]=u,n[o+4>>2]=U,o=jg(u^L,V^U,16),u=l,n[R>>2]=o,n[R+4>>2]=u,o=MI(x,K,o,u),u=l,n[F>>2]=o,n[F+4>>2]=u,BA=G,CA=jg(o^v,u^S,63),n[BA>>2]=CA,n[G+4>>2]=l,G=jg((o=MI(Z,O,N,c))^E,(u=a)^(a=l),32),E=jg((u=MI(q,j,G,v=l))^N,(F=l)^c,24),o=MI(o,c=a,E,a=l),c=N=l,n[w>>2]=o,n[w+4>>2]=c,o=jg(o^G,c^v,16),w=l,n[i>>2]=o,n[i+4>>2]=w,i=MI(u,F,o,w),n[Y>>2]=i,o=l,n[Y+4>>2]=o,BA=_,CA=jg(E^i,o^a,63),n[BA>>2]=CA,n[_+4>>2]=l,w=t,E=MI($,AA,p,f),h=MI(w,h,o=jg(b^E,z^(t=l),32),a=l),E=MI(E,c=t,i=jg(h^p,(w=l)^f,24),t=l),G=l,n[J>>2]=E,n[J+4>>2]=G,E=jg(E^o,a^G,16),o=l,n[m>>2]=E,n[m+4>>2]=o,E=MI(h,w,E,o),n[e>>2]=E,a=e,e=l,n[a+4>>2]=e,BA=A,CA=jg(E^i,e^t,63),n[BA>>2]=CA,n[A+4>>2]=l,A=k,i=MI(H,W,k,s),k=MI(C,y,E=jg(IA^i,gA^(e=l),32),t=l),i=MI(i,a=e,A=jg(A^k,(C=l)^s,24),e=l),o=l,n[d>>2]=i,n[d+4>>2]=o,i=jg(E^i,t^o,16),E=l,n[P>>2]=i,n[P+4>>2]=E,i=MI(k,C,i,E),n[Q>>2]=i,C=Q,Q=l,n[C+4>>2]=Q,BA=r,CA=jg(A^i,Q^e,63),n[BA>>2]=CA,n[r+4>>2]=l,8!=(0|(M=M+1|0)););for(;r=n[(i=768+(A=(Q=I<<4)+(B+1024|0)|0)|0)>>2],i=n[i+4>>2],C=r,r=n[A+256>>2],e=n[A+260>>2],t=jg(C^(E=MI(n[A>>2],n[A+4>>2],r,e)),(t=i)^(i=l),32),a=i,i=l,k=jg((C=r)^(r=MI(n[A+512>>2],n[A+516>>2],t,i)),(s=e)^(e=l),24),i=jg(t^(b=MI(E,a,k,C=l)),(y=l)^i,16),E=t=l,n[A+768>>2]=i,n[A+772>>2]=E,r=MI(r,e,i,E),t=e=l,n[A+512>>2]=r,n[A+516>>2]=e,e=jg(r^k,C^e,63),k=C=l,n[A+256>>2]=e,n[A+260>>2]=C,M=n[A+780>>2],w=n[A+520>>2],c=n[A+524>>2],s=n[A+776>>2],Q=C=(B+1024|0)+(8|Q)|0,o=n[A+264>>2],a=n[A+268>>2],h=MI(n[Q>>2],n[Q+4>>2],o,a),Q=MI(w,c,s=jg(s^h,(Q=M)^(M=l),32),m=l),v=MI(w=h,M,a=jg(c=Q^o,a^(o=l),24),h=l),Q=MI(Q,o,M=jg(v^s,(u=l)^m,16),P=l),o=s=l,n[A+520>>2]=Q,n[A+524>>2]=o,a=jg(Q^a,o^h,63),h=l,s=n[A+900>>2],_=n[A+640>>2],f=n[A+644>>2],F=n[A+896>>2],m=n[A+384>>2],w=n[A+388>>2],F=jg(F^(G=MI(n[A+128>>2],n[A+132>>2],m,w)),(c=s)^(s=l),32),w=jg(c=(_=MI(_,f,F,J=l))^m,w^(m=l),24),c=_,_=jg((_=F)^(F=MI(G,f=s,w,s=l)),(f=J)^(J=l),16),s=jg(w^(c=MI(c,m,_,N=l)),(R=l)^s,63),m=l,w=n[A+908>>2],S=n[A+648>>2],U=n[A+652>>2],p=n[A+904>>2],G=n[A+392>>2],Y=n[A+396>>2],p=jg(p^(d=MI(n[A+136>>2],n[A+140>>2],G,Y)),(f=w)^(w=l),32),H=Y=jg(U=(S=MI(S,U,p,f=l))^G,Y^(G=l),24),p=jg((Y=MI(d,U=w,Y,w=l))^p,(d=l)^f,16),w=jg(H^(S=MI(S,G,p,f=l)),(U=l)^w,63),G=l,H=c,L=R,c=jg(p^(b=MI(b,y,a,h)),f^(y=l),32),a=jg((p=MI(H,L,c,R=l))^a,(f=l)^h,24),h=MI(h=b,y,a,b=l),y=l,n[A>>2]=h,n[A+4>>2]=y,h=jg(h^c,R^y,16),y=l,n[A+904>>2]=h,n[A+908>>2]=y,h=MI(p,f,h,y),y=l,n[A+640>>2]=h,n[A+644>>2]=y,BA=A,CA=jg(a^h,y^b,63),n[BA+264>>2]=CA,n[A+268>>2]=l,y=s,h=jg((a=MI(v,u,s,m))^i,(s=E)^(E=l),32),i=jg(y^(b=MI(S,U,h,s=l)),(c=m)^(m=l),24),E=MI(y=a,E,i,a=l),y=l,n[C>>2]=E,n[C+4>>2]=y,E=jg(E^h,s^y,16),C=l,n[A+768>>2]=E,n[A+772>>2]=C,E=MI(b,m,E,C),n[A+648>>2]=E,C=l,n[A+652>>2]=C,BA=A,CA=jg(E^i,C^a,63),n[BA+384>>2]=CA,n[A+388>>2]=l,a=r,s=t,r=MI(F,J,w,G),M=MI(a,s,t=jg(M^r,P^(E=l),32),C=l),r=MI(r,s=E,i=jg(M^w,(a=l)^G,24),E=l),h=l,n[A+128>>2]=r,n[A+132>>2]=h,r=jg(r^t,C^h,16),C=t=l,n[A+776>>2]=r,n[A+780>>2]=C,r=MI(M,a,r,C),n[A+512>>2]=r,t=l,n[A+516>>2]=t,BA=A,CA=jg(i^r,E^t,63),n[BA+392>>2]=CA,n[A+396>>2]=l,C=e,t=Q,Q=jg(_^(r=MI(Y,d,e,k)),N^(e=l),32),i=jg(C^(t=MI(t,o,Q,E=l)),(a=k)^(k=l),24),r=MI(r,C=e,i,e=l),C=l,n[A+136>>2]=r,n[A+140>>2]=C,r=jg(Q^r,E^C,16),Q=l,n[A+896>>2]=r,n[A+900>>2]=Q,r=MI(t,k,r,Q),n[A+520>>2]=r,Q=l,n[A+524>>2]=Q,BA=A,CA=jg(i^r,Q^e,63),n[BA+256>>2]=CA,n[A+260>>2]=l,8!=(0|(I=I+1|0)););BB(g,B),YI(g,B+1024|0),D=B+2048|0}function U(A,I){var g,B,C,Q,E,i,a,r,e,t,c,f,y,s,w,h,D,u,p,F,G,k,_,H,Y,b,m,U,v,S,N,R,M,d,P,J,x=0,L=0,K=0,q=0,X=0,V=0,T=0,W=0,j=0,Z=0,O=0,z=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,QA=0;V=A,t=L=(x=n[I+12>>2])<<1,W=x,x=xg(L,Q=L>>31,x,H=x>>31),K=l,L=x,E=x=CA=n[I+16>>2],i=x>>31,D=x=(Z=n[I+8>>2])<<1,X=xg(E,i,x,y=x>>31),x=l+K|0,x=(L=L+X|0)>>>0<X>>>0?x+1|0:x,K=L,s=L=(X=n[I+20>>2])<<1,w=L>>31,a=L=(O=n[I+4>>2])<<1,q=xg(s,w,L,g=L>>31),L=l+x|0,L=(K=K+q|0)>>>0<q>>>0?L+1|0:L,u=x=T=n[I+24>>2],c=x>>31,r=x=(gA=n[I>>2])<<1,q=xg(T,c,x,B=x>>31),x=l+L|0,x=(K=q+K|0)>>>0<q>>>0?x+1|0:x,j=K,L=n[I+32>>2],h=K=o(L,19),Y=L,K=xg(K,f=K>>31,L,G=L>>31),x=l+x|0,x=(L=j+K|0)>>>0<K>>>0?x+1|0:x,j=L,$=n[I+36>>2],e=L=o($,38),C=L>>31,N=I=(K=n[I+28>>2])<<1,q=xg(L,C,I,b=I>>31),I=l+x|0,AA=L=j+q|0,z=L>>>0<q>>>0?I+1|0:I,I=xg(a,g,E,i),x=l,L=xg(D,y,W,H),x=l+x|0,x=(I=L+I|0)>>>0<L>>>0?x+1|0:x,m=X,q=xg(X,k=X>>31,r,B),L=l+x|0,L=(I=q+I|0)>>>0<q>>>0?L+1|0:L,q=xg(h,f,N,b),x=l+L|0,x=(I=q+I|0)>>>0<q>>>0?x+1|0:x,L=xg(e,C,T,c),x=l+x|0,j=I=L+I|0,BA=I>>>0<L>>>0?x+1|0:x,I=xg(a,g,t,Q),L=l,x=(Z=xg(q=Z,p=q>>31,q,p))+I|0,I=l+L|0,I=x>>>0<Z>>>0?I+1|0:I,L=(Z=xg(r,B,E,i))+x|0,x=l+I|0,x=L>>>0<Z>>>0?x+1|0:x,_=I=o(K,38),Z=K,I=(K=xg(I,F=I>>31,K,U=K>>31))+L|0,L=l+x|0,L=I>>>0<K>>>0?L+1|0:L,I=(x=I)+(K=xg(h,f,I=T<<1,I>>31))|0,x=l+L|0,x=I>>>0<K>>>0?x+1|0:x,L=xg(e,C,s,w),x=l+x|0,v=I=L+I|0,d=x=I>>>0<L>>>0?x+1|0:x,I=x,(x=v+33554432|0)>>>0<33554432&&(I=I+1|0),R=x,P=I,x=(x=I>>26)+BA|0,BA=I=(L=(67108863&I)<<6|R>>>26)+j|0,L=I>>>0<L>>>0?x+1|0:x,(I=I+16777216|0)>>>0<16777216&&(L=L+1|0),J=I,x=(x=L>>25)+z|0,x=(I=(L=(33554431&L)<<7|I>>>25)+AA|0)>>>0<L>>>0?x+1|0:x,L=I,I=x,(x=L+33554432|0)>>>0<33554432&&(I=I+1|0),j=x,K=I,I=-67108864&x,n[V+24>>2]=L-I,z=A,I=xg(r,B,q,p),x=l,O=xg(a,g,V=O,IA=V>>31),L=l+x|0,L=(I=O+I|0)>>>0<O>>>0?L+1|0:L,x=I,O=I=o(T,19),I=x+(T=xg(I,AA=I>>31,u,c))|0,x=l+L|0,x=I>>>0<T>>>0?x+1|0:x,L=(T=xg(s,w,_,F))+I|0,I=l+x|0,I=L>>>0<T>>>0?I+1|0:I,M=x=CA<<1,T=xg(h,f,x,S=x>>31),x=l+I|0,x=(L=T+L|0)>>>0<T>>>0?x+1|0:x,I=L,L=xg(e,C,t,Q),x=l+x|0,QA=I=I+L|0,T=I>>>0<L>>>0?x+1|0:x,I=xg(s,w,O,AA),x=l,V=xg(r,B,V,IA),L=l+x|0,L=(I=V+I|0)>>>0<V>>>0?L+1|0:L,V=xg(E,i,_,F),x=l+L|0,x=(I=V+I|0)>>>0<V>>>0?x+1|0:x,L=(V=xg(h,f,t,Q))+I|0,I=l+x|0,I=L>>>0<V>>>0?I+1|0:I,V=xg(e,C,q,p),x=l+I|0,IA=L=V+L|0,V=L>>>0<V>>>0?x+1|0:x,I=xg(I=o(X,38),I>>31,m,k),x=l,X=I,L=xg(I=gA,L=I>>31,I,L),x=l+x|0,x=(I=X+L|0)>>>0<L>>>0?x+1|0:x,X=xg(O,AA,M,S),L=l+x|0,L=(I=X+I|0)>>>0<X>>>0?L+1|0:L,X=xg(t,Q,_,F),x=l+L|0,x=(I=X+I|0)>>>0<X>>>0?x+1|0:x,L=(X=xg(h,f,D,y))+I|0,I=l+x|0,I=L>>>0<X>>>0?I+1|0:I,X=xg(a,g,e,C),x=l+I|0,O=L=X+L|0,AA=x=L>>>0<X>>>0?x+1|0:x,(I=L+33554432|0)>>>0<33554432&&(x=x+1|0),gA=I,CA=x,L=(I=x>>26)+V|0,V=x=(X=(67108863&x)<<6|gA>>>26)+IA|0,x=x>>>0<X>>>0?L+1|0:L,(I=V+16777216|0)>>>0<16777216&&(x=x+1|0),IA=I,X=(33554431&x)<<7|I>>>25,x=(x>>25)+T|0,x=(L=X+QA|0)>>>0<X>>>0?x+1|0:x,(L=(I=L)+33554432|0)>>>0<33554432&&(x=x+1|0),T=L,X=x,x=-67108864&L,n[z+8>>2]=I-x,I=xg(D,y,m,k),x=l,L=xg(E,i,t,Q),x=l+x|0,x=(I=L+I|0)>>>0<L>>>0?x+1|0:x,L=xg(a,g,u,c),x=l+x|0,x=(I=L+I|0)>>>0<L>>>0?x+1|0:x,L=xg(r,B,Z,U),x=l+x|0,x=(I=L+I|0)>>>0<L>>>0?x+1|0:x,L=(QA=xg(e,C,Y,G))+I|0,I=l+x|0,x=K>>26,K=(j=(67108863&K)<<6|j>>>26)+L|0,L=(I=L>>>0<QA>>>0?I+1|0:I)+x|0,x=L=K>>>0<j>>>0?L+1|0:L,(L=(I=K)+16777216|0)>>>0<16777216&&(x=x+1|0),j=L,K=x,x=-33554432&L,n[z+28>>2]=I-x,I=xg(r,B,W,H),L=l,x=(q=xg(a,g,q,p))+I|0,I=l+L|0,I=x>>>0<q>>>0?I+1|0:I,q=xg(u,c,_,F),L=l+I|0,L=(x=q+x|0)>>>0<q>>>0?L+1|0:L,I=(q=xg(h,f,s,w))+x|0,x=l+L|0,x=I>>>0<q>>>0?x+1|0:x,L=xg(e,C,E,i),x=l+x|0,x=(x=(I=L+I|0)>>>0<L>>>0?x+1|0:x)+(L=X>>26)|0,L=I=(X=(67108863&X)<<6|T>>>26)+I|0,I=x=I>>>0<X>>>0?x+1|0:x,(x=L+16777216|0)>>>0<16777216&&(I=I+1|0),T=x,X=I,I=-33554432&x,n[z+12>>2]=L-I,q=A,I=xg(u,c,D,y),x=l,L=xg(E,i,E,i),x=l+x|0,x=(I=L+I|0)>>>0<L>>>0?x+1|0:x,L=xg(t,Q,s,w),x=l+x|0,x=(I=L+I|0)>>>0<L>>>0?x+1|0:x,L=(W=xg(a,g,N,b))+I|0,I=l+x|0,I=L>>>0<W>>>0?I+1|0:I,x=(W=xg(r,B,Y,G))+L|0,L=l+I|0,L=x>>>0<W>>>0?L+1|0:L,I=($=xg(e,C,W=$,z=W>>31))+x|0,x=l+L|0,x=I>>>0<$>>>0?x+1|0:x,L=I,x=(I=K>>25)+x|0,x=(L=L+(K=(33554431&K)<<7|j>>>25)|0)>>>0<K>>>0?x+1|0:x,(L=(I=L)+33554432|0)>>>0<33554432&&(x=x+1|0),$=L,K=x,x=-67108864&L,n[q+32>>2]=I-x,x=X>>25,L=(X=(33554431&X)<<7|T>>>25)+(v-(I=-67108864&R)|0)|0,I=x+(d-((v>>>0<I>>>0)+P|0)|0)|0,x=I=L>>>0<X>>>0?I+1|0:I,(I=L+33554432|0)>>>0<33554432&&(x=x+1|0),X=((67108863&x)<<6|I>>>26)+(BA=BA-(-33554432&J)|0)|0,n[q+20>>2]=X,I&=-67108864,n[A+16>>2]=L-I,X=A,I=xg(t,Q,u,c),L=l,x=(q=xg(m,k,M,S))+I|0,I=l+L|0,I=x>>>0<q>>>0?I+1|0:I,L=(q=xg(D,y,Z,U))+x|0,x=l+I|0,x=L>>>0<q>>>0?x+1|0:x,I=(q=xg(a,g,Y,G))+L|0,L=l+x|0,L=I>>>0<q>>>0?L+1|0:L,q=xg(r,B,W,z),x=l+L|0,L=I=q+I|0,x=(I=I>>>0<q>>>0?x+1|0:x)+(x=K>>26)|0,x=(L=(K=(67108863&K)<<6|$>>>26)+L|0)>>>0<K>>>0?x+1|0:x,K=L,T=L,I=x,(x=L+16777216|0)>>>0<16777216&&(I=I+1|0),L=-33554432&x,n[X+36>>2]=K-L,q=xg((33554431&I)<<7|x>>>25,I>>25,19,0),x=l+(AA-((O>>>0<(L=-67108864&gA)>>>0)+CA|0)|0)|0,L=I=q+(O-L|0)|0,I=I>>>0<q>>>0?x+1|0:x,(x=L+33554432|0)>>>0<33554432&&(I=I+1|0),K=(V-(-33554432&IA)|0)+((67108863&I)<<6|x>>>26)|0,n[A+4>>2]=K,I=A,A=-67108864&x,n[I>>2]=L-A}function v(A){var I=0,g=0,B=0,C=0,Q=0,E=0,i=0,a=0,o=0;A:if(A|=0){Q=(B=A+-8|0)+(A=-8&(g=n[A+-4>>2]))|0;I:if(!(1&g)){if(!(3&g))break A;if((B=B-(g=n[B>>2])|0)>>>0<r[8965])break A;if(A=A+g|0,n[8966]==(0|B)){if(3==(3&(g=n[Q+4>>2])))return n[8963]=A,n[Q+4>>2]=-2&g,n[B+4>>2]=1|A,void(n[A+B>>2]=A)}else{if(g>>>0<=255){if(C=n[B+8>>2],g=g>>>3|0,(0|(I=n[B+12>>2]))==(0|C)){a=35844,o=n[8961]&ng(-2,g),n[a>>2]=o;break I}n[C+12>>2]=I,n[I+8>>2]=C;break I}if(i=n[B+24>>2],(0|B)==(0|(g=n[B+12>>2])))if((I=n[(C=B+20|0)>>2])||(I=n[(C=B+16|0)>>2])){for(;E=C,(I=n[(C=(g=I)+20|0)>>2])||(C=g+16|0,I=n[g+16>>2]););n[E>>2]=0}else g=0;else I=n[B+8>>2],n[I+12>>2]=g,n[g+8>>2]=I;if(!i)break I;C=n[B+28>>2];g:{if(n[(I=36148+(C<<2)|0)>>2]==(0|B)){if(n[I>>2]=g,g)break g;a=35848,o=n[8962]&ng(-2,C),n[a>>2]=o;break I}if(n[i+(n[i+16>>2]==(0|B)?16:20)>>2]=g,!g)break I}if(n[g+24>>2]=i,(I=n[B+16>>2])&&(n[g+16>>2]=I,n[I+24>>2]=g),!(I=n[B+20>>2]))break I;n[g+20>>2]=I,n[I+24>>2]=g}}if(!(Q>>>0<=B>>>0)&&1&(g=n[Q+4>>2])){I:{if(!(2&g)){if(n[8967]==(0|Q)){if(n[8967]=B,A=n[8964]+A|0,n[8964]=A,n[B+4>>2]=1|A,n[8966]!=(0|B))break A;return n[8963]=0,void(n[8966]=0)}if(n[8966]==(0|Q))return n[8966]=B,A=n[8963]+A|0,n[8963]=A,n[B+4>>2]=1|A,void(n[A+B>>2]=A);A=(-8&g)+A|0;g:if(g>>>0<=255){if(g=g>>>3|0,(0|(I=n[Q+8>>2]))==(0|(C=n[Q+12>>2]))){a=35844,o=n[8961]&ng(-2,g),n[a>>2]=o;break g}n[I+12>>2]=C,n[C+8>>2]=I}else{if(i=n[Q+24>>2],(0|Q)==(0|(g=n[Q+12>>2])))if((I=n[(C=Q+20|0)>>2])||(I=n[(C=Q+16|0)>>2])){for(;E=C,(I=n[(C=(g=I)+20|0)>>2])||(C=g+16|0,I=n[g+16>>2]););n[E>>2]=0}else g=0;else I=n[Q+8>>2],n[I+12>>2]=g,n[g+8>>2]=I;if(i){C=n[Q+28>>2];B:{if(n[(I=36148+(C<<2)|0)>>2]==(0|Q)){if(n[I>>2]=g,g)break B;a=35848,o=n[8962]&ng(-2,C),n[a>>2]=o;break g}if(n[i+(n[i+16>>2]==(0|Q)?16:20)>>2]=g,!g)break g}n[g+24>>2]=i,(I=n[Q+16>>2])&&(n[g+16>>2]=I,n[I+24>>2]=g),(I=n[Q+20>>2])&&(n[g+20>>2]=I,n[I+24>>2]=g)}}if(n[B+4>>2]=1|A,n[A+B>>2]=A,n[8966]!=(0|B))break I;return void(n[8963]=A)}n[Q+4>>2]=-2&g,n[B+4>>2]=1|A,n[A+B>>2]=A}if(A>>>0<=255)return g=35884+((A=A>>>3|0)<<3)|0,(I=n[8961])&(A=1<<A)?A=n[g+8>>2]:(n[8961]=A|I,A=g),n[g+8>>2]=B,n[A+12>>2]=B,n[B+12>>2]=g,void(n[B+8>>2]=A);n[B+16>>2]=0,n[B+20>>2]=0,I=0,(C=A>>>8|0)&&(I=31,A>>>0>16777215||(I=(g=C)<<(C=C+1048320>>>16&8),I=28+((I=((I<<=i=I+520192>>>16&4)<<(E=I+245760>>>16&2)>>>15|0)-(E|C|i)|0)<<1|A>>>I+21&1)|0)),n[(Q=B)+28>>2]=I,E=36148+(I<<2)|0;I:{g:{if((C=n[8962])&(g=1<<I)){for(C=A<<(31==(0|I)?0:25-(I>>>1|0)|0),g=n[E>>2];;){if(I=g,(-8&n[g+4>>2])==(0|A))break g;if(g=C>>>29|0,C<<=1,!(g=n[16+(E=I+(4&g)|0)>>2]))break}n[E+16>>2]=B,n[B+24>>2]=I}else n[8962]=g|C,n[E>>2]=B,n[B+24>>2]=E;n[B+12>>2]=B,n[B+8>>2]=B;break I}A=n[I+8>>2],n[A+12>>2]=B,n[I+8>>2]=B,n[B+24>>2]=0,n[B+12>>2]=I,n[B+8>>2]=A}if(A=n[8969]+-1|0,n[8969]=A,!A){for(B=36300;B=(A=n[B>>2])+8|0,A;);n[8969]=-1}}}}function S(A,I){var g=0,B=0,C=0,Q=0,E=0,i=0,a=0,r=0;Q=A+I|0;A:{I:if(!(1&(g=n[A+4>>2]))){if(!(3&g))break A;if(I=(g=n[A>>2])+I|0,(0|(A=A-g|0))==n[8966]){if(3==(3&(g=n[Q+4>>2])))return n[8963]=I,n[Q+4>>2]=-2&g,n[A+4>>2]=1|I,void(n[Q>>2]=I)}else{if(g>>>0<=255){if(C=g>>>3|0,g=n[A+8>>2],(0|(B=n[A+12>>2]))==(0|g)){a=35844,r=n[8961]&ng(-2,C),n[a>>2]=r;break I}n[g+12>>2]=B,n[B+8>>2]=g;break I}if(i=n[A+24>>2],(0|(g=n[A+12>>2]))==(0|A))if((C=n[(B=A+20|0)>>2])||(C=n[(B=A+16|0)>>2])){for(;E=B,(C=n[(B=(g=C)+20|0)>>2])||(B=g+16|0,C=n[g+16>>2]););n[E>>2]=0}else g=0;else B=n[A+8>>2],n[B+12>>2]=g,n[g+8>>2]=B;if(!i)break I;B=n[A+28>>2];g:{if(n[(C=36148+(B<<2)|0)>>2]==(0|A)){if(n[C>>2]=g,g)break g;a=35848,r=n[8962]&ng(-2,B),n[a>>2]=r;break I}if(n[i+(n[i+16>>2]==(0|A)?16:20)>>2]=g,!g)break I}if(n[g+24>>2]=i,(B=n[A+16>>2])&&(n[g+16>>2]=B,n[B+24>>2]=g),!(B=n[A+20>>2]))break I;n[g+20>>2]=B,n[B+24>>2]=g}}I:{if(!(2&(g=n[Q+4>>2]))){if(n[8967]==(0|Q)){if(n[8967]=A,I=n[8964]+I|0,n[8964]=I,n[A+4>>2]=1|I,n[8966]!=(0|A))break A;return n[8963]=0,void(n[8966]=0)}if(n[8966]==(0|Q))return n[8966]=A,I=n[8963]+I|0,n[8963]=I,n[A+4>>2]=1|I,void(n[A+I>>2]=I);I=(-8&g)+I|0;g:if(g>>>0<=255){if(C=g>>>3|0,g=n[Q+8>>2],(0|(B=n[Q+12>>2]))==(0|g)){a=35844,r=n[8961]&ng(-2,C),n[a>>2]=r;break g}n[g+12>>2]=B,n[B+8>>2]=g}else{if(i=n[Q+24>>2],(0|Q)==(0|(g=n[Q+12>>2])))if((C=n[(B=Q+20|0)>>2])||(C=n[(B=Q+16|0)>>2])){for(;E=B,(C=n[(B=(g=C)+20|0)>>2])||(B=g+16|0,C=n[g+16>>2]););n[E>>2]=0}else g=0;else B=n[Q+8>>2],n[B+12>>2]=g,n[g+8>>2]=B;if(i){B=n[Q+28>>2];B:{if(n[(C=36148+(B<<2)|0)>>2]==(0|Q)){if(n[C>>2]=g,g)break B;a=35848,r=n[8962]&ng(-2,B),n[a>>2]=r;break g}if(n[i+(n[i+16>>2]==(0|Q)?16:20)>>2]=g,!g)break g}n[g+24>>2]=i,(B=n[Q+16>>2])&&(n[g+16>>2]=B,n[B+24>>2]=g),(B=n[Q+20>>2])&&(n[g+20>>2]=B,n[B+24>>2]=g)}}if(n[A+4>>2]=1|I,n[A+I>>2]=I,n[8966]!=(0|A))break I;return void(n[8963]=I)}n[Q+4>>2]=-2&g,n[A+4>>2]=1|I,n[A+I>>2]=I}if(I>>>0<=255)return I=35884+((g=I>>>3|0)<<3)|0,(B=n[8961])&(g=1<<g)?g=n[I+8>>2]:(n[8961]=g|B,g=I),n[I+8>>2]=A,n[g+12>>2]=A,n[A+12>>2]=I,void(n[A+8>>2]=g);n[A+16>>2]=0,n[A+20>>2]=0,g=0,(C=I>>>8|0)&&(g=31,I>>>0>16777215||(g=28+((g=((Q=(C<<=E=C+1048320>>>16&8)<<(g=C+520192>>>16&4))<<(C=Q+245760>>>16&2)>>>15|0)-(C|g|E)|0)<<1|I>>>g+21&1)|0)),n[(B=A)+28>>2]=g,C=36148+(g<<2)|0;I:{if((B=n[8962])&(E=1<<g)){for(B=I<<(31==(0|g)?0:25-(g>>>1|0)|0),g=n[C>>2];;){if(C=g,(-8&n[g+4>>2])==(0|I))break I;if(g=B>>>29|0,B<<=1,!(g=n[16+(E=C+(4&g)|0)>>2]))break}n[E+16>>2]=A}else n[8962]=B|E,n[C>>2]=A;return n[A+24>>2]=C,n[A+12>>2]=A,void(n[A+8>>2]=A)}I=n[C+8>>2],n[I+12>>2]=A,n[C+8>>2]=A,n[A+24>>2]=0,n[A+12>>2]=C,n[A+8>>2]=I}}function N(A,I,g,B,C){var Q,i,r,o,e,t,c,f,y,s,w,h,u,p,l,F=0,G=0,k=0,_=0,H=0,Y=0,b=0,m=0,U=0,v=0,S=0,N=0,R=0,M=0,d=0,P=0,J=0,x=0,L=0,K=0,q=0,X=0,V=0,T=0,W=0,j=0,Z=0,O=0,z=0,$=0,AA=0,IA=0,gA=0,BA=0;for(D=Q=D+-64|0,i=n[A+60>>2],r=n[A+56>>2],L=n[A+52>>2],K=n[A+48>>2],o=n[A+44>>2],e=n[A+40>>2],t=n[A+36>>2],c=n[A+32>>2],f=n[A+28>>2],y=n[A+24>>2],s=n[A+20>>2],w=n[A+16>>2],h=n[A+12>>2],u=n[A+8>>2],p=n[A+4>>2],l=n[A>>2];;){if(!C&B>>>0>63|C>>>0>0)_=g;else{if(F=0,_=G=eA(Q,0,64),B|C)for(;E[F+G|0]=a[I+F|0],!C&B>>>0>(F=F+1|0)>>>0|C>>>0>0;);I=_,V=g}for(q=20,m=l,U=p,v=u,S=h,F=w,G=s,g=y,N=f,H=c,Y=t,R=e,M=i,d=r,k=L,P=K,x=o;b=F,m=gB((F=F+m|0)^P,16),P=gB(b^(H=m+H|0),12),b=H,H=gB((H=m)^(m=F+P|0),8),F=gB(P^(J=b+H|0),7),b=G,U=gB((G=G+U|0)^k,16),k=gB(b^(Y=U+Y|0),12),b=Y,Y=gB((Y=U)^(U=G+k|0),8),G=gB(k^(X=b+Y|0),7),k=g,v=gB((g=g+v|0)^d,16),b=d=gB(k^(R=v+R|0),12),d=gB((k=v)^(v=g+d|0),8),g=gB(b^(R=d+R|0),7),k=N,S=gB((N=N+S|0)^M,16),x=k=gB(k^(M=S+x|0),12),b=M,M=gB((M=S)^(S=N+k|0),8),N=gB(x^(k=b+M|0),7),b=R,R=gB((m=G+m|0)^M,16),G=gB((P=b+R|0)^G,12),M=gB(R^(m=G+m|0),8),G=gB(G^(R=P+M|0),7),H=gB((U=g+U|0)^H,16),g=gB((k=H+k|0)^g,12),P=gB(H^(U=g+U|0),8),g=gB(g^(x=k+P|0),7),H=gB((v=N+v|0)^Y,16),N=gB((Y=H+J|0)^N,12),k=gB(H^(v=N+v|0),8),N=gB(N^(H=Y+k|0),7),Y=gB((S=F+S|0)^d,16),F=gB((J=Y+X|0)^F,12),d=gB(Y^(S=F+S|0),8),F=gB(F^(Y=J+d|0),7),q=q+-2|0;);if(q=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,J=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,X=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,T=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,W=a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24,j=a[I+24|0]|a[I+25|0]<<8|a[I+26|0]<<16|a[I+27|0]<<24,Z=a[I+28|0]|a[I+29|0]<<8|a[I+30|0]<<16|a[I+31|0]<<24,O=a[I+32|0]|a[I+33|0]<<8|a[I+34|0]<<16|a[I+35|0]<<24,z=a[I+36|0]|a[I+37|0]<<8|a[I+38|0]<<16|a[I+39|0]<<24,$=a[I+40|0]|a[I+41|0]<<8|a[I+42|0]<<16|a[I+43|0]<<24,AA=a[I+44|0]|a[I+45|0]<<8|a[I+46|0]<<16|a[I+47|0]<<24,IA=a[I+48|0]|a[I+49|0]<<8|a[I+50|0]<<16|a[I+51|0]<<24,gA=a[I+52|0]|a[I+53|0]<<8|a[I+54|0]<<16|a[I+55|0]<<24,BA=a[I+56|0]|a[I+57|0]<<8|a[I+58|0]<<16|a[I+59|0]<<24,b=a[I+60|0]|a[I+61|0]<<8|a[I+62|0]<<16|a[I+63|0]<<24,fg(_,m+l^(a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24)),fg(_+4|0,U+p^q),fg(_+8|0,v+u^J),fg(_+12|0,S+h^X),fg(_+16|0,F+w^T),fg(_+20|0,G+s^W),fg(_+24|0,g+y^j),fg(_+28|0,N+f^Z),fg(_+32|0,H+c^O),fg(_+36|0,Y+t^z),fg(_+40|0,$^R+e),fg(_+44|0,AA^x+o),fg(_+48|0,IA^P+K),fg(_+52|0,gA^k+L),fg(_+56|0,BA^d+r),fg(_+60|0,b^M+i),L=((F=K+1|0)>>>0<K>>>0)+L|0,!C&B>>>0<=64|C>>>0<0){if(!(!B|!C&B>>>0>63|C>>>0>0))for(G=0;E[G+V|0]=a[_+G|0],(0|B)!=(0|(G=G+1|0)););n[A+52>>2]=L,n[A+48>>2]=F,D=Q- -64|0;break}I=I- -64|0,g=_- -64|0,C=C+-1|0,(B=B+-64|0)>>>0<4294967232&&(C=C+1|0),K=F}}function R(A,I,g,B){var C=0,Q=0,E=0,i=0,r=0,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0,D=0,u=0,p=0,F=0,G=0,k=0,_=0,H=0,Y=0,b=0,m=0,U=0;if(Q=n[A+36>>2],i=n[A+32>>2],t=n[A+28>>2],E=n[A+24>>2],e=n[A+20>>2],!B&g>>>0>=16|B>>>0>0)for(_=!a[A+80|0]<<24,y=n[A+4>>2],H=o(y,5),u=n[A+8>>2],k=o(u,5),F=n[A+12>>2],G=o(F,5),C=n[A+16>>2],p=o(C,5),Y=C,s=n[A>>2];C=xg(r=((a[I+3|0]|a[I+4|0]<<8|a[I+5|0]<<16|a[I+6|0]<<24)>>>2&67108863)+E|0,0,F,0),E=l,f=xg(e=(67108863&(a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24))+e|0,0,Y,0),E=l+E|0,E=(C=f+C|0)>>>0<f>>>0?E+1|0:E,t=(f=xg(w=((a[I+6|0]|a[I+7|0]<<8|a[I+8|0]<<16|a[I+9|0]<<24)>>>4&67108863)+t|0,0,u,0))+C|0,C=l+E|0,i=xg(h=((a[I+9|0]|a[I+10|0]<<8|a[I+11|0]<<16|a[I+12|0]<<24)>>>6|0)+i|0,0,y,0),C=l+(t>>>0<f>>>0?C+1|0:C)|0,C=(E=i+t|0)>>>0<i>>>0?C+1|0:C,Q=xg(D=((a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24)>>>8|_)+Q|0,0,s,0),C=l+C|0,b=E=Q+E|0,t=E>>>0<Q>>>0?C+1|0:C,C=xg(r,0,u,0),E=l,i=xg(e,0,F,0),Q=l+E|0,Q=(C=i+C|0)>>>0<i>>>0?Q+1|0:Q,i=xg(w,0,y,0),E=l+Q|0,E=(C=i+C|0)>>>0<i>>>0?E+1|0:E,Q=(i=xg(h,0,s,0))+C|0,C=l+E|0,C=Q>>>0<i>>>0?C+1|0:C,E=Q,Q=xg(D,0,p,0),C=l+C|0,m=E=E+Q|0,f=E>>>0<Q>>>0?C+1|0:C,C=xg(r,0,y,0),Q=l,E=(i=xg(e,0,u,0))+C|0,C=l+Q|0,C=E>>>0<i>>>0?C+1|0:C,i=xg(w,0,s,0),Q=l+C|0,Q=(E=i+E|0)>>>0<i>>>0?Q+1|0:Q,C=(i=xg(h,0,p,0))+E|0,E=l+Q|0,E=C>>>0<i>>>0?E+1|0:E,Q=(i=xg(D,0,G,0))+C|0,C=l+E|0,U=Q,i=Q>>>0<i>>>0?C+1|0:C,C=xg(r,0,s,0),Q=l,E=(c=xg(e,0,y,0))+C|0,C=l+Q|0,C=E>>>0<c>>>0?C+1|0:C,Q=xg(w,0,p,0),C=l+C|0,C=(E=Q+E|0)>>>0<Q>>>0?C+1|0:C,c=xg(h,0,G,0),Q=l+C|0,Q=(E=c+E|0)>>>0<c>>>0?Q+1|0:Q,C=(c=xg(D,0,k,0))+E|0,E=l+Q|0,E=C>>>0<c>>>0?E+1|0:E,c=C,C=xg(r,0,p,0),r=l,Q=(e=xg(e,0,s,0))+C|0,C=l+r|0,C=Q>>>0<e>>>0?C+1|0:C,r=xg(w,0,G,0),C=l+C|0,C=(Q=r+Q|0)>>>0<r>>>0?C+1|0:C,r=xg(h,0,k,0),C=l+C|0,C=(Q=r+Q|0)>>>0<r>>>0?C+1|0:C,r=(e=xg(D,0,H,0))+Q|0,Q=l+C|0,(Q=(C=(67108863&(Q=r>>>0<e>>>0?Q+1|0:Q))<<6|(C=r)>>>26)+c|0)>>>0<C>>>0&&(E=E+1|0),e=Q,C=i,(Q=(E=(67108863&E)<<6|Q>>>26)+U|0)>>>0<E>>>0&&(C=C+1|0),i=Q,Q=f,(E=(C=(67108863&C)<<6|i>>>26)+m|0)>>>0<C>>>0&&(Q=Q+1|0),C=E,E=t,(t=(Q=(67108863&Q)<<6|C>>>26)+b|0)>>>0<Q>>>0&&(E=E+1|0),E=(67108863&e)+((r=o((67108863&E)<<6|(Q=t)>>>26,5)+(67108863&r)|0)>>>26|0)|0,t=67108863&i,i=67108863&C,Q&=67108863,e=67108863&r,I=I+16|0,C=B+-1|0,(g=g+-16|0)>>>0<4294967280&&(C=C+1|0),B=C,!C&g>>>0>15|C>>>0>0;);n[A+20>>2]=e,n[A+36>>2]=Q,n[A+32>>2]=i,n[A+28>>2]=t,n[A+24>>2]=E}function M(A,I,g){var B,C,Q,i,n=0,r=0,o=0,e=0,t=0;return D=Q=D-160|0,ig(I,g,32,0),E[0|I]=248&a[0|I],E[I+31|0]=63&a[I+31|0]|64,tA(Q,I),NI(A,Q),r=a[(C=g)+8|0]|a[C+9|0]<<8|a[C+10|0]<<16|a[C+11|0]<<24,n=a[C+12|0]|a[C+13|0]<<8|a[C+14|0]<<16|a[C+15|0]<<24,o=a[C+16|0]|a[C+17|0]<<8|a[C+18|0]<<16|a[C+19|0]<<24,e=a[C+20|0]|a[C+21|0]<<8|a[C+22|0]<<16|a[C+23|0]<<24,t=a[0|C]|a[C+1|0]<<8|a[C+2|0]<<16|a[C+3|0]<<24,g=a[C+4|0]|a[C+5|0]<<8|a[C+6|0]<<16|a[C+7|0]<<24,B=I,i=a[C+28|0]|a[C+29|0]<<8|a[C+30|0]<<16|a[C+31|0]<<24,I=a[C+24|0]|a[C+25|0]<<8|a[C+26|0]<<16|a[C+27|0]<<24,E[B+24|0]=I,E[B+25|0]=I>>>8,E[B+26|0]=I>>>16,E[B+27|0]=I>>>24,E[B+28|0]=i,E[B+29|0]=i>>>8,E[B+30|0]=i>>>16,E[B+31|0]=i>>>24,E[B+16|0]=o,E[B+17|0]=o>>>8,E[B+18|0]=o>>>16,E[B+19|0]=o>>>24,E[B+20|0]=e,E[B+21|0]=e>>>8,E[B+22|0]=e>>>16,E[B+23|0]=e>>>24,E[B+8|0]=r,E[B+9|0]=r>>>8,E[B+10|0]=r>>>16,E[B+11|0]=r>>>24,E[B+12|0]=n,E[B+13|0]=n>>>8,E[B+14|0]=n>>>16,E[B+15|0]=n>>>24,E[0|B]=t,E[B+1|0]=t>>>8,E[B+2|0]=t>>>16,E[B+3|0]=t>>>24,E[B+4|0]=g,E[B+5|0]=g>>>8,E[B+6|0]=g>>>16,E[B+7|0]=g>>>24,o=a[(n=A)+8|0]|a[n+9|0]<<8|a[n+10|0]<<16|a[n+11|0]<<24,e=a[n+12|0]|a[n+13|0]<<8|a[n+14|0]<<16|a[n+15|0]<<24,t=a[n+16|0]|a[n+17|0]<<8|a[n+18|0]<<16|a[n+19|0]<<24,g=a[n+20|0]|a[n+21|0]<<8|a[n+22|0]<<16|a[n+23|0]<<24,I=a[0|n]|a[n+1|0]<<8|a[n+2|0]<<16|a[n+3|0]<<24,A=a[n+4|0]|a[n+5|0]<<8|a[n+6|0]<<16|a[n+7|0]<<24,r=a[n+28|0]|a[n+29|0]<<8|a[n+30|0]<<16|a[n+31|0]<<24,n=a[n+24|0]|a[n+25|0]<<8|a[n+26|0]<<16|a[n+27|0]<<24,E[B+56|0]=n,E[B+57|0]=n>>>8,E[B+58|0]=n>>>16,E[B+59|0]=n>>>24,E[B+60|0]=r,E[B+61|0]=r>>>8,E[B+62|0]=r>>>16,E[B+63|0]=r>>>24,E[B+48|0]=t,E[B+49|0]=t>>>8,E[B+50|0]=t>>>16,E[B+51|0]=t>>>24,E[B+52|0]=g,E[B+53|0]=g>>>8,E[B+54|0]=g>>>16,E[B+55|0]=g>>>24,E[B+40|0]=o,E[B+41|0]=o>>>8,E[B+42|0]=o>>>16,E[B+43|0]=o>>>24,E[B+44|0]=e,E[B+45|0]=e>>>8,E[B+46|0]=e>>>16,E[B+47|0]=e>>>24,E[B+32|0]=I,E[B+33|0]=I>>>8,E[B+34|0]=I>>>16,E[B+35|0]=I>>>24,E[B+36|0]=A,E[B+37|0]=A>>>8,E[B+38|0]=A>>>16,E[B+39|0]=A>>>24,D=Q+160|0,0}function d(A,I){var g,B,C,Q,E,i,a,r,o,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0,D=0,u=0,p=0,F=0,G=0,k=0,_=0;p=t=n[(e=I)+4>>2],D=t>>31,F=t=n[e+8>>2],B=t>>31,h=t=n[e+12>>2],u=t>>31,G=t=n[e+16>>2],C=t>>31,w=t=n[e+20>>2],s=t>>31,k=t=n[e+24>>2],Q=t>>31,E=t=n[e>>2],i=t>>31,f=A,y=t=xg(e=n[e+36>>2],e>>31,121666,0),e=l,(t=t+16777216|0)>>>0<16777216&&(e=e+1|0),g=t,t=e,a=y-(-33554432&g)|0,c=xg(e=n[I+32>>2],e>>31,121666,0),r=l,y=xg(I=n[I+28>>2],I>>31,121666,0),e=l,_=c,(I=y+16777216|0)>>>0<16777216&&(e=e+1|0),o=I,c=I,I=(I=e>>25)+r|0,I=(e=_+(c=(33554431&e)<<7|c>>>25)|0)>>>0<c>>>0?I+1|0:I,c=e,_=f,e=I,(I=c+33554432|0)>>>0<33554432&&(e=e+1|0),f=((67108863&e)<<6|I>>>26)+a|0,n[_+36>>2]=f,I&=-67108864,n[A+32>>2]=c-I,f=y-(-33554432&o)|0,e=xg(k,Q,121666,0),k=l,y=xg(w,s,121666,0),I=l,c=e,(e=y+16777216|0)>>>0<16777216&&(I=I+1|0),w=e,s=e,e=(e=I>>25)+k|0,e=(I=c+(s=(33554431&I)<<7|s>>>25)|0)>>>0<s>>>0?e+1|0:e,(c=I+33554432|0)>>>0<33554432&&(e=e+1|0),f=f+((67108863&e)<<6|c>>>26)|0,n[A+28>>2]=f,e=-67108864&c,n[A+24>>2]=I-e,f=A,w=y-(-33554432&w)|0,I=xg(G,C,121666,0),G=l,y=xg(h,u,121666,0),e=l,c=I,(I=y+16777216|0)>>>0<16777216&&(e=e+1|0),h=I,u=(33554431&e)<<7|I>>>25,e=(e>>25)+G|0,s=f,I=e=(c=c+u|0)>>>0<u>>>0?e+1|0:e,(e=c+33554432|0)>>>0<33554432&&(I=I+1|0),f=((67108863&I)<<6|e>>>26)+w|0,n[s+20>>2]=f,I=-67108864&e,n[A+16>>2]=c-I,f=A,h=y-(-33554432&h)|0,e=xg(F,B,121666,0),F=l,y=xg(p,D,121666,0),I=l,c=e,(e=y+16777216|0)>>>0<16777216&&(I=I+1|0),p=e,D=(33554431&I)<<7|e>>>25,I=(I>>25)+F|0,w=f,e=I=(c=c+D|0)>>>0<D>>>0?I+1|0:I,(I=c+33554432|0)>>>0<33554432&&(e=e+1|0),f=((67108863&e)<<6|I>>>26)+h|0,n[w+12>>2]=f,I&=-67108864,n[A+8>>2]=c-I,I=xg((33554431&t)<<7|g>>>25,t>>25,19,0),e=l,f=y-(-33554432&p)|0,t=xg(E,i,121666,0),e=l+e|0,e=(I=t+I|0)>>>0<t>>>0?e+1|0:e,(t=I+33554432|0)>>>0<33554432&&(e=e+1|0),y=f+((67108863&e)<<6|t>>>26)|0,n[A+4>>2]=y,e=A,A=-67108864&t,n[e>>2]=I-A}function P(A,I,g){var B,C=0,Q=0,i=0;D=B=D+-64|0;A:{if(!(!g|g>>>0>=65)){if(C=-1,!(a[A+80|0]|a[A+81|0]<<8|a[A+82|0]<<16|a[A+83|0]<<24|a[A+84|0]|a[A+85|0]<<8|a[A+86|0]<<16|a[A+87|0]<<24)){if(Q=A,(C=a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)>>>0>=129){if(wA(A,128),F(A,i=A+96|0),C=(a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)-128|0,E[A+352|0]=C,E[A+353|0]=C>>>8,E[A+354|0]=C>>>16,E[A+355|0]=C>>>24,C>>>0>=129)break A;j(i,A+224|0,C),C=a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24}wA(Q,C),a[A+356|0]&&(E[A+88|0]=-1,E[A+89|0]=16777215,E[A+90|0]=65535,E[A+91|0]=255,E[A+92|0]=-1,E[A+93|0]=16777215,E[A+94|0]=65535,E[A+95|0]=255),E[A+80|0]=-1,E[A+81|0]=16777215,E[A+82|0]=65535,E[A+83|0]=255,E[A+84|0]=-1,E[A+85|0]=16777215,E[A+86|0]=65535,E[A+87|0]=255,eA((C=A+96|0)+(Q=a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)|0,0,256-Q|0),F(A,C),LI(B,a[0|A]|a[A+1|0]<<8|a[A+2|0]<<16|a[A+3|0]<<24,a[A+4|0]|a[A+5|0]<<8|a[A+6|0]<<16|a[A+7|0]<<24),LI(8|B,a[A+8|0]|a[A+9|0]<<8|a[A+10|0]<<16|a[A+11|0]<<24,a[A+12|0]|a[A+13|0]<<8|a[A+14|0]<<16|a[A+15|0]<<24),LI(B+16|0,a[A+16|0]|a[A+17|0]<<8|a[A+18|0]<<16|a[A+19|0]<<24,a[A+20|0]|a[A+21|0]<<8|a[A+22|0]<<16|a[A+23|0]<<24),LI(B+24|0,a[A+24|0]|a[A+25|0]<<8|a[A+26|0]<<16|a[A+27|0]<<24,a[A+28|0]|a[A+29|0]<<8|a[A+30|0]<<16|a[A+31|0]<<24),LI(B+32|0,a[A+32|0]|a[A+33|0]<<8|a[A+34|0]<<16|a[A+35|0]<<24,a[A+36|0]|a[A+37|0]<<8|a[A+38|0]<<16|a[A+39|0]<<24),LI(B+40|0,a[A+40|0]|a[A+41|0]<<8|a[A+42|0]<<16|a[A+43|0]<<24,a[A+44|0]|a[A+45|0]<<8|a[A+46|0]<<16|a[A+47|0]<<24),LI(B+48|0,a[A+48|0]|a[A+49|0]<<8|a[A+50|0]<<16|a[A+51|0]<<24,a[A+52|0]|a[A+53|0]<<8|a[A+54|0]<<16|a[A+55|0]<<24),LI(B+56|0,a[A+56|0]|a[A+57|0]<<8|a[A+58|0]<<16|a[A+59|0]<<24,a[A+60|0]|a[A+61|0]<<8|a[A+62|0]<<16|a[A+63|0]<<24),j(I,B,g),KI(A,64),KI(C,256),C=0}return D=B- -64|0,C}Gg(),t()}c(1854,1886,306,1931),t()}function J(A,I){var g,B,C,Q,E,i,r,o,e,t=0,c=0,f=0,y=0,s=0,w=0,h=0,D=0,u=0,p=0,F=0,G=0;g=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,p=Cg(I+4|0),t=l,D=Cg(I+7|0),f=l,u=Cg(I+10|0),c=l,B=Cg(I+13|0),h=l,y=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,C=Cg(I+20|0),F=l,Q=Cg(I+23|0),E=l,i=Cg(I+26|0),r=l,o=Cg(I+29|0),I=c<<3|u>>>29,G=c=u<<3,(c=c+16777216|0)>>>0<16777216&&(I=I+1|0),u=c,c=I,f=I=f<<5|D>>>27,e=w=A,w=s=D<<5,t=I=t<<6|(D=p)>>>26,(I=16777216+(D<<=6)|0)>>>0<16777216&&(t=t+1|0),p=I,s=I,I=(I=t>>25)+f|0,I=(t=w+(s=(33554431&t)<<7|s>>>25)|0)>>>0<s>>>0?I+1|0:I,(f=t+33554432|0)>>>0<33554432&&(I=I+1|0),w=(G-(-33554432&u)|0)+((67108863&I)<<6|f>>>26)|0,n[e+12>>2]=w,I=-67108864&f,n[A+8>>2]=t-I,I=0,(y=(f=y)+16777216|0)>>>0<16777216&&(I=1),w=y,y=I,G=f-(-33554432&w)|0,I=h<<2|(f=B)>>>30,h=f<<2,f=I,I=c>>25,c=(s=h)+(h=(33554431&c)<<7|u>>>25)|0,I=I+f|0,s=t=A,t=I=c>>>0<h>>>0?I+1|0:I,(I=c+33554432|0)>>>0<33554432&&(t=t+1|0),f=((67108863&t)<<6|I>>>26)+G|0,n[s+20>>2]=f,I&=-67108864,n[A+16>>2]=c-I,s=(t=C)<<7,I=(I=F<<7|t>>>25)+(t=y>>25)|0,I=(y=s+(f=(33554431&y)<<7|w>>>25)|0)>>>0<f>>>0?I+1|0:I,y=t=y,(t=t+33554432|0)>>>0<33554432&&(I=I+1|0),f=t,t=I,I=-67108864&f,n[(c=A)+24>>2]=y-I,I=E<<5|(c=Q)>>>27,F=c<<=5,(c=c+16777216|0)>>>0<16777216&&(I=I+1|0),h=c,c=I,t=(F-(-33554432&h)|0)+((67108863&t)<<6|f>>>26)|0,n[(y=A)+28>>2]=t,f=(t=i)<<4,t=I=r<<4|t>>>28,I=(I=c>>25)+t|0,I=(c=(w=f)+(f=(33554431&c)<<7|h>>>25)|0)>>>0<f>>>0?I+1|0:I,c=t=c,(t=t+33554432|0)>>>0<33554432&&(I=I+1|0),f=t,t=I,I=-67108864&f,n[y+32>>2]=c-I,I=0,c=y=(y=o)<<2&33554428,(y=y+16777216|0)>>>0<16777216&&(I=I+1|0),c=(c-(33554432&y)|0)+((67108863&t)<<6|f>>>26)|0,n[A+36>>2]=c,y=xg((33554431&I)<<7|y>>>25,I>>>25|0,19,0),I=l,I=(t=y+g|0)>>>0<y>>>0?I+1|0:I,(c=t+33554432|0)>>>0<33554432&&(I=I+1|0),y=(D-(-33554432&p)|0)+((67108863&I)<<6|c>>>26)|0,n[A+4>>2]=y,I=A,A=-67108864&c,n[I>>2]=t-A}function x(A,I,g,B){var C,Q=0,i=0;D=C=D-16|0,Q=-31;A:{I:{g:{B:switch(B+-1|0){case 1:if(I>>>0<13)break I;B=a[35660]|a[35661]<<8|a[35662]<<16|a[35663]<<24,Q=a[35656]|a[35657]<<8|a[35658]<<16|a[35659]<<24,E[0|A]=Q,E[A+1|0]=Q>>>8,E[A+2|0]=Q>>>16,E[A+3|0]=Q>>>24,E[A+4|0]=B,E[A+5|0]=B>>>8,E[A+6|0]=B>>>16,E[A+7|0]=B>>>24,B=a[35665]|a[35666]<<8|a[35667]<<16|a[35668]<<24,Q=a[35661]|a[35662]<<8|a[35663]<<16|a[35664]<<24,E[A+5|0]=Q,E[A+6|0]=Q>>>8,E[A+7|0]=Q>>>16,E[A+8|0]=Q>>>24,E[A+9|0]=B,E[A+10|0]=B>>>8,E[A+11|0]=B>>>16,E[A+12|0]=B>>>24,i=-12,B=12;break g;case 0:break B;default:break A}if(I>>>0<12)break I;B=a[35673]|a[35674]<<8|a[35675]<<16|a[35676]<<24,Q=a[35669]|a[35670]<<8|a[35671]<<16|a[35672]<<24,E[0|A]=Q,E[A+1|0]=Q>>>8,E[A+2|0]=Q>>>16,E[A+3|0]=Q>>>24,E[A+4|0]=B,E[A+5|0]=B>>>8,E[A+6|0]=B>>>16,E[A+7|0]=B>>>24,B=a[35677]|a[35678]<<8|a[35679]<<16|a[35680]<<24,E[A+8|0]=B,E[A+9|0]=B>>>8,E[A+10|0]=B>>>16,E[A+11|0]=B>>>24,i=-11,B=11}if(Q=DA(g))break A;if(oI(C+5|0,19),!((Q=I+i|0)>>>0<=(I=VA(C+5|0))>>>0)&&(A=j(A+B|0,C+5|0,I+1|0),!((B=Q-I|0)>>>0<4)&&(E[0|(A=A+I|0)]=4025636,E[A+1|0]=15725,E[A+2|0]=61,E[A+3|0]=0,oI(C+5|0,n[g+44>>2]),!((B=B+-3|0)>>>0<=(I=VA(C+5|0))>>>0)&&(A=j(A+3|0,C+5|0,I+1|0),!((B=B-I|0)>>>0<4)&&(E[0|(A=A+I|0)]=4027436,E[A+1|0]=15732,E[A+2|0]=61,E[A+3|0]=0,oI(C+5|0,n[g+40>>2]),!((B=B+-3|0)>>>0<=(I=VA(C+5|0))>>>0)&&(A=j(A+3|0,C+5|0,I+1|0),!((B=B-I|0)>>>0<4)&&(E[0|(A=A+I|0)]=4026412,E[A+1|0]=15728,E[A+2|0]=61,E[A+3|0]=0,oI(C+5|0,n[g+48>>2]),!((B=B+-3|0)>>>0<=(I=VA(C+5|0))>>>0)&&(A=j(A+3|0,C+5|0,I+1|0),!((B=B-I|0)>>>0<2)&&(E[0|(A=A+I|0)]=36,E[A+1|0]=0,AA(A=A+1|0,I=B+-1|0,n[g+16>>2],n[g+20>>2],3)))))))))){if(Q=-31,(B=(B=I)-(I=VA(A))|0)>>>0<2)break A;return E[0|(A=A+I|0)]=36,E[A+1|0]=0,A=AA(A+1|0,B+-1|0,n[g>>2],n[g+4>>2],3),D=C+16|0,A?0:-31}}Q=-31}return D=C+16|0,Q}function L(A,I,g,B){var C,Q=0;C=Q=D,D=Q=Q-576&-64,n[Q+188>>2]=0,fg(Q+188|0,I);A:if(I>>>0<=64){if((0|vI(Q+192|0,0,0,I))<0)break A;if((0|Tg(Q+192|0,Q+188|0,4,0))<0)break A;if((0|Tg(Q+192|0,g,B,0))<0)break A;og(Q+192|0,A,I)}else if(!((0|vI(Q+192|0,0,0,64))<0||(0|Tg(Q+192|0,Q+188|0,4,0))<0||(0|Tg(Q+192|0,g,B,0))<0||(0|og(Q+192|0,Q+112|0,64))<0)){if(g=n[Q+116>>2],B=n[Q+112>>2],E[0|A]=B,E[A+1|0]=B>>>8,E[A+2|0]=B>>>16,E[A+3|0]=B>>>24,E[A+4|0]=g,E[A+5|0]=g>>>8,E[A+6|0]=g>>>16,E[A+7|0]=g>>>24,g=n[Q+124>>2],B=n[Q+120>>2],E[A+8|0]=B,E[A+9|0]=B>>>8,E[A+10|0]=B>>>16,E[A+11|0]=B>>>24,E[A+12|0]=g,E[A+13|0]=g>>>8,E[A+14|0]=g>>>16,E[A+15|0]=g>>>24,g=n[Q+140>>2],B=n[Q+136>>2],E[A+24|0]=B,E[A+25|0]=B>>>8,E[A+26|0]=B>>>16,E[A+27|0]=B>>>24,E[A+28|0]=g,E[A+29|0]=g>>>8,E[A+30|0]=g>>>16,E[A+31|0]=g>>>24,g=n[Q+132>>2],B=n[Q+128>>2],E[A+16|0]=B,E[A+17|0]=B>>>8,E[A+18|0]=B>>>16,E[A+19|0]=B>>>24,E[A+20|0]=g,E[A+21|0]=g>>>8,E[A+22|0]=g>>>16,E[A+23|0]=g>>>24,A=A+32|0,(I=I+-32|0)>>>0>=65)for(;;){if(j(Q+48|0,Q+112|0,64),(0|Ag(Q+112|0,64,Q+48|0,64,0,0,0))<0)break A;if(g=n[Q+116>>2],B=n[Q+112>>2],E[0|A]=B,E[A+1|0]=B>>>8,E[A+2|0]=B>>>16,E[A+3|0]=B>>>24,E[A+4|0]=g,E[A+5|0]=g>>>8,E[A+6|0]=g>>>16,E[A+7|0]=g>>>24,g=n[Q+124>>2],B=n[Q+120>>2],E[A+8|0]=B,E[A+9|0]=B>>>8,E[A+10|0]=B>>>16,E[A+11|0]=B>>>24,E[A+12|0]=g,E[A+13|0]=g>>>8,E[A+14|0]=g>>>16,E[A+15|0]=g>>>24,g=n[Q+140>>2],B=n[Q+136>>2],E[A+24|0]=B,E[A+25|0]=B>>>8,E[A+26|0]=B>>>16,E[A+27|0]=B>>>24,E[A+28|0]=g,E[A+29|0]=g>>>8,E[A+30|0]=g>>>16,E[A+31|0]=g>>>24,g=n[Q+132>>2],B=n[Q+128>>2],E[A+16|0]=B,E[A+17|0]=B>>>8,E[A+18|0]=B>>>16,E[A+19|0]=B>>>24,E[A+20|0]=g,E[A+21|0]=g>>>8,E[A+22|0]=g>>>16,E[A+23|0]=g>>>24,A=A+32|0,!((I=I+-32|0)>>>0>64))break}j(Q+48|0,Q+112|0,64),(0|Ag(Q+112|0,I,Q+48|0,64,0,0,0))<0||j(A,Q+112|0,I)}KI(Q+192|0,384),D=C}function K(A,I,g){var B=0,C=0,Q=0,E=0,i=0,n=0,r=0,o=0,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0,D=0,u=0,p=0;for(Q=2036477234,e=857760878,t=1634760805,E=1797285236,o=a[0|g]|a[g+1|0]<<8|a[g+2|0]<<16|a[g+3|0]<<24,B=a[g+4|0]|a[g+5|0]<<8|a[g+6|0]<<16|a[g+7|0]<<24,C=a[g+8|0]|a[g+9|0]<<8|a[g+10|0]<<16|a[g+11|0]<<24,n=a[g+12|0]|a[g+13|0]<<8|a[g+14|0]<<16|a[g+15|0]<<24,f=a[g+16|0]|a[g+17|0]<<8|a[g+18|0]<<16|a[g+19|0]<<24,y=a[g+20|0]|a[g+21|0]<<8|a[g+22|0]<<16|a[g+23|0]<<24,w=a[g+24|0]|a[g+25|0]<<8|a[g+26|0]<<16|a[g+27|0]<<24,h=a[g+28|0]|a[g+29|0]<<8|a[g+30|0]<<16|a[g+31|0]<<24,g=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,c=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,i=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,I=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24;r=o,t=gB((s=g)^(g=o+t|0),16),r=f=gB(r^(o=t+f|0),12),f=gB((s=t)^(t=g+f|0),8),o=gB(r^(D=f+o|0),7),r=B,e=gB((g=B+e|0)^c,16),r=c=gB(r^(B=e+y|0),12),c=gB((s=e)^(e=g+c|0),8),g=gB(r^(y=c+B|0),7),r=C,B=gB((Q=Q+C|0)^i,16),r=i=gB(r^(C=B+w|0),12),s=gB(B^(i=Q+i|0),8),Q=gB(r^(B=s+C|0),7),E=gB((C=I)^(I=E+n|0),16),n=gB((C=E+h|0)^n,12),I=gB(E^(u=I+n|0),8),E=gB(n^(C=I+C|0),7),r=B,B=gB((B=I)^(I=g+t|0),16),g=gB((n=r+B|0)^g,12),I=gB(B^(t=I+g|0),8),B=gB(g^(w=n+I|0),7),r=C,C=gB((g=Q+e|0)^f,16),Q=gB((n=r+C|0)^Q,12),g=gB(C^(e=g+Q|0),8),C=gB(Q^(h=n+g|0),7),n=gB((Q=E+i|0)^c,16),E=gB((i=n+D|0)^E,12),c=gB(n^(Q=Q+E|0),8),n=gB(E^(f=i+c|0),7),i=gB((E=o+u|0)^s,16),o=gB((y=i+y|0)^o,12),i=gB(i^(E=E+o|0),8),o=gB(o^(y=y+i|0),7),10!=(0|(p=p+1|0)););fg(A,t),fg(A+4|0,e),fg(A+8|0,Q),fg(A+12|0,E),fg(A+16|0,g),fg(A+20|0,c),fg(A+24|0,i),fg(A+28|0,I)}function q(A){var I,g=0,B=0;D=I=D-48|0,g=a[28+(A|=0)|0]|a[A+29|0]<<8|a[A+30|0]<<16|a[A+31|0]<<24,n[I+24>>2]=a[A+24|0]|a[A+25|0]<<8|a[A+26|0]<<16|a[A+27|0]<<24,n[I+28>>2]=g,g=a[A+20|0]|a[A+21|0]<<8|a[A+22|0]<<16|a[A+23|0]<<24,n[I+16>>2]=a[A+16|0]|a[A+17|0]<<8|a[A+18|0]<<16|a[A+19|0]<<24,n[I+20>>2]=g,g=a[A+4|0]|a[A+5|0]<<8|a[A+6|0]<<16|a[A+7|0]<<24,n[I>>2]=a[0|A]|a[A+1|0]<<8|a[A+2|0]<<16|a[A+3|0]<<24,n[I+4>>2]=g,g=a[A+12|0]|a[A+13|0]<<8|a[A+14|0]<<16|a[A+15|0]<<24,n[I+8>>2]=a[A+8|0]|a[A+9|0]<<8|a[A+10|0]<<16|a[A+11|0]<<24,n[I+12>>2]=g,g=a[A+40|0]|a[A+41|0]<<8|a[A+42|0]<<16|a[A+43|0]<<24,n[I+32>>2]=a[A+36|0]|a[A+37|0]<<8|a[A+38|0]<<16|a[A+39|0]<<24,n[I+36>>2]=g,Q[n[8956]](I,I,40,0,A+32|0,0,A),g=n[I+28>>2],B=n[I+24>>2],E[A+24|0]=B,E[A+25|0]=B>>>8,E[A+26|0]=B>>>16,E[A+27|0]=B>>>24,E[A+28|0]=g,E[A+29|0]=g>>>8,E[A+30|0]=g>>>16,E[A+31|0]=g>>>24,g=n[I+20>>2],B=n[I+16>>2],E[A+16|0]=B,E[A+17|0]=B>>>8,E[A+18|0]=B>>>16,E[A+19|0]=B>>>24,E[A+20|0]=g,E[A+21|0]=g>>>8,E[A+22|0]=g>>>16,E[A+23|0]=g>>>24,g=n[I+12>>2],B=n[I+8>>2],E[A+8|0]=B,E[A+9|0]=B>>>8,E[A+10|0]=B>>>16,E[A+11|0]=B>>>24,E[A+12|0]=g,E[A+13|0]=g>>>8,E[A+14|0]=g>>>16,E[A+15|0]=g>>>24,g=n[I+4>>2],B=n[I>>2],E[0|A]=B,E[A+1|0]=B>>>8,E[A+2|0]=B>>>16,E[A+3|0]=B>>>24,E[A+4|0]=g,E[A+5|0]=g>>>8,E[A+6|0]=g>>>16,E[A+7|0]=g>>>24,g=n[I+36>>2],B=n[I+32>>2],E[A+36|0]=B,E[A+37|0]=B>>>8,E[A+38|0]=B>>>16,E[A+39|0]=B>>>24,E[A+40|0]=g,E[A+41|0]=g>>>8,E[A+42|0]=g>>>16,E[A+43|0]=g>>>24,hg(A),D=I+48|0}function X(A,I,g){var B=0,C=0,Q=0,E=0,i=0,n=0,r=0,o=0,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0,D=0,u=0,p=0,l=0,F=0;for(C=2036477234,Q=857760878,E=1634760805,i=1797285236,w=20,o=a[0|g]|a[g+1|0]<<8|a[g+2|0]<<16|a[g+3|0]<<24,s=a[g+4|0]|a[g+5|0]<<8|a[g+6|0]<<16|a[g+7|0]<<24,h=a[g+8|0]|a[g+9|0]<<8|a[g+10|0]<<16|a[g+11|0]<<24,f=a[g+12|0]|a[g+13|0]<<8|a[g+14|0]<<16|a[g+15|0]<<24,e=a[g+16|0]|a[g+17|0]<<8|a[g+18|0]<<16|a[g+19|0]<<24,n=a[g+20|0]|a[g+21|0]<<8|a[g+22|0]<<16|a[g+23|0]<<24,t=a[g+24|0]|a[g+25|0]<<8|a[g+26|0]<<16|a[g+27|0]<<24,c=a[g+28|0]|a[g+29|0]<<8|a[g+30|0]<<16|a[g+31|0]<<24,g=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,r=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,B=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,I=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24;D=B,B=gB(E+n|0,7)^f,y=D^gB(B+E|0,9),u=gB(B+y|0,13)^n,f=gB(y+u|0,18),I=gB(Q+o|0,7)^I,t=gB(I+Q|0,9)^t,o=gB(I+t|0,13)^o,l=gB(t+o|0,18),c=gB(g+C|0,7)^c,n=gB(c+C|0,9)^s,p=gB(n+c|0,13)^g,F=gB(n+p|0,18),g=gB(i+e|0,7)^h,r=gB(g+i|0,9)^r,e=gB(g+r|0,13)^e,D=gB(r+e|0,18),o=gB((E^=f)+g|0,7)^o,s=gB(o+E|0,9)^n,h=gB(o+s|0,13)^g,E=gB(s+h|0,18)^E,g=gB((Q^=l)+B|0,7)^p,r=gB(g+Q|0,9)^r,f=gB(g+r|0,13)^B,Q=gB(r+f|0,18)^Q,e=gB((C^=F)+I|0,7)^e,B=gB(e+C|0,9)^y,I=gB(B+e|0,13)^I,C=gB(I+B|0,18)^C,n=gB((i^=D)+c|0,7)^u,t=gB(n+i|0,9)^t,c=gB(n+t|0,13)^c,i=gB(t+c|0,18)^i,y=w>>>0>2,w=w+-2|0,y;);return fg(A,E),fg(A+4|0,Q),fg(A+8|0,C),fg(A+12|0,i),fg(A+16|0,g),fg(A+20|0,r),fg(A+24|0,B),fg(A+28|0,I),0}function V(A,I,g,B,C,Q,i){var r,o,e,t,c,f,y,s=0;return D=r=D-560|0,Ng(r+352|0,i),ig(r+288|0,Q,32,0),W(r+352|0,r+320|0,32,0),W(r+352|0,g,B,C),ag(r+352|0,r+224|0),o=a[(s=Q)+32|0]|a[s+33|0]<<8|a[s+34|0]<<16|a[s+35|0]<<24,e=a[s+36|0]|a[s+37|0]<<8|a[s+38|0]<<16|a[s+39|0]<<24,t=a[s+40|0]|a[s+41|0]<<8|a[s+42|0]<<16|a[s+43|0]<<24,c=a[s+44|0]|a[s+45|0]<<8|a[s+46|0]<<16|a[s+47|0]<<24,f=a[s+48|0]|a[s+49|0]<<8|a[s+50|0]<<16|a[s+51|0]<<24,Q=a[s+52|0]|a[s+53|0]<<8|a[s+54|0]<<16|a[s+55|0]<<24,y=a[s+60|0]|a[s+61|0]<<8|a[s+62|0]<<16|a[s+63|0]<<24,s=a[s+56|0]|a[s+57|0]<<8|a[s+58|0]<<16|a[s+59|0]<<24,E[A+56|0]=s,E[A+57|0]=s>>>8,E[A+58|0]=s>>>16,E[A+59|0]=s>>>24,E[A+60|0]=y,E[A+61|0]=y>>>8,E[A+62|0]=y>>>16,E[A+63|0]=y>>>24,E[A+48|0]=f,E[A+49|0]=f>>>8,E[A+50|0]=f>>>16,E[A+51|0]=f>>>24,E[A+52|0]=Q,E[A+53|0]=Q>>>8,E[A+54|0]=Q>>>16,E[A+55|0]=Q>>>24,E[A+40|0]=t,E[A+41|0]=t>>>8,E[A+42|0]=t>>>16,E[A+43|0]=t>>>24,E[A+44|0]=c,E[A+45|0]=c>>>8,E[A+46|0]=c>>>16,E[A+47|0]=c>>>24,E[0|(Q=A+32|0)]=o,E[Q+1|0]=o>>>8,E[Q+2|0]=o>>>16,E[Q+3|0]=o>>>24,E[Q+4|0]=e,E[Q+5|0]=e>>>8,E[Q+6|0]=e>>>16,E[Q+7|0]=e>>>24,k(r+224|0),tA(r,r+224|0),NI(A,r),Ng(r+352|0,i),W(r+352|0,A,64,0),W(r+352|0,g,B,C),ag(r+352|0,r+160|0),k(r+160|0),E[r+288|0]=248&a[r+288|0],E[r+319|0]=63&a[r+319|0]|64,function(A,I,g,B){var C,Q,i,n,r,o,e,t,c,f,y,s,w,h,D,u,p,F,G,k,_,H,Y,b,m,U,v,S,N,R,M,d,P,J,x,L,K,q,X,V,T,W,j,Z,O,z,$,AA,IA,gA=0,BA=0,CA=0,QA=0,EA=0,iA=0,nA=0,aA=0,rA=0,oA=0,eA=0,tA=0,cA=0,fA=0,yA=0,sA=0,wA=0,hA=0,DA=0,uA=0,pA=0,lA=0,FA=0,GA=0,kA=0,_A=0,HA=0,YA=0,bA=0,mA=0,UA=0,vA=0,SA=0,NA=0,RA=0,MA=0,dA=0,PA=0,JA=0,xA=0,LA=0,KA=0,qA=0,XA=0,VA=0,TA=0,WA=0,jA=0,ZA=0,OA=0,zA=0;JA=Cg(I),FA=a[I+2|0]|a[I+3|0]<<8|a[I+4|0]<<16|a[I+5|0]<<24,WA=Cg(I+5|0),HA=l,sA=a[I+7|0]|a[I+8|0]<<8|a[I+9|0]<<16|a[I+10|0]<<24,wA=a[I+10|0]|a[I+11|0]<<8|a[I+12|0]<<16|a[I+13|0]<<24,mA=Cg(I+13|0),yA=l,eA=a[I+15|0]|a[I+16|0]<<8|a[I+17|0]<<16|a[I+18|0]<<24,qA=Cg(I+18|0),cA=l,YA=Cg(I+21|0),nA=a[I+23|0]|a[I+24|0]<<8|a[I+25|0]<<16|a[I+26|0]<<24,rA=Cg(I+26|0),QA=l,gA=a[I+28|0]|a[I+29|0]<<8|a[I+30|0]<<16|a[I+31|0]<<24,RA=Cg(g),GA=a[(I=g)+2|0]|a[I+3|0]<<8|a[I+4|0]<<16|a[I+5|0]<<24,XA=Cg(I+5|0),oA=l,hA=a[I+7|0]|a[I+8|0]<<8|a[I+9|0]<<16|a[I+10|0]<<24,fA=a[I+10|0]|a[I+11|0]<<8|a[I+12|0]<<16|a[I+13|0]<<24,VA=Cg(I+13|0),tA=l,EA=a[I+15|0]|a[I+16|0]<<8|a[I+17|0]<<16|a[I+18|0]<<24,TA=Cg(I+18|0),CA=l,xA=Cg(I+21|0),BA=a[I+23|0]|a[I+24|0]<<8|a[I+25|0]<<16|a[I+26|0]<<24,iA=Cg(I+26|0),g=l,I=a[I+28|0]|a[I+29|0]<<8|a[I+30|0]<<16|a[I+31|0]<<24,Z=Cg(B),O=a[B+2|0]|a[B+3|0]<<8|a[B+4|0]<<16|a[B+5|0]<<24,z=Cg(B+5|0),$=l,MA=a[B+7|0]|a[B+8|0]<<8|a[B+9|0]<<16|a[B+10|0]<<24,LA=a[B+10|0]|a[B+11|0]<<8|a[B+12|0]<<16|a[B+13|0]<<24,KA=Cg(B+13|0),SA=l,UA=a[B+15|0]|a[B+16|0]<<8|a[B+17|0]<<16|a[B+18|0]<<24,jA=Cg(B+18|0),vA=l,kA=Cg(B+21|0),AA=A,I=xg(C=I>>>7|0,0,Q=2097151&((3&QA)<<30|rA>>>2),0),aA=l,QA=I,I=xg(i=2097151&((3&g)<<30|iA>>>2),0,n=gA>>>7|0,0),gA=l+aA|0,gA=(g=QA+I|0)>>>0<I>>>0?gA+1|0:gA,iA=g,I=xg(Q,0,i,0),QA=l,BA=(g=xg(r=BA>>>5&2097151,0,n,0))+I|0,I=l+QA|0,I=BA>>>0<g>>>0?I+1|0:I,g=BA,BA=xg(C,0,o=nA>>>5&2097151,0),I=l+I|0,aA=QA=g+BA|0,lA=I=QA>>>0<BA>>>0?I+1|0:I,DA=(I=QA)- -1048576|0,uA=BA=lA-((I>>>0<4293918720)+-1|0)|0,I=(g=BA>>21)+gA|0,rA=I=(QA=(BA=(2097151&BA)<<11|DA>>>21)+iA|0)>>>0<BA>>>0?I+1|0:I,_A=(I=BA=QA)- -1048576|0,iA=nA=rA-((I>>>0<4293918720)+-1|0)|0,QA=(I=QA=xg(C,0,n,0))-(nA=-2097152&(dA=I- -1048576|0))|0,I=((NA=l)-((I>>>0<nA>>>0)+(gA=bA=NA-((I>>>0<4293918720)+-1|0)|0)|0)|0)+(g=iA>>21)|0,d=I=(U=QA+((2097151&iA)<<11|_A>>>21)|0)>>>0<QA>>>0?I+1|0:I,nA=xg(U,I,-683901,-1),QA=l,P=g=gA>>21,I=xg(S=(2097151&gA)<<11|dA>>>21,g,136657,0),g=l+QA|0,bA=gA=I+nA|0,nA=gA>>>0<I>>>0?g+1|0:g,I=xg(e=2097151&((1&tA)<<31|VA>>>1),0,Q,0),gA=l,QA=(g=xg(t=fA>>>4&2097151,0,n,0))+I|0,I=l+gA|0,g=(gA=QA)>>>0<g>>>0?I+1|0:I,QA=(I=xg(c=EA>>>6&2097151,0,o,0))+gA|0,gA=l+g|0,gA=QA>>>0<I>>>0?gA+1|0:gA,g=QA,m=I=0,QA=(I=xg(f=2097151&xA,I,y=2097151&((7&cA)<<29|qA>>>3),0))+g|0,g=l+gA|0,g=QA>>>0<I>>>0?g+1|0:g,gA=xg(s=2097151&((7&CA)<<29|TA>>>3),0,w=2097151&YA,0),I=l+g|0,I=(QA=gA+QA|0)>>>0<gA>>>0?I+1|0:I,gA=QA,g=I,I=xg(r,0,h=eA>>>6&2097151,0),g=l+g|0,g=(gA=I+gA|0)>>>0<I>>>0?g+1|0:g,QA=(I=gA)+(gA=xg(i,0,D=2097151&((1&yA)<<31|mA>>>1),0))|0,I=l+g|0,I=QA>>>0<gA>>>0?I+1|0:I,gA=xg(C,0,u=wA>>>4&2097151,0),I=l+I|0,cA=QA=QA+gA|0,QA=QA>>>0<gA>>>0?I+1|0:I,I=xg(Q,0,t,0),g=l,gA=I,I=xg(p=hA>>>7&2097151,0,n,0),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,CA=(I=gA)+(gA=xg(o,0,e,0))|0,I=l+g|0,I=CA>>>0<gA>>>0?I+1|0:I,g=xg(c,0,w,0),I=l+I|0,I=(gA=g+CA|0)>>>0<g>>>0?I+1|0:I,CA=(g=xg(f,m,h,0))+gA|0,gA=l+I|0,gA=CA>>>0<g>>>0?gA+1|0:gA,I=xg(y,0,s,0),g=l+gA|0,g=(CA=I+CA|0)>>>0<I>>>0?g+1|0:g,I=xg(r,0,D,0),g=l+g|0,g=(gA=I+CA|0)>>>0<I>>>0?g+1|0:g,CA=(I=gA)+(gA=xg(i,0,u,0))|0,I=l+g|0,I=CA>>>0<gA>>>0?I+1|0:I,gA=xg(C,0,F=sA>>>7&2097151,0),I=l+I|0,fA=CA=CA+gA|0,EA=I=CA>>>0<gA>>>0?I+1|0:I,tA=(I=CA)- -1048576|0,CA=gA=EA-((I>>>0<4293918720)+-1|0)|0,I=(g=gA>>21)+QA|0,QA=I=(hA=(gA=(2097151&gA)<<11|tA>>>21)+cA|0)>>>0<gA>>>0?I+1|0:I,g=I+nA|0,(nA=(I=gA=hA)+bA|0)>>>0<I>>>0&&(g=g+1|0),I=nA,nA=QA-((gA>>>0<4293918720)+-1|0)|0,eA=I-(gA=-2097152&(yA=gA- -1048576|0))|0,cA=g-((I>>>0<gA>>>0)+(QA=nA)|0)|0,N=BA-(g=-2097152&_A)|0,J=I=rA-((BA>>>0<g>>>0)+iA|0)|0,gA=xg(S,P,-997805,-1),g=l+EA|0,g=(BA=gA+fA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(U,d,136657,0),g=l+g|0,g=(BA=gA+BA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(N,I,-683901,-1),I=l+g|0,I=(BA=gA+BA|0)>>>0<gA>>>0?I+1|0:I,nA=(gA=BA)-(g=-2097152&tA)|0,EA=I-((gA>>>0<g>>>0)+CA|0)|0,I=xg(Q,0,p,0),g=l,gA=I,I=xg(G=2097151&((3&oA)<<30|XA>>>2),0,n,0),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,BA=(I=gA)+(gA=xg(o,0,t,0))|0,I=l+g|0,I=BA>>>0<gA>>>0?I+1|0:I,gA=xg(e,0,w,0),g=l+I|0,g=(BA=gA+BA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(c,0,y,0),I=l+g|0,I=(BA=gA+BA|0)>>>0<gA>>>0?I+1|0:I,g=xg(f,m,D,0),gA=l+I|0,gA=(BA=g+BA|0)>>>0<g>>>0?gA+1|0:gA,I=xg(s,0,h,0),g=l+gA|0,g=(BA=I+BA|0)>>>0<I>>>0?g+1|0:g,gA=xg(r,0,u,0),I=l+g|0,I=(BA=gA+BA|0)>>>0<gA>>>0?I+1|0:I,gA=xg(i,0,F,0),g=l+I|0,g=(BA=gA+BA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(C,0,k=2097151&((3&HA)<<30|WA>>>2),0),I=l+g|0,CA=BA=gA+BA|0,BA=BA>>>0<gA>>>0?I+1|0:I,I=xg(Q,0,G,0),g=l,iA=(gA=I)+(I=xg(_=GA>>>5&2097151,0,n,0))|0,gA=l+g|0,gA=iA>>>0<I>>>0?gA+1|0:gA,I=xg(o,0,p,0),g=l+gA|0,g=(iA=I+iA|0)>>>0<I>>>0?g+1|0:g,gA=xg(t,0,w,0),I=l+g|0,I=(iA=gA+iA|0)>>>0<gA>>>0?I+1|0:I,gA=xg(e,0,y,0),g=l+I|0,g=(iA=gA+iA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(c,0,h,0),I=l+g|0,I=(iA=gA+iA|0)>>>0<gA>>>0?I+1|0:I,g=xg(f,m,u,0),gA=l+I|0,gA=(iA=g+iA|0)>>>0<g>>>0?gA+1|0:gA,I=xg(s,0,D,0),g=l+gA|0,g=(iA=I+iA|0)>>>0<I>>>0?g+1|0:g,gA=xg(r,0,F,0),I=l+g|0,I=(iA=gA+iA|0)>>>0<gA>>>0?I+1|0:I,gA=xg(i,0,k,0),g=l+I|0,g=(iA=gA+iA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(C,0,H=FA>>>5&2097151,0),I=l+g|0,hA=iA=gA+iA|0,XA=I=iA>>>0<gA>>>0?I+1|0:I,IA=(I=iA)- -1048576|0,VA=gA=XA-((I>>>0<4293918720)+-1|0)|0,g=(I=gA>>21)+BA|0,fA=CA=(gA=(2097151&gA)<<11|IA>>>21)+CA|0,TA=g=CA>>>0<gA>>>0?g+1|0:g,WA=(I=CA)- -1048576|0,xA=gA=g-((I>>>0<4293918720)+-1|0)|0,I=(I=gA>>21)+EA|0,tA=gA=(g=(2097151&gA)<<11|WA>>>21)+nA|0,NA=I=gA>>>0<g>>>0?I+1|0:I,mA=(I=gA)- -1048576|0,bA=gA=NA-((I>>>0<4293918720)+-1|0)|0,g=(I=gA>>21)+cA|0,nA=BA=(gA=(2097151&gA)<<11|mA>>>21)+eA|0,_A=g=BA>>>0<gA>>>0?g+1|0:g,FA=gA=g-(((I=BA)>>>0<4293918720)+-1|0)|0,rA=(2097151&gA)<<11|(YA=I- -1048576|0)>>>21,CA=gA>>21,g=xg(Q,0,c,0),I=l,gA=g,g=xg(n,0,e,0),I=l+I|0,I=(gA=gA+g|0)>>>0<g>>>0?I+1|0:I,BA=(g=xg(f,m,w,0))+gA|0,gA=l+I|0,gA=BA>>>0<g>>>0?gA+1|0:gA,I=xg(o,0,s,0),g=l+gA|0,g=(BA=I+BA|0)>>>0<I>>>0?g+1|0:g,I=xg(r,0,y,0),g=l+g|0,g=(gA=I+BA|0)>>>0<I>>>0?g+1|0:g,BA=(I=gA)+(gA=xg(i,0,h,0))|0,I=l+g|0,I=BA>>>0<gA>>>0?I+1|0:I,g=xg(C,0,D,0),I=l+I|0,I=(gA=g+BA|0)>>>0<g>>>0?I+1|0:I,BA=gA,EA=gA+(g=xg(S,P,-683901,-1))|0,gA=l+I|0,gA=EA>>>0<g>>>0?gA+1|0:gA,g=EA,EA=I,GA=(I=BA)- -1048576|0,EA=gA-((BA=EA=EA-((I>>>0<4293918720)+-1|0)|0)+((I=g)>>>0<(iA=-2097152&GA)>>>0)|0)|0,I=g=I-iA|0,g=QA>>21,QA=I+(gA=(2097151&QA)<<11|yA>>>21)|0,I=g+EA|0,I=QA>>>0<gA>>>0?I+1|0:I,gA=(g=QA)-(EA=-2097152&(oA=g- -1048576|0))|0,g=(I-((g>>>0<EA>>>0)+(QA=iA=I-((g>>>0<4293918720)+-1|0)|0)|0)|0)+CA|0,x=rA=gA+rA|0,L=g=rA>>>0<gA>>>0?g+1|0:g,iA=xg(rA,g,-683901,-1),EA=l,g=xg(o,0,f,m),I=l,gA=g,g=xg(n,0,c,0),I=l+I|0,I=(gA=gA+g|0)>>>0<g>>>0?I+1|0:I,CA=(g=xg(Q,0,s,0))+gA|0,gA=l+I|0,gA=CA>>>0<g>>>0?gA+1|0:gA,I=xg(r,0,w,0),g=l+gA|0,g=(CA=I+CA|0)>>>0<I>>>0?g+1|0:g,gA=xg(i,0,y,0),I=l+g|0,I=(CA=gA+CA|0)>>>0<gA>>>0?I+1|0:I,gA=xg(C,0,h,0),g=l+I|0,I=(I=g=(CA=gA+CA|0)>>>0<gA>>>0?g+1|0:g)+(g=BA>>21)|0,sA=CA=(I=(BA=CA+(gA=(2097151&BA)<<11|GA>>>21)|0)>>>0<gA>>>0?I+1|0:I)-(((g=BA)>>>0<4293918720)+-1|0)|0,gA=g-(BA=-2097152&(PA=g- -1048576|0))|0,g=(QA>>21)+(g=I-((g>>>0<BA>>>0)+CA|0)|0)|0,K=BA=(I=(2097151&QA)<<11|oA>>>21)+gA|0,q=g=BA>>>0<I>>>0?g+1|0:g,g=xg(BA,g,136657,0),I=l+EA|0,qA=gA=g+iA|0,wA=gA>>>0<g>>>0?I+1|0:I,I=xg(w,0,_,0),g=l,gA=I,I=xg(Y=2097151&RA,0,o,0),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,BA=(I=gA)+(gA=xg(y,0,G,0))|0,I=l+g|0,I=BA>>>0<gA>>>0?I+1|0:I,gA=xg(h,0,p,0),g=l+I|0,g=(BA=gA+BA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(t,0,D,0),I=l+g|0,I=(BA=gA+BA|0)>>>0<gA>>>0?I+1|0:I,g=xg(e,0,u,0),gA=l+I|0,gA=(BA=g+BA|0)>>>0<g>>>0?gA+1|0:gA,I=xg(c,0,F,0),g=l+gA|0,g=(BA=I+BA|0)>>>0<I>>>0?g+1|0:g,gA=xg(f,m,H,0),I=l+g|0,I=(BA=gA+BA|0)>>>0<gA>>>0?I+1|0:I,gA=xg(s,0,k,0),g=l+I|0,g=(BA=gA+BA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(r,0,b=2097151&JA,0),I=l+g|0,gA=(g=BA=gA+BA|0)>>>0<gA>>>0?I+1|0:I,(I=BA+(g=(a[B+23|0]|a[B+24|0]<<8|a[B+25|0]<<16|a[B+26|0]<<24)>>>5&2097151)|0)>>>0<g>>>0&&(gA=gA+1|0),QA=I,BA=gA,g=xg(y,0,_,0),I=l,gA=g,g=xg(w,0,Y,0),I=l+I|0,I=(gA=gA+g|0)>>>0<g>>>0?I+1|0:I,CA=(g=gA)+(gA=xg(h,0,G,0))|0,g=l+I|0,g=CA>>>0<gA>>>0?g+1|0:g,gA=xg(D,0,p,0),I=l+g|0,I=(CA=gA+CA|0)>>>0<gA>>>0?I+1|0:I,gA=xg(t,0,u,0),g=l+I|0,g=(CA=gA+CA|0)>>>0<gA>>>0?g+1|0:g,I=xg(e,0,F,0),gA=l+g|0,gA=(CA=I+CA|0)>>>0<I>>>0?gA+1|0:gA,g=xg(c,0,k,0),I=l+gA|0,I=(CA=g+CA|0)>>>0<g>>>0?I+1|0:I,gA=xg(f,m,b,0),g=l+I|0,g=(CA=gA+CA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(s,0,H,0),I=l+g|0,I=(CA=gA+CA|0)>>>0<gA>>>0?I+1|0:I,EA=CA=(gA=2097151&kA)+CA|0,yA=g=CA>>>0<gA>>>0?I+1|0:I,HA=(I=CA)- -1048576|0,eA=gA=g-((I>>>0<4293918720)+-1|0)|0,g=(I=gA>>21)+BA|0,oA=g=(CA=QA=(gA=(2097151&gA)<<11|HA>>>21)+QA|0)>>>0<gA>>>0?g+1|0:g,RA=aA-(I=-2097152&DA)|0,kA=lA-((aA>>>0<I>>>0)+uA|0)|0,I=xg(Q,0,r,0),g=l,gA=I,I=xg(n,0,f,m),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,BA=(I=gA)+(gA=xg(i,0,o,0))|0,I=l+g|0,I=BA>>>0<gA>>>0?I+1|0:I,gA=xg(C,0,w,0),g=l+I|0,aA=BA=gA+BA|0,BA=BA>>>0<gA>>>0?g+1|0:g,I=xg(n,0,s,0),g=l,QA=(gA=I)+(I=xg(Q,0,f,m))|0,gA=l+g|0,gA=QA>>>0<I>>>0?gA+1|0:gA,g=xg(o,0,r,0),I=l+gA|0,I=(QA=g+QA|0)>>>0<g>>>0?I+1|0:I,gA=xg(i,0,w,0),g=l+I|0,g=(QA=gA+QA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(C,0,y,0),I=l+g|0,iA=gA=(rA=I=(QA=gA+QA|0)>>>0<gA>>>0?I+1|0:I)-(((I=QA)>>>0<4293918720)+-1|0)|0,I=(2097151&gA)<<11|(lA=I- -1048576|0)>>>21,gA=(gA>>21)+BA|0,aA=gA=(BA=aA=I+aA|0)>>>0<I>>>0?gA+1|0:gA,uA=(I=BA)- -1048576|0,I=(g=(gA=DA=gA-((I>>>0<4293918720)+-1|0)|0)>>21)+kA|0,X=I=(v=RA=(DA=(2097151&gA)<<11|uA>>>21)+RA|0)>>>0<DA>>>0?I+1|0:I,kA=xg(v,I,470296,0),DA=l,R=BA-(g=-2097152&uA)|0,dA=I=aA-((BA>>>0<g>>>0)+gA|0)|0,gA=xg(N,J,666643,0),g=l+DA|0,g=(BA=gA+kA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(R,I,654183,0),I=l+g|0,aA=BA=gA+BA|0,gA=BA>>>0<gA>>>0?I+1|0:I,I=QA-(g=-2097152&lA)|0,g=(sA>>21)+(QA=rA-((QA>>>0<g>>>0)+iA|0)|0)|0,V=iA=(BA=(2097151&sA)<<11|PA>>>21)+I|0,JA=g=iA>>>0<BA>>>0?g+1|0:g,ZA=CA- -1048576|0,BA=I=oA-((CA>>>0<4293918720)+-1|0)|0,g=xg(iA,g,-997805,-1),gA=l+gA|0,g=(gA=(QA=g+aA|0)>>>0<g>>>0?gA+1|0:gA)+oA|0,kA=(CA=QA+CA|0)-(gA=-2097152&ZA)|0,DA=(g=CA>>>0<QA>>>0?g+1|0:g)-((CA>>>0<gA>>>0)+I|0)|0,I=xg(R,dA,470296,0),g=l,gA=I,I=xg(v,X,666643,0),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,I=xg(iA,JA,654183,0),g=l+g|0,I=(g=(gA=I+gA|0)>>>0<I>>>0?g+1|0:g)+yA|0,oA=(gA=gA+EA|0)-(g=-2097152&HA)|0,EA=(I=gA>>>0<EA>>>0?I+1|0:I)-((gA>>>0<g>>>0)+eA|0)|0,g=xg(h,0,_,0),I=l,gA=g,g=xg(y,0,Y,0),I=l+I|0,I=(gA=gA+g|0)>>>0<g>>>0?I+1|0:I,QA=(g=gA)+(gA=xg(D,0,G,0))|0,g=l+I|0,g=QA>>>0<gA>>>0?g+1|0:g,gA=xg(u,0,p,0),I=l+g|0,I=(QA=gA+QA|0)>>>0<gA>>>0?I+1|0:I,gA=xg(t,0,F,0),g=l+I|0,g=(QA=gA+QA|0)>>>0<gA>>>0?g+1|0:g,I=xg(e,0,k,0),gA=l+g|0,gA=(QA=I+QA|0)>>>0<I>>>0?gA+1|0:gA,g=xg(c,0,H,0),I=l+gA|0,I=(QA=g+QA|0)>>>0<g>>>0?I+1|0:I,gA=xg(s,0,b,0),g=l+I|0,I=g=(QA=gA+QA|0)>>>0<gA>>>0?g+1|0:g,(g=QA+(gA=2097151&((7&vA)<<29|jA>>>3))|0)>>>0<gA>>>0&&(I=I+1|0),CA=g,QA=I,I=xg(D,0,_,0),g=l,gA=I,I=xg(h,0,Y,0),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,I=xg(u,0,G,0),g=l+g|0,g=(gA=I+gA|0)>>>0<I>>>0?g+1|0:g,aA=(I=xg(F,0,p,0))+gA|0,gA=l+g|0,gA=aA>>>0<I>>>0?gA+1|0:gA,g=xg(t,0,k,0),I=l+gA|0,I=(aA=g+aA|0)>>>0<g>>>0?I+1|0:I,g=xg(e,0,H,0),I=l+I|0,I=(gA=g+aA|0)>>>0<g>>>0?I+1|0:I,aA=(g=gA)+(gA=xg(c,0,b,0))|0,g=l+I|0,g=aA>>>0<gA>>>0?g+1|0:g,(I=(gA=UA>>>6&2097151)+aA|0)>>>0<gA>>>0&&(g=g+1|0),lA=I,rA=g,uA=I- -1048576|0,cA=gA=g-((I>>>0<4293918720)+-1|0)|0,g=(I=gA>>21)+QA|0,iA=g=(CA=(gA=(2097151&gA)<<11|uA>>>21)+CA|0)>>>0<gA>>>0?g+1|0:g,sA=(I=CA)- -1048576|0,aA=gA=g-((I>>>0<4293918720)+-1|0)|0,g=(I=gA>>21)+EA|0,yA=QA=(gA=(2097151&gA)<<11|sA>>>21)+oA|0,EA=g=QA>>>0<gA>>>0?g+1|0:g,eA=(I=QA)- -1048576|0,GA=gA=g-((I>>>0<4293918720)+-1|0)|0,g=(I=gA>>21)+DA|0,g=(QA=(gA=(2097151&gA)<<11|eA>>>21)+kA|0)>>>0<gA>>>0?g+1|0:g,gA=QA,QA=g,I=g+wA|0,(oA=(g=gA)+qA|0)>>>0<g>>>0&&(I=I+1|0),g=oA,oA=QA-((gA>>>0<4293918720)+-1|0)|0,zA=g-(gA=-2097152&(OA=gA- -1048576|0))|0,pA=I-((g>>>0<gA>>>0)+(QA=oA)|0)|0,g=xg(K,q,-997805,-1),I=l+EA|0,PA=gA=g+yA|0,oA=gA>>>0<g>>>0?I+1|0:I,g=xg(V,JA,470296,0),I=l,gA=g,g=xg(R,dA,666643,0),I=l+I|0,g=(I=(gA=gA+g|0)>>>0<g>>>0?I+1|0:I)+iA|0,sA=(gA=gA+CA|0)-(I=-2097152&sA)|0,wA=(g=gA>>>0<CA>>>0?g+1|0:g)-((gA>>>0<I>>>0)+aA|0)|0,I=xg(V,JA,666643,0),gA=l+rA|0,yA=g=I+lA|0,EA=g>>>0<I>>>0?gA+1|0:gA,g=xg(u,0,_,0),I=l,gA=g,g=xg(D,0,Y,0),I=l+I|0,I=(gA=gA+g|0)>>>0<g>>>0?I+1|0:I,CA=(g=gA)+(gA=xg(F,0,G,0))|0,g=l+I|0,g=CA>>>0<gA>>>0?g+1|0:g,gA=xg(k,0,p,0),I=l+g|0,I=(CA=gA+CA|0)>>>0<gA>>>0?I+1|0:I,gA=xg(t,0,H,0),g=l+I|0,g=(CA=gA+CA|0)>>>0<gA>>>0?g+1|0:g,I=xg(e,0,b,0),gA=l+g|0,I=(g=CA=I+CA|0)>>>0<I>>>0?gA+1|0:gA,(g=(gA=2097151&((1&SA)<<31|KA>>>1))+g|0)>>>0<gA>>>0&&(I=I+1|0),aA=g,CA=I,I=xg(F,0,_,0),g=l,gA=I,I=xg(u,0,Y,0),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,iA=(I=xg(k,0,G,0))+gA|0,gA=l+g|0,gA=iA>>>0<I>>>0?gA+1|0:gA,g=xg(H,0,p,0),I=l+gA|0,I=(iA=g+iA|0)>>>0<g>>>0?I+1|0:I,gA=xg(t,0,b,0),g=l+I|0,I=g=(iA=gA+iA|0)>>>0<gA>>>0?g+1|0:g,(g=iA+(gA=LA>>>4&2097151)|0)>>>0<gA>>>0&&(I=I+1|0),rA=g,HA=I,jA=(I=g)- -1048576|0,LA=gA=HA-((I>>>0<4293918720)+-1|0)|0,g=(I=gA>>21)+CA|0,SA=g=(iA=aA=(gA=(2097151&gA)<<11|jA>>>21)+aA|0)>>>0<gA>>>0?g+1|0:g,qA=(I=iA)- -1048576|0,UA=gA=g-((I>>>0<4293918720)+-1|0)|0,I=(I=gA>>21)+EA|0,I=(gA=(g=(2097151&gA)<<11|qA>>>21)+yA|0)>>>0<g>>>0?I+1|0:I,g=gA,vA=(gA=I)-((g>>>0<(I=-2097152&uA)>>>0)+cA|0)|0,RA=(I=aA=g-I|0)- -1048576|0,lA=g=vA-((I>>>0<4293918720)+-1|0)|0,I=(gA=g>>21)+wA|0,kA=CA=(g=(2097151&g)<<11|RA>>>21)+sA|0,uA=I=CA>>>0<g>>>0?I+1|0:I,DA=(I=CA)- -1048576|0,sA=g=uA-((I>>>0<4293918720)+-1|0)|0,M=nA-(I=-2097152&YA)|0,KA=CA=_A-((nA>>>0<I>>>0)+FA|0)|0,I=(2097151&g)<<11|DA>>>21,g=(g>>21)+oA|0,g=(EA=I+PA|0)>>>0<I>>>0?g+1|0:g,nA=(gA=xg(x,L,136657,0))+(EA-(I=-2097152&eA)|0)|0,I=l+(g-((EA>>>0<I>>>0)+GA|0)|0)|0,I=nA>>>0<gA>>>0?I+1|0:I,gA=xg(M,CA,-683901,-1),g=l+I|0,nA=CA=gA+nA|0,wA=g=CA>>>0<gA>>>0?g+1|0:g,YA=(I=CA)- -1048576|0,yA=g=g-((I>>>0<4293918720)+-1|0)|0,I=(gA=g>>21)+pA|0,EA=CA=(g=(2097151&g)<<11|YA>>>21)+zA|0,cA=g=(eA=I=CA>>>0<g>>>0?I+1|0:I)-(((I=CA)>>>0<4293918720)+-1|0)|0,PA=(2097151&g)<<11|(_A=I- -1048576|0)>>>21,GA=g>>21,I=xg(o,0,_,0),g=l,gA=I,I=xg(Q,0,Y,0),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,I=xg(w,0,G,0),g=l+g|0,g=(gA=I+gA|0)>>>0<I>>>0?g+1|0:g,CA=(I=gA)+(gA=xg(y,0,p,0))|0,I=l+g|0,I=CA>>>0<gA>>>0?I+1|0:I,g=xg(t,0,h,0),I=l+I|0,I=(gA=g+CA|0)>>>0<g>>>0?I+1|0:I,CA=(g=xg(e,0,D,0))+gA|0,gA=l+I|0,gA=CA>>>0<g>>>0?gA+1|0:gA,I=xg(c,0,u,0),g=l+gA|0,g=(CA=I+CA|0)>>>0<I>>>0?g+1|0:g,I=xg(f,m,k,0),g=l+g|0,g=(gA=I+CA|0)>>>0<I>>>0?g+1|0:g,CA=(I=gA)+(gA=xg(s,0,F,0))|0,I=l+g|0,I=CA>>>0<gA>>>0?I+1|0:I,g=xg(r,0,H,0),I=l+I|0,I=(gA=g+CA|0)>>>0<g>>>0?I+1|0:I,CA=(g=xg(i,0,b,0))+gA|0,gA=l+I|0,g=(I=CA)>>>0<g>>>0?gA+1|0:gA,I=Cg(B+26|0),(I=CA+(gA=2097151&((3&(gA=l))<<30|I>>>2))|0)>>>0<gA>>>0&&(g=g+1|0),FA=I,CA=g,I=xg(N,J,470296,0),g=l,gA=I,I=xg(U,d,666643,0),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,pA=(I=gA)+(gA=xg(v,X,654183,0))|0,I=l+g|0,I=pA>>>0<gA>>>0?I+1|0:I,g=xg(R,dA,-997805,-1),gA=l+I|0,gA=(pA=g+pA|0)>>>0<g>>>0?gA+1|0:gA,g=xg(V,JA,136657,0),I=l+gA|0,g=(I=(pA=g+pA|0)>>>0<g>>>0?I+1|0:I)+CA|0,T=(I=FA)- -1048576|0,CA=oA=CA-((I>>>0<4293918720)+-1|0)|0,g=(g=(pA=(gA=pA)+FA|0)>>>0<gA>>>0?g+1|0:g)+(gA=BA>>21)|0,g=(BA=pA+(I=(2097151&BA)<<11|ZA>>>21)|0)>>>0<I>>>0?g+1|0:g,I=(FA=BA)-(BA=-2097152&T)|0,gA=xg(K,q,-683901,-1),g=(BA=g-((FA>>>0<BA>>>0)+CA|0)|0)+l|0,W=I- -1048576|0,oA=BA-((I>>>0<4293918720)+-1|0)|0,g=(g=(pA=I+gA|0)>>>0<gA>>>0?g+1|0:g)+(gA=QA>>21)|0,g=(oA=(g=(QA=pA+(I=(2097151&QA)<<11|OA>>>21)|0)>>>0<I>>>0?g+1|0:g)-((QA>>>0<(gA=-2097152&W)>>>0)+(BA=oA)|0)|0)+GA|0,(QA=(I=QA-gA|0)+PA|0)>>>0<I>>>0&&(g=g+1|0),j=I- -1048576|0,oA=oA-((I>>>0<4293918720)+-1|0)|0,ZA=(I=gA=QA)-(gA=-2097152&j)|0,OA=g-((I>>>0<gA>>>0)+(QA=oA)|0)|0,zA=EA-(I=-2097152&_A)|0,pA=eA-((EA>>>0<I>>>0)+cA|0)|0,PA=nA-(I=-2097152&YA)|0,YA=wA-((nA>>>0<I>>>0)+yA|0)|0,g=xg(K,q,654183,0),I=l+uA|0,I=(gA=g+kA|0)>>>0<g>>>0?I+1|0:I,nA=(g=xg(x,L,-997805,-1))+((EA=gA)-(gA=-2097152&DA)|0)|0,gA=l+(I-((EA>>>0<gA>>>0)+sA|0)|0)|0,I=xg(M,KA,136657,0),g=l+(nA>>>0<g>>>0?gA+1|0:gA)|0,_A=EA=I+nA|0,nA=EA>>>0<I>>>0?g+1|0:g,FA=tA-(I=-2097152&mA)|0,wA=NA-((tA>>>0<I>>>0)+bA|0)|0,g=xg(U,d,-997805,-1),I=l,gA=g,g=xg(S,P,654183,0),I=l+I|0,I=(gA=gA+g|0)>>>0<g>>>0?I+1|0:I,EA=(g=xg(N,J,136657,0))+gA|0,gA=l+I|0,gA=EA>>>0<g>>>0?gA+1|0:gA,I=xg(v,X,-683901,-1),g=l+gA|0,g=(g=(EA=I+EA|0)>>>0<I>>>0?g+1|0:g)+TA|0,g=(I=EA+fA|0)>>>0<fA>>>0?g+1|0:g,yA=(gA=I)-(I=-2097152&WA)|0,eA=g-((gA>>>0<I>>>0)+xA|0)|0,g=xg(U,d,654183,0),I=l,gA=g,g=xg(S,P,470296,0),I=l+I|0,I=(gA=gA+g|0)>>>0<g>>>0?I+1|0:I,EA=(g=gA)+(gA=xg(N,J,-997805,-1))|0,g=l+I|0,g=XA+(EA>>>0<gA>>>0?g+1|0:g)|0,g=(I=EA+hA|0)>>>0<hA>>>0?g+1|0:g,EA=(gA=I)+(I=xg(v,X,136657,0))|0,gA=l+g|0,gA=EA>>>0<I>>>0?gA+1|0:gA,g=xg(R,dA,-683901,-1),I=l+gA|0,I=(EA=g+EA|0)>>>0<g>>>0?I+1|0:I,fA=(gA=EA)-(g=-2097152&IA)|0,tA=I-((gA>>>0<g>>>0)+VA|0)|0,I=xg(Q,0,_,0),g=l,gA=I,I=xg(n,0,Y,0),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,EA=(I=xg(o,0,G,0))+gA|0,gA=l+g|0,gA=EA>>>0<I>>>0?gA+1|0:gA,g=xg(w,0,p,0),I=l+gA|0,I=(EA=g+EA|0)>>>0<g>>>0?I+1|0:I,gA=xg(t,0,y,0),g=l+I|0,g=(EA=gA+EA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(e,0,h,0),I=l+g|0,I=(EA=gA+EA|0)>>>0<gA>>>0?I+1|0:I,gA=xg(c,0,D,0),g=l+I|0,g=(EA=gA+EA|0)>>>0<gA>>>0?g+1|0:g,I=xg(f,m,F,0),gA=l+g|0,gA=(EA=I+EA|0)>>>0<I>>>0?gA+1|0:gA,g=xg(s,0,u,0),I=l+gA|0,I=(EA=g+EA|0)>>>0<g>>>0?I+1|0:I,gA=xg(r,0,k,0),g=l+I|0,g=(EA=gA+EA|0)>>>0<gA>>>0?g+1|0:g,gA=xg(C,0,b,0),I=l+g|0,I=(EA=gA+EA|0)>>>0<gA>>>0?I+1|0:I,gA=xg(i,0,H,0),g=l+I|0,gA=(I=EA=gA+EA|0)>>>0<gA>>>0?g+1|0:g,(I=(g=(a[B+28|0]|a[B+29|0]<<8|a[B+30|0]<<16|a[B+31|0]<<24)>>>7|0)+I|0)>>>0<g>>>0&&(gA=gA+1|0),g=CA>>21,CA=(B=(2097151&CA)<<11|T>>>21)+I|0,I=g+gA|0,EA=CA,GA=B=(cA=I=CA>>>0<B>>>0?I+1|0:I)-(((I=CA)>>>0<4293918720)+-1|0)|0,g=(g=B>>21)+tA|0,CA=B=(I=(2097151&B)<<11|(uA=I- -1048576|0)>>>21)+fA|0,oA=g=B>>>0<I>>>0?g+1|0:g,sA=(I=B)- -1048576|0,hA=B=g-((I>>>0<4293918720)+-1|0)|0,I=(g=B>>21)+eA|0,I=(gA=(B=(2097151&B)<<11|sA>>>21)+yA|0)>>>0<B>>>0?I+1|0:I,B=gA,tA=gA=(fA=I)-(((I=gA)>>>0<4293918720)+-1|0)|0,g=(g=gA>>21)+wA|0,mA=gA=(I=(2097151&gA)<<11|(eA=I- -1048576|0)>>>21)+FA|0,bA=g=gA>>>0<I>>>0?g+1|0:g,I=xg(gA,g,-683901,-1),gA=l+nA|0,yA=g=I+_A|0,nA=g>>>0<I>>>0?gA+1|0:gA,kA=B-(I=-2097152&eA)|0,_A=tA=fA-((B>>>0<I>>>0)+tA|0)|0,g=xg(K,q,470296,0)+aA|0,I=vA+l|0,I=g>>>0<aA>>>0?I+1|0:I,aA=(B=xg(x,L,654183,0))+((gA=g)-(g=-2097152&RA)|0)|0,g=l+(I-((gA>>>0<g>>>0)+lA|0)|0)|0,g=aA>>>0<B>>>0?g+1|0:g,I=xg(M,KA,-997805,-1),gA=l+g|0,gA=(B=I+aA|0)>>>0<I>>>0?gA+1|0:gA,g=xg(mA,bA,136657,0),I=l+gA|0,I=(B=g+B|0)>>>0<g>>>0?I+1|0:I,g=xg(kA,tA,-683901,-1),I=l+I|0,fA=I=(gA=B=g+B|0)>>>0<g>>>0?I+1|0:I,wA=(I=gA)- -1048576|0,tA=B=fA-((I>>>0<4293918720)+-1|0)|0,I=(g=B>>21)+nA|0,I=(aA=(B=(2097151&B)<<11|wA>>>21)+yA|0)>>>0<B>>>0?I+1|0:I,B=aA,aA=I,eA=(I=B)- -1048576|0,I=(g=(nA=yA=aA-((I>>>0<4293918720)+-1|0)|0)>>21)+YA|0,YA=lA=(yA=(2097151&nA)<<11|eA>>>21)+PA|0,yA=lA>>>0<yA>>>0?I+1|0:I,XA=B-(I=-2097152&eA)|0,VA=aA-((B>>>0<I>>>0)+nA|0)|0,xA=gA-(I=-2097152&wA)|0,NA=fA-((gA>>>0<I>>>0)+tA|0)|0,B=(I=xg(K,q,666643,0))+(iA-(g=-2097152&qA)|0)|0,g=l+(SA-((iA>>>0<g>>>0)+UA|0)|0)|0,g=B>>>0<I>>>0?g+1|0:g,gA=(I=B)+(B=xg(x,L,470296,0))|0,I=l+g|0,I=gA>>>0<B>>>0?I+1|0:I,g=xg(M,KA,654183,0),I=l+I|0,tA=B=g+gA|0,B=B>>>0<g>>>0?I+1|0:I,iA=CA-(I=-2097152&sA)|0,nA=oA-((CA>>>0<I>>>0)+hA|0)|0,I=xg(U,d,470296,0),g=l,gA=I,I=xg(S,P,666643,0),g=l+g|0,g=(gA=gA+I|0)>>>0<I>>>0?g+1|0:g,CA=(I=gA)+(gA=xg(N,J,654183,0))|0,I=l+g|0,I=CA>>>0<gA>>>0?I+1|0:I,g=xg(v,X,-997805,-1),I=l+I|0,I=(gA=g+CA|0)>>>0<g>>>0?I+1|0:I,CA=(g=gA)+(gA=xg(R,dA,136657,0))|0,g=l+I|0,g=CA>>>0<gA>>>0?g+1|0:g,I=xg(V,JA,-683901,-1),gA=l+g|0,g=(gA=(CA=I+CA|0)>>>0<I>>>0?gA+1|0:gA)+cA|0,g=(I=CA+EA|0)>>>0<EA>>>0?g+1|0:g,CA=I,I=I-(gA=-2097152&uA)|0,CA=g-((CA>>>0<gA>>>0)+GA|0)|0,g=BA>>21,BA=(gA=(2097151&BA)<<11|W>>>21)+I|0,I=g+CA|0,aA=BA,hA=gA=(oA=I=BA>>>0<gA>>>0?I+1|0:I)-(((I=BA)>>>0<4293918720)+-1|0)|0,g=(g=gA>>21)+nA|0,DA=gA=(I=(2097151&gA)<<11|(vA=I- -1048576|0)>>>21)+iA|0,FA=g=gA>>>0<I>>>0?g+1|0:g,g=xg(gA,g,-683901,-1),I=l+B|0,I=(gA=g+tA|0)>>>0<g>>>0?I+1|0:I,g=xg(mA,bA,-997805,-1),I=l+I|0,I=(B=g+gA|0)>>>0<g>>>0?I+1|0:I,g=xg(kA,_A,136657,0),gA=l+I|0,iA=B=g+B|0,CA=B>>>0<g>>>0?gA+1|0:gA,I=xg(k,0,_,0),g=l,B=I,I=xg(F,0,Y,0),g=l+g|0,g=(B=B+I|0)>>>0<I>>>0?g+1|0:g,I=xg(H,0,G,0),g=l+g|0,g=(B=I+B|0)>>>0<I>>>0?g+1|0:g,gA=(I=B)+(B=xg(b,0,p,0))|0,I=l+g|0,I=gA>>>0<B>>>0?I+1|0:I,(g=(B=MA>>>7&2097151)+gA|0)>>>0<B>>>0&&(I=I+1|0),EA=g,B=I,I=xg(H,0,_,0),g=l,BA=(gA=I)+(I=xg(k,0,Y,0))|0,gA=l+g|0,gA=BA>>>0<I>>>0?gA+1|0:gA,g=xg(b,0,G,0),I=l+gA|0,g=(gA=BA=g+BA|0)>>>0<g>>>0?I+1|0:I,(I=BA+(gA=2097151&((3&$)<<30|z>>>2))|0)>>>0<gA>>>0&&(g=g+1|0),nA=I,BA=g,UA=I- -1048576|0,eA=g=g-((I>>>0<4293918720)+-1|0)|0,I=B+(gA=g>>>21|0)|0,fA=g=(cA=I=(EA=(g=(2097151&g)<<11|UA>>>21)+EA|0)>>>0<g>>>0?I+1|0:I)-(((I=EA)>>>0<4293918720)+-1|0)|0,I=rA+((2097151&g)<<11|(lA=I- -1048576|0)>>>21)|0,g=HA+(g>>21)|0,g=I>>>0<rA>>>0?g+1|0:g,rA=(B=xg(x,L,666643,0))+((gA=I)-(I=-2097152&jA)|0)|0,I=l+(g-((gA>>>0<I>>>0)+LA|0)|0)|0,I=rA>>>0<B>>>0?I+1|0:I,g=xg(M,KA,470296,0),gA=l+I|0,gA=(B=g+rA|0)>>>0<g>>>0?gA+1|0:gA,I=xg(DA,FA,136657,0),g=l+gA|0,g=(B=I+B|0)>>>0<I>>>0?g+1|0:g,gA=(I=B)+(B=xg(mA,bA,654183,0))|0,I=l+g|0,I=gA>>>0<B>>>0?I+1|0:I,B=xg(kA,_A,-997805,-1),g=l+I|0,uA=gA=B+gA|0,tA=g=gA>>>0<B>>>0?g+1|0:g,sA=(I=gA)- -1048576|0,rA=B=g-((I>>>0<4293918720)+-1|0)|0,gA=(I=B>>21)+CA|0,CA=B=(g=(2097151&B)<<11|sA>>>21)+iA|0,B=gA=B>>>0<g>>>0?gA+1|0:gA,wA=(I=CA)- -1048576|0,iA=gA=gA-((I>>>0<4293918720)+-1|0)|0,g=(I=gA>>21)+NA|0,TA=GA=(gA=(2097151&gA)<<11|wA>>>21)+xA|0,GA=GA>>>0<gA>>>0?g+1|0:g,I=aA-(g=-2097152&vA)|0,gA=oA-((aA>>>0<g>>>0)+hA|0)|0,gA=(g=QA>>21)+gA|0,oA=gA=(QA=(aA=I)+(I=(2097151&QA)<<11|j>>>21)|0)>>>0<I>>>0?gA+1|0:gA,hA=gA=gA-(((I=QA)>>>0<4293918720)+-1|0)|0,SA=g=gA>>21,I=xg(MA=(2097151&gA)<<11|(vA=I- -1048576|0)>>>21,g,-683901,-1),g=l+B|0,g=(gA=I+CA|0)>>>0<I>>>0?g+1|0:g,xA=gA-(I=-2097152&wA)|0,NA=g-((gA>>>0<I>>>0)+iA|0)|0,I=xg(MA,SA,136657,0),gA=l+tA|0,gA=(g=I+uA|0)>>>0<I>>>0?gA+1|0:gA,HA=g-(I=-2097152&sA)|0,LA=gA-((g>>>0<I>>>0)+rA|0)|0,B=(g=xg(M,KA,666643,0))+(EA-(I=-2097152&lA)|0)|0,I=l+(cA-((EA>>>0<I>>>0)+fA|0)|0)|0,I=B>>>0<g>>>0?I+1|0:I,g=xg(DA,FA,-997805,-1),I=l+I|0,I=(B=g+B|0)>>>0<g>>>0?I+1|0:I,gA=(g=B)+(B=xg(mA,bA,470296,0))|0,g=l+I|0,g=gA>>>0<B>>>0?g+1|0:g,B=(I=xg(kA,_A,654183,0))+gA|0,gA=l+g|0,cA=B,iA=B>>>0<I>>>0?gA+1|0:gA,CA=BA,I=xg(b,0,_,0),g=l,B=I,I=xg(H,0,Y,0),g=l+g|0,I=g=(B=B+I|0)>>>0<I>>>0?g+1|0:g,(g=(g=B)+(B=O>>>5&2097151)|0)>>>0<B>>>0&&(I=I+1|0),EA=g,B=I,g=2097151&Z,gA=xg(b,0,Y,0)+g|0,I=l,BA=gA,tA=gA=(fA=I=gA>>>0<g>>>0?I+1|0:I)-(((I=gA)>>>0<4293918720)+-1|0)|0,I=(2097151&gA)<<11|(lA=I- -1048576|0)>>>21,gA=(gA>>>21|0)+B|0,rA=gA=(B=EA=I+EA|0)>>>0<I>>>0?gA+1|0:gA,uA=(I=B)- -1048576|0,aA=gA=gA-((I>>>0<4293918720)+-1|0)|0,I=(g=gA>>>21|0)+CA|0,I=(EA=(gA=(2097151&gA)<<11|uA>>>21)+nA|0)>>>0<gA>>>0?I+1|0:I,EA=(g=xg(DA,FA,654183,0))+((CA=EA)-(gA=-2097152&UA)|0)|0,gA=l+(I-((16383&eA)+(CA>>>0<gA>>>0)|0)|0)|0,I=xg(mA,bA,666643,0),g=l+(EA>>>0<g>>>0?gA+1|0:gA)|0,g=(CA=I+EA|0)>>>0<I>>>0?g+1|0:g,gA=xg(kA,_A,470296,0),I=l+g|0,sA=CA=gA+CA|0,EA=gA=(nA=I=CA>>>0<gA>>>0?I+1|0:I)-(((I=CA)>>>0<4293918720)+-1|0)|0,g=(g=gA>>21)+iA|0,eA=gA=(I=(2097151&gA)<<11|(wA=I- -1048576|0)>>>21)+cA|0,CA=g=gA>>>0<I>>>0?g+1|0:g;cA=(I=gA)- -1048576|0,I=(g=(gA=iA=g-((I>>>0<4293918720)+-1|0)|0)>>21)+LA|0,iA=(HA=UA=(iA=(2097151&gA)<<11|cA>>>21)+HA|0)>>>0<iA>>>0?I+1|0:I,g=xg(MA,SA,-997805,-1),I=l+CA|0,I=(eA=g+eA|0)>>>0<g>>>0?I+1|0:I,LA=(CA=eA)-(g=-2097152&cA)|0,UA=I-((CA>>>0<g>>>0)+gA|0)|0,I=xg(MA,SA,654183,0),gA=l+nA|0,gA=(g=I+sA|0)>>>0<I>>>0?gA+1|0:gA,eA=g-(I=-2097152&wA)|0,cA=gA-((g>>>0<I>>>0)+EA|0)|0,gA=(I=xg(DA,FA,470296,0))+(B-(g=-2097152&uA)|0)|0,g=l+(rA-((16383&aA)+(B>>>0<g>>>0)|0)|0)|0,g=gA>>>0<I>>>0?g+1|0:g,I=xg(kA,_A,666643,0),g=l+g|0,EA=B=I+gA|0,CA=B>>>0<I>>>0?g+1|0:g,I=xg(DA,FA,666643,0),gA=l+(fA-((4095&tA)+(BA>>>0<(g=-2097152&lA)>>>0)|0)|0)|0,aA=gA=(B=I+(BA-g|0)|0)>>>0<I>>>0?gA+1|0:gA,fA=(I=B)- -1048576|0,nA=gA=gA-((I>>>0<4293918720)+-1|0)|0,g=(I=gA>>21)+CA|0,tA=BA=(gA=(2097151&gA)<<11|fA>>>21)+EA|0,EA=g=BA>>>0<gA>>>0?g+1|0:g,CA=gA=g-(((I=BA)>>>0<4293918720)+-1|0)|0,g=(2097151&gA)<<11|(rA=I- -1048576|0)>>>21,gA=(gA>>21)+cA|0,cA=BA=g+eA|0,BA=BA>>>0<g>>>0?gA+1|0:gA,I=xg(MA,SA,470296,0),g=l+EA|0,CA=(g=(gA=I+tA|0)>>>0<I>>>0?g+1|0:g)-(((EA=gA)>>>0<(gA=-2097152&rA)>>>0)+CA|0)|0,tA=I=EA-gA|0,I=xg(MA,SA,666643,0),gA=l+(aA-((B>>>0<(g=-2097152&fA)>>>0)+nA|0)|0)|0,nA=EA=I+(B-g|0)|0,B=(2097151&(gA=EA>>>0<I>>>0?gA+1|0:gA))<<11|(I=EA)>>>21,I=(g=gA>>21)+CA|0,CA=gA=tA+B|0,gA=(I=(g=gA)>>>0<B>>>0?I+1|0:I)>>21,I=(2097151&I)<<11|g>>>21,g=gA+BA|0,EA=B=I+cA|0,I=(I=(g=B>>>0<I>>>0?g+1|0:g)>>21)+UA|0,rA=B=(g=(2097151&g)<<11|B>>>21)+LA|0,g=(g=(I=B>>>0<g>>>0?I+1|0:I)>>21)+iA|0,uA=B=(I=(2097151&I)<<11|B>>>21)+HA|0,gA=(I=(g=B>>>0<I>>>0?g+1|0:g)>>21)+NA|0,sA=B=(g=(2097151&g)<<11|B>>>21)+xA|0,B=(2097151&(gA=(I=B)>>>0<g>>>0?gA+1|0:gA))<<11|I>>>21,I=(g=gA>>21)+GA|0,wA=gA=B+TA|0,gA=(I=(g=gA)>>>0<B>>>0?I+1|0:I)>>21,I=(2097151&I)<<11|g>>>21,g=gA+VA|0,eA=B=I+XA|0,I=(I=(g=B>>>0<I>>>0?g+1|0:g)>>21)+yA|0,cA=B=(g=(2097151&g)<<11|B>>>21)+YA|0,g=(g=(I=B>>>0<g>>>0?I+1|0:I)>>21)+pA|0,GA=B=(I=(2097151&I)<<11|B>>>21)+zA|0,gA=(I=(g=B>>>0<I>>>0?g+1|0:g)>>21)+OA|0,fA=B=(g=(2097151&g)<<11|B>>>21)+ZA|0,I=B,g=(oA-((QA>>>0<(B=-2097152&vA)>>>0)+hA|0)|0)+(g=(gA=I>>>0<g>>>0?gA+1|0:gA)>>21)|0,tA=gA=(gA=(2097151&gA)<<11|I>>>21)+(I=QA-B|0)|0,aA=I=(g=gA>>>0<I>>>0?g+1|0:g)>>21,g=xg(hA=(2097151&g)<<11|gA>>>21,I,666643,0),gA=l,nA=g=g+(I=2097151&nA)|0,B=gA=g>>>0<I>>>0?gA+1|0:gA,E[0|AA]=g,E[A+1|0]=(255&gA)<<24|g>>>8,I=2097151&CA,BA=xg(hA,aA,470296,0)+I|0,g=l,g=BA>>>0<I>>>0?g+1|0:g,g=(I=B>>21)+g|0,g=(CA=QA=(gA=BA)+(BA=(2097151&B)<<11|nA>>>21)|0)>>>0<BA>>>0?g+1|0:g,gA=CA,E[A+4|0]=(2047&g)<<21|gA>>>11,I=g,E[A+3|0]=(7&I)<<29|gA>>>3,g=A,BA=2097151&EA,QA=xg(hA,aA,654183,0)+BA|0,gA=l,gA=QA>>>0<BA>>>0?gA+1|0:gA,BA=I,I=(I>>=21)+gA|0,EA=QA=(BA=(2097151&BA)<<11|CA>>>21)+QA|0,gA=I=QA>>>0<BA>>>0?I+1|0:I,E[g+6|0]=(63&I)<<26|QA>>>6,QA=0,I=iA=2097151&CA,E[g+2|0]=31&((65535&B)<<16|nA>>>16)|I<<5,BA=g,I=2097151&rA,B=xg(hA,aA,-997805,-1)+I|0,g=l,g=B>>>0<I>>>0?g+1|0:g,g=(I=gA>>21)+g|0,nA=gA=(CA=B)+(B=(2097151&gA)<<11|EA>>>21)|0,g=gA>>>0<B>>>0?g+1|0:g,E[BA+9|0]=(511&g)<<23|gA>>>9,B=g,I=g,g=gA,E[BA+8|0]=(1&I)<<31|g>>>1,CA=0,g=rA=2097151&EA,E[BA+5|0]=(524287&QA)<<13|iA>>>19|g<<2,g=2097151&uA,gA=xg(hA,aA,136657,0)+g|0,I=l,I=gA>>>0<g>>>0?I+1|0:I,g=B>>21,QA=(B=(2097151&B)<<11|nA>>>21)+gA|0,gA=I+g|0,EA=QA,gA=QA>>>0<B>>>0?gA+1|0:gA,E[BA+12|0]=(4095&gA)<<20|QA>>>12,g=gA,E[BA+11|0]=(15&g)<<28|QA>>>4,QA=0,B=iA=2097151&nA,E[BA+7|0]=(16383&CA)<<18|rA>>>14|B<<7,B=BA,gA=2097151&sA,BA=xg(hA,aA,-683901,-1)+gA|0,I=l,I=BA>>>0<gA>>>0?I+1|0:I,gA=BA,BA=(2097151&g)<<11|EA>>>21,g=(g>>21)+I|0,I=g=(CA=gA+BA|0)>>>0<BA>>>0?g+1|0:g,E[B+14|0]=(127&I)<<25|CA>>>7,BA=0,B=nA=2097151&EA,E[A+10|0]=(131071&QA)<<15|iA>>>17|B<<4,I>>=21,g=(EA=(gA=(2097151&g)<<11|CA>>>21)+(2097151&wA)|0)>>>0<gA>>>0?I+1|0:I,B=EA,E[A+17|0]=(1023&g)<<22|B>>>10,I=g,E[A+16|0]=(3&I)<<30|B>>>2,gA=0,B=aA=2097151&CA,E[A+13|0]=(1048575&BA)<<12|nA>>>20|B<<1,I>>=21,CA=BA=(g=(2097151&g)<<11|EA>>>21)+(2097151&eA)|0,I=BA>>>0<g>>>0?I+1|0:I,B=BA,E[A+20|0]=(8191&I)<<19|B>>>13,g=I,E[A+19|0]=(31&I)<<27|B>>>5,B=nA=2097151&EA,E[A+15|0]=(32767&gA)<<17|aA>>>15|B<<6,gA=I>>=21,EA=aA=(B=(2097151&g)<<11|BA>>>21)+(2097151&cA)|0,E[(BA=A)+21|0]=EA,I=CA,E[BA+18|0]=(262143&QA)<<14|nA>>>18|I<<3,B=EA>>>0<B>>>0?gA+1|0:gA,E[BA+22|0]=(255&B)<<24|EA>>>8,g=gA=(I=B)>>21,QA=CA=(I=(2097151&I)<<11|EA>>>21)+(2097151&GA)|0,g=CA>>>0<I>>>0?g+1|0:g,gA=CA,E[BA+25|0]=(2047&g)<<21|gA>>>11,I=g,E[BA+24|0]=(7&I)<<29|gA>>>3,gA=BA,I>>=21,(BA=(g=(2097151&g)<<11|CA>>>21)+(2097151&fA)|0)>>>0<g>>>0&&(I=I+1|0),g=I,E[gA+27|0]=(63&I)<<26|BA>>>6,gA=0,B=31&((65535&B)<<16|EA>>>16),I=EA=2097151&QA,E[A+23|0]=B|I<<5,QA=(2097151&g)<<11|BA>>>21,g>>=21,g=(nA=QA+(2097151&tA)|0)>>>0<QA>>>0?g+1|0:g,B=QA=nA,E[A+31|0]=(131071&g)<<15|B>>>17,I=g,E[A+30|0]=(511&I)<<23|B>>>9,E[A+29|0]=(1&I)<<31|B>>>1,g=0,BA&=2097151,E[A+26|0]=(524287&gA)<<13|EA>>>19|BA<<2,E[A+28|0]=(16383&g)<<18|BA>>>14|B<<7}(Q,r+160|0,r+288|0,r+224|0),KI(r+288|0,64),KI(r+224|0,64),I&&(n[I>>2]=64,n[I+4>>2]=0),D=r+560|0,0}function T(A,I,g,B){var C;D=C=D-2272|0,uA(C+2016|0,I),uA(C+1760|0,B),zI(C+480|0,g),cg(C+320|0,g),jI(C,C+320|0),tI(C+320|0,C,C+480|0),jI(C+160|0,C+320|0),zI(I=C+640|0,C+160|0),tI(C+320|0,C,I),jI(C+160|0,C+320|0),zI(I=C+800|0,C+160|0),tI(C+320|0,C,I),jI(C+160|0,C+320|0),zI(I=C+960|0,C+160|0),tI(C+320|0,C,I),jI(C+160|0,C+320|0),zI(I=C+1120|0,C+160|0),tI(C+320|0,C,I),jI(C+160|0,C+320|0),zI(I=C+1280|0,C+160|0),tI(C+320|0,C,I),jI(C+160|0,C+320|0),zI(I=C+1440|0,C+160|0),tI(C+320|0,C,I),jI(C+160|0,C+320|0),zI(C+1600|0,C+160|0),iB(A),Vg(A+40|0),Vg(A+80|0),B=255;A:{for(;;){if(!(a[(g=B)+(C+2016|0)|0]|a[(C+1760|0)+g|0])){if(B=g+-1|0,g)continue;break A}break}if(!((0|g)<0))for(;pI(C+320|0,A),(0|(g=E[(I=g)+(C+2016|0)|0]))>=1?(jI(C+160|0,C+320|0),tI(C+320|0,C+160|0,(C+480|0)+o((254&g)>>>1|0,160)|0)):(0|g)>-1||(jI(C+160|0,C+320|0),cI(C+320|0,C+160|0,(C+480|0)+o((0-g&254)>>>1|0,160)|0)),(0|(g=E[I+(C+1760|0)|0]))>=1?(jI(C+160|0,C+320|0),wI(C+320|0,C+160|0,o((254&g)>>>1|0,120)+2272|0)):(0|g)>-1||(jI(C+160|0,C+320|0),sI(C+320|0,C+160|0,o((0-g&254)>>>1|0,120)+2272|0)),Ig(A,C+320|0),g=I+-1|0,(0|I)>0;);}D=C+2272|0}function W(A,I,g,B){var C,Q=0,i=0,r=0,o=0,e=0,t=0,c=0;if(D=C=D-704|0,g|B)if(e=(t=n[(Q=A)+72>>2])+(r=(i=g)<<3)|0,i=(o=n[Q+76>>2])+(B<<3|i>>>29)|0,i=e>>>0<r>>>0?i+1|0:i,n[Q+72>>2]=e,n[Q+76>>2]=i,Q=n[Q+64>>2],r=n[A+68>>2],(0|i)==(0|o)&e>>>0<t>>>0|i>>>0<o>>>0&&((Q=Q+1|0)>>>0<1&&(r=r+1|0),n[(i=A)+64>>2]=Q,n[i+68>>2]=r),(Q=(c=B>>>29|0)+Q|0)>>>0<c>>>0&&(r=r+1|0),n[(i=A)+64>>2]=Q,n[i+68>>2]=r,(0|B)==(0|(r=e=0-(128<(i=127&((7&o)<<29|t>>>3))>>>0)|0))&(Q=o=128-i|0)>>>0<=g>>>0|r>>>0<B>>>0){for(Q=0,r=0;E[80+(A+(c=Q+i|0)|0)|0]=a[I+Q|0],(Q=Q+1|0)>>>0<1&&(r=r+1|0),(0|o)!=(0|Q)|(0|r)!=(0|e););if(G(A,A+80|0,C,r=C+640|0),I=I+o|0,!(B=B-((g>>>0<o>>>0)+e|0)|0)&(g=g-o|0)>>>0>127|B>>>0>0)for(;G(A,I,C,r),I=I+128|0,i=B+-1|0,(g=g+-128|0)>>>0<4294967168&&(i=i+1|0),B=i,!i&g>>>0>127|i>>>0>0;);if(g|B)for(Q=0,r=0;E[80+(A+Q|0)|0]=a[I+Q|0],(i=Q+1|0)>>>0<1&&(r=r+1|0),(0|g)!=(0|(Q=i))|(0|B)!=(0|r););KI(C,704)}else for(Q=g,o=(g=!B&g>>>0>1|B>>>0>0)?Q:1,B=g?B:0,Q=0,r=0;E[80+(A+(t=Q+i|0)|0)|0]=a[I+Q|0],(g=Q+1|0)>>>0<1&&(r=r+1|0),(0|o)!=(0|(Q=g))|(0|B)!=(0|r););return D=C+704|0,0}function j(A,I,g){var B,C=0,Q=0;if(g>>>0>=512)return w(0|A,0|I,0|g),A;B=A+g|0;A:if(3&(A^I))if(B>>>0<4)g=A;else if((C=B+-4|0)>>>0<A>>>0)g=A;else for(g=A;E[0|g]=a[0|I],E[g+1|0]=a[I+1|0],E[g+2|0]=a[I+2|0],E[g+3|0]=a[I+3|0],I=I+4|0,(g=g+4|0)>>>0<=C>>>0;);else{I:if((0|g)<1)g=A;else if(3&A)for(g=A;;){if(E[0|g]=a[0|I],I=I+1|0,(g=g+1|0)>>>0>=B>>>0)break I;if(!(3&g))break}else g=A;if(!((C=-4&B)>>>0<64||g>>>0>(Q=C+-64|0)>>>0))for(;n[g>>2]=n[I>>2],n[g+4>>2]=n[I+4>>2],n[g+8>>2]=n[I+8>>2],n[g+12>>2]=n[I+12>>2],n[g+16>>2]=n[I+16>>2],n[g+20>>2]=n[I+20>>2],n[g+24>>2]=n[I+24>>2],n[g+28>>2]=n[I+28>>2],n[g+32>>2]=n[I+32>>2],n[g+36>>2]=n[I+36>>2],n[g+40>>2]=n[I+40>>2],n[g+44>>2]=n[I+44>>2],n[g+48>>2]=n[I+48>>2],n[g+52>>2]=n[I+52>>2],n[g+56>>2]=n[I+56>>2],n[g+60>>2]=n[I+60>>2],I=I- -64|0,(g=g- -64|0)>>>0<=Q>>>0;);if(g>>>0>=C>>>0)break A;for(;n[g>>2]=n[I>>2],I=I+4|0,(g=g+4|0)>>>0<C>>>0;);}if(g>>>0<B>>>0)for(;E[0|g]=a[0|I],I=I+1|0,(0|B)!=(0|(g=g+1|0)););return A}function Z(A,I,g,B,C,Q,i,a){A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,i|=0,a|=0;var r,o=0,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0;D=r=D-16|0,n[r+12>>2]=0,Zg(a);A:{if(B){w=4&a;I:{g:{B:{for(;;){o=c;C:{Q:{for(;;){if(y=E[g+o|0],255!=(0|(t=w?aI(y):rI(y))))break Q;if(!C)break C;if(!bg(C,y))break B;if(!((o=o+1|0)>>>0<B>>>0))break}A=c+1|0,n[r+12>>2]=A>>>0<B>>>0?B:A;break g}if(s=(s<<6)+t|0,(t=e+6|0)>>>0<8)e=t;else{if(e=e+-2|0,f>>>0>=I>>>0){n[r+12>>2]=o,n[8960]=68,o=1;break I}E[A+f|0]=s>>>e,f=f+1|0}if((c=o+1|0)>>>0<B>>>0)continue}break}n[r+12>>2]=c;break g}n[r+12>>2]=o}o=0}if(!(e>>>0<=4)){A=-1;break A}}if(A=-1,!((-1<<e^-1)&s|o)&&(2&a||!(A=function(A,I,g,B,C){var Q=0,i=0,a=0;I:if(C)for(Q=n[g>>2];;){g:{if(Q>>>0>=I>>>0)n[8960]=68;else{if(61==(0|(i=E[A+Q|0]))){C=C+-1|0;break g}if(B&&bg(B,i))break g;n[8960]=28}a=-1;break I}if(Q=Q+1|0,n[g>>2]=Q,!C)break}return a}(g,B,r+12|0,C,e>>>1|0)))){A=0;I:if(C&&!((o=n[r+12>>2])>>>0>=B>>>0)){g:{for(;;){if(!bg(C,E[g+o|0]))break g;if((0|(o=o+1|0))==(0|B))break}n[r+12>>2]=B;break I}n[r+12>>2]=o}h=f}}return I=n[r+12>>2],i?n[i>>2]=I+g:(0|I)!=(0|B)&&(n[8960]=28,A=-1),Q&&(n[Q>>2]=h),D=r+16|0,0|A}function O(A,I){var g;for(D=g=D-192|0,U(g+144|0,I),U(g+96|0,g+144|0),U(g+96|0,g+96|0),H(g+96|0,I,g+96|0),H(g+144|0,g+144|0,g+96|0),U(g+48|0,g+144|0),H(g+96|0,g+96|0,g+48|0),U(g+48|0,g+96|0),I=1;U(g+48|0,g+48|0),5!=(0|(I=I+1|0)););for(H(g+96|0,g+48|0,g+96|0),U(g+48|0,g+96|0),I=1;U(g+48|0,g+48|0),10!=(0|(I=I+1|0)););for(H(g+48|0,g+48|0,g+96|0),U(g,g+48|0),I=1;U(g,g),20!=(0|(I=I+1|0)););for(H(g+48|0,g,g+48|0),U(g+48|0,g+48|0),I=1;U(g+48|0,g+48|0),10!=(0|(I=I+1|0)););for(H(g+96|0,g+48|0,g+96|0),U(g+48|0,g+96|0),I=1;U(g+48|0,g+48|0),50!=(0|(I=I+1|0)););for(H(g+48|0,g+48|0,g+96|0),U(g,g+48|0),I=1;U(g,g),100!=(0|(I=I+1|0)););for(H(g+48|0,g,g+48|0),U(g+48|0,g+48|0),I=1;U(g+48|0,g+48|0),50!=(0|(I=I+1|0)););for(H(g+96|0,g+48|0,g+96|0),U(g+96|0,g+96|0),I=1;U(g+96|0,g+96|0),5!=(0|(I=I+1|0)););H(A,g+96|0,g+144|0),D=g+192|0}function z(A,I,g){var B,C,Q,E=0;D=B=D-16|0,C=n[A+20>>2],n[A+20>>2]=0,Q=n[A+4>>2],n[A+4>>2]=0,E=-26;A:{I:{g:switch(g+-1|0){case 1:if(E=-32,eI(I,35621,9))break A;I=I+9|0;break I;case 0:break g;default:break A}if(E=-32,eI(I,35631,8))break A;I=I+8|0}if(!eI(I,35640,3)&&(I=XA(I+3|0,B+12|0))){if(E=-26,19!=n[B+12>>2])break A;if(!eI(I,35644,3)&&(I=XA(I+3|0,B+12|0))&&(n[A+44>>2]=n[B+12>>2],!eI(I,35648,3)&&(I=XA(I+3|0,B+12|0))&&(n[A+40>>2]=n[B+12>>2],!eI(I,35652,3)&&(I=XA(I+3|0,B+12|0))&&(g=n[B+12>>2],n[A+48>>2]=g,n[A+52>>2]=g,36==(0|(g=a[0|I]))&&(n[B+12>>2]=C,I=36==(0|g)?I+1|0:I,!Z(n[A+16>>2],C,I,VA(I),0,B+12|0,B+8|0,3)&&(n[A+20>>2]=n[B+12>>2],I=n[B+8>>2],36==(0|(g=a[0|I]))&&(n[B+12>>2]=Q,I=36==(0|g)?I+1|0:I,!Z(n[A>>2],Q,I,VA(I),0,B+12|0,B+8|0,3)))))))){if(n[A+4>>2]=n[B+12>>2],I=n[B+8>>2],E=DA(A))break A;return D=B+16|0,a[0|I]?-32:0}}E=-32}return D=B+16|0,E}function $(A,I){var g,B,C,Q,i,a,r=0,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0,D=0,u=0;(r=c=n[A+60>>2])|(e=n[A+56>>2])&&(c=e,E[(y=e+A|0)- -64|0]=1,(e=e+1|0)>>>0<1&&(r=r+1|0),!r&e>>>0<=15|r>>>0<0&&eA(y+65|0,0,15-c|0),E[A+80|0]=1,R(A,A- -64|0,16,0)),a=n[A+52>>2],u=n[A+48>>2],s=n[A+44>>2],r=n[A+24>>2],c=n[A+28>>2]+(r>>>26|0)|0,t=n[A+32>>2]+(c>>>26|0)|0,h=(c=(D=(-67108864|(g=n[A+36>>2]+(t>>>26|0)|0))+((Q=(B=67108863&t)+((C=(f=67108863&c)+((t=(r=(67108863&r)+((D=n[A+20>>2]+o(g>>>26|0,5)|0)>>>26|0)|0)+((y=5+(e=67108863&D)|0)>>>26|0)|0)>>>26|0)|0)>>>26|0)|0)>>>26|0)|0)>>31)&r|(w=t)&(t=67108863&(i=(D>>>31|0)-1|0)),w=I,r=0,(e=(y=e&c|t&y|h<<26)+n[A+40>>2]|0)>>>0<y>>>0&&(r=1),fg(w,e),e=0,(f=(w=s)+(h=(s=c&f|t&C)<<20|h>>>6)|0)>>>0<h>>>0&&(e=1),w=f,f=r,h=w+r|0,r=e,r=h>>>0<f>>>0?r+1|0:r,fg(y=I+4|0,h),e=0,(s=(f=u)+(t=(u=c&B|t&Q)<<14|s>>>12)|0)>>>0<t>>>0&&(e=1),f=s,s=r,t=f+r|0,r=e,r=t>>>0<s>>>0?r+1|0:r,fg(w=I+8|0,t),fg(e=I+12|0,r=r+(c=(I=(D&i|c&g)<<8|u>>>18)+a|0)|0),KI(A,88)}function AA(A,I,g,B,C){A|=0,I|=0,g|=0,B|=0;var Q=0,i=0,n=0,r=0,e=0,f=0,y=0,s=0,w=0,h=0;Zg(C|=0),i=(Q=(B>>>0)/3|0)<<2,(Q=o(Q,-3)+B|0)&&(i=2&C?(2|i)+(Q>>>1|0)|0:i+4|0);A:{I:{s=i;g:{B:{if(i>>>0<I>>>0){if(!(4&C)){if(n=0,!B)break g;C=0,Q=0;break B}if(n=0,!B)break g;for(C=0,Q=0;;){for(e=a[g+r|0]|e<<8,C=C+8|0;f=Q,y=C,w=A+Q|0,h=bI(e>>>(C=C+-6|0)&63),E[0|w]=h,Q=Q+1|0,C>>>0>5;);if((0|(r=r+1|0))==(0|B))break}if(n=Q,!C)break g;w=A+Q|0,h=bI(e<<12-y&63),E[0|w]=h,n=f+2|0;break g}Gg(),t()}for(;;){for(e=a[g+r|0]|e<<8,C=C+8|0;f=Q,y=C,w=A+Q|0,h=mI(e>>>(C=C+-6|0)&63),E[0|w]=h,Q=Q+1|0,C>>>0>5;);if((0|(r=r+1|0))==(0|B))break}n=Q,C&&(w=A+Q|0,h=mI(e<<12-y&63),E[0|w]=h,n=f+2|0)}if(s>>>0>=(Q=n)>>>0){if(i>>>0>Q>>>0)break I;i=Q;break A}c(35568,35587,230,35603),t()}eA(A+Q|0,61,i-Q|0)}return eA(A+i|0,0,((g=i+1|0)>>>0<I>>>0?I:g)-i|0),0|A}function IA(A,I,g,B){var C=0,Q=0,i=0,r=0,o=0,e=0;A:{if((Q=n[A+56>>2])|(C=n[A+60>>2])){if(e=A,o=r=16-Q|0,o=(r=(0|B)==(0|(i=0-((16<Q>>>0)+C|0)|0))&r>>>0>g>>>0|i>>>0>B>>>0)?g:o,r=i=r?B:i,i|o){if(E[(A+Q|0)- -64|0]=a[0|I],C=1,Q=0,1!=(0|o)|r)for(;i=C+n[A+56>>2]|0,E[(A+i|0)- -64|0]=a[I+C|0],(C=C+1|0)>>>0<1&&(Q=Q+1|0),(0|o)!=(0|C)|(0|Q)!=(0|r););C=n[A+60>>2],i=n[A+56>>2]}else i=Q;if(Q=C+r|0,(i=(C=o)+i|0)>>>0<C>>>0&&(Q=Q+1|0),C=i,n[e+56>>2]=C,n[e+60>>2]=Q,!Q&C>>>0<16|Q>>>0<0)break A;R(A,A- -64|0,16,0),n[A+56>>2]=0,n[A+60>>2]=0,g=(Q=g)-(C=o)|0,B=B-((Q>>>0<C>>>0)+r|0)|0,I=I+C|0}if(!B&g>>>0>=16|B>>>0>0&&(R(A,I,Q=-16&g,B),g&=15,B=0,I=I+Q|0),g|B){for(C=0,Q=0;e=C+n[A+56>>2]|0,E[(A+e|0)- -64|0]=a[I+C|0],(C=C+1|0)>>>0<1&&(Q=Q+1|0),(0|g)!=(0|C)|(0|B)!=(0|Q););I=A,i=A,B=B+n[A+60>>2]|0,(A=g+n[A+56>>2]|0)>>>0<g>>>0&&(B=B+1|0),n[i+56>>2]=A,n[I+60>>2]=B}}}function gA(A,I,g){var B,C=0;B=C=D,D=C=C-448&-64,!A|!I||(vI(C- -64|0,0,0,64),fg(C+60|0,n[I+48>>2]),Tg(C- -64|0,C+60|0,4,0),fg(C+60|0,n[I+4>>2]),Tg(C- -64|0,C+60|0,4,0),fg(C+60|0,n[I+44>>2]),Tg(C- -64|0,C+60|0,4,0),fg(C+60|0,n[I+40>>2]),Tg(C- -64|0,C+60|0,4,0),fg(C+60|0,19),Tg(C- -64|0,C+60|0,4,0),fg(C+60|0,g),Tg(C- -64|0,C+60|0,4,0),fg(C+60|0,n[I+12>>2]),Tg(C- -64|0,C+60|0,4,0),(g=n[I+8>>2])&&(Tg(C- -64|0,g,n[I+12>>2],0),1&E[I+56|0]&&(KI(n[I+8>>2],n[I+12>>2]),n[I+12>>2]=0)),fg(C+60|0,n[I+20>>2]),Tg(C- -64|0,C+60|0,4,0),(g=n[I+16>>2])&&Tg(C- -64|0,g,n[I+20>>2],0),fg(C+60|0,n[I+28>>2]),Tg(C- -64|0,C+60|0,4,0),(g=n[I+24>>2])&&(Tg(C- -64|0,g,n[I+28>>2],0),2&a[I+56|0]&&(KI(n[I+24>>2],n[I+28>>2]),n[I+28>>2]=0)),fg(C+60|0,n[I+36>>2]),Tg(C- -64|0,C+60|0,4,0),(g=n[I+32>>2])&&Tg(C- -64|0,g,n[I+36>>2],0),og(C- -64|0,A,64)),D=B}function BA(A,I,g,B,C,Q,i,r,o,e){var c,f=0,y=0,s=0,w=0,h=0;D=c=D-352|0,g&&(n[g>>2]=0,n[g+4>>2]=0),B&&(E[0|B]=255),h=-1;A:{if(!(!i&Q>>>0<17|i>>>0<0)){if(f=i+-1|0,(y=Q+-17|0)>>>0<4294967279&&(f=f+1|0),s=y,y=f,!f&s>>>0>=4294967279|f>>>0>0)break A;IB(c+32|0,64,w=A+32|0,A),Og(c+96|0,c+32|0),KI(c+32|0,64),Lg(c+96|0,r,o,e),Lg(c+96|0,35712,0-o&15,0),eA(c+32|0,0,64),E[c+32|0]=a[0|C],uI(c+32|0,c+32|0,64,0,w,1,A),r=a[c+32|0],E[c+32|0]=a[0|C],Lg(c+96|0,c+32|0,64,0),Lg(c+96|0,C=C+1|0,s,y),Lg(c+96|0,35712,15&(f=Q+-1|0),0),LI(c+24|0,o,e),Lg(c+96|0,c+24|0,8,0),f=i,(Q=Q+47|0)>>>0<47&&(f=f+1|0),LI(o=c+24|0,Q,f),Lg(c+96|0,c+24|0,8,0),zg(c+96|0,c),KI(c+96|0,256),hI(c,C+s|0,16)?KI(c,16):(uI(I,C,s,y,w,2,A),ZI(A+36|0,c),VI(w),(2&r||RI(w,4))&&q(A),g&&(n[g>>2]=s,n[g+4>>2]=y),h=0,B&&(E[0|B]=r))}return D=c+352|0,h}Gg(),t()}function CA(A,I){var g,B=0;for(D=g=D-1760|0,zI(g+480|0,I),cg(g+320|0,I),jI(g,g+320|0),tI(g+320|0,g,g+480|0),jI(g+160|0,g+320|0),zI(I=g+640|0,g+160|0),tI(g+320|0,g,I),jI(g+160|0,g+320|0),zI(I=g+800|0,g+160|0),tI(g+320|0,g,I),jI(g+160|0,g+320|0),zI(I=g+960|0,g+160|0),tI(g+320|0,g,I),jI(g+160|0,g+320|0),zI(I=g+1120|0,g+160|0),tI(g+320|0,g,I),jI(g+160|0,g+320|0),zI(I=g+1280|0,g+160|0),tI(g+320|0,g,I),jI(g+160|0,g+320|0),zI(I=g+1440|0,g+160|0),tI(g+320|0,g,I),jI(g+160|0,g+320|0),zI(g+1600|0,g+160|0),kg(A),I=252;cg(g+320|0,A),B=I,(0|(I=E[I+34208|0]))>=1?(jI(g+160|0,g+320|0),tI(g+320|0,g+160|0,(g+480|0)+o((254&I)>>>1|0,160)|0)):(0|I)>-1||(jI(g+160|0,g+320|0),cI(g+320|0,g+160|0,(g+480|0)+o((0-I&254)>>>1|0,160)|0)),jI(A,g+320|0),I=B+-1|0,B;);D=g+1760|0}function QA(A,I,g){var B,C,Q,E,i,a,r,o,e,t,c,f,y=0,s=0,w=0,h=0,D=0,u=0,p=0,l=0,F=0;B=n[I+4>>2],C=n[A+4>>2],Q=n[I+8>>2],s=n[A+8>>2],E=n[I+12>>2],w=n[A+12>>2],i=n[I+16>>2],h=n[A+16>>2],a=n[I+20>>2],D=n[A+20>>2],r=n[I+24>>2],u=n[A+24>>2],o=n[I+28>>2],p=n[A+28>>2],e=n[I+32>>2],l=n[A+32>>2],t=n[I+36>>2],F=n[A+36>>2],f=(g=0-g|0)&((c=n[I>>2])^(y=n[A>>2])),n[A>>2]=f^y,y=F,F=g&(F^t),n[A+36>>2]=y^F,y=l,l=g&(l^e),n[A+32>>2]=y^l,y=p,p=g&(p^o),n[A+28>>2]=y^p,y=u,u=g&(u^r),n[A+24>>2]=y^u,y=D,D=g&(D^a),n[A+20>>2]=y^D,y=h,h=g&(h^i),n[A+16>>2]=y^h,y=w,w=g&(w^E),n[A+12>>2]=y^w,y=s,s=g&(s^Q),n[A+8>>2]=y^s,y=A,A=g&(B^C),n[y+4>>2]=A^C,n[I+36>>2]=F^t,n[I+32>>2]=l^e,n[I+28>>2]=p^o,n[I+24>>2]=u^r,n[I+20>>2]=D^a,n[I+16>>2]=h^i,n[I+12>>2]=w^E,n[I+8>>2]=s^Q,n[I+4>>2]=A^B,n[I>>2]=c^f}function EA(A,I){var g=0,B=0,C=0,Q=0,E=0,i=0,e=0,t=0,c=0,f=0;A:if(A&&(2!=n[A+36>>2]||(B=n[I>>2],a[I+8|0]<2&&!B)?(function(A,I,g){var B,C=0,Q=0,E=0;if(D=B=D-4096|0,EB(B+3072|0),EB(B+2048|0),!(!A|!I)&&(n[B+2048>>2]=n[I>>2],n[B+2052>>2]=0,n[B+2056>>2]=n[I+4>>2],n[B+2060>>2]=0,n[B+2064>>2]=a[I+8|0],n[B+2068>>2]=0,n[B+2072>>2]=n[A+16>>2],n[B+2076>>2]=0,n[B+2080>>2]=n[A+8>>2],n[B+2084>>2]=0,n[B+2088>>2]=n[A+36>>2],n[B+2092>>2]=0,n[A+20>>2]))for(I=0;(E=127&I)||(C=n[B+2100>>2],(Q=n[B+2096>>2]+1|0)>>>0<1&&(C=C+1|0),n[B+2096>>2]=Q,n[B+2100>>2]=C,EB(B),EB(B+1024|0),b(B+3072|0,B+2048|0,B),b(B+3072|0,B,B+1024|0)),E=n[4+(Q=(B+1024|0)+(E<<3)|0)>>2],n[(C=(I<<3)+g|0)>>2]=n[Q>>2],n[C+4>>2]=E,(I=I+1|0)>>>0<r[A+20>>2];);D=B+4096|0}(A,I,c=n[A+4>>2]),B=n[I>>2],f=0):(c=n[A+4>>2],f=1),!((Q=!((i=B)|(B=a[I+8|0]))<<1)>>>0>=(g=n[A+20>>2])>>>0)))for(C=n[A+24>>2],g=(B=(o(C,n[I+4>>2])+Q|0)+o(g,B)|0)+((B>>>0)%(C>>>0)|0?-1:C+-1|0)|0;;){if(C=1==((B>>>0)%(C>>>0)|0)?B+-1|0:g,g=f?n[n[A>>2]+4>>2]+(C<<10)|0:(Q<<3)+c|0,E=n[g+4>>2],e=n[g>>2],g=n[A+28>>2],n[I+12>>2]=Q,g=(E>>>0)%(g>>>0)|0,E=n[I+4>>2],i=t=a[I+8|0]?g:E,i=(t=n[I>>2])?g:i,g=n[n[A>>2]+4>>2],E=((o(i,n[A+24>>2])<<10)+g|0)+(YA(A,I,e,!0&(0|E)==(0|i))<<10)|0,e=g+(C<<10)|0,g=g+(B<<10)|0,t?b(e,E,g):m(e,E,g),(Q=Q+1|0)>>>0>=r[A+20>>2])break A;B=B+1|0,g=C+1|0,C=n[A+24>>2]}}function iA(A,I,g,B,C){var Q,i=0;return D=Q=D-96|0,i=-1,Yg(Q+32|0,Q)||(OI(Q- -64|0,Q+32|0,C),i=$I(A+32|0,I,g,B,Q- -64|0,C,Q),I=n[Q+60>>2],g=n[Q+56>>2],E[A+24|0]=g,E[A+25|0]=g>>>8,E[A+26|0]=g>>>16,E[A+27|0]=g>>>24,E[A+28|0]=I,E[A+29|0]=I>>>8,E[A+30|0]=I>>>16,E[A+31|0]=I>>>24,I=n[Q+52>>2],g=n[Q+48>>2],E[A+16|0]=g,E[A+17|0]=g>>>8,E[A+18|0]=g>>>16,E[A+19|0]=g>>>24,E[A+20|0]=I,E[A+21|0]=I>>>8,E[A+22|0]=I>>>16,E[A+23|0]=I>>>24,I=n[Q+44>>2],g=n[Q+40>>2],E[A+8|0]=g,E[A+9|0]=g>>>8,E[A+10|0]=g>>>16,E[A+11|0]=g>>>24,E[A+12|0]=I,E[A+13|0]=I>>>8,E[A+14|0]=I>>>16,E[A+15|0]=I>>>24,I=n[Q+36>>2],g=n[Q+32>>2],E[0|A]=g,E[A+1|0]=g>>>8,E[A+2|0]=g>>>16,E[A+3|0]=g>>>24,E[A+4|0]=I,E[A+5|0]=I>>>8,E[A+6|0]=I>>>16,E[A+7|0]=I>>>24,KI(Q,32),KI(Q+32|0,32),KI(Q- -64|0,24)),D=Q+96|0,i}function nA(A,I){var g;n[A>>2]=67108863&(a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24),n[A+4>>2]=(a[I+3|0]|a[I+4|0]<<8|a[I+5|0]<<16|a[I+6|0]<<24)>>>2&67108611,n[A+8>>2]=(a[I+6|0]|a[I+7|0]<<8|a[I+8|0]<<16|a[I+9|0]<<24)>>>4&67092735,n[A+12>>2]=(a[I+9|0]|a[I+10|0]<<8|a[I+11|0]<<16|a[I+12|0]<<24)>>>6&66076671,g=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,n[A+20>>2]=0,n[A+24>>2]=0,n[A+28>>2]=0,n[A+32>>2]=0,n[A+36>>2]=0,n[A+16>>2]=g>>>8&1048575,n[A+40>>2]=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,n[A+44>>2]=a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24,n[A+48>>2]=a[I+24|0]|a[I+25|0]<<8|a[I+26|0]<<16|a[I+27|0]<<24,I=a[I+28|0]|a[I+29|0]<<8|a[I+30|0]<<16|a[I+31|0]<<24,E[A+80|0]=0,n[A+56>>2]=0,n[A+60>>2]=0,n[A+52>>2]=I}function aA(A,I,g){var B=0;A:if((0|A)!=(0|I)){if((I-A|0)-g>>>0<=0-(g<<1)>>>0)return j(A,I,g);if(B=3&(A^I),A>>>0<I>>>0){if(B)B=A;else{if(3&A)for(B=A;;){if(!g)break A;if(E[0|B]=a[0|I],I=I+1|0,g=g+-1|0,!(3&(B=B+1|0)))break}else B=A;if(!(g>>>0<=3))for(;n[B>>2]=n[I>>2],I=I+4|0,B=B+4|0,(g=g+-4|0)>>>0>3;);}if(g)for(;E[0|B]=a[0|I],B=B+1|0,I=I+1|0,g=g+-1|0;);}else{if(!B){if(A+g&3)for(;;){if(!g)break A;if(E[0|(B=(g=g+-1|0)+A|0)]=a[I+g|0],!(3&B))break}if(!(g>>>0<=3))for(;n[(g=g+-4|0)+A>>2]=n[I+g>>2],g>>>0>3;);}if(!g)break A;for(;E[(g=g+-1|0)+A|0]=a[I+g|0],g;);}}return A}function rA(A,I,g,B){var C=0,Q=0,i=0,n=0,r=0,o=0;A:if(g|B)for(o=A+224|0,i=A+96|0,C=a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24;;){if(n=96+(A+C|0)|0,r=Q=256-C|0,!B&g>>>0<=Q>>>0|B>>>0<0){j(n,I,g),I=g+(a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)|0,E[A+352|0]=I,E[A+353|0]=I>>>8,E[A+354|0]=I>>>16,E[A+355|0]=I>>>24;break A}if(j(n,I,Q),C=(a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)+Q|0,E[A+352|0]=C,E[A+353|0]=C>>>8,E[A+354|0]=C>>>16,E[A+355|0]=C>>>24,wA(A,128),F(A,i),j(i,o,128),C=(a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)-128|0,E[A+352|0]=C,E[A+353|0]=C>>>8,E[A+354|0]=C>>>16,E[A+355|0]=C>>>24,I=I+Q|0,!((g=(Q=g)-r|0)|(B=B-(Q>>>0<r>>>0)|0)))break}return 0}function oA(A,I){var g,B=0;D=g=D-48|0,function(A,I){var g,B,C,Q,E,i,a,r,e=0;B=n[I+28>>2],C=n[I+24>>2],Q=n[I+20>>2],E=n[I+16>>2],i=n[I+12>>2],a=n[I+8>>2],r=n[I+4>>2],e=n[I>>2],g=n[I+36>>2],I=n[I+32>>2],e=o(((B+(C+(Q+(E+(i+(a+(r+(e+(o(g,19)+16777216>>>25|0)>>26)>>25)>>26)>>25)>>26)>>25)>>26)>>25)+I>>26)+g>>25,19)+e|0,n[A>>2]=67108863&e,e=r+(e>>26)|0,n[A+4>>2]=33554431&e,e=a+(e>>25)|0,n[A+8>>2]=67108863&e,e=i+(e>>26)|0,n[A+12>>2]=33554431&e,e=E+(e>>25)|0,n[A+16>>2]=67108863&e,e=Q+(e>>26)|0,n[A+20>>2]=33554431&e,e=C+(e>>25)|0,n[A+24>>2]=67108863&e,e=B+(e>>26)|0,n[A+28>>2]=33554431&e,I=I+(e>>25)|0,n[A+32>>2]=67108863&I,n[A+36>>2]=g+(I>>26)&33554431}(g,I),I=n[g>>2],E[0|A]=I,E[A+2|0]=I>>>16,E[A+1|0]=I>>>8,B=n[g+4>>2],E[A+5|0]=B>>>14,E[A+4|0]=B>>>6,E[A+3|0]=B<<2|I>>>24,I=n[g+8>>2],E[A+8|0]=I>>>13,E[A+7|0]=I>>>5,E[A+6|0]=I<<3|B>>>22,B=n[g+12>>2],E[A+11|0]=B>>>11,E[A+10|0]=B>>>3,E[A+9|0]=B<<5|I>>>21,I=n[g+16>>2],E[A+15|0]=I>>>18,E[A+14|0]=I>>>10,E[A+13|0]=I>>>2,E[A+12|0]=I<<6|B>>>19,I=n[g+20>>2],E[A+16|0]=I,E[A+18|0]=I>>>16,E[A+17|0]=I>>>8,B=n[g+24>>2],E[A+21|0]=B>>>15,E[A+20|0]=B>>>7,E[A+19|0]=B<<1|I>>>24,I=n[g+28>>2],E[A+24|0]=I>>>13,E[A+23|0]=I>>>5,E[A+22|0]=I<<3|B>>>23,B=n[g+32>>2],E[A+27|0]=B>>>12,E[A+26|0]=B>>>4,E[A+25|0]=B<<4|I>>>21,I=n[g+36>>2],E[A+31|0]=I>>>18,E[A+30|0]=I>>>10,E[A+29|0]=I>>>2,E[A+28|0]=I<<6|B>>>20,D=g+48|0}function eA(A,I,g){var B=0,C=0,Q=0,i=0;if(g&&(E[(B=A+g|0)-1|0]=I,E[0|A]=I,!(g>>>0<3||(E[B+-2|0]=I,E[A+1|0]=I,E[B+-3|0]=I,E[A+2|0]=I,g>>>0<7||(E[B+-4|0]=I,E[A+3|0]=I,g>>>0<9||(C=(B=0-A&3)+A|0,I=o(255&I,16843009),n[C>>2]=I,n[(B=(g=g-B&-4)+C|0)-4>>2]=I,g>>>0<9||(n[C+8>>2]=I,n[C+4>>2]=I,n[B+-8>>2]=I,n[B+-12>>2]=I,g>>>0<25||(n[C+24>>2]=I,n[C+20>>2]=I,n[C+16>>2]=I,n[C+12>>2]=I,n[B+-16>>2]=I,n[B+-20>>2]=I,n[B+-24>>2]=I,n[B+-28>>2]=I,(g=g-(i=4&C|24)|0)>>>0<32))))))))for(B=I,Q=I,I=C+i|0;n[I+24>>2]=Q,n[I+28>>2]=B,n[I+16>>2]=Q,n[I+20>>2]=B,n[I+8>>2]=Q,n[I+12>>2]=B,n[I>>2]=Q,n[I+4>>2]=B,I=I+32|0,(g=g+-32|0)>>>0>31;);return A}function tA(A,I){var g,B=0,C=0,Q=0,i=0;for(D=g=D-464|0;C=B<<1,i=a[I+B|0],E[C+(g+400|0)|0]=15&i,E[(g+400|0)+(1|C)|0]=i>>>4,32!=(0|(B=B+1|0)););for(B=0;I=8+(C=(I=B)+a[0|(B=(g+400|0)+Q|0)]|0)|0,E[0|B]=C-(240&I),B=I<<24>>28,63!=(0|(Q=Q+1|0)););for(E[g+463|0]=a[g+463|0]+B,kg(A),B=1;Kg(g,B>>>1|0,E[(g+400|0)+B|0]),wI(g+240|0,A,g),jI(A,g+240|0),I=B>>>0<62,B=B+2|0,I;);for(cg(g+240|0,A),Ig(g+120|0,g+240|0),pI(g+240|0,g+120|0),Ig(g+120|0,g+240|0),pI(g+240|0,g+120|0),Ig(g+120|0,g+240|0),pI(g+240|0,g+120|0),jI(A,g+240|0),B=0;Kg(g,B>>>1|0,E[(g+400|0)+B|0]),wI(g+240|0,A,g),jI(A,g+240|0),I=B>>>0<62,B=B+2|0,I;);D=g+464|0}function cA(A,I,g,B,C,Q,i,r,o,e){var c,f=0;if(D=c=D-336|0,g&&(n[g>>2]=0,n[g+4>>2]=0),!Q&C>>>0<4294967279|Q>>>0<0)return IB(c+16|0,64,f=A+32|0,A),Og(c+80|0,c+16|0),KI(c+16|0,64),Lg(c+80|0,i,r,o),Lg(c+80|0,35712,0-r&15,0),eA(c+16|0,0,64),E[c+16|0]=e,uI(c+16|0,c+16|0,64,0,f,1,A),Lg(c+80|0,c+16|0,64,0),E[0|I]=a[c+16|0],uI(i=I+1|0,B,C,Q,f,2,A),Lg(c+80|0,i,C,Q),Lg(c+80|0,35712,15&C,0),LI(c+8|0,r,o),Lg(c+80|0,c+8|0,8,0),LI(c+8|0,C- -64|0,Q-((C>>>0<4294967232)+-1|0)|0),Lg(c+80|0,c+8|0,8,0),zg(c+80|0,I=C+i|0),KI(c+80|0,256),ZI(A+36|0,I),VI(f),(2&e||RI(f,4))&&q(A),g&&((A=C+17|0)>>>0<17&&(Q=Q+1|0),n[g>>2]=A,n[g+4>>2]=Q),D=c+336|0,0;Gg(),t()}function fA(A,I,g,B,C,Q,E){var i,a,r,o,e=0;return D=i=D-352|0,X(i,Q,E),!C&g-A>>>0>=B>>>0|0>C>>>0|g>>>0<=A>>>0&&!(!C&A-g>>>0<B>>>0|0<C>>>0&&A>>>0>g>>>0)||(g=aA(A,g,B)),n[i+56>>2]=0,n[i+60>>2]=0,n[i+48>>2]=0,n[i+52>>2]=0,n[i+40>>2]=0,n[i+44>>2]=0,n[i+32>>2]=0,n[i+36>>2]=0,(a=!((E=(e=!C&B>>>0>32|C>>>0>0)?32:B)|(e=e?0:C)))||j(i- -64|0,g,E),o=Q+16|0,Q=e,(r=E+32|0)>>>0<32&&(Q=Q+1|0),_g(i+32|0,i+32|0,r,Q,o,i),Og(i+96|0,i+32|0),a||j(A,i- -64|0,E),KI(i+32|0,64),!C&B>>>0>=33|C>>>0>0&&Hg(A+E|0,Q=g+E|0,(g=B)-E|0,C-(e+(g>>>0<E>>>0)|0)|0,o,i),KI(i,32),Lg(i+96|0,A,B,C),zg(i+96|0,I),KI(i+96|0,256),D=i+352|0,0}function yA(A,I,g,B,C,E,i){var a,r,o=0,e=0,t=0;D=a=D-96|0,X(a,E,i),r=E+16|0,Q[n[8951]](a+32|0,32,0,r,a),E=-1;A:{if(!(0|Q[n[8945]](g,I,B,C,a+32|0))){if(E=0,!A)break A;!C&A-I>>>0>=B>>>0|0>C>>>0|A>>>0<=I>>>0&&!(!C&I-A>>>0<B>>>0|0<C>>>0&&I>>>0>A>>>0)||(I=aA(A,I,B)),g=(E=!C&B>>>0>32|C>>>0>0)?32:B,i=E=E?0:C,g|E?(o=g,t=j(a- -64|0,I,g),E=i,(e=g+32|0)>>>0<32&&(E=E+1|0),_g(a+32|0,a+32|0,e,E,r,a),j(A,t,o)):(E=i,(o=g+32|0)>>>0<32&&(E=E+1|0),_g(e=a+32|0,t=a+32|0,o,E,r,a)),E=0,!C&B>>>0<33|C>>>0<0||Hg((o=A)+(A=g)|0,A+I|0,B-A|0,C-(i+(B>>>0<A>>>0)|0)|0,r,a)}KI(a,32)}return D=a+96|0,E}function sA(A,I){var g,B=0;D=g=D+-64|0,function(A,I){var g;D=g=D+-64|0,ag(A,g),W(A=A+208|0,g,64,0),ag(A,I),KI(g,64),D=g- -64|0}(A,g),B=n[g+28>>2],A=n[g+24>>2],E[I+24|0]=A,E[I+25|0]=A>>>8,E[I+26|0]=A>>>16,E[I+27|0]=A>>>24,E[I+28|0]=B,E[I+29|0]=B>>>8,E[I+30|0]=B>>>16,E[I+31|0]=B>>>24,B=n[g+20>>2],A=n[g+16>>2],E[I+16|0]=A,E[I+17|0]=A>>>8,E[I+18|0]=A>>>16,E[I+19|0]=A>>>24,E[I+20|0]=B,E[I+21|0]=B>>>8,E[I+22|0]=B>>>16,E[I+23|0]=B>>>24,B=n[g+12>>2],A=n[g+8>>2],E[I+8|0]=A,E[I+9|0]=A>>>8,E[I+10|0]=A>>>16,E[I+11|0]=A>>>24,E[I+12|0]=B,E[I+13|0]=B>>>8,E[I+14|0]=B>>>16,E[I+15|0]=B>>>24,B=n[g+4>>2],A=n[g>>2],E[0|I]=A,E[I+1|0]=A>>>8,E[I+2|0]=A>>>16,E[I+3|0]=A>>>24,E[I+4|0]=B,E[I+5|0]=B>>>8,E[I+6|0]=B>>>16,E[I+7|0]=B>>>24,D=g- -64|0}function wA(A,I){var g,B,C=0,Q=0;Q=g=a[A+68|0]|a[A+69|0]<<8|a[A+70|0]<<16|a[A+71|0]<<24,(C=I+(B=a[A+64|0]|a[A+65|0]<<8|a[A+66|0]<<16|a[A+67|0]<<24)|0)>>>0<B>>>0&&(Q=Q+1|0),E[A+64|0]=C,E[A+65|0]=C>>>8,E[A+66|0]=C>>>16,E[A+67|0]=C>>>24,E[A+68|0]=Q,E[A+69|0]=Q>>>8,E[A+70|0]=Q>>>16,E[A+71|0]=Q>>>24,I=a[A+76|0]|a[A+77|0]<<8|a[A+78|0]<<16|a[A+79|0]<<24,(C=(Q=(0|Q)==(0|g)&C>>>0<B>>>0|Q>>>0<g>>>0)+(a[A+72|0]|a[A+73|0]<<8|a[A+74|0]<<16|a[A+75|0]<<24)|0)>>>0<Q>>>0&&(I=I+1|0),E[A+72|0]=C,E[A+73|0]=C>>>8,E[A+74|0]=C>>>16,E[A+75|0]=C>>>24,E[A+76|0]=I,E[A+77|0]=I>>>8,E[A+78|0]=I>>>16,E[A+79|0]=I>>>24}function hA(A,I){n[A>>2]=1634760805,n[A+4>>2]=857760878,n[A+8>>2]=2036477234,n[A+12>>2]=1797285236,n[A+16>>2]=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,n[A+20>>2]=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,n[A+24>>2]=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,n[A+28>>2]=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,n[A+32>>2]=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,n[A+36>>2]=a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24,n[A+40>>2]=a[I+24|0]|a[I+25|0]<<8|a[I+26|0]<<16|a[I+27|0]<<24,n[A+44>>2]=a[I+28|0]|a[I+29|0]<<8|a[I+30|0]<<16|a[I+31|0]<<24}function DA(A){var I=0,g=0;if(!A)return-25;if(!n[A>>2])return-1;A:{I:{if(I=-2,!(r[A+4>>2]<16)&&(n[A+8>>2]||(I=-18,!n[A+12>>2]))){if(g=n[A+20>>2],!n[A+16>>2])break I;if(I=-6,!(g>>>0<8)&&(n[A+24>>2]||(I=-20,!n[A+28>>2]))&&(n[A+32>>2]||(I=-21,!n[A+36>>2]))&&(I=-14,!((g=n[A+44>>2])>>>0<8||(I=-15,g>>>0>2097152||(I=-14,g>>>0<(g=n[A+48>>2])<<3>>>0))))){if(!n[A+40>>2])return-12;if(!g)return-16;if(I=-17,!(g>>>0>16777215)){if(A=n[A+52>>2])break A;I=-28}}}return I}return g?-19:-6}return A>>>0>16777215?-29:0}function uA(A,I){for(var g=0,B=0,C=0,Q=0,i=0,n=0,r=0,o=0,e=0,t=0;E[A+g|0]=a[(g>>>3|0)+I|0]>>>(7&g)&1,256!=(0|(g=g+1|0)););for(C=254;;){n=(Q=n)+1|0;A:if(!(!a[0|(i=A+Q|0)]|Q>>>0>254))for(I=1,t=(C>>>0<5?C:5)+1|0,g=n;;){r=I;I:if(B=E[0|(I=A+g|0)])if((0|(e=(o=E[0|i])+(B<<=r)|0))<=15)E[0|i]=e,E[0|I]=0;else{if((0|(I=o-B|0))<-15)break A;for(E[0|i]=I;;){if(!a[0|(I=A+g|0)]){E[0|I]=1;break I}if(E[0|I]=0,I=g>>>0<255,g=g+1|0,!I)break}}if(g=Q+(I=r+1|0)|0,(0|r)==(0|t))break}if(C=C+-1|0,256==(0|n))break}}function pA(A,I,g){var B,C,Q,E,i,a,r,o,e,t,c,f,y,s,w,h,D,u,p,l;c=n[I+4>>2],B=n[A+4>>2],f=n[I+8>>2],C=n[A+8>>2],y=n[I+12>>2],Q=n[A+12>>2],s=n[I+16>>2],E=n[A+16>>2],w=n[I+20>>2],i=n[A+20>>2],h=n[I+24>>2],a=n[A+24>>2],D=n[I+28>>2],r=n[A+28>>2],u=n[I+32>>2],o=n[A+32>>2],p=n[I+36>>2],e=n[A+36>>2],t=n[A>>2],l=n[I>>2]^t,I=0-g|0,n[A>>2]=t^l&I,n[A+36>>2]=I&(e^p)^e,n[A+32>>2]=I&(o^u)^o,n[A+28>>2]=I&(r^D)^r,n[A+24>>2]=I&(a^h)^a,n[A+20>>2]=I&(i^w)^i,n[A+16>>2]=I&(E^s)^E,n[A+12>>2]=I&(Q^y)^Q,n[A+8>>2]=I&(C^f)^C,n[A+4>>2]=I&(B^c)^B}function lA(A,I,g,B){var C,Q,E,i,a=0;D=C=D+-64|0,eA(C+8|0,0,52),a=VA(A),n[C+20>>2]=a,n[C+36>>2]=a,n[C+4>>2]=a,Q=_(a),n[C+32>>2]=Q,E=_(a),n[C+16>>2]=E,i=_(a),n[C>>2]=i;A:if(!i|!Q|!E||!(a=_(a)))v(Q),v(E),v(i),A=-22;else{if(A=z(C,A,B)){v(n[C+32>>2]),v(n[C+16>>2]),v(n[C>>2]),v(a);break A}A=0,I=NA(n[C+40>>2],n[C+44>>2],n[C+52>>2],I,g,n[C+16>>2],n[C+20>>2],a,n[C+4>>2],0,0,B),v(n[C+32>>2]),v(n[C+16>>2]),(I||hI(a,n[C>>2],n[C+4>>2]))&&(A=-35),v(a),v(n[C>>2])}return D=C- -64|0,A}function FA(A,I){var g,B,C=0;D=g=D-288|0,J(B=A+40|0,I),Vg(C=A+80|0),U(g+240|0,B),H(g+192|0,g+240|0,2128),_A(g+240|0,g+240|0,C),HA(g+192|0,g+192|0,C),U(g+144|0,g+192|0),H(g+144|0,g+144|0,g+192|0),U(A,g+144|0),H(A,A,g+192|0),H(A,A,g+240|0),function(A,I){var g,B=0;for(D=g=D-144|0,U(g+96|0,I),U(g+48|0,g+96|0),U(g+48|0,g+48|0),H(g+48|0,I,g+48|0),H(g+96|0,g+96|0,g+48|0),U(g+96|0,g+96|0),H(g+96|0,g+48|0,g+96|0),U(g+48|0,g+96|0),B=1;U(g+48|0,g+48|0),5!=(0|(B=B+1|0)););for(H(g+96|0,g+48|0,g+96|0),U(g+48|0,g+96|0),B=1;U(g+48|0,g+48|0),10!=(0|(B=B+1|0)););for(H(g+48|0,g+48|0,g+96|0),U(g,g+48|0),B=1;U(g,g),20!=(0|(B=B+1|0)););for(H(g+48|0,g,g+48|0),U(g+48|0,g+48|0),B=1;U(g+48|0,g+48|0),10!=(0|(B=B+1|0)););for(H(g+96|0,g+48|0,g+96|0),U(g+48|0,g+96|0),B=1;U(g+48|0,g+48|0),50!=(0|(B=B+1|0)););for(H(g+48|0,g+48|0,g+96|0),U(g,g+48|0),B=1;U(g,g),100!=(0|(B=B+1|0)););for(H(g+48|0,g,g+48|0),U(g+48|0,g+48|0),B=1;U(g+48|0,g+48|0),50!=(0|(B=B+1|0)););H(g+96|0,g+48|0,g+96|0),U(g+96|0,g+96|0),U(g+96|0,g+96|0),H(A,g+96|0,I),D=g+144|0}(A,A),H(A,A,g+144|0),H(A,A,g+240|0),U(g+96|0,A),H(g+96|0,g+96|0,g+192|0),_A(g+48|0,g+96|0,g+240|0);A:{if(!tg(g+48|0)){if(HA(g,g+96|0,g+240|0),C=-1,!tg(g))break A;H(A,A,2176)}(0|yg(A))==(a[I+31|0]>>>7|0)&&TA(A,A),H(A+120|0,A,B),C=0}return D=g+288|0,C}function GA(A,I){var g,B=0;B=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,g=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,E[A+32|0]=g,E[A+33|0]=g>>>8,E[A+34|0]=g>>>16,E[A+35|0]=g>>>24,E[A+36|0]=B,E[A+37|0]=B>>>8,E[A+38|0]=B>>>16,E[A+39|0]=B>>>24,B=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,I=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,E[A+40|0]=I,E[A+41|0]=I>>>8,E[A+42|0]=I>>>16,E[A+43|0]=I>>>24,E[A+44|0]=B,E[A+45|0]=B>>>8,E[A+46|0]=B>>>16,E[A+47|0]=B>>>24}function kA(A,I){var g,B=0;B=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,g=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,E[A+48|0]=g,E[A+49|0]=g>>>8,E[A+50|0]=g>>>16,E[A+51|0]=g>>>24,E[A+52|0]=B,E[A+53|0]=B>>>8,E[A+54|0]=B>>>16,E[A+55|0]=B>>>24,B=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,I=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,E[A+56|0]=I,E[A+57|0]=I>>>8,E[A+58|0]=I>>>16,E[A+59|0]=I>>>24,E[A+60|0]=B,E[A+61|0]=B>>>8,E[A+62|0]=B>>>16,E[A+63|0]=B>>>24}function _A(A,I,g){var B,C,Q,E,i,a,r,o,e,t,c,f,y,s,w,h,D,u;B=n[g+4>>2],C=n[I+4>>2],Q=n[g+8>>2],E=n[I+8>>2],i=n[g+12>>2],a=n[I+12>>2],r=n[g+16>>2],o=n[I+16>>2],e=n[g+20>>2],t=n[I+20>>2],c=n[g+24>>2],f=n[I+24>>2],y=n[g+28>>2],s=n[I+28>>2],w=n[g+32>>2],h=n[I+32>>2],D=n[g+36>>2],u=n[I+36>>2],n[A>>2]=n[I>>2]-n[g>>2],n[A+36>>2]=u-D,n[A+32>>2]=h-w,n[A+28>>2]=s-y,n[A+24>>2]=f-c,n[A+20>>2]=t-e,n[A+16>>2]=o-r,n[A+12>>2]=a-i,n[A+8>>2]=E-Q,n[A+4>>2]=C-B}function HA(A,I,g){var B,C,Q,E,i,a,r,o,e,t,c,f,y,s,w,h,D,u;B=n[g+4>>2],C=n[I+4>>2],Q=n[g+8>>2],E=n[I+8>>2],i=n[g+12>>2],a=n[I+12>>2],r=n[g+16>>2],o=n[I+16>>2],e=n[g+20>>2],t=n[I+20>>2],c=n[g+24>>2],f=n[I+24>>2],y=n[g+28>>2],s=n[I+28>>2],w=n[g+32>>2],h=n[I+32>>2],D=n[g+36>>2],u=n[I+36>>2],n[A>>2]=n[g>>2]+n[I>>2],n[A+36>>2]=D+u,n[A+32>>2]=w+h,n[A+28>>2]=y+s,n[A+24>>2]=c+f,n[A+20>>2]=e+t,n[A+16>>2]=r+o,n[A+12>>2]=i+a,n[A+8>>2]=Q+E,n[A+4>>2]=B+C}function YA(A,I,g,B){var C=0,Q=0;A:{I:{g:{B:{C:{if(!n[I>>2]){if(C=a[I+8|0],Q=n[I+12>>2]+-1|0,!C)break B;if(C=o(C,n[A+20>>2]),I=n[I+12>>2],!B)break C;Q=(I+C|0)-1|0;break B}if(C=n[A+20>>2],A=n[A+24>>2],!B)break g;B=n[I+12>>2]+((-1^C)+A|0)|0;break I}Q=C-!I|0}B=Q,A=n[A+24>>2],Q=0;break A}B=(A-C|0)-!n[I+12>>2]|0}Q=0,3!=(0|(I=a[I+8|0]))&&(Q=o(C,I+1|0))}return C=Q,I=0,(C=(Q=B+-1|0)+C|0)>>>0<Q>>>0&&(I=1),xg(g,0,g,0),xg(B,0,l,0),function(A,I,g){var B=0,C=0,Q=0,E=0,i=0,n=0,a=0,r=0,t=0;A:{I:{g:{B:{C:{Q:{E:{i:{n:{if(C=I){if(!(B=g))break n;break i}return u=A-o((A>>>0)/(g>>>0)|0,g)|0,p=0,void(l=0)}if(!A)break E;break Q}if(!((E=B+-1|0)&B))break C;i=0-(E=(e(B)+33|0)-e(C)|0)|0;break g}return u=0,p=C,void(l=0)}if((B=32-e(C)|0)>>>0<31)break B;break I}if(u=A&E,p=0,1==(0|B))break A;return g=31&(A=B?31-e(B+-1^B)|0:32),void(l=32<=(63&A)>>>0?0:I>>>g|0)}E=B+1|0,i=63-B|0}if(B=I,Q=31&(C=63&E),32<=C>>>0?(C=0,Q=B>>>Q|0):(C=B>>>Q|0,Q=((1<<Q)-1&B)<<32-Q|A>>>Q),B=31&(i&=63),32<=i>>>0?(I=A<<B,A=0):(I=(1<<B)-1&A>>>32-B|I<<B,A<<=B),E)for(B=-1,-1!=(0|(i=g+-1|0))&&(B=0);Q=(a=n=Q<<1|I>>>31)-(r=g&(n=B-((C=C<<1|Q>>>31)+(i>>>0<n>>>0)|0)>>31))|0,C=C-(a>>>0<r>>>0)|0,I=I<<1|A>>>31,A=t|A<<1,t=1&n,E=E+-1|0;);return u=Q,p=C,void(l=I<<1|A>>>31)}u=A,p=I,I=0}l=I}(C-(g=l)|0,I-(C>>>0<g>>>0)|0,A),l=p,u}function bA(A,I,g,B,C){var Q;if(D=Q=D-192|0,!(!g|(I+-1&255)>>>0>=64))return i[Q+130>>1]=257,E[Q+129|0]=32,E[Q+128|0]=I,ug(Q+128|4),LI(Q+128|8,0,0),n[Q+152>>2]=0,n[Q+156>>2]=0,n[Q+144>>2]=0,n[Q+148>>2]=0,B?GA(Q+128|0,B):(n[Q+168>>2]=0,n[Q+172>>2]=0,n[Q+160>>2]=0,n[Q+164>>2]=0),C?kA(Q+128|0,C):(n[Q+184>>2]=0,n[Q+188>>2]=0,n[Q+176>>2]=0,n[Q+180>>2]=0),vA(A,Q+128|0),eA(Q+32|0,0,96),rA(I=A,A=j(Q,g,32),128,0),KI(A,128),void(D=A+192|0);Gg(),t()}function mA(A){var I,g=0,B=0,C=0,Q=0;for(E[11+(I=D-16|0)|0]=0,E[I+12|0]=0,E[I+13|0]=0,E[I+14|0]=0,n[I+8>>2]=0;;){for(C=a[A+B|0],g=0;E[0|(Q=(I+8|0)+g|0)]=a[0|Q]|C^a[(34464+(g<<5)|0)+B|0],7!=(0|(g=g+1|0)););if(31==(0|(B=B+1|0)))break}for(B=127&a[A+31|0],A=0,g=0;E[0|(C=(I+8|0)+g|0)]=a[0|C]|B^a[34495+(g<<5)|0],7!=(0|(g=g+1|0)););for(g=0;g=a[(I+8|0)+A|0]+-1|g,7!=(0|(A=A+1|0)););return g>>>8&1}function UA(A){var I,g=0,B=0,C=0,Q=0;for(E[11+(I=D-16|0)|0]=0,E[I+12|0]=0,E[I+13|0]=0,E[I+14|0]=0,n[I+8>>2]=0;;){for(C=a[A+B|0],g=0;E[0|(Q=(I+8|0)+g|0)]=a[0|Q]|C^a[(3232+(g<<5)|0)+B|0],7!=(0|(g=g+1|0)););if(31==(0|(B=B+1|0)))break}for(B=127&a[A+31|0],A=0,g=0;E[0|(C=(I+8|0)+g|0)]=a[0|C]|B^a[3263+(g<<5)|0],7!=(0|(g=g+1|0)););for(g=0;g=a[(I+8|0)+A|0]+-1|g,7!=(0|(A=A+1|0)););return g>>>8&1}function vA(A,I){var g=0,B=0,C=0,Q=0,i=0;for(eA(j(A,1952,64)- -64|0,0,293);C=B=(g=Q<<3)+A|0,g=I+g|0,i=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,B=(a[g+4|0]|a[g+5|0]<<8|a[g+6|0]<<16|a[g+7|0]<<24)^(a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24),g=(a[0|g]|a[g+1|0]<<8|a[g+2|0]<<16|a[g+3|0]<<24)^i,E[0|C]=g,E[C+1|0]=g>>>8,E[C+2|0]=g>>>16,E[C+3|0]=g>>>24,E[C+4|0]=B,E[C+5|0]=B>>>8,E[C+6|0]=B>>>16,E[C+7|0]=B>>>24,8!=(0|(Q=Q+1|0)););}function SA(A,I){var g,B=0,C=0,Q=0,E=0;if(D=g=D-48|0,!((B=DA(A))||(B=-26,I+-1>>>0>1||(Q=n[A+44>>2],B=n[A+48>>2],n[g>>2]=0,C=n[A+40>>2],n[g+28>>2]=B,n[g+12>>2]=-1,n[g+8>>2]=C,B=((C=Q>>>0<(C=B<<3)>>>0?C:Q)>>>0)/((Q=B<<2)>>>0)|0,n[g+20>>2]=B,n[g+24>>2]=B<<2,n[g+16>>2]=o(B,Q),B=n[A+52>>2],n[g+36>>2]=I,n[g+32>>2]=B,B=function(A,I){var g,B=0;return D=g=D-80|0,B=-25,!A|!I||(B=_(n[A+20>>2]<<3),n[A+4>>2]=B,B?(B=function(A,I){var g,B=0,C=0;D=g=D-16|0,C=-22;A:if(!(!A|!I)&&1024==(((B=I<<10)>>>0)/(I>>>0)|0)&&(I=_(12),n[A>>2]=I,I)){n[I>>2]=0,n[I+4>>2]=0,I=function(A,I){if(4294967168<I>>>0)A=48;else{if(!(I=function(A){var I=0,g=0,B=0,C=0,Q=0,E=0;return 4294967168<=A>>>0?(n[8960]=48,0):(A=_(76+(B=A>>>0<11?16:A+11&-8)|0))?(I=A+-8|0,63&A?(C=(-8&(E=n[(Q=A+-4|0)>>2]))-(g=(A=(A=(A+63&-64)-8|0)-I>>>0>15?A:A- -64|0)-I|0)|0,3&E?(n[A+4>>2]=C|1&n[A+4>>2]|2,n[4+(C=A+C|0)>>2]=1|n[C+4>>2],n[Q>>2]=g|1&n[Q>>2]|2,n[A+4>>2]=1|n[A+4>>2],S(I,g)):(I=n[I>>2],n[A+4>>2]=C,n[A>>2]=I+g)):A=I,3&(I=n[A+4>>2])&&((g=-8&I)>>>0<=B+16>>>0||(n[A+4>>2]=B|1&I|2,I=A+B|0,B=g-B|0,n[I+4>>2]=3|B,n[4+(g=A+g|0)>>2]=1|n[g+4>>2],S(I,B))),A+8|0):0}(I)))return 48;n[A>>2]=I,A=0}return A}(g+12|0,B),n[8960]=I;I:{if(I)n[g+12>>2]=0;else if(I=n[g+12>>2])break I;v(n[A>>2]),n[A>>2]=0;break A}n[n[A>>2]>>2]=I,n[n[A>>2]+4>>2]=I,n[n[A>>2]+8>>2]=B,C=0}return D=g+16|0,C}(A,n[A+16>>2]))?xI(A,n[I+56>>2]):(gA(g,I,n[A+36>>2]),KI(g- -64|0,8),function(A,I){var g,B=0,C=0,Q=0;if(D=g=D-1024|0,n[I+28>>2])for(Q=A+68|0,C=A- -64|0;fg(C,0),fg(Q,B),L(g,1024,A,72),fI(n[n[I>>2]+4>>2]+(o(n[I+24>>2],B)<<10)|0,g),fg(C,1),L(g,1024,A,72),fI(1024+(n[n[I>>2]+4>>2]+(o(n[I+24>>2],B)<<10)|0)|0,g),(B=B+1|0)>>>0<r[I+28>>2];);KI(g,1024),D=g+1024|0}(g,A),KI(g,72),B=0):B=-22),D=g+80|0,B}(g,A))))){if(n[g+8>>2])for(;JA(g,E),(E=E+1|0)>>>0<r[g+8>>2];);!function(A,I){var g,B=0,C=0;if(D=g=D-2048|0,!(!A|!I)){if(BB(g+1024|0,(n[n[I>>2]+4>>2]+(n[I+24>>2]<<10)|0)-1024|0),r[I+28>>2]>=2)for(B=1;C=n[I+24>>2],YI(g+1024|0,(n[n[I>>2]+4>>2]+(C+o(B,C)<<10)|0)-1024|0),(B=B+1|0)>>>0<r[I+28>>2];);!function(A,I){for(var g=0,B=0;LI((g=B<<3)+A|0,n[(g=I+g|0)>>2],n[g+4>>2]),128!=(0|(B=B+1|0)););}(g,g+1024|0),L(n[A>>2],n[A+4>>2],g,1024),KI(g+1024|0,1024),KI(g,1024),xI(I,n[A+56>>2])}D=g+2048|0}(A,g),B=0}return D=g+48|0,B}function NA(A,I,g,B,C,Q,E,i,a,r,o,e){var t,c;return D=t=D+-64|0,(c=_(a))?(n[t+32>>2]=0,n[t+36>>2]=0,n[t+24>>2]=0,n[t+28>>2]=0,n[t+20>>2]=E,n[t+16>>2]=Q,n[t+12>>2]=C,n[t+8>>2]=B,n[t+4>>2]=a,n[t>>2]=c,n[t+56>>2]=0,n[t+52>>2]=g,n[t+48>>2]=g,n[t+44>>2]=I,n[t+40>>2]=A,(g=SA(t,e))?KI(c,a):(i&&j(i,c,a),!r|!o||!x(r,o,t,e)?(KI(c,a),g=0):(KI(c,a),KI(r,o),g=-31)),v(c)):g=-22,D=t- -64|0,g}function RA(A,I,g,B,C){var Q,E=0,i=0;D=Q=D+-64|0;A:{I:{if((E=VA(A))>>>0<128&&!g|g>>>0<0){if(g=eA(Q,0,60),i=JI(E))break I}else n[8960]=28;A=-1;break A}n[g+32>>2]=0,n[g+36>>2]=0,n[g+8>>2]=i,n[g+16>>2]=i,n[g+20>>2]=E,n[g>>2]=i,n[g+12>>2]=E,n[g+24>>2]=0,n[g+28>>2]=0,n[g+4>>2]=E,z(g,A,C)?(n[8960]=28,A=-1):(A=1,(0|I)==n[g+40>>2]&&(A=n[g+44>>2]!=(B>>>10|0))),v(i)}return D=Q- -64|0,A}function MA(A,I,g,B,C,Q){var E,i,n=0,a=0,r=0;return D=E=D-592|0,n=-1,SI(i=A+32|0)&&(UA(A)||PI(C)&&(UA(C)||FA(E+128|0,C)||(Ng(E+384|0,Q),W(E+384|0,A,32,0),W(E+384|0,C,32,0),W(E+384|0,I,g,B),ag(E+384|0,E+320|0),k(E+320|0),T(E+8|0,E+320|0,E+128|0,i),NI(E+288|0,E+8|0),a=-1,r=$g(E+288|0,A),n=((E+288|0)==(0|A)?a:r)|hI(A,E+288|0,32)))),D=E+592|0,n}function dA(A,I){var g,B=0,C=0;for(D=g=D-192|0,rg(A),eA(g- -64|0,54,128),E[g+64|0]=54^a[0|I],B=1;E[0|(C=(g- -64|0)+B|0)]=a[0|C]^a[I+B|0],32!=(0|(B=B+1|0)););for(W(A,g- -64|0,128,0),rg(A=A+208|0),eA(g- -64|0,92,128),E[g+64|0]=92^a[0|I],B=1;E[0|(C=(g- -64|0)+B|0)]=a[0|C]^a[I+B|0],32!=(0|(B=B+1|0)););W(A,g- -64|0,128,0),KI(g- -64|0,128),KI(g,64),D=g+192|0}function PA(A,I,g,B,C,Q,E,i,n,a){var r;return D=r=D-352|0,IB(r+32|0,64,n,a),Og(r+96|0,r+32|0),KI(r+32|0,64),Lg(r+96|0,Q,E,i),Lg(r+96|0,34688,0-E&15,0),Lg(r+96|0,I,g,B),Lg(r+96|0,34688,0-g&15,0),LI(r+24|0,E,i),Lg(r+96|0,r+24|0,8,0),LI(r+24|0,g,B),Lg(r+96|0,r+24|0,8,0),zg(r+96|0,r),KI(r+96|0,256),C=AB(r,C),KI(r,16),A&&(C?(eA(A,0,g),C=-1):(uI(A,I,g,B,n,1,a),C=0)),D=r+352|0,C}function JA(A,I){var g,B=0,C=0,Q=0;if(D=g=D-32|0,!(!A|!n[A+28>>2]))for(n[g+16>>2]=I,B=1;;){if(E[g+24|0]=C,I=0,Q=0,B)for(;n[g+28>>2]=0,B=n[g+28>>2],n[g+8>>2]=n[g+24>>2],n[g+12>>2]=B,n[g+20>>2]=I,B=n[g+20>>2],n[g>>2]=n[g+16>>2],n[g+4>>2]=B,EA(A,g),(I=I+1|0)>>>0<(Q=n[A+28>>2])>>>0;);if(B=Q,4==(0|(C=C+1|0)))break}D=g+32|0}function xA(A,I,g,B,C,Q){var E,i;return D=E=D-32|0,i=a[0|C]|a[C+1|0]<<8|a[C+2|0]<<16|a[C+3|0]<<24,C=a[C+4|0]|a[C+5|0]<<8|a[C+6|0]<<16|a[C+7|0]<<24,n[E+24>>2]=0,n[E+28>>2]=0,n[E+16>>2]=i,n[E+20>>2]=C,LI(E,g,B),n[E+8>>2]=0,n[E+12>>2]=0,I+-16>>>0>=49?(n[8960]=28,A=-1):(g=E+16|0,A=I+-1>>>0>63?-1:function(A,I,g,B,C){var Q,E=0;if(Q=E=D,D=E=E-384&-64,!(!I|!A|(g+-1&255)>>>0>=64))return bA(E,g,I,B,C),rA(E,0,0,0),P(E,A,g),D=Q,0;Gg(),t()}(A,Q,255&I,E,g)),D=E+32|0,A}function LA(A,I,g,B,C,Q,E,i,a,r,o){var e;return D=e=D-336|0,IB(e+16|0,64,r,o),Og(e+80|0,e+16|0),KI(e+16|0,64),Lg(e+80|0,E,i,a),Lg(e+80|0,34688,0-i&15,0),uI(A,B,C,Q,r,1,o),Lg(e+80|0,A,C,Q),Lg(e+80|0,34688,0-C&15,0),LI(e+8|0,i,a),Lg(e+80|0,e+8|0,8,0),LI(e+8|0,C,Q),Lg(e+80|0,e+8|0,8,0),zg(e+80|0,I),KI(e+80|0,256),g&&(n[g>>2]=16,n[g+4>>2]=0),D=e+336|0,0}function KA(A,I,g,B,C,Q){var E=0;A:{I:{if(!(!C&B>>>0<64|C>>>0<0||(C=C+-1|0,(B=B+-64|0)>>>0<4294967232&&(C=C+1|0),!C&B>>>0>4294967231|C>>>0>0))){if(!Rg(g,E=g- -64|0,B,C,Q))break I;A&&eA(A,0,B)}if(g=-1,!I)break A;return n[I>>2]=0,n[I+4>>2]=0,-1}I&&(n[I>>2]=B,n[I+4>>2]=C),g=0,A&&aA(A,E,B)}return g}function qA(A,I,g,B,C,Q,E,i,n,a){var r;return D=r=D-352|0,Jg(r+32|0,n,a),Og(r+96|0,r+32|0),KI(r+32|0,64),Lg(r+96|0,Q,E,i),LI(r+24|0,E,i),Lg(r+96|0,r+24|0,8,0),Lg(r+96|0,I,g,B),LI(r+24|0,g,B),Lg(r+96|0,r+24|0,8,0),zg(r+96|0,r),KI(r+96|0,256),C=AB(r,C),KI(r,16),A&&(C?(eA(A,0,g),C=-1):(Bg(A,I,g,B,n,a),C=0)),D=r+352|0,C}function XA(A,I){var g,B=0,C=0,Q=0,E=0,i=0;A:if(!(((g=a[0|A])+-48&255)>>>0>9)){for(C=g,B=A;;){if(E=B,Q>>>0>429496729)break A;if((B=(255&C)-48|0)>>>0>(-1^(C=o(Q,10)))>>>0)break A;if(Q=B+C|0,!(((C=a[0|(B=E+1|0)])+-48&255)>>>0<10))break}(0|A)==(0|B)|(48==(0|g)?(0|A)!=(0|E):0)||(n[I>>2]=Q,i=B)}return i}function VA(A){var I=0,g=0,B=0;A:{I:if(3&(I=A)){if(!a[0|A])return 0;for(;;){if(!(3&(I=I+1|0)))break I;if(!a[0|I])break}break A}for(;g=I,I=I+4|0,!((-1^(B=n[g>>2]))&B+-16843009&-2139062144););if(!(255&B))return g-A|0;for(;B=a[g+1|0],g=I=g+1|0,B;);}return I-A|0}function TA(A,I){var g,B,C,Q,E,i,a,r,o;g=n[I+4>>2],B=n[I+8>>2],C=n[I+12>>2],Q=n[I+16>>2],E=n[I+20>>2],i=n[I+24>>2],a=n[I+28>>2],r=n[I+32>>2],o=n[I+36>>2],n[A>>2]=0-n[I>>2],n[A+36>>2]=0-o,n[A+32>>2]=0-r,n[A+28>>2]=0-a,n[A+24>>2]=0-i,n[A+20>>2]=0-E,n[A+16>>2]=0-Q,n[A+12>>2]=0-C,n[A+8>>2]=0-B,n[A+4>>2]=0-g}function WA(A,I,g){var B=0;B=I<<8&16711680|I<<24,B|=255&(g<<8|I>>>24)|65280&(g<<24|I>>>8),I=-16777216&((255&g)<<24|I>>>8)|16711680&((16777215&g)<<8|I>>>24)|g>>>8&65280|g>>>24|0,E[0|A]=I,E[A+1|0]=I>>>8,E[A+2|0]=I>>>16,E[A+3|0]=I>>>24,I=B,E[A+4|0]=I,E[A+5|0]=I>>>8,E[A+6|0]=I>>>16,E[A+7|0]=I>>>24}function jA(A,I,g){var B;B=A,g?(n[A+48>>2]=a[0|g]|a[g+1|0]<<8|a[g+2|0]<<16|a[g+3|0]<<24,g=a[g+4|0]|a[g+5|0]<<8|a[g+6|0]<<16|a[g+7|0]<<24):(n[A+48>>2]=0,g=0),n[B+52>>2]=g,n[A+56>>2]=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,n[A+60>>2]=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24}function ZA(A,I){var g,B,C,Q,E,i,a,r,o;g=n[I+8>>2],B=n[I+12>>2],C=n[I+16>>2],Q=n[I+20>>2],E=n[I+24>>2],i=n[I+28>>2],a=n[I>>2],r=n[I+4>>2],o=n[I+36>>2],n[A+32>>2]=n[I+32>>2],n[A+36>>2]=o,n[A+24>>2]=E,n[A+28>>2]=i,n[A+16>>2]=C,n[A+20>>2]=Q,n[A+8>>2]=g,n[A+12>>2]=B,n[A>>2]=a,n[A+4>>2]=r}function OA(A,I,g,B,C,Q,E,i,a,r,o){var e;return D=e=D-336|0,Jg(e+16|0,r,o),Og(e+80|0,e+16|0),KI(e+16|0,64),Lg(e+80|0,E,i,a),LI(e+8|0,i,a),Lg(e+80|0,e+8|0,8,0),Bg(A,B,C,Q,r,o),Lg(e+80|0,A,C,Q),LI(e+8|0,C,Q),Lg(e+80|0,e+8|0,8,0),zg(e+80|0,I),KI(e+80|0,256),g&&(n[g>>2]=16,n[g+4>>2]=0),D=e+336|0,0}function zA(A){var I;return I=a[0|A]|a[A+1|0]<<8|a[A+2|0]<<16|a[A+3|0]<<24,A=a[A+4|0]|a[A+5|0]<<8|a[A+6|0]<<16|a[A+7|0]<<24,l=65280&(A<<24|I>>>8)|255&(A<<8|I>>>24)|I<<8&16711680|I<<24,-16777216&((255&A)<<24|I>>>8)|16711680&((16777215&A)<<8|I>>>24)|A>>>8&65280|A>>>24|0}function $A(A,I,g,B,C,Q,E,i,r,o,e){var t;return D=t=D-48|0,n[t+4>>2]=0,K(t+16|0,o,e),e=a[o+16|0]|a[o+17|0]<<8|a[o+18|0]<<16|a[o+19|0]<<24,o=a[o+20|0]|a[o+21|0]<<8|a[o+22|0]<<16|a[o+23|0]<<24,n[t+8>>2]=e,n[t+12>>2]=o,function(A,I,g,B,C,Q,E,i,a,r,o){var e;D=e=D-336|0,Pg(e+16|0,64,r,o),Og(e+80|0,e+16|0),KI(e+16|0,64),Lg(e+80|0,E,i,a),Lg(e+80|0,34704,0-i&15,0),gg(A,B,C,Q,r,1,o),Lg(e+80|0,A,C,Q),Lg(e+80|0,34704,0-C&15,0),LI(e+8|0,i,a),Lg(e+80|0,e+8|0,8,0),LI(e+8|0,C,Q),Lg(e+80|0,e+8|0,8,0),zg(e+80|0,I),KI(e+80|0,256),g&&(n[g>>2]=16,n[g+4>>2]=0),D=e+336|0}(A,I,g,B,C,Q,E,i,r,t+4|0,t+16|0),KI(t+16|0,32),D=t+48|0,0}function AI(A,I,g,B,C,Q,E,i,r,o){var e;return D=e=D-48|0,n[e+4>>2]=0,K(e+16|0,r,o),o=a[r+16|0]|a[r+17|0]<<8|a[r+18|0]<<16|a[r+19|0]<<24,r=a[r+20|0]|a[r+21|0]<<8|a[r+22|0]<<16|a[r+23|0]<<24,n[e+8>>2]=o,n[e+12>>2]=r,A=function(A,I,g,B,C,Q,E,i,n,a){var r;return D=r=D-352|0,Pg(r+32|0,64,n,a),Og(r+96|0,r+32|0),KI(r+32|0,64),Lg(r+96|0,Q,E,i),Lg(r+96|0,34704,0-E&15,0),Lg(r+96|0,I,g,B),Lg(r+96|0,34704,0-g&15,0),LI(r+24|0,E,i),Lg(r+96|0,r+24|0,8,0),LI(r+24|0,g,B),Lg(r+96|0,r+24|0,8,0),zg(r+96|0,r),KI(r+96|0,256),C=AB(r,C),KI(r,16),A&&(C?(eA(A,0,g),C=-1):(gg(A,I,g,B,n,1,a),C=0)),D=r+352|0,C}(A,I,g,B,C,Q,E,i,e+4|0,e+16|0),KI(e+16|0,32),D=e+48|0,A}function II(A,I,g,B){var C;if(D=C=D-192|0,!(!g|(I+-1&255)>>>0>=64|(B+-1&255)>>>0>=64))return i[C+130>>1]=257,E[C+129|0]=B,E[C+128|0]=I,ug(C+128|4),LI(C+128|8,0,0),eA(C+144|0,0,48),vA(A,C+128|0),eA(B+C|0,0,128-B|0),rA(I=A,A=j(C,g,B),128,0),KI(A,128),D=A+192|0,0;Gg(),t()}function gI(A,I,g,B,C,Q,E,i,a,r){var o=0,e=0;return o=-1,!C&B>>>0>=16|C>>>0>0&&(e=A,A=C+-1|0,(o=B+-16|0)>>>0<4294967280&&(A=A+1|0),o=PA(e,g,o,A,(g+B|0)-16|0,Q,E,i,a,r)),I&&(A=C+-1|0,(g=B+-16|0)>>>0<4294967280&&(A=A+1|0),n[(Q=I)>>2]=o?0:g,n[I+4>>2]=o?0:A),o}function BI(A,I,g,B,C,Q,E,i,a,r){var o=0,e=0;return o=-1,!C&B>>>0>=16|C>>>0>0&&(e=A,A=C+-1|0,(o=B+-16|0)>>>0<4294967280&&(A=A+1|0),o=AI(e,g,o,A,(g+B|0)-16|0,Q,E,i,a,r)),I&&(A=C+-1|0,(g=B+-16|0)>>>0<4294967280&&(A=A+1|0),n[(Q=I)>>2]=o?0:g,n[I+4>>2]=o?0:A),o}function CI(A,I,g,B,C,Q,E,i,a,r){var o=0,e=0;return o=-1,!C&B>>>0>=16|C>>>0>0&&(e=A,A=C+-1|0,(o=B+-16|0)>>>0<4294967280&&(A=A+1|0),o=qA(e,g,o,A,(g+B|0)-16|0,Q,E,i,a,r)),I&&(A=C+-1|0,(g=B+-16|0)>>>0<4294967280&&(A=A+1|0),n[(Q=I)>>2]=o?0:g,n[I+4>>2]=o?0:A),o}function QI(A,I,g,B,C,Q){var E,i;return D=E=D-16|0,i=g,g=B,mg(A,E+8|0,aA(A- -64|0,i,B),B,C,Q),64!=n[E+8>>2]|n[E+12>>2]?(I&&(n[I>>2]=0,n[I+4>>2]=0),eA(A,0,g- -64|0),A=-1):(A=0,I&&(n[I>>2]=B- -64,n[I+4>>2]=C-((B>>>0<4294967232)+-1|0))),D=E+16|0,A}function EI(A,I,g,B,C,Q,E){var i;return D=i=D-16|0,A=eA(A,0,128),B|=Q,E>>>0<2147483649&&!B|B>>>0<0?E>>>0>8191&&!Q&C>>>0>=3|Q>>>0>0?(qI(i,16),A=NA(C,E>>>10|0,1,I,g,i,16,0,32,A,128,1)?-1:0):(n[8960]=28,A=-1):(n[8960]=22,A=-1),D=i+16|0,A}function iI(A,I,g){n[A+48>>2]=g?a[0|g]|a[g+1|0]<<8|a[g+2|0]<<16|a[g+3|0]<<24:0,n[A+52>>2]=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,n[A+56>>2]=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,n[A+60>>2]=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24}function nI(A,I,g,B,C,Q,E){var i;return D=i=D-16|0,A=eA(A,0,128),B|=Q,E>>>0<2147483649&&!B|B>>>0<0?E>>>0>8191&&C|Q?(qI(i,16),A=NA(C,E>>>10|0,1,I,g,i,16,0,32,A,128,2)?-1:0):(n[8960]=28,A=-1):(n[8960]=22,A=-1),D=i+16|0,A}function aI(A){var I=0;return(0-(I=A+4&(A+65488>>>8^-1)&(57-A>>>8^-1)&255|((I=A+-65|0)>>>8^-1)&I&(90-A>>>8^-1)&255|A+185&(A+65439>>>8^-1)&(122-A>>>8^-1)&255|63&(1+(16288^A)>>>8^-1)|62&(1+(16338^A)>>>8^-1))>>>8^-1)&1+(65470^A)>>>8&255|I}function rI(A){var I=0;return(0-(I=A+4&(A+65488>>>8^-1)&(57-A>>>8^-1)&255|((I=A+-65|0)>>>8^-1)&I&(90-A>>>8^-1)&255|A+185&(A+65439>>>8^-1)&(122-A>>>8^-1)&255|63&(1+(16336^A)>>>8^-1)|62&(1+(16340^A)>>>8^-1))>>>8^-1)&1+(65470^A)>>>8&255|I}function oI(A,I){var g,B,C=0,Q=0,i=0,n=0;for(D=g=D-16|0,C=10;n=C,i=(I>>>0)/10|0,E[0|(Q=(C=C+-1|0)+(g+6|0)|0)]=I-o(i,10)|48,!(I>>>0<10)&&(I=i,C););B=j(I=A,Q,A=11-n|0)+A|0,E[0|B]=0,D=g+16|0}function eI(A,I,g){var B=0,C=0,Q=0;if(!g)return 0;A:if(B=a[0|A]){for(;;){if((0|(C=a[0|I]))==(0|B)&&!(!(g=g+-1|0)|!C)){if(I=I+1|0,B=a[A+1|0],A=A+1|0,B)continue;break A}break}Q=B}return(255&Q)-a[0|I]|0}function tI(A,I,g){var B,C,Q,E=0;D=C=D-48|0,HA(A,E=I+40|0,I),_A(B=A+40|0,E,I),H(E=A+80|0,A,g),H(B,B,g+40|0),H(Q=A+120|0,g+120|0,I+120|0),H(A,I+80|0,g+80|0),HA(C,A,A),_A(A,E,B),HA(B,E,B),HA(E,C,Q),_A(Q,C,Q),D=C+48|0}function cI(A,I,g){var B,C,Q,E=0;D=C=D-48|0,HA(A,E=I+40|0,I),_A(B=A+40|0,E,I),H(E=A+80|0,A,g+40|0),H(B,B,g),H(Q=A+120|0,g+120|0,I+120|0),H(A,I+80|0,g+80|0),HA(C,A,A),_A(A,E,B),HA(B,E,B),_A(E,C,Q),HA(Q,C,Q),D=C+48|0}function fI(A,I){for(var g=0,B=0,C=0,Q=0;C=(g=B<<3)+A|0,Q=a[0|(g=I+g|0)]|a[g+1|0]<<8|a[g+2|0]<<16|a[g+3|0]<<24,g=a[g+4|0]|a[g+5|0]<<8|a[g+6|0]<<16|a[g+7|0]<<24,n[C>>2]=Q,n[C+4>>2]=g,128!=(0|(B=B+1|0)););}function yI(A,I,g){var B;if(n[12+(B=D-16|0)>>2]=A,n[B+8>>2]=I,I=0,n[B+4>>2]=0,(0|g)>=1)for(;n[B+4>>2]=n[B+4>>2]|a[n[B+8>>2]+I|0]^a[n[B+12>>2]+I|0],(0|g)!=(0|(I=I+1|0)););return(n[B+4>>2]+-1>>>8&1)-1|0}function sI(A,I,g){var B,C,Q,E=0;D=C=D-48|0,HA(A,E=I+40|0,I),_A(B=A+40|0,E,I),H(E=A+80|0,A,g+40|0),H(B,B,g),H(Q=A+120|0,g+80|0,I+120|0),HA(C,I=I+80|0,I),_A(A,E,B),HA(B,E,B),_A(E,C,Q),HA(Q,C,Q),D=C+48|0}function wI(A,I,g){var B,C,Q,E=0;D=C=D-48|0,HA(A,E=I+40|0,I),_A(B=A+40|0,E,I),H(E=A+80|0,A,g),H(B,B,g+40|0),H(Q=A+120|0,g+80|0,I+120|0),HA(C,I=I+80|0,I),_A(A,E,B),HA(B,E,B),HA(E,C,Q),_A(Q,C,Q),D=C+48|0}function hI(A,I,g){var B;if(n[12+(B=D-16|0)>>2]=A,n[B+8>>2]=I,I=0,E[B+7|0]=0,g)for(;E[B+7|0]=a[B+7|0]|a[n[B+8>>2]+I|0]^a[n[B+12>>2]+I|0],(0|g)!=(0|(I=I+1|0)););return(a[B+7|0]+-1>>>8&1)-1|0}function DI(A,I,g){var B,C=0,i=0;if(D=B=D-16|0,E[B+15|0]=0,i=-1,!(0|Q[n[8949]](A,I,g))){for(;E[B+15|0]=a[A+C|0]|a[B+15|0],32!=(0|(C=C+1|0)););i=0-(a[B+15|0]+-1>>>8&1)|0}return D=B+16|0,i}function uI(A,I,g,B,C,Q,E){var i,n=0,a=0;n=B,(a=g+63|0)>>>0<63&&(n=n+1|0),i=n>>>6|0,a=0-(n=(63&n)<<26|a>>>6)|0,!(n=1-(i+(0<n>>>0)|0)|0)&a>>>0<Q>>>0|n>>>0<0&&(Gg(),t()),gg(A,I,g,B,C,Q,E)}function pI(A,I){var g,B,C,Q,E;D=B=D-48|0,U(A,I),U(g=A+80|0,E=I+40|0),Y(Q=A+120|0,I+80|0),HA(C=A+40|0,I,E),U(B,C),HA(C,g,A),_A(g,g,A),_A(A,B,C),_A(Q,Q,g),D=B+48|0}function lI(A,I){var g;return D=g=D+-64|0,(I+-1&255)>>>0>=64&&(Gg(),t()),E[g+3|0]=1,E[g+1|0]=256,E[g+2|0]=1,E[0|g]=I,ug(4|g),LI(8|g,0,0),eA(g+16|0,0,48),vA(A,g),D=g- -64|0,0}function FI(A){var I,g;return(A=(I=n[9108])+(g=A+3&-4)|0)>>>0<=I>>>0&&(0|g)>=1||A>>>0>hB()<<16>>>0&&!(0|h(0|A))?(n[8960]=48,-1):(n[9108]=A,I)}function GI(A,I,g,B,C,Q,E){var i=0,n=0,a=0;return!B&g>>>0>=16|B>>>0>0?(i=A,n=I+16|0,a=I,A=B+-1|0,(I=g+-16|0)>>>0<4294967280&&(A=A+1|0),A=WI(i,n,a,I,A,C,Q,E)):A=-1,A}function kI(A,I,g,B,C,Q,E,i,a,r){if(!C&B>>>0<4294967280|C>>>0<0)return OA(A,A+B|0,0,g,B,C,Q,E,i,a,r),I&&((A=B+16|0)>>>0<16&&(C=C+1|0),n[I>>2]=A,n[I+4>>2]=C),0;Gg(),t()}function _I(A,I,g,B,C,Q,E,i,a,r){if(!C&B>>>0<4294967280|C>>>0<0)return LA(A,A+B|0,0,g,B,C,Q,E,i,a,r),I&&((A=B+16|0)>>>0<16&&(C=C+1|0),n[I>>2]=A,n[I+4>>2]=C),0;Gg(),t()}function HI(A,I,g,B,C,Q,E,i,a,r){if(!C&B>>>0<4294967280|C>>>0<0)return $A(A,A+B|0,0,g,B,C,Q,E,i,a,r),I&&((A=B+16|0)>>>0<16&&(C=C+1|0),n[I>>2]=A,n[I+4>>2]=C),0;Gg(),t()}function YI(A,I){for(var g=0,B=0,C=0,Q=0;B=(g=C<<3)+A|0,Q=n[(g=I+g|0)>>2],g=n[B+4>>2]^n[g+4>>2],n[B>>2]=n[B>>2]^Q,n[B+4>>2]=g,128!=(0|(C=C+1|0)););}function bI(A){var I,g;return 95&(1+(32704^A)>>>8^-1)|45&(1+(16321^A)>>>8^-1)|(I=A+65510>>>8&255)&A+65|(g=A+65484>>>8|0)&A+71&(255^I)|A+252&A+65474>>>8&(-1^g)&255}function mI(A){var I,g;return 47&(1+(16320^A)>>>8^-1)|43&(1+(16321^A)>>>8^-1)|(I=A+65510>>>8&255)&A+65|(g=A+65484>>>8|0)&A+71&(255^I)|A+252&A+65474>>>8&(-1^g)&255}function UI(A,I,g,B,C,Q,E,i,a,r,o){switch(o+-1|0){case 0:return function(A,I,g,B,C,Q,E,i,a,r){var o,e;o=I,e=eA(A,0,I),A=22;A:if(!(g>>>0>0)){if(!(!g&I>>>0<16|g>>>0<0)){if(r>>>0>2147483648|(Q|a)>>>0>0)break A;if(!(!a&i>>>0<3|a>>>0<0|r>>>0<8192))return NA(i,r>>>10|0,1,B,C,E,16,e,o,0,0,1)?-1:0}A=28}return n[8960]=A,-1}(A,I,g,B,C,Q,E,i,a,r);case 1:return function(A,I,g,B,C,Q,E,i,a,r){var o,e;o=I,e=eA(A,0,I),A=22;A:if(!(g>>>0>0)){if(!(!g&I>>>0<16|g>>>0<0)){if(r>>>0>2147483648|(Q|a)>>>0>0)break A;if(!(!(i|a)|r>>>0<8192))return NA(i,r>>>10|0,1,B,C,E,16,e,o,0,0,2)?-1:0}A=28}return n[8960]=A,-1}(A,I,g,B,C,Q,E,i,a,r)}return n[8960]=28,-1}function vI(A,I,g,B){var C=0;C=-1;A:if(!(g>>>0>64|B+-1>>>0>63)){I:{if(!g||!I){if(!lI(A,255&B))break I;break A}if(II(A,255&B,I,255&g))break A}C=0}return C}function SI(A){var I=0,g=0,B=0,C=0,Q=0;for(I=32,g=1;Q=(B=a[(I=I+-1|0)+A|0])-(C=a[I+3456|0])>>8&g|255&Q,g&=65535+(B^C)>>>8,I;);return 0!=(0|Q)}function NI(A,I){var g,B,C;D=g=D-144|0,O(g+96|0,I+80|0),H(g+48|0,I,g+96|0),H(g,I+40|0,g+96|0),oA(A,g),B=A,C=yg(g+48|0)<<7^a[A+31|0],E[B+31|0]=C,D=g+144|0}function RI(A,I){var g,B=0;if(E[15+(g=D-16|0)|0]=0,I)for(;E[g+15|0]=a[A+B|0]|a[g+15|0],(0|(B=B+1|0))!=(0|I););return a[g+15|0]+-1>>>8&1}function MI(A,I,g,B){var C;return B=I+B|0,(C=A+g|0)>>>0<g>>>0&&(B=B+1|0),g=xg(A<<1&-2,1&(I=I<<1|A>>>31),g,0),A=l+B|0,l=A=(I=g+C|0)>>>0<g>>>0?A+1|0:A,I}function dI(A,I,g){var B,C=0;if(B=g>>>3|0)for(g=0;WA((C=g<<3)+A|0,n[(C=I+C|0)>>2],n[C+4>>2]),(0|B)!=(0|(g=g+1|0)););}function PI(A){var I=0,g=0;for(g=127&(-1^a[A+31|0]),I=30;g=-1^a[A+I|0]|g,I=I+-1|0;);return 1&(((255&g)-1&236-a[0|A])>>>8^-1)}function JI(A){var I=0,g=0;return I=0,A&&(g=A,I=A,(1|A)>>>0<65536||(I=g)),g=I,!(A=_(I))|!(3&a[A+-4|0])||eA(A,0,g),A}function xI(A,I){var g=0;!function(A,I){I&&((I=n[A>>2])&&KI(n[I+4>>2],n[A+16>>2]<<10),(I=n[A+4>>2])&&KI(I,n[A+20>>2]<<3))}(A,4&I),v(n[A+4>>2]),n[A+4>>2]=0,(I=n[A>>2])&&(g=n[I>>2])&&v(g),v(I),n[A>>2]=0}function LI(A,I,g){E[0|A]=I,E[A+1|0]=I>>>8,E[A+2|0]=I>>>16,E[A+3|0]=I>>>24,E[A+4|0]=g,E[A+5|0]=g>>>8,E[A+6|0]=g>>>16,E[A+7|0]=g>>>24}function KI(A,I){var g;if(n[12+(g=D-16|0)>>2]=A,I)for(A=0;E[n[g+12>>2]+A|0]=0,(0|I)!=(0|(A=A+1|0)););}function qI(A,I){A|=0;var g=0,B=0,C=0;if(I|=0)for(;B=A+g|0,C=Qg(),E[0|B]=C,(0|(g=g+1|0))!=(0|I););}function XI(A,I,g,B,C){var Q,E;return A|=0,I|=0,g|=0,B|=0,D=Q=(E=D)-128&-64,nA(Q,C|=0),IA(Q,I,g,B),$(Q,A),D=E,0}function VI(A){var I=0,g=0,B=0;for(I=1;I=a[0|(B=A+g|0)]+I|0,E[0|B]=I,I=I>>>8|0,4!=(0|(g=g+1|0)););}function TI(A,I,g,B,C,Q,E,i){var n,a=0;return D=n=D-32|0,a=-1,lg(n,E,i)||(a=Ug(A,I,g,B,C,Q,n),KI(n,32)),D=n+32|0,a}function WI(A,I,g,B,C,Q,E,i){var n,a=0;return D=n=D-32|0,a=-1,lg(n,E,i)||(a=vg(A,I,g,B,C,Q,n),KI(n,32)),D=n+32|0,a}function jI(A,I){var g,B,C;H(A,I,g=I+120|0),H(A+40|0,B=I+40|0,C=I+80|0),H(A+80|0,C,g),H(A+120|0,I,B)}function ZI(A,I){for(var g=0,B=0;E[0|(B=A+g|0)]=a[0|B]^a[I+g|0],8!=(0|(g=g+1|0)););}function OI(A,I,g){var B,C;D=B=(C=D)-384&-64,wg(B,0,0,24),Xg(B,I,32,0),Xg(B,g,32,0),pg(B,A,24),D=C}function zI(A,I){var g;HA(A,g=I+40|0,I),_A(A+40|0,g,I),ZA(A+80|0,I+80|0),H(A+120|0,I+120|0,2224)}function $I(A,I,g,B,C,Q,E){return!B&g>>>0>=4294967280|B>>>0>0&&(Gg(),t()),TI(A+16|0,A,I,g,B,C,Q,E)}function Ag(A,I,g,B,C,Q,E){return I+-1>>>0>63|E>>>0>64?-1:function(A,I,g,B,C,Q,E){var i,n=0;if(i=n=D,D=n=n-384&-64,!(!A|(B+-1&255)>>>0>=64|(C|Q?!I:0)|E>>>0>=65|(E?!g:0)))return E?II(n,B,g,E):lI(n,B),rA(n,I,C,Q),P(n,A,B),D=i,0;Gg(),t()}(A,g,Q,255&I,B,C,255&E)}function Ig(A,I){var g;H(A,I,g=I+120|0),H(A+40|0,I+40|0,I=I+80|0),H(A+80|0,I,g)}function gg(A,I,g,B,C,E,i){1==(0|B)&g>>>0>=0|B>>>0>1&&(Gg(),t()),Q[n[8956]](A,I,g,B,C,E,i)}function Bg(A,I,g,B,C,E){1==(0|B)&g>>>0>=0|B>>>0>1&&(Gg(),t()),Q[n[8955]](A,I,g,B,C,1,0,E)}function Cg(A){var I;return I=a[0|A]|a[A+1|0]<<8,A=a[A+2|0],l=A>>>16|0,I|A<<16}function Qg(){var A,I;return D=A=D-16|0,E[A+15|0]=0,I=0|f(1024,A+15|0,0),D=A+16|0,0|I}function Eg(A,I,g,B,C){var Q;return D=Q=D-416|0,dA(Q,C),W(Q,I,g,B),sA(Q,A),D=Q+416|0,0}function ig(A,I,g,B){var C;return D=C=D-208|0,rg(C),W(C,I,g,B),ag(C,A),D=C+208|0,0}function ng(A,I){var g=0;return(-1>>>(g=31&I)&A)<<g|((g=A)&-1<<(A=0-I&31))>>>A}function ag(A,I){var g;D=g=D-704|0,function(A,I){var g,B=0;A:if((g=n[A+72>>2]>>>3&127)>>>0<=111){if(!(B=112-g|0))break A;j(80+(A+g|0)|0,35424,B)}else j((B=A+80|0)+g|0,35424,128-g|0),G(A,B,I,I+640|0),eA(B,0,112);dI(A+192|0,A- -64|0,16),G(A,A+80|0,I,I+640|0)}(A,g),dI(I,A,64),KI(g,704),KI(A,208),D=g+704|0}function rg(A){n[A+64>>2]=0,n[A+68>>2]=0,n[A+72>>2]=0,n[A+76>>2]=0,j(A,34720,64)}function og(A,I,g){return g>>>0>=256&&(c(2016,2036,107,2089),t()),P(A,I,255&g)}function eg(){var A;D=A=D-16|0,E[A+15|0]=0,f(1062,A+15|0,0),D=A+16|0}function tg(A){var I;return D=I=D-32|0,oA(I,A),A=RI(I,32),D=I+32|0,A}function cg(A,I){var g;D=g=D-128|0,function(A,I){ZA(A,I),ZA(A+40|0,I+40|0),ZA(A+80|0,I+80|0)}(g+8|0,I),pI(A,g+8|0),D=g+128|0}function fg(A,I){E[0|A]=I,E[A+1|0]=I>>>8,E[A+2|0]=I>>>16,E[A+3|0]=I>>>24}function yg(A){var I;return D=I=D-32|0,oA(I,A),D=I+32|0,1&E[0|I]}function sg(A,I,g){pA(A,I,g),pA(A+40|0,I+40|0,g),pA(A+80|0,I+80|0,g)}function wg(A,I,g,B){return 0|vI(A|=0,I|=0,g|=0,B|=0)}function hg(A){E[A+32|0]=1,E[A+33|0]=0,E[A+34|0]=0,E[A+35|0]=0}function Dg(A){n[A>>2]=0,n[A+4>>2]=0,n[A+8>>2]=0,n[A+12>>2]=0}function ug(A){E[0|A]=0,E[A+1|0]=0,E[A+2|0]=0,E[A+3|0]=0}function pg(A,I,g){return 0|og(A|=0,I|=0,g|=0)}function lg(A,I,g){return 0|function(A,I,g){var B,C=0;return D=B=D-32|0,C=-1,DI(B,g,I)||(C=X(A,35552,B)),D=B+32|0,C}(A|=0,I|=0,g|=0)}function Fg(A,I,g){return 0|DI(A|=0,I|=0,g|=0)}function Gg(){var A;(A=n[9105])&&Q[0|A](),y(),t()}function kg(A){iB(A),Vg(A+40|0),Vg(A+80|0),iB(A+120|0)}function _g(A,I,g,B,C,E){Q[n[8952]](A,I,g,B,C,0,0,E)}function Hg(A,I,g,B,C,E){Q[n[8952]](A,I,g,B,C,1,0,E)}function Yg(A,I){return A|=0,qI(I|=0,32),0|qg(A,I)}function bg(A,I){return A=function(A,I){var g=0,B=0;A:{if(B=255&I){if(3&A)for(;;){if(!(g=a[0|A])|(0|g)==(255&I))break A;if(!(3&(A=A+1|0)))break}I:if(!((-1^(g=n[A>>2]))&g+-16843009&-2139062144))for(B=o(B,16843009);;){if((-1^(g^=B))&g+-16843009&-2139062144)break I;if(g=n[A+4>>2],A=A+4|0,g+-16843009&(-1^g)&-2139062144)break}for(;(B=a[0|(g=A)])&&(A=g+1|0,(0|B)!=(255&I)););return g}return VA(A)+A|0}return A}(A,I),a[0|A]==(255&I)?A:0}function mg(A,I,g,B,C,Q){return V(A,I,g,B,C,Q,0),0}function Ug(A,I,g,B,C,Q,E){return fA(A,I,g,B,C,Q,E)}function vg(A,I,g,B,C,Q,E){return yA(A,I,g,B,C,Q,E)}function Sg(A,I,g,B,C,Q,E){return Ag(A,I,g,B,C,Q,E)}function Ng(A,I){rg(A),I&&W(A,35728,34,0)}function Rg(A,I,g,B,C){return MA(A,I,g,B,C,0)}function Mg(A,I){return 0|qg(A|=0,I|=0)}function dg(A,I){return(255&(A^I))-1>>>31|0}function Pg(A,I,g,B){Q[n[8954]](A,I,0,g,B)}function Jg(A,I,g){Q[n[8953]](A,64,0,I,g)}function xg(A,I,g,B){return function(A,I,g,B){var C,Q,E,i,n=0,a=0;return i=o(n=g>>>16|0,a=A>>>16|0),n=(65535&(a=((E=o(C=65535&g,Q=65535&A))>>>16|0)+o(a,C)|0))+o(n,Q)|0,A=(o(I,g)+i|0)+o(A,B)+(a>>>16)+(n>>>16)|0,l=A,65535&E|n<<16}(A,I,g,B)}function Lg(A,I,g,B){Q[n[8947]](A,I,g,B)}function Kg(A,I,g){!function(A,I,g){var B,C;D=B=D-128|0,Vg(A),Vg(A+40|0),iB(A+80|0),sg(A,I,dg(g=g-((0-(C=(128&g)>>>7|0)&g)<<1)<<24>>24,1)),sg(A,I+120|0,dg(g,2)),sg(A,I+240|0,dg(g,3)),sg(A,I+360|0,dg(g,4)),sg(A,I+480|0,dg(g,5)),sg(A,I+600|0,dg(g,6)),sg(A,I+720|0,dg(g,7)),sg(A,I+840|0,dg(g,8)),ZA(B+8|0,A+40|0),ZA(B+48|0,A),TA(B+88|0,A+80|0),sg(A,B+8|0,C),D=B+128|0}(A,o(I,960)+3488|0,g)}function qg(A,I){return 0|Q[n[8950]](A,I)}function Xg(A,I,g,B){return Tg(A,I,g,B)}function Vg(A){n[A>>2]=1,eA(A+4|0,0,36)}function Tg(A,I,g,B){return rA(A,I,g,B)}function Wg(A,I,g){return function(A,I,g){var B=0,C=0,Q=0,E=0;return B=31&(Q=E=63&g),32<=Q>>>0?B=-1>>>B|0:(C=-1>>>B|0,B=(1<<B)-1<<32-B|-1>>>B),Q=B&A,B=I&C,C=31&E,32<=E>>>0?(B=Q<<C,E=0):(B=(1<<C)-1&Q>>>32-C|B<<C,E=Q<<C),Q=B,g=31&(B=C=0-g&63),32<=B>>>0?(B=-1<<g,g=0):(B=(1<<g)-1&-1>>>32-g|-1<<g,g=-1<<g),A&=g,B&=I,I=31&C,32<=C>>>0?(g=0,A=B>>>I|0):(g=B>>>I|0,A=((1<<I)-1&B)<<32-I|A>>>I),l=g|Q,A|E}(A,I,g)}function jg(A,I,g){return function(A,I,g){var B=0,C=0,Q=0,E=0,i=0;return B=31&(E=63&g),32<=E>>>0?(C=-1<<B,i=0):(C=(1<<B)-1&-1>>>32-B|-1<<B,i=-1<<B),i&=A,B=I&C,Q=31&E,32<=E>>>0?(C=0,E=B>>>Q|0):(C=B>>>Q|0,E=((1<<Q)-1&B)<<32-Q|i>>>Q),i=C,Q=31&(B=0-g&63),32<=B>>>0?(C=0,g=-1>>>Q|0):(C=-1>>>Q|0,g=(1<<Q)-1<<32-Q|-1>>>Q),A&=g,I&=C,C=31&B,32<=B>>>0?(g=A<<C,A=0):(g=(1<<C)-1&A>>>32-C|I<<C,A<<=C),l=g|i,A|E}(A,I,g)}function Zg(A){1!=(-7&A)&&(Gg(),t())}function Og(A,I){Q[n[8946]](A,I)}function zg(A,I){Q[n[8948]](A,I)}function $g(A,I){return yI(A,I,32)}function AB(A,I){return yI(A,I,16)}function IB(A,I,g,B){Pg(A,I,g,B)}function gB(A,I){return ng(A,I)}function BB(A,I){j(A,I,1024)}function CB(A){qI(A|=0,32)}function QB(A,I,g){!function(A,I,g){var B,C,Q,E,i,n,r,o,e,t,c,f,y=0,s=0,w=0,h=0,D=0,u=0,p=0,l=0,F=0,G=0,k=0,_=0,H=0,Y=0,b=0,m=0,U=0,v=0,S=0,N=0,R=0;for(B=a[0|g]|a[g+1|0]<<8|a[g+2|0]<<16|a[g+3|0]<<24,C=a[g+4|0]|a[g+5|0]<<8|a[g+6|0]<<16|a[g+7|0]<<24,Q=a[g+8|0]|a[g+9|0]<<8|a[g+10|0]<<16|a[g+11|0]<<24,E=a[g+12|0]|a[g+13|0]<<8|a[g+14|0]<<16|a[g+15|0]<<24,i=a[g+16|0]|a[g+17|0]<<8|a[g+18|0]<<16|a[g+19|0]<<24,n=a[g+20|0]|a[g+21|0]<<8|a[g+22|0]<<16|a[g+23|0]<<24,r=a[g+24|0]|a[g+25|0]<<8|a[g+26|0]<<16|a[g+27|0]<<24,o=a[g+28|0]|a[g+29|0]<<8|a[g+30|0]<<16|a[g+31|0]<<24,g=1634760805,h=B,D=C,b=Q,u=E,H=857760878,p=e=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,l=t=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,F=c=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,_=f=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,I=2036477234,s=i,G=1797285236,k=o,w=r,y=n;u=gB(g+y|0,7)^u,F=gB(u+g|0,9)^F,m=gB(F+u|0,13)^y,S=gB(F+m|0,18),y=gB(h+H|0,7)^_,Y=gB(y+H|0,9)^w,h=gB(y+Y|0,13)^h,_=gB(Y+h|0,18),k=gB(I+p|0,7)^k,D=gB(k+I|0,9)^D,p=gB(D+k|0,13)^p,N=gB(D+p|0,18),w=gB(s+G|0,7)^b,l=gB(w+G|0,9)^l,U=gB(l+w|0,13)^s,R=gB(l+U|0,18),h=gB((g^=S)+w|0,7)^h,D=gB(h+g|0,9)^D,b=gB(h+D|0,13)^w,g=gB(D+b|0,18)^g,p=gB((s=H^_)+u|0,7)^p,l=gB(p+s|0,9)^l,u=gB(l+p|0,13)^u,H=gB(l+u|0,18)^s,s=gB((I^=N)+y|0,7)^U,F=gB(s+I|0,9)^F,_=gB(F+s|0,13)^y,I=gB(F+_|0,18)^I,y=gB((G^=R)+k|0,7)^m,w=gB(y+G|0,9)^Y,k=gB(y+w|0,13)^k,G=gB(w+k|0,18)^G,Y=v>>>0<18,v=v+2|0,Y;);fg(A,g+1634760805|0),fg(A+4|0,h+B|0),fg(A+8|0,D+C|0),fg(A+12|0,b+Q|0),fg(A+16|0,u+E|0),fg(A+20|0,H+857760878|0),fg(A+24|0,p+e|0),fg(A+28|0,l+t|0),fg(A+32|0,F+c|0),fg(A+36|0,_+f|0),fg(A+40|0,I+2036477234|0),fg(A+44|0,s+i|0),fg(A+48|0,y+n|0),fg(A+52|0,w+r|0),fg(A+56|0,k+o|0),fg(A+60|0,G+1797285236|0)}(A,I,g)}function EB(A){eA(A,0,1024)}function iB(A){eA(A,0,40)}function nB(){return 16}function aB(){return 32}function rB(){return 24}function oB(){return-17}function eB(){return 64}function tB(){return 1}function cB(){return 2}function fB(){return 8}function yB(){return 0}function sB(){return-1}function wB(){return 3}function hB(){return B.byteLength/65536|0}return Q[1]=XI,Q[2]=function(A,I,g,B,C){var Q;return A|=0,D=Q=D-16|0,XI(Q,I|=0,g|=0,B|=0,C|=0),A=AB(A,Q),D=Q+16|0,0|A},Q[3]=function(A,I){return nA(A|=0,I|=0),0},Q[4]=function(A,I,g,B){return IA(A|=0,I|=0,g|=0,B|=0),0},Q[5]=function(A,I){return $(A|=0,I|=0),0},Q[6]=function(A,I,g){A|=0,I|=0;var B,C=0,Q=0;if(D=B=D-336|0,C=-1,!mA(g|=0)){for(C=0;E[A+C|0]=a[I+C|0],32!=(0|(C=C+1|0)););for(E[0|A]=248&a[0|A],E[A+31|0]=63&a[A+31|0]|64,J(B+288|0,g),Vg(B+240|0),iB(B+192|0),ZA(B+144|0,B+288|0),Vg(B+96|0),g=254,I=0;C=I,Q=g,QA(B+240|0,B+144|0,C^=I=a[(g>>>3|0)+A|0]>>>(7&g)&1),QA(B+192|0,B+96|0,C),g=g+-1|0,_A(B+48|0,B+144|0,B+96|0),_A(B,B+240|0,B+192|0),HA(B+240|0,B+240|0,B+192|0),HA(B+192|0,B+144|0,B+96|0),H(B+96|0,B+48|0,B+240|0),H(B+192|0,B+192|0,B),U(B+48|0,B),U(B,B+240|0),HA(B+144|0,B+96|0,B+192|0),_A(B+192|0,B+96|0,B+192|0),H(B+240|0,B,B+48|0),_A(B,B,B+48|0),U(B+192|0,B+192|0),d(B+96|0,B),U(B+144|0,B+144|0),HA(B+48|0,B+48|0,B+96|0),H(B+96|0,B+288|0,B+192|0),H(B+192|0,B,B+48|0),Q;);QA(B+240|0,B+144|0,I),QA(B+192|0,B+96|0,I),O(B+192|0,B+192|0),H(B+240|0,B+240|0,B+192|0),oA(A,B+240|0),C=0}return D=B+336|0,0|C},Q[7]=function(A,I){A|=0,I|=0;var g,B=0;for(D=g=D-208|0;E[A+B|0]=a[I+B|0],32!=(0|(B=B+1|0)););return E[0|A]=248&a[0|A],E[A+31|0]=63&a[A+31|0]|64,tA(g+48|0,A),function(A,I,g){var B;D=B=D-96|0,HA(B+48|0,g,I),_A(B,g,I),O(B,B),H(A,B+48|0,B),D=B+96|0}(g,g+88|0,g+128|0),oA(A,g),D=g+208|0,0},Q[8]=function(A,I,g,B,C){A|=0,B|=0,C|=0;var Q,i=0;if(D=Q=D-112|0,(I|=0)|(g|=0)){i=a[C+28|0]|a[C+29|0]<<8|a[C+30|0]<<16|a[C+31|0]<<24,n[Q+24>>2]=a[C+24|0]|a[C+25|0]<<8|a[C+26|0]<<16|a[C+27|0]<<24,n[Q+28>>2]=i,i=a[C+20|0]|a[C+21|0]<<8|a[C+22|0]<<16|a[C+23|0]<<24,n[Q+16>>2]=a[C+16|0]|a[C+17|0]<<8|a[C+18|0]<<16|a[C+19|0]<<24,n[Q+20>>2]=i,i=a[C+4|0]|a[C+5|0]<<8|a[C+6|0]<<16|a[C+7|0]<<24,n[Q>>2]=a[0|C]|a[C+1|0]<<8|a[C+2|0]<<16|a[C+3|0]<<24,n[Q+4>>2]=i,i=a[C+12|0]|a[C+13|0]<<8|a[C+14|0]<<16|a[C+15|0]<<24,n[Q+8>>2]=a[C+8|0]|a[C+9|0]<<8|a[C+10|0]<<16|a[C+11|0]<<24,n[Q+12>>2]=i,C=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,B=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,n[Q+104>>2]=0,n[Q+108>>2]=0,n[Q+96>>2]=C,n[Q+100>>2]=B;A:{if(!g&I>>>0>=64|g>>>0>0){for(;;){for(QB(A,Q+96|0,Q),C=8,B=1;B=a[0|(i=(Q+96|0)+C|0)]+B|0,E[0|i]=B,B=B>>>8|0,16!=(0|(C=C+1|0)););if(A=A- -64|0,g=g+-1|0,(I=I+-64|0)>>>0<4294967232&&(g=g+1|0),!(!g&I>>>0>63|g>>>0>0))break}if(!(I|g))break A}if(C=0,QB(Q+32|0,Q+96|0,Q),I)for(;E[A+C|0]=a[(Q+32|0)+C|0],(0|I)!=(0|(C=C+1|0)););}KI(Q+32|0,64),KI(Q,32)}return D=Q+112|0,0},Q[9]=function(A,I,g,B,C,Q,i,r){A|=0,I|=0,C|=0,Q|=0,i|=0,r|=0;var o,e=0,t=0;if(D=o=D-112|0,(g|=0)|(B|=0)){for(e=a[r+28|0]|a[r+29|0]<<8|a[r+30|0]<<16|a[r+31|0]<<24,n[o+24>>2]=a[r+24|0]|a[r+25|0]<<8|a[r+26|0]<<16|a[r+27|0]<<24,n[o+28>>2]=e,e=a[r+20|0]|a[r+21|0]<<8|a[r+22|0]<<16|a[r+23|0]<<24,n[o+16>>2]=a[r+16|0]|a[r+17|0]<<8|a[r+18|0]<<16|a[r+19|0]<<24,n[o+20>>2]=e,e=a[r+4|0]|a[r+5|0]<<8|a[r+6|0]<<16|a[r+7|0]<<24,n[o>>2]=a[0|r]|a[r+1|0]<<8|a[r+2|0]<<16|a[r+3|0]<<24,n[o+4>>2]=e,e=8,t=a[r+12|0]|a[r+13|0]<<8|a[r+14|0]<<16|a[r+15|0]<<24,n[o+8>>2]=a[r+8|0]|a[r+9|0]<<8|a[r+10|0]<<16|a[r+11|0]<<24,n[o+12>>2]=t,r=a[C+4|0]|a[C+5|0]<<8|a[C+6|0]<<16|a[C+7|0]<<24,n[o+96>>2]=a[0|C]|a[C+1|0]<<8|a[C+2|0]<<16|a[C+3|0]<<24,n[o+100>>2]=r;E[(o+96|0)+e|0]=Q,Q=(255&i)<<24|Q>>>8,i=i>>>8|0,16!=(0|(e=e+1|0)););if(!B&g>>>0>63|B>>>0>0)for(;;){for(e=0,QB(o+32|0,o+96|0,o);E[A+e|0]=a[(o+32|0)+e|0]^a[I+e|0],r=1,64!=(0|(e=e+1|0)););for(e=8;C=a[0|(Q=(o+96|0)+e|0)]+r|0,E[0|Q]=C,r=C>>>8|0,16!=(0|(e=e+1|0)););if(I=I- -64|0,A=A- -64|0,B=B+-1|0,(g=g+-64|0)>>>0<4294967232&&(B=B+1|0),!(!B&g>>>0>63|B>>>0>0))break}if(g|B&&(e=0,QB(o+32|0,o+96|0,o),g))for(;E[A+e|0]=a[(o+32|0)+e|0]^a[I+e|0],(0|g)!=(0|(e=e+1|0)););KI(o+32|0,64),KI(o,32)}return D=o+112|0,0},Q[10]=function(A,I,g,B,C){var Q;return A|=0,B|=0,D=Q=D+-64|0,(I|=0)|(g|=0)&&(hA(Q,C|=0),jA(Q,B,0),N(Q,A=eA(A,0,I),A,I,g),KI(Q,64)),D=Q- -64|0,0},Q[11]=function(A,I,g,B,C){var Q;return A|=0,B|=0,D=Q=D+-64|0,(I|=0)|(g|=0)&&(hA(Q,C|=0),iI(Q,B,0),N(Q,A=eA(A,0,I),A,I,g),KI(Q,64)),D=Q- -64|0,0},Q[12]=function(A,I,g,B,C,Q,E,i){var n;return A|=0,I|=0,C|=0,E|=0,i|=0,D=n=D-80|0,(g|=0)|(B|=0)&&(fg(n+8|0,Q|=0),fg(n+12|0,E),hA(n+16|0,i),jA(n+16|0,C,n+8|0),N(n+16|0,I,A,g,B),KI(n+16|0,64)),D=n+80|0,0},Q[13]=function(A,I,g,B,C,Q,E){var i;return A|=0,I|=0,C|=0,E|=0,D=i=D-80|0,(g|=0)|(B|=0)&&(fg(i+12|0,Q|=0),hA(i+16|0,E),iI(i+16|0,C,i+12|0),N(i+16|0,I,A,g,B),KI(i+16|0,64)),D=i+80|0,0},{g:function(){},h:function(A,I,g,B,C,Q,E,i,n,a,r,o){return 0|OA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,r|=0,o|=0)},i:function(A,I,g,B,C,Q,E,i,n,a,r){return 0|kI(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,a|=0,r|=0)},j:function(A,I,g,B,C,Q,E,i,n,a,r,o){return 0|LA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,r|=0,o|=0)},k:function(A,I,g,B,C,Q,E,i,n,a,r){return 0|_I(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,a|=0,r|=0)},l:function(A,I,g,B,C,Q,E,i,n,a,r){return 0|qA(A|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,a|=0,r|=0)},m:function(A,I,g,B,C,Q,E,i,n,a,r){return 0|CI(A|=0,I|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,a|=0,r|=0)},n:function(A,I,g,B,C,Q,E,i,n,a,r){return 0|PA(A|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,a|=0,r|=0)},o:function(A,I,g,B,C,Q,E,i,n,a,r){return 0|gI(A|=0,I|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,a|=0,r|=0)},p:aB,q:function(){return 12},r:yB,s:nB,t:oB,u:CB,v:aB,w:fB,x:yB,y:nB,z:oB,A:CB,B:function(A,I,g,B,C,Q,E,i,n,a,r,o){return 0|$A(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,r|=0,o|=0)},C:function(A,I,g,B,C,Q,E,i,n,a,r){return 0|HI(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,a|=0,r|=0)},D:function(A,I,g,B,C,Q,E,i,n,a,r){return 0|AI(A|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,a|=0,r|=0)},E:function(A,I,g,B,C,Q,E,i,n,a,r){return 0|BI(A|=0,I|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,a|=0,r|=0)},F:aB,G:rB,H:yB,I:nB,J:oB,K:CB,L:aB,M:aB,N:function(A,I,g,B,C){return 0|Eg(A|=0,I|=0,g|=0,B|=0,C|=0)},O:function(A,I,g,B,C){return 0|function(A,I,g,B,C){var Q;return D=Q=D-32|0,Eg(Q,I,g,B,C),I=$g(A,Q),g=hI(Q,A,32),D=Q+32|0,g|((0|A)==(0|Q)?-1:I)}(A|=0,I|=0,g|=0,B|=0,C|=0)},P:CB,Q:aB,R:aB,S:aB,T:aB,U:rB,V:nB,W:oB,X:function(A,I,g){return 0|function(A,I,g){var B,C=0;return D=B=D+-64|0,ig(B,g,32,0),g=n[B+28>>2],C=n[B+24>>2],E[I+24|0]=C,E[I+25|0]=C>>>8,E[I+26|0]=C>>>16,E[I+27|0]=C>>>24,E[I+28|0]=g,E[I+29|0]=g>>>8,E[I+30|0]=g>>>16,E[I+31|0]=g>>>24,g=n[B+20>>2],C=n[B+16>>2],E[I+16|0]=C,E[I+17|0]=C>>>8,E[I+18|0]=C>>>16,E[I+19|0]=C>>>24,E[I+20|0]=g,E[I+21|0]=g>>>8,E[I+22|0]=g>>>16,E[I+23|0]=g>>>24,g=n[B+12>>2],C=n[B+8>>2],E[I+8|0]=C,E[I+9|0]=C>>>8,E[I+10|0]=C>>>16,E[I+11|0]=C>>>24,E[I+12|0]=g,E[I+13|0]=g>>>8,E[I+14|0]=g>>>16,E[I+15|0]=g>>>24,g=n[B+4>>2],C=n[B>>2],E[0|I]=C,E[I+1|0]=C>>>8,E[I+2|0]=C>>>16,E[I+3|0]=C>>>24,E[I+4|0]=g,E[I+5|0]=g>>>8,E[I+6|0]=g>>>16,E[I+7|0]=g>>>24,KI(B,64),A=qg(A,I),D=B- -64|0,A}(A|=0,I|=0,g|=0)},Y:Yg,Z:lg,_:function(A,I,g,B,C,Q,E){return 0|Ug(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0)},$:function(A,I,g,B,C,Q,E,i){return 0|TI(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0)},aa:function(A,I,g,B,C,Q){return 0|function(A,I,g,B,C,Q){return!B&g>>>0>=4294967280|B>>>0>0&&(Gg(),t()),Ug(A+16|0,A,I,g,B,C,Q)}(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},ba:function(A,I,g,B,C,Q,E){return 0|$I(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0)},ca:function(A,I,g,B,C,Q,E){return 0|vg(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0)},da:function(A,I,g,B,C,Q,E,i){return 0|WI(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0)},ea:function(A,I,g,B,C,Q){return 0|function(A,I,g,B,C,Q){var E=0,i=0,n=0;return!B&g>>>0>=16|B>>>0>0?(E=A,i=I+16|0,n=I,A=B+-1|0,(I=g+-16|0)>>>0<4294967280&&(A=A+1|0),A=vg(E,i,n,I,A,C,Q)):A=-1,A}(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},fa:function(A,I,g,B,C,Q,E){return 0|GI(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0)},ga:function(A,I,g,B,C){return 0|iA(A|=0,I|=0,g|=0,B|=0,C|=0)},ha:function(A,I,g,B,C,Q){return 0|function(A,I,g,B,C,Q){var E,i=0;return D=E=D-32|0,i=-1,!B&g>>>0>=48|B>>>0>0&&(OI(E,I,C),C=A,A=B+-1|0,(g=g+-32|0)>>>0<4294967264&&(A=A+1|0),i=GI(C,i=I+32|0,g,A,E,I,Q)),D=E+32|0,i}(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},ia:function(){return 48},ja:nB,ka:eB,la:aB,ma:nB,na:eB,oa:aB,pa:function(){return 384},qa:function(A,I,g,B,C,Q,E){return 0|Sg(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0)},ra:wg,sa:function(A,I,g,B){return 0|Xg(A|=0,I|=0,g|=0,B|=0)},ta:pg,ua:CB,va:eB,wa:function(A,I,g,B){return 0|ig(A|=0,I|=0,g|=0,B|=0)},xa:nB,ya:eB,za:fB,Aa:aB,Ba:function(A,I,g,B,C,Q){return 0|xA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},Ca:CB,Da:function(A,I,g){return A|=0,Sg(I|=0,32,g|=0,32,0,0,0),0|Mg(A,I)},Ea:function(A,I){return A|=0,qI(I|=0,32),0|Mg(A,I)},Fa:function(A,I,g,B,C){I|=0,g|=0,C|=0;var Q,i,n=0;if(i=n=D,D=n=n-512&-64,Q=(A|=0)||I){if(A=-1,!Fg(n+96|0,B|=0,C)){for(I=I||Q,A=0,wg(n+128|0,0,0,64),Xg(n+128|0,n+96|0,32,0),KI(n+96|0,32),Xg(n+128|0,g,32,0),Xg(n+128|0,C,32,0),pg(n+128|0,n+32|0,64),KI(n+128|0,384);g=(n+32|0)+A|0,E[A+Q|0]=a[0|g],E[A+I|0]=a[g+32|0],32!=(0|(A=A+1|0)););KI(n+32|0,64),A=0}return D=i,0|A}Gg(),t()},Ga:function(A,I,g,B,C){I|=0,g|=0,C|=0;var Q,i,n=0;if(i=n=D,D=n=n-512&-64,Q=(A|=0)||I){if(A=-1,!Fg(n+96|0,B|=0,C)){for(I=I||Q,A=0,wg(n+128|0,0,0,64),Xg(n+128|0,n+96|0,32,0),KI(n+96|0,32),Xg(n+128|0,C,32,0),Xg(n+128|0,g,32,0),pg(n+128|0,n+32|0,64),KI(n+128|0,384);g=(n+32|0)+A|0,E[A+I|0]=a[0|g],E[A+Q|0]=a[g+32|0],32!=(0|(A=A+1|0)););KI(n+32|0,64),A=0}return D=i,0|A}Gg(),t()},Ha:aB,Ia:aB,Ja:aB,Ka:aB,La:tB,Ma:cB,Na:cB,Oa:nB,Pa:sB,Qa:yB,Ra:sB,Sa:nB,Ta:function(){return 128},Ua:function(){return 35681},Va:tB,Wa:sB,Xa:function(){return 8192},Ya:function(){return-2147483648},Za:cB,_a:function(){return 67108864},$a:wB,ab:function(){return 268435456},bb:function(){return 4},cb:function(){return 1073741824},db:function(A,I,g,B,C,Q,E,i,n,a,r){return 0|UI(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,a|=0,r|=0)},eb:function(A,I,g,B,C,Q,E){return 0|nI(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0)},fb:function(A,I,g,B,C,Q,E,i){return 0|function(A,I,g,B,C,Q,E,i){switch(i+-1|0){case 1:return nI(A,I,g,B,C,Q,E);default:Gg(),t();case 0:}return EI(A,I,g,B,C,Q,E)}(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0)},gb:function(A,I,g,B){return 0|function(A,I,g,B){return eI(A,35681,10)?eI(A,35692,9)?(n[8960]=28,-1):function(A,I,g,B){A:{if(1==(0|B)&g>>>0>=0|B>>>0>1)n[8960]=22;else{if(!(A=lA(A,I,g,1)))break A;-35==(0|A)&&(n[8960]=28)}A=-1}return A}(A,I,g,B):function(A,I,g,B){A:{if(1==(0|B)&g>>>0>=0|B>>>0>1)n[8960]=22;else{if(!(A=lA(A,I,g,2)))break A;-35==(0|A)&&(n[8960]=28)}A=-1}return A}(A,I,g,B)}(A|=0,I|=0,g|=0,B|=0)},hb:function(A,I,g,B){return 0|function(A,I,g,B){return eI(A,35681,10)?eI(A,35692,9)?(n[8960]=28,-1):RA(A,I,g,B,1):RA(A,I,g,B,2)}(A|=0,I|=0,g|=0,B|=0)},ib:Mg,jb:Fg,kb:aB,lb:aB,mb:aB,nb:rB,ob:nB,pb:oB,qb:CB,rb:Ug,sb:function(A,I,g,B,C,Q){return 0|function(A,I,g,B,C,Q){return!B&g>>>0>=4294967280|B>>>0>0&&(Gg(),t()),fA(A+16|0,A,I,g,B,C,Q),0}(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},tb:vg,ub:function(A,I,g,B,C,Q){return 0|function(A,I,g,B,C,Q){var E=0,i=0,n=0;return!B&g>>>0>=16|B>>>0>0?(E=A,i=I+16|0,n=I,A=B+-1|0,(I=g+-16|0)>>>0<4294967280&&(A=A+1|0),A=yA(E,i,n,I,A,C,Q)):A=-1,A}(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},vb:CB,wb:function(A,I,g){return A|=0,g|=0,qI(I|=0,24),K(A,I,g),hg(A),g=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,I=a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24,E[A+44|0]=0,E[A+45|0]=0,E[A+46|0]=0,E[A+47|0]=0,E[A+48|0]=0,E[A+49|0]=0,E[A+50|0]=0,E[A+51|0]=0,E[A+36|0]=g,E[A+37|0]=g>>>8,E[A+38|0]=g>>>16,E[A+39|0]=g>>>24,E[A+40|0]=I,E[A+41|0]=I>>>8,E[A+42|0]=I>>>16,E[A+43|0]=I>>>24,0},xb:function(A,I,g){return K(A|=0,I|=0,g|=0),hg(A),g=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,I=a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24,E[A+44|0]=0,E[A+45|0]=0,E[A+46|0]=0,E[A+47|0]=0,E[A+48|0]=0,E[A+49|0]=0,E[A+50|0]=0,E[A+51|0]=0,E[A+36|0]=g,E[A+37|0]=g>>>8,E[A+38|0]=g>>>16,E[A+39|0]=g>>>24,E[A+40|0]=I,E[A+41|0]=I>>>8,E[A+42|0]=I>>>16,E[A+43|0]=I>>>24,0},yb:q,zb:function(A,I,g,B,C,Q,E,i,n,a){return 0|cA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,a|=0)},Ab:function(A,I,g,B,C,Q,E,i,n,a){return 0|BA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0,E|=0,i|=0,n|=0,a|=0)},Bb:function(){return 52},Cb:function(){return 17},Db:rB,Eb:aB,Fb:function(){return-18},Gb:yB,Hb:tB,Ib:cB,Jb:wB,Kb:fB,Lb:nB,Mb:function(A,I,g,B,C){return 0|function(A,I,g,B){var C=0,Q=0,E=0,i=0,n=0,r=0,o=0,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0,D=0,u=0;if(E=1886610805^(Q=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24),i=1936682341^(C=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24),r=1852142177^Q,o=1819895653^C,C=1852075885^(Q=a[B+8|0]|a[B+9|0]<<8|a[B+10|0]<<16|a[B+11|0]<<24),n=1685025377^(B=a[B+12|0]|a[B+13|0]<<8|a[B+14|0]<<16|a[B+15|0]<<24),t=2037671283^Q,e=1952801890^B,(0|(Q=(I+g|0)-(w=7&g)|0))!=(0|I)){for(;c=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,y=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,f=Wg(C,n,13),B=i+n|0,s=l,(C=C+E|0)>>>0<E>>>0&&(B=B+1|0),E=B,h=Wg(C,B,32),D=l,t=Wg(i=t^c,B=e^y,16),B=B+o|0,(n=i+r|0)>>>0<i>>>0&&(B=B+1|0),i=n^t,t=r=B^(e=l),r=Wg(i,r,21),e=l,o=E^=s,E=Wg(C^=f,E,17),f=l,B=B+o|0,(C=C+n|0)>>>0<n>>>0&&(B=B+1|0),o=Wg(C,B,32),s=l,u=Wg(n=C^E,f^=B,13),B=t+D|0,(C=i+h|0)>>>0<i>>>0&&(B=B+1|0),B=f+(E=B)|0,h=l,(f=C+n|0)>>>0<C>>>0&&(B=B+1|0),n=B,i=Wg(f,B,32),t=l,e=Wg(C^=r,B=E^e,16),B=B+s|0,(r=C+o|0)>>>0<o>>>0&&(B=B+1|0),B=(o=(C=B)^l)+t|0,(E=i+(e=t=r^e)|0)>>>0<e>>>0&&(B=B+1|0),t=Wg(t,o,21)^E,i=B,e=B^l,f=Wg(o=f^u,B=n^h,17),B=C+B|0,(o=o+r|0)>>>0<r>>>0&&(B=B+1|0),C=o^f,n=B^(s=l),E^=c,i^=y,r=Wg(o,B,32),o=l,(0|Q)!=(0|(I=I+8|0)););I=Q}switch(Q=g<<24,g=0,w+-1|0){case 6:Q|=a[I+6|0]<<16;case 5:Q|=a[I+5|0]<<8;case 4:Q|=a[I+4|0];case 3:B=(g=a[I+3|0])>>>8|0,g<<=24,Q|=B;case 2:g|=(B=a[I+2|0])<<16,Q|=c=B>>>16|0;case 1:g|=(B=a[I+1|0])<<8,Q|=c=B>>>24|0;case 0:g=a[0|I]|g}return c=Wg(C,n,13),B=i+n|0,i=l,(I=C+E|0)>>>0<E>>>0&&(B=B+1|0),C=B,y=Wg(I,B,32),f=l,t=Wg(n=g^t,B=Q^e,16),B=B+o|0,(E=n+r|0)>>>0<n>>>0&&(B=B+1|0),o=r=B^(e=l),t=Wg(n=E^t,r,21),e=l,i=C^=i,C=Wg(I^=c,C,17),r=l,B=B+i|0,(I=I+E|0)>>>0<E>>>0&&(B=B+1|0),i=Wg(I,B,32),c=l,w=Wg(E=I^C,r^=B,13),B=o+f|0,(I=n+y|0)>>>0<n>>>0&&(B=B+1|0),B=r+(C=B)|0,o=l,(E=I+E|0)>>>0<I>>>0&&(B=B+1|0),n=B,r=Wg(E,B,32),y=l,t=Wg(I^=t,B=C^e,16),B=B+c|0,(I=I+i|0)>>>0<i>>>0&&(B=B+1|0),C=I^t,t=i=B^(e=l),i=Wg(C,i,21),e=l,o=n^=o,n=Wg(E^=w,n,17),c=l,B=B+o|0,(E=I+E|0)>>>0<I>>>0&&(B=B+1|0),o=Wg(E,B,32),f=l,n=Wg(E^=n,I=B^c,13),B=t+y|0,B=(t=I)+(Q^(I=(C=C+r|0)>>>0<r>>>0?B+1|0:B))|0,r=l,(g=E+(Q=g^C)|0)>>>0<Q>>>0&&(B=B+1|0),Q=B,E=Wg(g,B,32),t=l,i=Wg(C^=i,B=I^=e,16),B=B+f|0,(I=C+(255^o)|0)>>>0<C>>>0&&(B=B+1|0),C=I^i,o=i=B^(e=l),i=Wg(C,i,21),e=l,r=Q^=r,Q=Wg(g^=n,Q,17),n=l,B=B+r|0,(g=I+g|0)>>>0<I>>>0&&(B=B+1|0),r=Wg(g,B,32),c=l,n=Wg(g^=Q,I=B^n,13),B=o+t|0,B=(Q=I)+(I=(C=C+E|0)>>>0<E>>>0?B+1|0:B)|0,o=l,(g=g+C|0)>>>0<C>>>0&&(B=B+1|0),Q=B,E=Wg(g,B,32),t=l,i=Wg(C^=i,B=I^=e,16),B=B+c|0,(I=C+r|0)>>>0<C>>>0&&(B=B+1|0),C=I^i,r=i=B^(e=l),i=Wg(C,i,21),e=l,o=Q^=o,Q=Wg(g^=n,Q,17),n=l,B=B+o|0,(g=I+g|0)>>>0<I>>>0&&(B=B+1|0),o=Wg(g,B,32),c=l,n=Wg(g^=Q,Q=B^n,13),B=r+t|0,B=Q+(I=(C=C+E|0)>>>0<E>>>0?B+1|0:B)|0,r=l,(g=g+C|0)>>>0<C>>>0&&(B=B+1|0),Q=B,E=Wg(g,B,32),t=l,i=Wg(C^=i,B=I^=e,16),B=B+c|0,(I=C+o|0)>>>0<C>>>0&&(B=B+1|0),C=I^i,o=i=B^(e=l),i=Wg(C,i,21),e=l,r=Q^=r,Q=Wg(g^=n,Q,17),n=l,B=B+r|0,(g=I+g|0)>>>0<I>>>0&&(B=B+1|0),r=Wg(g,B,32),c=l,n=I=B^n,f=Wg(y=g^Q,I,13),B=o+t|0,(I=C+E|0)>>>0<E>>>0&&(B=B+1|0),E=l,Q=B,i=Wg(C=I^i,B=g=e^B,16),B=B+c|0,(g=C+r|0)>>>0<C>>>0&&(B=B+1|0),C=B,i=Wg(g^i,B^(o=l),21),B=Q+n|0,(Q=I+y|0)>>>0<I>>>0&&(B=B+1|0),B=C+(E^=B)|0,(I=(Q^=f)+g|0)>>>0<g>>>0&&(B=B+1|0),g=l,Q=Wg(Q,E,17)^I^i,g=l^g^B,LI(A,Wg(I,B,32)^Q,l^g),0}(A|=0,I|=0,g|=0,C|=0)},Nb:function(A){qI(A|=0,16)},Ob:function(){return 208},Pb:eB,Qb:aB,Rb:aB,Sb:eB,Tb:function(){return-65},Ub:function(A,I,g){return 0|M(A|=0,I|=0,g|=0)},Vb:function(A,I){return 0|function(A,I){var g;return D=g=D-32|0,qI(g,32),M(A,I,g),KI(g,32),D=g+32|0,0}(A|=0,I|=0)},Wb:function(A,I,g,B,C,Q){return 0|QI(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},Xb:function(A,I,g,B,C,Q){return 0|KA(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},Yb:function(A,I,g,B,C,Q){return 0|mg(A|=0,I|=0,g|=0,B|=0,C|=0,Q|=0)},Zb:function(A,I,g,B,C){return 0|Rg(A|=0,I|=0,g|=0,B|=0,C|=0)},_b:function(A){return rg(A|=0),0},$b:function(A,I,g,B){return 0|W(A|=0,I|=0,g|=0,B|=0)},ac:function(A,I,g,B){return 0|function(A,I,g,B){var C;return D=C=D+-64|0,ag(A,C),A=V(I,g,C,64,0,B,1),D=C- -64|0,A}(A|=0,I|=0,g|=0,B|=0)},bc:function(A,I,g){return 0|function(A,I,g){var B;return D=B=D+-64|0,ag(A,B),A=MA(I,B,64,0,g,1),D=B- -64|0,A}(A|=0,I|=0,g|=0)},cc:function(A,I){A|=0;var g,B=0;return D=g=D-256|0,B=-1,UA(I|=0)||FA(g+96|0,I)||function(A){var I;return D=I=D-160|0,CA(I,A),A=tg(I),D=I+160|0,A}(g+96|0)&&(Vg(g),_A(g,g,I=g+136|0),Vg(g+48|0),HA(g+48|0,g+48|0,I),O(g,g),H(g+48|0,g+48|0,g),oA(A,g+48|0),B=0),D=g+256|0,0|B},dc:function(A,I){A|=0;var g,B=0;return D=g=D+-64|0,ig(g,I|=0,32,0),E[0|g]=248&a[0|g],E[g+31|0]=63&a[g+31|0]|64,I=n[g+20>>2],B=n[g+16>>2],E[A+16|0]=B,E[A+17|0]=B>>>8,E[A+18|0]=B>>>16,E[A+19|0]=B>>>24,E[A+20|0]=I,E[A+21|0]=I>>>8,E[A+22|0]=I>>>16,E[A+23|0]=I>>>24,I=n[g+12>>2],B=n[g+8>>2],E[A+8|0]=B,E[A+9|0]=B>>>8,E[A+10|0]=B>>>16,E[A+11|0]=B>>>24,E[A+12|0]=I,E[A+13|0]=I>>>8,E[A+14|0]=I>>>16,E[A+15|0]=I>>>24,I=n[g+4>>2],B=n[g>>2],E[0|A]=B,E[A+1|0]=B>>>8,E[A+2|0]=B>>>16,E[A+3|0]=B>>>24,E[A+4|0]=I,E[A+5|0]=I>>>8,E[A+6|0]=I>>>16,E[A+7|0]=I>>>24,I=n[g+28>>2],B=n[g+24>>2],E[A+24|0]=B,E[A+25|0]=B>>>8,E[A+26|0]=B>>>16,E[A+27|0]=B>>>24,E[A+28|0]=I,E[A+29|0]=I>>>8,E[A+30|0]=I>>>16,E[A+31|0]=I>>>24,KI(g,64),D=g- -64|0,0},ec:Qg,fc:eg,gc:function(A){var I=0,g=0;if((A|=0)>>>0>=2){for(g=(0-A>>>0)%(A>>>0)|0;(I=Qg())>>>0<g>>>0;);A=(I>>>0)%(A>>>0)|0}else A=0;return 0|A},hc:qI,ic:function(A,I,g){IB(A|=0,I|=0,1784,g|=0)},jc:aB,kc:function(){var A=0,I=0;return(A=n[9097])&&(A=n[A+20>>2])&&(I=0|Q[0|A]()),0|I},lc:function(A,I,g){!function(A,I,g){1==(0|g)&I>>>0>=0|g>>>0>1&&(c(1796,1816,197,1842),t()),qI(A,I)}(A|=0,I|=0,g|=0)},mc:function(A,I,g,B){A|=0,g|=0;var C=0,Q=0,i=0;if(!((B|=0)>>>0>2147483646|B<<1>>>0>=(I|=0)>>>0)){if(I=0,B){for(;C=I<<1,Q=(i=a[I+g|0])>>>4|0,E[C+A|0]=87+(Q+(Q+65526>>>8&217)|0),Q=(1|C)+A|0,C=15&i,E[0|Q]=22272+((C<<8)+(C+65526&55552)|0)>>>8,(0|B)!=(0|(I=I+1|0)););I=B<<1}else I=0;return E[I+A|0]=0,0|A}Gg(),t()},nc:function(A,I,g,B,C,Q,i){A|=0,I|=0,g|=0,C|=0,Q|=0,i|=0;var r=0,o=0,e=0,t=0,c=0,f=0,y=0,s=0,w=0,h=0,D=0;A:if(B|=0){I:{g:{B:for(;;){for(o=r;;){C:{if(!(255&((w=(65526+(y=(223&(f=a[g+o|0]))-55&255)^y+65520)>>>8|0)|(e=65526+(h=48^f)>>>8|0)))){if(e=1,!C|255&c)break g;if(bg(C,f))break C;r=o;break A}if(t>>>0>=I>>>0){n[8960]=68,e=0;break g}if(r=y&w|e&h,255&c?(E[A+t|0]=r|D,t=t+1|0):D=r<<4,c^=-1,e=1,(r=o+1|0)>>>0<B>>>0)continue B;break I}if(c=0,!((o=o+1|0)>>>0<B>>>0))break}break}r=(A=r+1|0)>>>0<B>>>0?B:A;break A}r=o}255&c?(n[8960]=28,s=-1,r=r+-1|0,t=0):e||(t=0,s=-1)}return i?n[i>>2]=g+r:(0|B)!=(0|r)&&(n[8960]=28,s=-1),Q&&(n[Q>>2]=t),0|s},oc:function(A,I){var g;return A|=0,Zg(I|=0),A=o(g=(A>>>0)/3|0,-3)+A|0,o(4-(3-A&0-(I>>>1&1))|0,1&(A|A>>>1))+(g<<2|1)|0},pc:AA,qc:Z,rc:function(){var A=0;return n[9104]?A=1:(n[9086]=0,function(){var A;D=A=D-16|0,Dg(A),n[A>>2]&&(Dg(A),eA(36348,0,40)),D=A+16|0}(),n[9085]=1,eg(),function(){var A=0;(0|(A=0|s(30)))>=1?n[8943]=A:A=n[8943],A>>>0<=15&&(Gg(),t()),qI(36400,16)}(),n[9104]=1,A=0),0|A},sc:function(A,I,g,B,C){A|=0,I|=0,g|=0,C|=0;var Q,i=0,r=0,o=0;D=Q=D-16|0;A:{if(B|=0){if(o=-1,(i=(i=B+-1|0)-(r=i&B?(g>>>0)%(B>>>0)|0:g&i)|0)>>>0>=(-1^g)>>>0)break A;if(!((g=g+i|0)>>>0>=C>>>0))for(A&&(n[A>>2]=g+1),A=I+g|0,o=0,E[Q+15|0]=0,I=B>>>0>1?B:1,B=0;C=g=A-B|0,r=a[0|g]&a[Q+15|0],g=(B^i)-1>>>24|0,E[0|C]=r|128&g,E[Q+15|0]=g|a[Q+15|0],(0|I)!=(0|(B=B+1|0)););}else o=-1;return D=Q+16|0,0|o}Gg(),t()},tc:function(A,I,g,B){A|=0,I|=0,g|=0,B|=0;var C,Q=0,E=0,i=0,r=0,o=0;if(n[12+(C=D-16|0)>>2]=0,B+-1>>>0<g>>>0){for(o=(Q=g+-1|0)+I|0,g=0,I=0;r=((128^(E=a[o-g|0]))-1&n[C+12>>2]+-1&i+-1)>>>8&1,n[C+12>>2]=n[C+12>>2]|0-r&g,I|=r,i|=E,(0|B)!=(0|(g=g+1|0)););n[A>>2]=Q-n[C+12>>2],A=I+-1|0}else A=-1;return 0|A},uc:function(){return 35762},vc:function(){return 10},wc:wB,xc:tB,yc:function(){return 35840},zc:_,Ac:v,Bc:function(I){return 0|function(I){I|=0;var g=0|hB(),Q=g+I|0;if(g<Q&&Q<65536){var e=new ArrayBuffer(o(Q,65536)),t=new A.Int8Array(e);t.set(E),E=t,E=new A.Int8Array(e),i=new A.Int16Array(e),n=new A.Int32Array(e),a=new A.Uint8Array(e),new A.Uint16Array(e),r=new A.Uint32Array(e),new A.Float32Array(e),new A.Float64Array(e),B=e,C.buffer=e}return g}(0|(I|=0))}}}({Int8Array:Int8Array,Int16Array:Int16Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array,NaN:NaN,Infinity:1/0,Math:Math},A,I.buffer)}(RA,s,u)},instantiate:function(A,I){return{then:function(I){var g=new w.Module(A);I({instance:new w.Instance(g)})}}},RuntimeError:Error};function h(A,I,g,B){switch("*"===(g=g||"i8").charAt(g.length-1)&&(g="i32"),g){case"i1":case"i8":H[A>>0]=I;break;case"i16":b[A>>1]=I;break;case"i32":m[A>>2]=I;break;case"i64":tA=[I>>>0,(eA=I,+O(eA)>=1?eA>0?(0|AA(+$(eA/4294967296),4294967295))>>>0:~~+z((eA-+(~~eA>>>0))/4294967296)>>>0:0)],m[A>>2]=tA[0],m[A+4>>2]=tA[1];break;case"float":U[A>>2]=I;break;case"double":v[A>>3]=I;break;default:EA("invalid type for setValue: "+g)}}function D(A,I,g){switch("*"===(I=I||"i8").charAt(I.length-1)&&(I="i32"),I){case"i1":case"i8":return H[A>>0];case"i16":return b[A>>1];case"i32":case"i64":return m[A>>2];case"float":return U[A>>2];case"double":return v[A>>3];default:EA("invalid type for getValue: "+I)}return null}f=[],"object"!=typeof w&&EA("no native wasm support detected");var u=new w.Table({initial:14,maximum:22,element:"anyfunc"}),p=!1;function l(A,I){A||EA("Assertion failed: "+I)}var F="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function G(A,I,g){for(var B=I+g,C=I;A[C]&&!(C>=B);)++C;if(C-I>16&&A.subarray&&F)return F.decode(A.subarray(I,C));for(var Q="";I<C;){var E=A[I++];if(128&E){var i=63&A[I++];if(192!=(224&E)){var n=63&A[I++];if((E=224==(240&E)?(15&E)<<12|i<<6|n:(7&E)<<18|i<<12|n<<6|63&A[I++])<65536)Q+=String.fromCharCode(E);else{var a=E-65536;Q+=String.fromCharCode(55296|a>>10,56320|1023&a)}}else Q+=String.fromCharCode((31&E)<<6|i)}else Q+=String.fromCharCode(E)}return Q}function k(A,I){return A?G(Y,A,I):""}var _,H,Y,b,m,U,v,S=65536;function N(A,I){return A%I>0&&(A+=I-A%I),A}function R(A){_=A,I.HEAP8=H=new Int8Array(A),I.HEAP16=b=new Int16Array(A),I.HEAP32=m=new Int32Array(A),I.HEAPU8=Y=new Uint8Array(A),I.HEAPU16=new Uint16Array(A),I.HEAPU32=new Uint32Array(A),I.HEAPF32=U=new Float32Array(A),I.HEAPF64=v=new Float64Array(A)}var M=5279472,d=36432,P=I.INITIAL_MEMORY||16777216;function J(A){for(;A.length>0;){var g=A.shift();if("function"!=typeof g){var B=g.func;"number"==typeof B?void 0===g.arg?I.dynCall_v(B):I.dynCall_vi(B,g.arg):B(void 0===g.arg?null:g.arg)}else g(I)}}(s=I.wasmMemory?I.wasmMemory:new w.Memory({initial:P/S,maximum:2147483648/S}))&&(_=s.buffer),P=_.byteLength,R(_),m[d>>2]=M;var x=[],L=[],K=[],q=[];function X(){if(I.preRun)for("function"==typeof I.preRun&&(I.preRun=[I.preRun]);I.preRun.length;)j(I.preRun.shift());J(x)}function V(){J(L)}function T(){J(K)}function W(){if(I.postRun)for("function"==typeof I.postRun&&(I.postRun=[I.postRun]);I.postRun.length;)Z(I.postRun.shift());J(q)}function j(A){x.unshift(A)}function Z(A){q.unshift(A)}var O=Math.abs,z=Math.ceil,$=Math.floor,AA=Math.min,IA=0,gA=null,BA=null;function CA(A){IA++,I.monitorRunDependencies&&I.monitorRunDependencies(IA)}function QA(A){if(IA--,I.monitorRunDependencies&&I.monitorRunDependencies(IA),0==IA&&(null!==gA&&(clearInterval(gA),gA=null),BA)){var g=BA;BA=null,g()}}function EA(A){throw I.onAbort&&I.onAbort(A),y(A+=""),p=!0,A="abort("+A+"). Build with -s ASSERTIONS=1 for more info.",new w.RuntimeError(A)}function iA(A,I){return String.prototype.startsWith?A.startsWith(I):0===A.indexOf(I)}I.preloadedImages={},I.preloadedAudios={};var nA="data:application/octet-stream;base64,";function aA(A){return iA(A,nA)}var rA="file://";function oA(A){return iA(A,rA)}var eA,tA,cA="";function fA(){try{if(f)return new Uint8Array(f);var A=SA(cA);if(A)return A;if(r)return r(cA);throw"both async and sync fetching of the wasm failed"}catch(A){EA(A)}}function yA(){return f||!Q&&!E||"function"!=typeof fetch||oA(cA)?new Promise((function(A,I){A(fA())})):fetch(cA,{credentials:"same-origin"}).then((function(A){if(!A.ok)throw"failed to load wasm binary file at '"+cA+"'";return A.arrayBuffer()})).catch((function(){return fA()}))}function sA(){var A={a:RA};function g(A,g){var B=A.exports;I.asm=B,QA()}function B(A){g(A.instance)}function C(I){return yA().then((function(I){return w.instantiate(I,A)})).then(I,(function(A){y("failed to asynchronously prepare wasm: "+A),EA(A)}))}if(CA(),I.instantiateWasm)try{return I.instantiateWasm(A,g)}catch(A){return y("Module.instantiateWasm callback failed with error: "+A),!1}return function(){if(f||"function"!=typeof w.instantiateStreaming||aA(cA)||oA(cA)||"function"!=typeof fetch)return C(B);fetch(cA,{credentials:"same-origin"}).then((function(I){return w.instantiateStreaming(I,A).then(B,(function(A){return y("wasm streaming compile failed: "+A),y("falling back to ArrayBuffer instantiation"),C(B)}))}))}(),{}}aA(cA)||(cA=c(cA));var wA={1024:function(){return I.getRandomValue()},1062:function(){if(void 0===I.getRandomValue)try{var A="object"==typeof window?window:self,g=void 0!==A.crypto?A.crypto:A.msCrypto,B=function(){var A=new Uint32Array(1);return g.getRandomValues(A),A[0]>>>0};B(),I.getRandomValue=B}catch(A){try{var C=require("crypto"),Q=function(){var A=C.randomBytes(4);return(A[0]<<24|A[1]<<16|A[2]<<8|A[3])>>>0};Q(),I.getRandomValue=Q}catch(A){throw"No secure random number generator found"}}}};function hA(A,I,g){var B=YA(I,g);return wA[A].apply(null,B)}function DA(A,I,g,B){EA("Assertion failed: "+k(A)+", at: "+[I?k(I):"unknown filename",g,B?k(B):"unknown function"])}function uA(){EA()}function pA(A,I,g){Y.copyWithin(A,I,I+g)}function lA(){return Y.length}function FA(A){try{return s.grow(A-_.byteLength+65535>>>16),R(s.buffer),1}catch(A){}}function GA(A){A>>>=0;var I=lA();if(A>2147483648)return!1;for(var g=1;g<=4;g*=2){var B=I*(1+.2/g);if(B=Math.min(B,A+100663296),FA(Math.min(2147483648,N(Math.max(16777216,A,B),65536))))return!0}return!1}function kA(A){return m[dA()>>2]=A,A}function _A(A){switch(A){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:case 79:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"==typeof navigator&&navigator.hardwareConcurrency||1}return kA(28),-1}L.push({func:function(){MA()}});var HA=[];function YA(A,I){var g;for(HA.length=0,I>>=2;g=Y[A++];){var B=g<105;B&&1&I&&I++,HA.push(B?v[I++>>1]:m[I]),++I}return HA}var bA=!1;function mA(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(bA&&l(!1,"Character code "+B+" ("+String.fromCharCode(B)+")  at offset "+g+" not in 0x00-0xFF."),B&=255),I.push(String.fromCharCode(B))}return I.join("")}var UA="function"==typeof atob?atob:function(A){var I,g,B,C,Q,E,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",n="",a=0;A=A.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{I=i.indexOf(A.charAt(a++))<<2|(C=i.indexOf(A.charAt(a++)))>>4,g=(15&C)<<4|(Q=i.indexOf(A.charAt(a++)))>>2,B=(3&Q)<<6|(E=i.indexOf(A.charAt(a++))),n+=String.fromCharCode(I),64!==Q&&(n+=String.fromCharCode(g)),64!==E&&(n+=String.fromCharCode(B))}while(a<A.length);return n};function vA(A){if("boolean"==typeof i&&i){var I;try{I=Buffer.from(A,"base64")}catch(g){I=new Buffer(A,"base64")}return new Uint8Array(I.buffer,I.byteOffset,I.byteLength)}try{for(var g=UA(A),B=new Uint8Array(g.length),C=0;C<g.length;++C)B[C]=g.charCodeAt(C);return B}catch(A){throw new Error("Converting base64 string to bytes failed.")}}function SA(A){if(aA(A))return vA(A.slice(nA.length))}var NA,RA={a:DA,c:uA,b:hA,e:pA,f:GA,memory:s,d:_A,table:u},MA=(sA(),I.___wasm_call_ctors=function(){return(MA=I.___wasm_call_ctors=I.asm.g).apply(null,arguments)}),dA=(I._crypto_aead_chacha20poly1305_encrypt_detached=function(){return(I._crypto_aead_chacha20poly1305_encrypt_detached=I.asm.h).apply(null,arguments)},I._crypto_aead_chacha20poly1305_encrypt=function(){return(I._crypto_aead_chacha20poly1305_encrypt=I.asm.i).apply(null,arguments)},I._crypto_aead_chacha20poly1305_ietf_encrypt_detached=function(){return(I._crypto_aead_chacha20poly1305_ietf_encrypt_detached=I.asm.j).apply(null,arguments)},I._crypto_aead_chacha20poly1305_ietf_encrypt=function(){return(I._crypto_aead_chacha20poly1305_ietf_encrypt=I.asm.k).apply(null,arguments)},I._crypto_aead_chacha20poly1305_decrypt_detached=function(){return(I._crypto_aead_chacha20poly1305_decrypt_detached=I.asm.l).apply(null,arguments)},I._crypto_aead_chacha20poly1305_decrypt=function(){return(I._crypto_aead_chacha20poly1305_decrypt=I.asm.m).apply(null,arguments)},I._crypto_aead_chacha20poly1305_ietf_decrypt_detached=function(){return(I._crypto_aead_chacha20poly1305_ietf_decrypt_detached=I.asm.n).apply(null,arguments)},I._crypto_aead_chacha20poly1305_ietf_decrypt=function(){return(I._crypto_aead_chacha20poly1305_ietf_decrypt=I.asm.o).apply(null,arguments)},I._crypto_aead_chacha20poly1305_ietf_keybytes=function(){return(I._crypto_aead_chacha20poly1305_ietf_keybytes=I.asm.p).apply(null,arguments)},I._crypto_aead_chacha20poly1305_ietf_npubbytes=function(){return(I._crypto_aead_chacha20poly1305_ietf_npubbytes=I.asm.q).apply(null,arguments)},I._crypto_aead_chacha20poly1305_ietf_nsecbytes=function(){return(I._crypto_aead_chacha20poly1305_ietf_nsecbytes=I.asm.r).apply(null,arguments)},I._crypto_aead_chacha20poly1305_ietf_abytes=function(){return(I._crypto_aead_chacha20poly1305_ietf_abytes=I.asm.s).apply(null,arguments)},I._crypto_aead_chacha20poly1305_ietf_messagebytes_max=function(){return(I._crypto_aead_chacha20poly1305_ietf_messagebytes_max=I.asm.t).apply(null,arguments)},I._crypto_aead_chacha20poly1305_ietf_keygen=function(){return(I._crypto_aead_chacha20poly1305_ietf_keygen=I.asm.u).apply(null,arguments)},I._crypto_aead_chacha20poly1305_keybytes=function(){return(I._crypto_aead_chacha20poly1305_keybytes=I.asm.v).apply(null,arguments)},I._crypto_aead_chacha20poly1305_npubbytes=function(){return(I._crypto_aead_chacha20poly1305_npubbytes=I.asm.w).apply(null,arguments)},I._crypto_aead_chacha20poly1305_nsecbytes=function(){return(I._crypto_aead_chacha20poly1305_nsecbytes=I.asm.x).apply(null,arguments)},I._crypto_aead_chacha20poly1305_abytes=function(){return(I._crypto_aead_chacha20poly1305_abytes=I.asm.y).apply(null,arguments)},I._crypto_aead_chacha20poly1305_messagebytes_max=function(){return(I._crypto_aead_chacha20poly1305_messagebytes_max=I.asm.z).apply(null,arguments)},I._crypto_aead_chacha20poly1305_keygen=function(){return(I._crypto_aead_chacha20poly1305_keygen=I.asm.A).apply(null,arguments)},I._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=function(){return(I._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=I.asm.B).apply(null,arguments)},I._crypto_aead_xchacha20poly1305_ietf_encrypt=function(){return(I._crypto_aead_xchacha20poly1305_ietf_encrypt=I.asm.C).apply(null,arguments)},I._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=function(){return(I._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=I.asm.D).apply(null,arguments)},I._crypto_aead_xchacha20poly1305_ietf_decrypt=function(){return(I._crypto_aead_xchacha20poly1305_ietf_decrypt=I.asm.E).apply(null,arguments)},I._crypto_aead_xchacha20poly1305_ietf_keybytes=function(){return(I._crypto_aead_xchacha20poly1305_ietf_keybytes=I.asm.F).apply(null,arguments)},I._crypto_aead_xchacha20poly1305_ietf_npubbytes=function(){return(I._crypto_aead_xchacha20poly1305_ietf_npubbytes=I.asm.G).apply(null,arguments)},I._crypto_aead_xchacha20poly1305_ietf_nsecbytes=function(){return(I._crypto_aead_xchacha20poly1305_ietf_nsecbytes=I.asm.H).apply(null,arguments)},I._crypto_aead_xchacha20poly1305_ietf_abytes=function(){return(I._crypto_aead_xchacha20poly1305_ietf_abytes=I.asm.I).apply(null,arguments)},I._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=function(){return(I._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=I.asm.J).apply(null,arguments)},I._crypto_aead_xchacha20poly1305_ietf_keygen=function(){return(I._crypto_aead_xchacha20poly1305_ietf_keygen=I.asm.K).apply(null,arguments)},I._crypto_auth_bytes=function(){return(I._crypto_auth_bytes=I.asm.L).apply(null,arguments)},I._crypto_auth_keybytes=function(){return(I._crypto_auth_keybytes=I.asm.M).apply(null,arguments)},I._crypto_auth=function(){return(I._crypto_auth=I.asm.N).apply(null,arguments)},I._crypto_auth_verify=function(){return(I._crypto_auth_verify=I.asm.O).apply(null,arguments)},I._crypto_auth_keygen=function(){return(I._crypto_auth_keygen=I.asm.P).apply(null,arguments)},I._crypto_box_seedbytes=function(){return(I._crypto_box_seedbytes=I.asm.Q).apply(null,arguments)},I._crypto_box_publickeybytes=function(){return(I._crypto_box_publickeybytes=I.asm.R).apply(null,arguments)},I._crypto_box_secretkeybytes=function(){return(I._crypto_box_secretkeybytes=I.asm.S).apply(null,arguments)},I._crypto_box_beforenmbytes=function(){return(I._crypto_box_beforenmbytes=I.asm.T).apply(null,arguments)},I._crypto_box_noncebytes=function(){return(I._crypto_box_noncebytes=I.asm.U).apply(null,arguments)},I._crypto_box_macbytes=function(){return(I._crypto_box_macbytes=I.asm.V).apply(null,arguments)},I._crypto_box_messagebytes_max=function(){return(I._crypto_box_messagebytes_max=I.asm.W).apply(null,arguments)},I._crypto_box_seed_keypair=function(){return(I._crypto_box_seed_keypair=I.asm.X).apply(null,arguments)},I._crypto_box_keypair=function(){return(I._crypto_box_keypair=I.asm.Y).apply(null,arguments)},I._crypto_box_beforenm=function(){return(I._crypto_box_beforenm=I.asm.Z).apply(null,arguments)},I._crypto_box_detached_afternm=function(){return(I._crypto_box_detached_afternm=I.asm._).apply(null,arguments)},I._crypto_box_detached=function(){return(I._crypto_box_detached=I.asm.$).apply(null,arguments)},I._crypto_box_easy_afternm=function(){return(I._crypto_box_easy_afternm=I.asm.aa).apply(null,arguments)},I._crypto_box_easy=function(){return(I._crypto_box_easy=I.asm.ba).apply(null,arguments)},I._crypto_box_open_detached_afternm=function(){return(I._crypto_box_open_detached_afternm=I.asm.ca).apply(null,arguments)},I._crypto_box_open_detached=function(){return(I._crypto_box_open_detached=I.asm.da).apply(null,arguments)},I._crypto_box_open_easy_afternm=function(){return(I._crypto_box_open_easy_afternm=I.asm.ea).apply(null,arguments)},I._crypto_box_open_easy=function(){return(I._crypto_box_open_easy=I.asm.fa).apply(null,arguments)},I._crypto_box_seal=function(){return(I._crypto_box_seal=I.asm.ga).apply(null,arguments)},I._crypto_box_seal_open=function(){return(I._crypto_box_seal_open=I.asm.ha).apply(null,arguments)},I._crypto_box_sealbytes=function(){return(I._crypto_box_sealbytes=I.asm.ia).apply(null,arguments)},I._crypto_generichash_bytes_min=function(){return(I._crypto_generichash_bytes_min=I.asm.ja).apply(null,arguments)},I._crypto_generichash_bytes_max=function(){return(I._crypto_generichash_bytes_max=I.asm.ka).apply(null,arguments)},I._crypto_generichash_bytes=function(){return(I._crypto_generichash_bytes=I.asm.la).apply(null,arguments)},I._crypto_generichash_keybytes_min=function(){return(I._crypto_generichash_keybytes_min=I.asm.ma).apply(null,arguments)},I._crypto_generichash_keybytes_max=function(){return(I._crypto_generichash_keybytes_max=I.asm.na).apply(null,arguments)},I._crypto_generichash_keybytes=function(){return(I._crypto_generichash_keybytes=I.asm.oa).apply(null,arguments)},I._crypto_generichash_statebytes=function(){return(I._crypto_generichash_statebytes=I.asm.pa).apply(null,arguments)},I._crypto_generichash=function(){return(I._crypto_generichash=I.asm.qa).apply(null,arguments)},I._crypto_generichash_init=function(){return(I._crypto_generichash_init=I.asm.ra).apply(null,arguments)},I._crypto_generichash_update=function(){return(I._crypto_generichash_update=I.asm.sa).apply(null,arguments)},I._crypto_generichash_final=function(){return(I._crypto_generichash_final=I.asm.ta).apply(null,arguments)},I._crypto_generichash_keygen=function(){return(I._crypto_generichash_keygen=I.asm.ua).apply(null,arguments)},I._crypto_hash_bytes=function(){return(I._crypto_hash_bytes=I.asm.va).apply(null,arguments)},I._crypto_hash=function(){return(I._crypto_hash=I.asm.wa).apply(null,arguments)},I._crypto_kdf_bytes_min=function(){return(I._crypto_kdf_bytes_min=I.asm.xa).apply(null,arguments)},I._crypto_kdf_bytes_max=function(){return(I._crypto_kdf_bytes_max=I.asm.ya).apply(null,arguments)},I._crypto_kdf_contextbytes=function(){return(I._crypto_kdf_contextbytes=I.asm.za).apply(null,arguments)},I._crypto_kdf_keybytes=function(){return(I._crypto_kdf_keybytes=I.asm.Aa).apply(null,arguments)},I._crypto_kdf_derive_from_key=function(){return(I._crypto_kdf_derive_from_key=I.asm.Ba).apply(null,arguments)},I._crypto_kdf_keygen=function(){return(I._crypto_kdf_keygen=I.asm.Ca).apply(null,arguments)},I._crypto_kx_seed_keypair=function(){return(I._crypto_kx_seed_keypair=I.asm.Da).apply(null,arguments)},I._crypto_kx_keypair=function(){return(I._crypto_kx_keypair=I.asm.Ea).apply(null,arguments)},I._crypto_kx_client_session_keys=function(){return(I._crypto_kx_client_session_keys=I.asm.Fa).apply(null,arguments)},I._crypto_kx_server_session_keys=function(){return(I._crypto_kx_server_session_keys=I.asm.Ga).apply(null,arguments)},I._crypto_kx_publickeybytes=function(){return(I._crypto_kx_publickeybytes=I.asm.Ha).apply(null,arguments)},I._crypto_kx_secretkeybytes=function(){return(I._crypto_kx_secretkeybytes=I.asm.Ia).apply(null,arguments)},I._crypto_kx_seedbytes=function(){return(I._crypto_kx_seedbytes=I.asm.Ja).apply(null,arguments)},I._crypto_kx_sessionkeybytes=function(){return(I._crypto_kx_sessionkeybytes=I.asm.Ka).apply(null,arguments)},I._crypto_pwhash_alg_argon2i13=function(){return(I._crypto_pwhash_alg_argon2i13=I.asm.La).apply(null,arguments)},I._crypto_pwhash_alg_argon2id13=function(){return(I._crypto_pwhash_alg_argon2id13=I.asm.Ma).apply(null,arguments)},I._crypto_pwhash_alg_default=function(){return(I._crypto_pwhash_alg_default=I.asm.Na).apply(null,arguments)},I._crypto_pwhash_bytes_min=function(){return(I._crypto_pwhash_bytes_min=I.asm.Oa).apply(null,arguments)},I._crypto_pwhash_bytes_max=function(){return(I._crypto_pwhash_bytes_max=I.asm.Pa).apply(null,arguments)},I._crypto_pwhash_passwd_min=function(){return(I._crypto_pwhash_passwd_min=I.asm.Qa).apply(null,arguments)},I._crypto_pwhash_passwd_max=function(){return(I._crypto_pwhash_passwd_max=I.asm.Ra).apply(null,arguments)},I._crypto_pwhash_saltbytes=function(){return(I._crypto_pwhash_saltbytes=I.asm.Sa).apply(null,arguments)},I._crypto_pwhash_strbytes=function(){return(I._crypto_pwhash_strbytes=I.asm.Ta).apply(null,arguments)},I._crypto_pwhash_strprefix=function(){return(I._crypto_pwhash_strprefix=I.asm.Ua).apply(null,arguments)},I._crypto_pwhash_opslimit_min=function(){return(I._crypto_pwhash_opslimit_min=I.asm.Va).apply(null,arguments)},I._crypto_pwhash_opslimit_max=function(){return(I._crypto_pwhash_opslimit_max=I.asm.Wa).apply(null,arguments)},I._crypto_pwhash_memlimit_min=function(){return(I._crypto_pwhash_memlimit_min=I.asm.Xa).apply(null,arguments)},I._crypto_pwhash_memlimit_max=function(){return(I._crypto_pwhash_memlimit_max=I.asm.Ya).apply(null,arguments)},I._crypto_pwhash_opslimit_interactive=function(){return(I._crypto_pwhash_opslimit_interactive=I.asm.Za).apply(null,arguments)},I._crypto_pwhash_memlimit_interactive=function(){return(I._crypto_pwhash_memlimit_interactive=I.asm._a).apply(null,arguments)},I._crypto_pwhash_opslimit_moderate=function(){return(I._crypto_pwhash_opslimit_moderate=I.asm.$a).apply(null,arguments)},I._crypto_pwhash_memlimit_moderate=function(){return(I._crypto_pwhash_memlimit_moderate=I.asm.ab).apply(null,arguments)},I._crypto_pwhash_opslimit_sensitive=function(){return(I._crypto_pwhash_opslimit_sensitive=I.asm.bb).apply(null,arguments)},I._crypto_pwhash_memlimit_sensitive=function(){return(I._crypto_pwhash_memlimit_sensitive=I.asm.cb).apply(null,arguments)},I._crypto_pwhash=function(){return(I._crypto_pwhash=I.asm.db).apply(null,arguments)},I._crypto_pwhash_str=function(){return(I._crypto_pwhash_str=I.asm.eb).apply(null,arguments)},I._crypto_pwhash_str_alg=function(){return(I._crypto_pwhash_str_alg=I.asm.fb).apply(null,arguments)},I._crypto_pwhash_str_verify=function(){return(I._crypto_pwhash_str_verify=I.asm.gb).apply(null,arguments)},I._crypto_pwhash_str_needs_rehash=function(){return(I._crypto_pwhash_str_needs_rehash=I.asm.hb).apply(null,arguments)},I._crypto_scalarmult_base=function(){return(I._crypto_scalarmult_base=I.asm.ib).apply(null,arguments)},I._crypto_scalarmult=function(){return(I._crypto_scalarmult=I.asm.jb).apply(null,arguments)},I._crypto_scalarmult_bytes=function(){return(I._crypto_scalarmult_bytes=I.asm.kb).apply(null,arguments)},I._crypto_scalarmult_scalarbytes=function(){return(I._crypto_scalarmult_scalarbytes=I.asm.lb).apply(null,arguments)},I._crypto_secretbox_keybytes=function(){return(I._crypto_secretbox_keybytes=I.asm.mb).apply(null,arguments)},I._crypto_secretbox_noncebytes=function(){return(I._crypto_secretbox_noncebytes=I.asm.nb).apply(null,arguments)},I._crypto_secretbox_macbytes=function(){return(I._crypto_secretbox_macbytes=I.asm.ob).apply(null,arguments)},I._crypto_secretbox_messagebytes_max=function(){return(I._crypto_secretbox_messagebytes_max=I.asm.pb).apply(null,arguments)},I._crypto_secretbox_keygen=function(){return(I._crypto_secretbox_keygen=I.asm.qb).apply(null,arguments)},I._crypto_secretbox_detached=function(){return(I._crypto_secretbox_detached=I.asm.rb).apply(null,arguments)},I._crypto_secretbox_easy=function(){return(I._crypto_secretbox_easy=I.asm.sb).apply(null,arguments)},I._crypto_secretbox_open_detached=function(){return(I._crypto_secretbox_open_detached=I.asm.tb).apply(null,arguments)},I._crypto_secretbox_open_easy=function(){return(I._crypto_secretbox_open_easy=I.asm.ub).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_keygen=function(){return(I._crypto_secretstream_xchacha20poly1305_keygen=I.asm.vb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_init_push=function(){return(I._crypto_secretstream_xchacha20poly1305_init_push=I.asm.wb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_init_pull=function(){return(I._crypto_secretstream_xchacha20poly1305_init_pull=I.asm.xb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_rekey=function(){return(I._crypto_secretstream_xchacha20poly1305_rekey=I.asm.yb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_push=function(){return(I._crypto_secretstream_xchacha20poly1305_push=I.asm.zb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_pull=function(){return(I._crypto_secretstream_xchacha20poly1305_pull=I.asm.Ab).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_statebytes=function(){return(I._crypto_secretstream_xchacha20poly1305_statebytes=I.asm.Bb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_abytes=function(){return(I._crypto_secretstream_xchacha20poly1305_abytes=I.asm.Cb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_headerbytes=function(){return(I._crypto_secretstream_xchacha20poly1305_headerbytes=I.asm.Db).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_keybytes=function(){return(I._crypto_secretstream_xchacha20poly1305_keybytes=I.asm.Eb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_messagebytes_max=function(){return(I._crypto_secretstream_xchacha20poly1305_messagebytes_max=I.asm.Fb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_tag_message=function(){return(I._crypto_secretstream_xchacha20poly1305_tag_message=I.asm.Gb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_tag_push=function(){return(I._crypto_secretstream_xchacha20poly1305_tag_push=I.asm.Hb).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_tag_rekey=function(){return(I._crypto_secretstream_xchacha20poly1305_tag_rekey=I.asm.Ib).apply(null,arguments)},I._crypto_secretstream_xchacha20poly1305_tag_final=function(){return(I._crypto_secretstream_xchacha20poly1305_tag_final=I.asm.Jb).apply(null,arguments)},I._crypto_shorthash_bytes=function(){return(I._crypto_shorthash_bytes=I.asm.Kb).apply(null,arguments)},I._crypto_shorthash_keybytes=function(){return(I._crypto_shorthash_keybytes=I.asm.Lb).apply(null,arguments)},I._crypto_shorthash=function(){return(I._crypto_shorthash=I.asm.Mb).apply(null,arguments)},I._crypto_shorthash_keygen=function(){return(I._crypto_shorthash_keygen=I.asm.Nb).apply(null,arguments)},I._crypto_sign_statebytes=function(){return(I._crypto_sign_statebytes=I.asm.Ob).apply(null,arguments)},I._crypto_sign_bytes=function(){return(I._crypto_sign_bytes=I.asm.Pb).apply(null,arguments)},I._crypto_sign_seedbytes=function(){return(I._crypto_sign_seedbytes=I.asm.Qb).apply(null,arguments)},I._crypto_sign_publickeybytes=function(){return(I._crypto_sign_publickeybytes=I.asm.Rb).apply(null,arguments)},I._crypto_sign_secretkeybytes=function(){return(I._crypto_sign_secretkeybytes=I.asm.Sb).apply(null,arguments)},I._crypto_sign_messagebytes_max=function(){return(I._crypto_sign_messagebytes_max=I.asm.Tb).apply(null,arguments)},I._crypto_sign_seed_keypair=function(){return(I._crypto_sign_seed_keypair=I.asm.Ub).apply(null,arguments)},I._crypto_sign_keypair=function(){return(I._crypto_sign_keypair=I.asm.Vb).apply(null,arguments)},I._crypto_sign=function(){return(I._crypto_sign=I.asm.Wb).apply(null,arguments)},I._crypto_sign_open=function(){return(I._crypto_sign_open=I.asm.Xb).apply(null,arguments)},I._crypto_sign_detached=function(){return(I._crypto_sign_detached=I.asm.Yb).apply(null,arguments)},I._crypto_sign_verify_detached=function(){return(I._crypto_sign_verify_detached=I.asm.Zb).apply(null,arguments)},I._crypto_sign_init=function(){return(I._crypto_sign_init=I.asm._b).apply(null,arguments)},I._crypto_sign_update=function(){return(I._crypto_sign_update=I.asm.$b).apply(null,arguments)},I._crypto_sign_final_create=function(){return(I._crypto_sign_final_create=I.asm.ac).apply(null,arguments)},I._crypto_sign_final_verify=function(){return(I._crypto_sign_final_verify=I.asm.bc).apply(null,arguments)},I._crypto_sign_ed25519_pk_to_curve25519=function(){return(I._crypto_sign_ed25519_pk_to_curve25519=I.asm.cc).apply(null,arguments)},I._crypto_sign_ed25519_sk_to_curve25519=function(){return(I._crypto_sign_ed25519_sk_to_curve25519=I.asm.dc).apply(null,arguments)},I._randombytes_random=function(){return(I._randombytes_random=I.asm.ec).apply(null,arguments)},I._randombytes_stir=function(){return(I._randombytes_stir=I.asm.fc).apply(null,arguments)},I._randombytes_uniform=function(){return(I._randombytes_uniform=I.asm.gc).apply(null,arguments)},I._randombytes_buf=function(){return(I._randombytes_buf=I.asm.hc).apply(null,arguments)},I._randombytes_buf_deterministic=function(){return(I._randombytes_buf_deterministic=I.asm.ic).apply(null,arguments)},I._randombytes_seedbytes=function(){return(I._randombytes_seedbytes=I.asm.jc).apply(null,arguments)},I._randombytes_close=function(){return(I._randombytes_close=I.asm.kc).apply(null,arguments)},I._randombytes=function(){return(I._randombytes=I.asm.lc).apply(null,arguments)},I._sodium_bin2hex=function(){return(I._sodium_bin2hex=I.asm.mc).apply(null,arguments)},I._sodium_hex2bin=function(){return(I._sodium_hex2bin=I.asm.nc).apply(null,arguments)},I._sodium_base64_encoded_len=function(){return(I._sodium_base64_encoded_len=I.asm.oc).apply(null,arguments)},I._sodium_bin2base64=function(){return(I._sodium_bin2base64=I.asm.pc).apply(null,arguments)},I._sodium_base642bin=function(){return(I._sodium_base642bin=I.asm.qc).apply(null,arguments)},I._sodium_init=function(){return(I._sodium_init=I.asm.rc).apply(null,arguments)},I._sodium_pad=function(){return(I._sodium_pad=I.asm.sc).apply(null,arguments)},I._sodium_unpad=function(){return(I._sodium_unpad=I.asm.tc).apply(null,arguments)},I._sodium_version_string=function(){return(I._sodium_version_string=I.asm.uc).apply(null,arguments)},I._sodium_library_version_major=function(){return(I._sodium_library_version_major=I.asm.vc).apply(null,arguments)},I._sodium_library_version_minor=function(){return(I._sodium_library_version_minor=I.asm.wc).apply(null,arguments)},I._sodium_library_minimal=function(){return(I._sodium_library_minimal=I.asm.xc).apply(null,arguments)},I.___errno_location=function(){return(dA=I.___errno_location=I.asm.yc).apply(null,arguments)}),PA=(I._malloc=function(){return(I._malloc=I.asm.zc).apply(null,arguments)},I._free=function(){return(I._free=I.asm.Ac).apply(null,arguments)},I.__growWasmMemory=function(){return(PA=I.__growWasmMemory=I.asm.Bc).apply(null,arguments)});function JA(A){function g(){NA||(NA=!0,I.calledRun=!0,p||(V(),T(),I.onRuntimeInitialized&&I.onRuntimeInitialized(),W()))}A=A||C,IA>0||(X(),IA>0||(I.setStatus?(I.setStatus("Running..."),setTimeout((function(){setTimeout((function(){I.setStatus("")}),1),g()}),1)):g()))}if(I.setValue=h,I.getValue=D,I.UTF8ToString=k,BA=function A(){NA||JA(),NA||(BA=A)},I.run=JA,I.preInit)for("function"==typeof I.preInit&&(I.preInit=[I.preInit]);I.preInit.length>0;)I.preInit.pop()();JA(),Object.keys(B).forEach((function(A){"getRandomValue"!==A&&delete B[A]})),Object.keys(I).forEach((function(A){B[A]=I[A]}))};var g,C=void 0!==C?C:{},Q={};for(g in C)C.hasOwnProperty(g)&&(Q[g]=C[g]);var E=[],i=!1,n=!1,a=!1,r=!1;i="object"==typeof window,n="function"==typeof importScripts,a="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,r=!i&&!a&&!n;var o,e,t,c,f="";function y(A){return C.locateFile?C.locateFile(A,f):f+A}a?(f=n?require("path").dirname(f)+"/":__dirname+"/",o=function(A,I){var g=NA(A);return g?I?g:g.toString():(t||(t=require("fs")),c||(c=require("path")),A=c.normalize(A),t.readFileSync(A,I?null:"utf8"))},e=function(A){var I=o(A,!0);return I.buffer||(I=new Uint8Array(I)),F(I.buffer),I},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),E=process.argv.slice(2),"undefined"!=typeof module&&(module.exports=C),process.on("unhandledRejection",iA),C.inspect=function(){return"[Emscripten Module object]"}):r?("undefined"!=typeof read&&(o=function(A){var I=NA(A);return I?UA(I):read(A)}),e=function(A){var I;return(I=NA(A))?I:"function"==typeof readbuffer?new Uint8Array(readbuffer(A)):(F("object"==typeof(I=read(A,"binary"))),I)},"undefined"!=typeof scriptArgs?E=scriptArgs:void 0!==arguments&&(E=arguments),"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(i||n)&&(n?f=self.location.href:document.currentScript&&(f=document.currentScript.src),f=0!==f.indexOf("blob:")?f.substr(0,f.lastIndexOf("/")+1):"",o=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.send(null),I.responseText}catch(I){var g=NA(A);if(g)return UA(g);throw I}},n&&(e=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)}catch(I){var g=NA(A);if(g)return g;throw I}})),C.print;var s,w,h=C.printErr||void 0;for(g in Q)Q.hasOwnProperty(g)&&(C[g]=Q[g]);function D(A,I,g,B){switch("*"===(g=g||"i8").charAt(g.length-1)&&(g="i32"),g){case"i1":case"i8":Y[A>>0]=I;break;case"i16":m[A>>1]=I;break;case"i32":U[A>>2]=I;break;case"i64":cA=[I>>>0,(tA=I,+z(tA)>=1?tA>0?(0|IA(+AA(tA/4294967296),4294967295))>>>0:~~+$((tA-+(~~tA>>>0))/4294967296)>>>0:0)],U[A>>2]=cA[0],U[A+4>>2]=cA[1];break;case"float":v[A>>2]=I;break;case"double":S[A>>3]=I;break;default:iA("invalid type for setValue: "+g)}}function u(A,I,g){switch("*"===(I=I||"i8").charAt(I.length-1)&&(I="i32"),I){case"i1":case"i8":return Y[A>>0];case"i16":return m[A>>1];case"i32":case"i64":return U[A>>2];case"float":return v[A>>2];case"double":return S[A>>3];default:iA("invalid type for getValue: "+I)}return null}Q=null,C.arguments&&(E=C.arguments),C.thisProgram&&C.thisProgram,C.quit&&C.quit,C.wasmBinary&&(s=C.wasmBinary),C.noExitRuntime&&C.noExitRuntime,"object"!=typeof WebAssembly&&iA("no native wasm support detected");var p=new WebAssembly.Table({initial:14,maximum:22,element:"anyfunc"}),l=!1;function F(A,I){A||iA("Assertion failed: "+I)}var G="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function k(A,I,g){for(var B=I+g,C=I;A[C]&&!(C>=B);)++C;if(C-I>16&&A.subarray&&G)return G.decode(A.subarray(I,C));for(var Q="";I<C;){var E=A[I++];if(128&E){var i=63&A[I++];if(192!=(224&E)){var n=63&A[I++];if((E=224==(240&E)?(15&E)<<12|i<<6|n:(7&E)<<18|i<<12|n<<6|63&A[I++])<65536)Q+=String.fromCharCode(E);else{var a=E-65536;Q+=String.fromCharCode(55296|a>>10,56320|1023&a)}}else Q+=String.fromCharCode((31&E)<<6|i)}else Q+=String.fromCharCode(E)}return Q}function _(A,I){return A?k(b,A,I):""}var H,Y,b,m,U,v,S,N=65536;function R(A,I){return A%I>0&&(A+=I-A%I),A}function M(A){H=A,C.HEAP8=Y=new Int8Array(A),C.HEAP16=m=new Int16Array(A),C.HEAP32=U=new Int32Array(A),C.HEAPU8=b=new Uint8Array(A),C.HEAPU16=new Uint16Array(A),C.HEAPU32=new Uint32Array(A),C.HEAPF32=v=new Float32Array(A),C.HEAPF64=S=new Float64Array(A)}var d=5279472,P=36432,J=C.INITIAL_MEMORY||16777216;function x(A){for(;A.length>0;){var I=A.shift();if("function"!=typeof I){var g=I.func;"number"==typeof g?void 0===I.arg?C.dynCall_v(g):C.dynCall_vi(g,I.arg):g(void 0===I.arg?null:I.arg)}else I(C)}}(w=C.wasmMemory?C.wasmMemory:new WebAssembly.Memory({initial:J/N,maximum:2147483648/N}))&&(H=w.buffer),J=H.byteLength,M(H),U[P>>2]=d;var L=[],K=[],q=[],X=[];function V(){if(C.preRun)for("function"==typeof C.preRun&&(C.preRun=[C.preRun]);C.preRun.length;)Z(C.preRun.shift());x(L)}function T(){x(K)}function W(){x(q)}function j(){if(C.postRun)for("function"==typeof C.postRun&&(C.postRun=[C.postRun]);C.postRun.length;)O(C.postRun.shift());x(X)}function Z(A){L.unshift(A)}function O(A){X.unshift(A)}var z=Math.abs,$=Math.ceil,AA=Math.floor,IA=Math.min,gA=0,BA=null,CA=null;function QA(A){gA++,C.monitorRunDependencies&&C.monitorRunDependencies(gA)}function EA(A){if(gA--,C.monitorRunDependencies&&C.monitorRunDependencies(gA),0==gA&&(null!==BA&&(clearInterval(BA),BA=null),CA)){var I=CA;CA=null,I()}}function iA(A){throw C.onAbort&&C.onAbort(A),h(A+=""),l=!0,A="abort("+A+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(A)}function nA(A,I){return String.prototype.startsWith?A.startsWith(I):0===A.indexOf(I)}C.preloadedImages={},C.preloadedAudios={};var aA="data:application/octet-stream;base64,";function rA(A){return nA(A,aA)}var oA="file://";function eA(A){return nA(A,oA)}var tA,cA,fA="data:application/octet-stream;base64,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AUgEQCAAIQIMAQsgAEEDcUUEQCAAIQIMAQsgACECA0AgAiABLQAAOgAAIAFBAWohASACQQFqIgIgA08NASACQQNxDQALCwJAIANBfHEiBEHAAEkNACACIARBQGoiBUsNAANAIAIgASgCADYCACACIAEoAgQ2AgQgAiABKAIINgIIIAIgASgCDDYCDCACIAEoAhA2AhAgAiABKAIUNgIUIAIgASgCGDYCGCACIAEoAhw2AhwgAiABKAIgNgIgIAIgASgCJDYCJCACIAEoAig2AiggAiABKAIsNgIsIAIgASgCMDYCMCACIAEoAjQ2AjQgAiABKAI4NgI4IAIgASgCPDYCPCABQUBrIQEgAkFAayICIAVNDQALCyACIARPDQEDQCACIAEoAgA2AgAgAUEEaiEBIAJBBGoiAiAESQ0ACwwBCyADQQRJBEAgACECDAELIANBfGoiBCAASQRAIAAhAgwBCyAAIQIDQCACIAEtAAA6AAAgAiABLQABOgABIAIgAS0AAjoAAiACIAEtAAM6AAMgAUEEaiEBIAJBBGoiAiAETQ0ACwsgAiADSQRAA0AgAiABLQAAOgAAIAFBAWohASACQQFqIgIgA0cNAAsLIAAL7AEBEn8gAigCBCEDIAEoAgQhBCACKAIIIQUgASgCCCEGIAIoAgwhByABKAIMIQggAigCECEJIAEoAhAhCiACKAIUIQsgASgCFCEMIAIoAhghDSABKAIYIQ4gAigCHCEPIAEoAhwhECACKAIgIREgASgCICESIAIoAiQhEyABKAIkIRQgACACKAIAIAEoAgBqNgIAIAAgEyAUajYCJCAAIBEgEmo2AiAgACAPIBBqNgIcIAAgDSAOajYCGCAAIAsgDGo2AhQgACAJIApqNgIQIAAgByAIajYCDCAAIAUgBmo2AgggACADIARqNgIECxgBAX9BxJwCKAIAIgAEQCAAEQ4ACxACAAtAAQN/IAAgASABQfgAaiICEAsgAEEoaiABQShqIgMgAUHQAGoiBBALIABB0ABqIAQgAhALIABB+ABqIAEgAxALC+wBARJ/IAIoAgQhAyABKAIEIQQgAigCCCEFIAEoAgghBiACKAIMIQcgASgCDCEIIAIoAhAhCSABKAIQIQogAigCFCELIAEoAhQhDCACKAIYIQ0gASgCGCEOIAIoAhwhDyABKAIcIRAgAigCICERIAEoAiAhEiACKAIkIRMgASgCJCEUIAAgASgCACACKAIAazYCACAAIBQgE2s2AiQgACASIBFrNgIgIAAgECAPazYCHCAAIA4gDWs2AhggACAMIAtrNgIUIAAgCiAJazYCECAAIAggB2s2AgwgACAGIAVrNgIIIAAgBCADazYCBAsEAEEgCwoAIAAgASACEDILqg0BB38CQCAARQ0AIABBeGoiAyAAQXxqKAIAIgFBeHEiAGohBQJAIAFBAXENACABQQNxRQ0BIAMgAygCACICayIDQZSYAigCACIESQ0BIAAgAmohACADQZiYAigCAEcEQCACQf8BTQRAIAMoAggiBCACQQN2IgJBA3RBrJgCakcaIAQgAygCDCIBRgRAQYSYAkGEmAIoAgBBfiACd3E2AgAMAwsgBCABNgIMIAEgBDYCCAwCCyADKAIYIQYCQCADIAMoAgwiAUcEQCAEIAMoAggiAk0EQCACKAIMGgsgAiABNgIMIAEgAjYCCAwBCwJAIANBFGoiAigCACIEDQAgA0EQaiICKAIAIgQNAEEAIQEMAQsDQCACIQcgBCIBQRRqIgIoAgAiBA0AIAFBEGohAiABKAIQIgQNAAsgB0EANgIACyAGRQ0BAkAgAyADKAIcIgJBAnRBtJoCaiIEKAIARgRAIAQgATYCACABDQFBiJgCQYiYAigCAEF+IAJ3cTYCAAwDCyAGQRBBFCAGKAIQIANGG2ogATYCACABRQ0CCyABIAY2AhggAygCECICBEAgASACNgIQIAIgATYCGAsgAygCFCICRQ0BIAEgAjYCFCACIAE2AhgMAQsgBSgCBCIBQQNxQQNHDQBBjJgCIAA2AgAgBSABQX5xNgIEIAMgAEEBcjYCBCAAIANqIAA2AgAPCyAFIANNDQAgBSgCBCIBQQFxRQ0AAkAgAUECcUUEQCAFQZyYAigCAEYEQEGcmAIgAzYCAEGQmAJBkJgCKAIAIABqIgA2AgAgAyAAQQFyNgIEIANBmJgCKAIARw0DQYyYAkEANgIAQZiYAkEANgIADwsgBUGYmAIoAgBGBEBBmJgCIAM2AgBBjJgCQYyYAigCACAAaiIANgIAIAMgAEEBcjYCBCAAIANqIAA2AgAPCyABQXhxIABqIQACQCABQf8BTQRAIAUoAgwhAiAFKAIIIgQgAUEDdiIBQQN0QayYAmoiB0cEQEGUmAIoAgAaCyACIARGBEBBhJgCQYSYAigCAEF+IAF3cTYCAAwCCyACIAdHBEBBlJgCKAIAGgsgBCACNgIMIAIgBDYCCAwBCyAFKAIYIQYCQCAFIAUoAgwiAUcEQEGUmAIoAgAgBSgCCCICTQRAIAIoAgwaCyACIAE2AgwgASACNgIIDAELAkAgBUEUaiICKAIAIgQNACAFQRBqIgIoAgAiBA0AQQAhAQwBCwNAIAIhByAEIgFBFGoiAigCACIEDQAgAUEQaiECIAEoAhAiBA0ACyAHQQA2AgALIAZFDQACQCAFIAUoAhwiAkECdEG0mgJqIgQoAgBGBEAgBCABNgIAIAENAUGImAJBiJgCKAIAQX4gAndxNgIADAILIAZBEEEUIAYoAhAgBUYbaiABNgIAIAFFDQELIAEgBjYCGCAFKAIQIgIEQCABIAI2AhAgAiABNgIYCyAFKAIUIgJFDQAgASACNgIUIAIgATYCGAsgAyAAQQFyNgIEIAAgA2ogADYCACADQZiYAigCAEcNAUGMmAIgADYCAA8LIAUgAUF+cTYCBCADIABBAXI2AgQgACADaiAANgIACyAAQf8BTQRAIABBA3YiAUEDdEGsmAJqIQACf0GEmAIoAgAiAkEBIAF0IgFxRQRAQYSYAiABIAJyNgIAIAAMAQsgACgCCAshAiAAIAM2AgggAiADNgIMIAMgADYCDCADIAI2AggPCyADQgA3AhAgAwJ/QQAgAEEIdiIBRQ0AGkEfIABB////B0sNABogASABQYD+P2pBEHZBCHEiAXQiAiACQYDgH2pBEHZBBHEiAnQiBCAEQYCAD2pBEHZBAnEiBHRBD3YgASACciAEcmsiAUEBdCAAIAFBFWp2QQFxckEcagsiAjYCHCACQQJ0QbSaAmohAQJAAkACQEGImAIoAgAiBEEBIAJ0IgdxRQRAQYiYAiAEIAdyNgIAIAEgAzYCACADIAE2AhgMAQsgAEEAQRkgAkEBdmsgAkEfRht0IQIgASgCACEBA0AgASIEKAIEQXhxIABGDQIgAkEddiEBIAJBAXQhAiAEIAFBBHFqIgdBEGooAgAiAQ0ACyAHIAM2AhAgAyAENgIYCyADIAM2AgwgAyADNgIIDAELIAQoAggiACADNgIMIAQgAzYCCCADQQA2AhggAyAENgIMIAMgADYCCAtBpJgCQaSYAigCAEF/aiIANgIAIAANAEHMmwIhAwNAIAMoAgAiAEEIaiEDIAANAAtBpJgCQX82AgALC5UBAQR/IwBBMGsiBSQAIAAgAUEoaiIDIAEQEyAAQShqIgQgAyABEBYgAEHQAGoiAyAAIAIQCyAEIAQgAkEoahALIABB+ABqIgYgAkH4AGogAUH4AGoQCyAAIAFB0ABqIAJB0ABqEAsgBSAAIAAQEyAAIAMgBBAWIAQgAyAEEBMgAyAFIAYQEyAGIAUgBhAWIAVBMGokAAs7AQF/IAAgAUEoaiICIAEQEyAAQShqIAIgARAWIABB0ABqIAFB0ABqECwgAEH4AGogAUH4AGpBsBEQCwvUAgICfwN+IwBBwAVrIgMkAAJAIAJQDQAgACAAKQNIIgYgAkIDhnwiBzcDSCAAKQNAIQUgByAGVARAIAAgBUIBfCIFNwNACyAAIAUgAkI9iHw3A0BCgAEgBkIDiEL/AIMiB30iBiACWARAQgAhBQNAIAAgBSAHfKdqIAEgBadqLQAAOgBQIAVCAXwiBSAGUg0ACyAAIABB0ABqIAMgA0GABWoiBBBIIAEgBqdqIQEgAiAGfSICQv8AVgRAA0AgACABIAMgBBBIIAFBgAFqIQEgAkKAf3wiAkL/AFYNAAsLIAJQRQRAQgAhBQNAIAAgBaciBGogASAEai0AADoAUCAFQgF8IgUgAlINAAsLIANBwAUQCQwBCyACQgEgAkIBVhshAkIAIQUDQCAAIAUgB3ynaiABIAWnai0AADoAUCAFQgF8IgUgAlINAAsLIANBwAVqJABBAAsVACAAQQE2AgAgAEEEakEAQSQQEBoLBABBEAsiAQF/IAEEQANAIAAgAmoQczoAACACQQFqIgIgAUcNAAsLC9YuAQx/IwBBEGsiDCQAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIABB9AFNBEBBhJgCKAIAIgZBECAAQQtqQXhxIABBC0kbIgdBA3YiAHYiAUEDcQRAIAFBf3NBAXEgAGoiAkEDdCIEQbSYAmooAgAiAUEIaiEAAkAgASgCCCIDIARBrJgCaiIERgRAQYSYAiAGQX4gAndxNgIADAELQZSYAigCABogAyAENgIMIAQgAzYCCAsgASACQQN0IgJBA3I2AgQgASACaiIBIAEoAgRBAXI2AgQMDQsgB0GMmAIoAgAiCE0NASABBEACQEECIAB0IgJBACACa3IgASAAdHEiAEEAIABrcUF/aiIAIABBDHZBEHEiAHYiAUEFdkEIcSICIAByIAEgAnYiAEECdkEEcSIBciAAIAF2IgBBAXZBAnEiAXIgACABdiIAQQF2QQFxIgFyIAAgAXZqIgJBA3QiA0G0mAJqKAIAIgEoAggiACADQayYAmoiA0YEQEGEmAIgBkF+IAJ3cSIGNgIADAELQZSYAigCABogACADNgIMIAMgADYCCAsgAUEIaiEAIAEgB0EDcjYCBCABIAdqIgUgAkEDdCICIAdrIgNBAXI2AgQgASACaiADNgIAIAgEQCAIQQN2IgRBA3RBrJgCaiEBQZiYAigCACECAn8gBkEBIAR0IgRxRQRAQYSYAiAEIAZyNgIAIAEMAQsgASgCCAshBCABIAI2AgggBCACNgIMIAIgATYCDCACIAQ2AggLQZiYAiAFNgIAQYyYAiADNgIADA0LQYiYAigCACIKRQ0BIApBACAKa3FBf2oiACAAQQx2QRBxIgB2IgFBBXZBCHEiAiAAciABIAJ2IgBBAnZBBHEiAXIgACABdiIAQQF2QQJxIgFyIAAgAXYiAEEBdkEBcSIBciAAIAF2akECdEG0mgJqKAIAIgEoAgRBeHEgB2shAyABIQIDQAJAIAIoAhAiAEUEQCACKAIUIgBFDQELIAAoAgRBeHEgB2siAiADIAIgA0kiAhshAyAAIAEgAhshASAAIQIMAQsLIAEgB2oiCyABTQ0CIAEoAhghCSABIAEoAgwiBEcEQEGUmAIoAgAgASgCCCIATQRAIAAoAgwaCyAAIAQ2AgwgBCAANgIIDAwLIAFBFGoiAigCACIARQRAIAEoAhAiAEUNBCABQRBqIQILA0AgAiEFIAAiBEEUaiICKAIAIgANACAEQRBqIQIgBCgCECIADQALIAVBADYCAAwLC0F/IQcgAEG/f0sNACAAQQtqIgBBeHEhB0GImAIoAgAiCEUNAEEAIAdrIQICQAJAAkACf0EAIABBCHYiAEUNABpBHyAHQf///wdLDQAaIAAgAEGA/j9qQRB2QQhxIgB0IgEgAUGA4B9qQRB2QQRxIgF0IgMgA0GAgA9qQRB2QQJxIgN0QQ92IAAgAXIgA3JrIgBBAXQgByAAQRVqdkEBcXJBHGoLIgVBAnRBtJoCaigCACIDRQRAQQAhAAwBCyAHQQBBGSAFQQF2ayAFQR9GG3QhAUEAIQADQAJAIAMoAgRBeHEgB2siBiACTw0AIAMhBCAGIgINAEEAIQIgAyEADAMLIAAgAygCFCIGIAYgAyABQR12QQRxaigCECIDRhsgACAGGyEAIAEgA0EAR3QhASADDQALCyAAIARyRQRAQQIgBXQiAEEAIABrciAIcSIARQ0DIABBACAAa3FBf2oiACAAQQx2QRBxIgB2IgFBBXZBCHEiAyAAciABIAN2IgBBAnZBBHEiAXIgACABdiIAQQF2QQJxIgFyIAAgAXYiAEEBdkEBcSIBciAAIAF2akECdEG0mgJqKAIAIQALIABFDQELA0AgACgCBEF4cSAHayIDIAJJIQEgAyACIAEbIQIgACAEIAEbIQQgACgCECIBBH8gAQUgACgCFAsiAA0ACwsgBEUNACACQYyYAigCACAHa08NACAEIAdqIgUgBE0NASAEKAIYIQkgBCAEKAIMIgFHBEBBlJgCKAIAIAQoAggiAE0EQCAAKAIMGgsgACABNgIMIAEgADYCCAwKCyAEQRRqIgMoAgAiAEUEQCAEKAIQIgBFDQQgBEEQaiEDCwNAIAMhBiAAIgFBFGoiAygCACIADQAgAUEQaiEDIAEoAhAiAA0ACyAGQQA2AgAMCQtBjJgCKAIAIgEgB08EQEGYmAIoAgAhAAJAIAEgB2siAkEQTwRAQYyYAiACNgIAQZiYAiAAIAdqIgM2AgAgAyACQQFyNgIEIAAgAWogAjYCACAAIAdBA3I2AgQMAQtBmJgCQQA2AgBBjJgCQQA2AgAgACABQQNyNgIEIAAgAWoiASABKAIEQQFyNgIECyAAQQhqIQAMCwtBkJgCKAIAIgEgB0sEQEGQmAIgASAHayIBNgIAQZyYAkGcmAIoAgAiACAHaiICNgIAIAIgAUEBcjYCBCAAIAdBA3I2AgQgAEEIaiEADAsLQQAhACAHQS9qIgQCf0HcmwIoAgAEQEHkmwIoAgAMAQtB6JsCQn83AgBB4JsCQoCggICAgAQ3AgBB3JsCIAxBDGpBcHFB2KrVqgVzNgIAQfCbAkEANgIAQcCbAkEANgIAQYAgCyICaiIGQQAgAmsiBXEiAiAHTQ0KQbybAigCACIDBEBBtJsCKAIAIgggAmoiCSAITSAJIANLcg0LC0HAmwItAABBBHENBQJAAkBBnJgCKAIAIgMEQEHEmwIhAANAIAAoAgAiCCADTQRAIAggACgCBGogA0sNAwsgACgCCCIADQALC0EAECsiAUF/Rg0GIAIhBkHgmwIoAgAiAEF/aiIDIAFxBEAgAiABayABIANqQQAgAGtxaiEGCyAGIAdNIAZB/v///wdLcg0GQbybAigCACIABEBBtJsCKAIAIgMgBmoiBSADTSAFIABLcg0HCyAGECsiACABRw0BDAgLIAYgAWsgBXEiBkH+////B0sNBSAGECsiASAAKAIAIAAoAgRqRg0EIAEhAAsgAEF/RiAHQTBqIAZNckUEQEHkmwIoAgAiASAEIAZrakEAIAFrcSIBQf7///8HSwRAIAAhAQwICyABECtBf0cEQCABIAZqIQYgACEBDAgLQQAgBmsQKxoMBQsgACIBQX9HDQYMBAsAC0EAIQQMBwtBACEBDAULIAFBf0cNAgtBwJsCQcCbAigCAEEEcjYCAAsgAkH+////B0sNASACECsiAUEAECsiAE8gAUF/RnIgAEF/RnINASAAIAFrIgYgB0Eoak0NAQtBtJsCQbSbAigCACAGaiIANgIAIABBuJsCKAIASwRAQbibAiAANgIACwJAAkACQEGcmAIoAgAiAwRAQcSbAiEAA0AgASAAKAIAIgIgACgCBCIEakYNAiAAKAIIIgANAAsMAgtBlJgCKAIAIgBBACABIABPG0UEQEGUmAIgATYCAAtBACEAQcibAiAGNgIAQcSbAiABNgIAQaSYAkF/NgIAQaiYAkHcmwIoAgA2AgBB0JsCQQA2AgADQCAAQQN0IgJBtJgCaiACQayYAmoiAzYCACACQbiYAmogAzYCACAAQQFqIgBBIEcNAAtBkJgCIAZBWGoiAEF4IAFrQQdxQQAgAUEIakEHcRsiAmsiAzYCAEGcmAIgASACaiICNgIAIAIgA0EBcjYCBCAAIAFqQSg2AgRBoJgCQeybAigCADYCAAwCCyAALQAMQQhxIAEgA01yIAIgA0tyDQAgACAEIAZqNgIEQZyYAiADQXggA2tBB3FBACADQQhqQQdxGyIAaiIBNgIAQZCYAkGQmAIoAgAgBmoiAiAAayIANgIAIAEgAEEBcjYCBCACIANqQSg2AgRBoJgCQeybAigCADYCAAwBCyABQZSYAigCACIESQRAQZSYAiABNgIAIAEhBAsgASAGaiECQcSbAiEAAkACQAJAAkACQAJAA0AgAiAAKAIARwRAIAAoAggiAA0BDAILCyAALQAMQQhxRQ0BC0HEmwIhAANAIAAoAgAiAiADTQRAIAIgACgCBGoiBCADSw0DCyAAKAIIIQAMAAALAAsgACABNgIAIAAgACgCBCAGajYCBCABQXggAWtBB3FBACABQQhqQQdxG2oiCSAHQQNyNgIEIAJBeCACa0EHcUEAIAJBCGpBB3EbaiIBIAlrIAdrIQAgByAJaiEFIAEgA0YEQEGcmAIgBTYCAEGQmAJBkJgCKAIAIABqIgA2AgAgBSAAQQFyNgIEDAMLIAFBmJgCKAIARgRAQZiYAiAFNgIAQYyYAkGMmAIoAgAgAGoiADYCACAFIABBAXI2AgQgACAFaiAANgIADAMLIAEoAgQiAkEDcUEBRgRAIAJBeHEhCgJAIAJB/wFNBEAgASgCCCIDIAJBA3YiBEEDdEGsmAJqRxogAyABKAIMIgJGBEBBhJgCQYSYAigCAEF+IAR3cTYCAAwCCyADIAI2AgwgAiADNgIIDAELIAEoAhghCAJAIAEgASgCDCIGRwRAIAQgASgCCCICTQRAIAIoAgwaCyACIAY2AgwgBiACNgIIDAELAkAgAUEUaiIDKAIAIgcNACABQRBqIgMoAgAiBw0AQQAhBgwBCwNAIAMhAiAHIgZBFGoiAygCACIHDQAgBkEQaiEDIAYoAhAiBw0ACyACQQA2AgALIAhFDQACQCABIAEoAhwiAkECdEG0mgJqIgMoAgBGBEAgAyAGNgIAIAYNAUGImAJBiJgCKAIAQX4gAndxNgIADAILIAhBEEEUIAgoAhAgAUYbaiAGNgIAIAZFDQELIAYgCDYCGCABKAIQIgIEQCAGIAI2AhAgAiAGNgIYCyABKAIUIgJFDQAgBiACNgIUIAIgBjYCGAsgASAKaiEBIAAgCmohAAsgASABKAIEQX5xNgIEIAUgAEEBcjYCBCAAIAVqIAA2AgAgAEH/AU0EQCAAQQN2IgFBA3RBrJgCaiEAAn9BhJgCKAIAIgJBASABdCIBcUUEQEGEmAIgASACcjYCACAADAELIAAoAggLIQEgACAFNgIIIAEgBTYCDCAFIAA2AgwgBSABNgIIDAMLIAUCf0EAIABBCHYiAUUNABpBHyAAQf///wdLDQAaIAEgAUGA/j9qQRB2QQhxIgF0IgIgAkGA4B9qQRB2QQRxIgJ0IgMgA0GAgA9qQRB2QQJxIgN0QQ92IAEgAnIgA3JrIgFBAXQgACABQRVqdkEBcXJBHGoLIgE2AhwgBUIANwIQIAFBAnRBtJoCaiECAkBBiJgCKAIAIgNBASABdCIEcUUEQEGImAIgAyAEcjYCACACIAU2AgAMAQsgAEEAQRkgAUEBdmsgAUEfRht0IQMgAigCACEBA0AgASICKAIEQXhxIABGDQMgA0EddiEBIANBAXQhAyACIAFBBHFqIgQoAhAiAQ0ACyAEIAU2AhALIAUgAjYCGCAFIAU2AgwgBSAFNgIIDAILQZCYAiAGQVhqIgBBeCABa0EHcUEAIAFBCGpBB3EbIgJrIgU2AgBBnJgCIAEgAmoiAjYCACACIAVBAXI2AgQgACABakEoNgIEQaCYAkHsmwIoAgA2AgAgAyAEQScgBGtBB3FBACAEQVlqQQdxG2pBUWoiACAAIANBEGpJGyICQRs2AgQgAkHMmwIpAgA3AhAgAkHEmwIpAgA3AghBzJsCIAJBCGo2AgBByJsCIAY2AgBBxJsCIAE2AgBB0JsCQQA2AgAgAkEYaiEAA0AgAEEHNgIEIABBCGohASAAQQRqIQAgBCABSw0ACyACIANGDQMgAiACKAIEQX5xNgIEIAMgAiADayIEQQFyNgIEIAIgBDYCACAEQf8BTQRAIARBA3YiAUEDdEGsmAJqIQACf0GEmAIoAgAiAkEBIAF0IgFxRQRAQYSYAiABIAJyNgIAIAAMAQsgACgCCAshASAAIAM2AgggASADNgIMIAMgADYCDCADIAE2AggMBAsgA0IANwIQIAMCf0EAIARBCHYiAEUNABpBHyAEQf///wdLDQAaIAAgAEGA/j9qQRB2QQhxIgB0IgEgAUGA4B9qQRB2QQRxIgF0IgIgAkGAgA9qQRB2QQJxIgJ0QQ92IAAgAXIgAnJrIgBBAXQgBCAAQRVqdkEBcXJBHGoLIgA2AhwgAEECdEG0mgJqIQECQEGImAIoAgAiAkEBIAB0IgZxRQRAQYiYAiACIAZyNgIAIAEgAzYCACADIAE2AhgMAQsgBEEAQRkgAEEBdmsgAEEfRht0IQAgASgCACEBA0AgASICKAIEQXhxIARGDQQgAEEddiEBIABBAXQhACACIAFBBHFqIgYoAhAiAQ0ACyAGIAM2AhAgAyACNgIYCyADIAM2AgwgAyADNgIIDAMLIAIoAggiACAFNgIMIAIgBTYCCCAFQQA2AhggBSACNgIMIAUgADYCCAsgCUEIaiEADAULIAIoAggiACADNgIMIAIgAzYCCCADQQA2AhggAyACNgIMIAMgADYCCAtBkJgCKAIAIgAgB00NAEGQmAIgACAHayIBNgIAQZyYAkGcmAIoAgAiACAHaiICNgIAIAIgAUEBcjYCBCAAIAdBA3I2AgQgAEEIaiEADAMLQYCYAkEwNgIAQQAhAAwCCwJAIAlFDQACQCAEKAIcIgBBAnRBtJoCaiIDKAIAIARGBEAgAyABNgIAIAENAUGImAIgCEF+IAB3cSIINgIADAILIAlBEEEUIAkoAhAgBEYbaiABNgIAIAFFDQELIAEgCTYCGCAEKAIQIgAEQCABIAA2AhAgACABNgIYCyAEKAIUIgBFDQAgASAANgIUIAAgATYCGAsCQCACQQ9NBEAgBCACIAdqIgBBA3I2AgQgACAEaiIAIAAoAgRBAXI2AgQMAQsgBCAHQQNyNgIEIAUgAkEBcjYCBCACIAVqIAI2AgAgAkH/AU0EQCACQQN2IgFBA3RBrJgCaiEAAn9BhJgCKAIAIgJBASABdCIBcUUEQEGEmAIgASACcjYCACAADAELIAAoAggLIQEgACAFNgIIIAEgBTYCDCAFIAA2AgwgBSABNgIIDAELIAUCf0EAIAJBCHYiAEUNABpBHyACQf///wdLDQAaIAAgAEGA/j9qQRB2QQhxIgB0IgEgAUGA4B9qQRB2QQRxIgF0IgMgA0GAgA9qQRB2QQJxIgN0QQ92IAAgAXIgA3JrIgBBAXQgAiAAQRVqdkEBcXJBHGoLIgA2AhwgBUIANwIQIABBAnRBtJoCaiEBAkACQCAIQQEgAHQiA3FFBEBBiJgCIAMgCHI2AgAgASAFNgIADAELIAJBAEEZIABBAXZrIABBH0YbdCEAIAEoAgAhBwNAIAciASgCBEF4cSACRg0CIABBHXYhAyAAQQF0IQAgASADQQRxaiIDKAIQIgcNAAsgAyAFNgIQCyAFIAE2AhggBSAFNgIMIAUgBTYCCAwBCyABKAIIIgAgBTYCDCABIAU2AgggBUEANgIYIAUgATYCDCAFIAA2AggLIARBCGohAAwBCwJAIAlFDQACQCABKAIcIgBBAnRBtJoCaiICKAIAIAFGBEAgAiAENgIAIAQNAUGImAIgCkF+IAB3cTYCAAwCCyAJQRBBFCAJKAIQIAFGG2ogBDYCACAERQ0BCyAEIAk2AhggASgCECIABEAgBCAANgIQIAAgBDYCGAsgASgCFCIARQ0AIAQgADYCFCAAIAQ2AhgLAkAgA0EPTQRAIAEgAyAHaiIAQQNyNgIEIAAgAWoiACAAKAIEQQFyNgIEDAELIAEgB0EDcjYCBCALIANBAXI2AgQgAyALaiADNgIAIAgEQCAIQQN2IgRBA3RBrJgCaiEAQZiYAigCACECAn9BASAEdCIEIAZxRQRAQYSYAiAEIAZyNgIAIAAMAQsgACgCCAshBCAAIAI2AgggBCACNgIMIAIgADYCDCACIAQ2AggLQZiYAiALNgIAQYyYAiADNgIACyABQQhqIQALIAxBEGokACAAC5ABAQN/IAAhAQJAAkAgAEEDcUUNACAALQAARQRAQQAPCwNAIAFBAWoiAUEDcUUNASABLQAADQALDAELA0AgASICQQRqIQEgAigCACIDQX9zIANB//37d2pxQYCBgoR4cUUNAAsgA0H/AXFFBEAgAiAAaw8LA0AgAi0AASEDIAJBAWoiASECIAMNAAsLIAEgAGsLZQEDfyACRQRAQQAPCwJAIAAtAAAiA0UNAANAAkAgAyABLQAAIgVHDQAgAkF/aiICRSAFRXINACABQQFqIQEgAC0AASEDIABBAWohACADDQEMAgsLIAMhBAsgBEH/AXEgAS0AAGsLEQAgACABQdCXAigCABECABoLEQAgACABQciXAigCABECABoLCgAgACABIAIQGAsoACAAIAEgAhBRIABBKGogAUEoaiACEFEgAEHQAGogAUHQAGogAhBRCzUBAX8jAEHABWsiAiQAIAAgAhDGAiABIABBwAAQmgEgAkHABRAJIABB0AEQCSACQcAFaiQACwgAIABBIBAfCxEAIAAgAXNB/wFxQX9qQR92CwwAIAAgAUGACBASGgtVAQJ/QdCcAigCACIBIABBA2pBfHEiAmohAAJAIAJBAU5BACAAIAFNGw0AIAA/AEEQdEsEQCAAEAVFDQELQdCcAiAANgIAIAEPC0GAmAJBMDYCAEF/C0YBBH4gASkCCCECIAEpAhAhAyABKQIYIQQgASkCACEFIAAgASkCIDcCICAAIAQ3AhggACADNwIQIAAgAjcCCCAAIAU3AgALtwMBAn8jAEEwayIDJAAgAyABELIBIAAgAygCACIBOgAAIAAgAUEQdjoAAiAAIAFBCHY6AAEgACADKAIEIgJBDnY6AAUgACACQQZ2OgAEIAAgAkECdCABQRh2cjoAAyAAIAMoAggiAUENdjoACCAAIAFBBXY6AAcgACABQQN0IAJBFnZyOgAGIAAgAygCDCICQQt2OgALIAAgAkEDdjoACiAAIAJBBXQgAUEVdnI6AAkgACADKAIQIgFBEnY6AA8gACABQQp2OgAOIAAgAUECdjoADSAAIAFBBnQgAkETdnI6AAwgACADKAIUIgE6ABAgACABQRB2OgASIAAgAUEIdjoAESAAIAMoAhgiAkEPdjoAFSAAIAJBB3Y6ABQgACACQQF0IAFBGHZyOgATIAAgAygCHCIBQQ12OgAYIAAgAUEFdjoAFyAAIAFBA3QgAkEXdnI6ABYgACADKAIgIgJBDHY6ABsgACACQQR2OgAaIAAgAkEEdCABQRV2cjoAGSAAIAMoAiQiAUESdjoAHyAAIAFBCnY6AB4gACABQQJ2OgAdIAAgAUEGdCACQRR2cjoAHCADQTBqJAALMQEDfwNAIAAgAkEDdCIDaiIEIAQpAwAgASADaikDAIU3AwAgAkEBaiICQYABRw0ACwsFAEHAAAspAEKAgICAECACQj98QgaIfSAErVQEQBAUAAsgACABIAIgAyAEIAUQbwsEAEEAC7gBAgV/AX4CQCACUA0AIABB4AFqIQcgAEHgAGohBSAAKADgAiEDA0AgACADakHgAGohBiACQYACIANrIgStIghYBEAgBiABIAKnIgEQEhogACAAKADgAiABajYA4AIMAgsgBiABIAQQEhogACAAKADgAiAEajYA4AIgAEKAARBZIAAgBRBeIAUgB0GAARASGiAAIAAoAOACQYB/aiIDNgDgAiABIARqIQEgAiAIfSICQgBSDQALC0EAC+MBAQJ/IwBBQGoiDCQAAkAgCBAgIg1FBEBBaiECDAELIAxCADcDICAMQgA3AxggDCAGNgIUIAwgBTYCECAMIAQ2AgwgDCADNgIIIAwgCDYCBCAMIA02AgAgDEEANgI4IAwgAjYCNCAMIAI2AjAgDCABNgIsIAwgADYCKAJAIAwgCxCkAiICBEAgDSAIEAkMAQsgBwRAIAcgDSAIEBIaCwJAIAlFIApFcg0AIAkgCiAMIAsQpQJFDQAgDSAIEAkgCSAKEAlBYSECDAELIA0gCBAJQQAhAgsgDRAZCyAMQUBrJAAgAgsrAQF/IwBB0AFrIgMkACADEDUgAyABIAIQHBogAyAAECcgA0HQAWokAEEACxwAIABCADcDQCAAQgA3A0ggAEGgjwJBwAAQEhoLBABBbwsbACABQoCAgIAQWgRAEBQACyAAIAEgAiADEHALCwAgAEEAQSgQEBoLbwEFfyMAQTBrIgMkACAAIAEQDCAAQdAAaiICIAFBKGoiBhAMIABB+ABqIgUgAUHQAGoQ5gIgAEEoaiIEIAEgBhATIAMgBBAMIAQgAiAAEBMgAiACIAAQFiAAIAMgBBAWIAUgBSACEBYgA0EwaiQAC9cEAQF/IwBBwAFrIgIkACACQZABaiABEAwgAkHgAGogAkGQAWoQDCACQeAAaiACQeAAahAMIAJB4ABqIAEgAkHgAGoQCyACQZABaiACQZABaiACQeAAahALIAJBMGogAkGQAWoQDCACQeAAaiACQeAAaiACQTBqEAsgAkEwaiACQeAAahAMQQEhAQNAIAJBMGogAkEwahAMIAFBAWoiAUEFRw0ACyACQeAAaiACQTBqIAJB4ABqEAsgAkEwaiACQeAAahAMQQEhAQNAIAJBMGogAkEwahAMIAFBAWoiAUEKRw0ACyACQTBqIAJBMGogAkHgAGoQCyACIAJBMGoQDEEBIQEDQCACIAIQDCABQQFqIgFBFEcNAAsgAkEwaiACIAJBMGoQCyACQTBqIAJBMGoQDEEBIQEDQCACQTBqIAJBMGoQDCABQQFqIgFBCkcNAAsgAkHgAGogAkEwaiACQeAAahALIAJBMGogAkHgAGoQDEEBIQEDQCACQTBqIAJBMGoQDCABQQFqIgFBMkcNAAsgAkEwaiACQTBqIAJB4ABqEAsgAiACQTBqEAxBASEBA0AgAiACEAwgAUEBaiIBQeQARw0ACyACQTBqIAIgAkEwahALIAJBMGogAkEwahAMQQEhAQNAIAJBMGogAkEwahAMIAFBAWoiAUEyRw0ACyACQeAAaiACQTBqIAJB4ABqEAsgAkHgAGogAkHgAGoQDEEBIQEDQCACQeAAaiACQeAAahAMIAFBAWoiAUEFRw0ACyAAIAJB4ABqIAJBkAFqEAsgAkHAAWokAAsLACAAIAFBEBCAAQsMACAAQQBBgAgQEBoLMQAgAkGAAk8EQEEAIgBB4A9qIABB9A9qQesAIABBqRBqEAAACyAAIAEgAkH/AXEQWAtVAQF/QX8hBAJAIAJBwABLIANBf2pBP0tyDQACQCABQQAgAhtFBEAgACADQf8BcRCEAUUNAQwCCyAAIANB/wFxIAEgAkH/AXEQgwENAQtBACEECyAECwQAQQILBABBAQtmAQV/IwBBEGsiAyQAQQohAgNAAkAgAiIEQX9qIgIgA0EGamoiBSABIAFBCm4iBkEKbGtBMHI6AAAgAUEKSQ0AIAYhASACDQELCyAAIAVBCyAEayIAEBIgAGpBADoAACADQRBqJAALjQEBBn8CQCAALQAAIgZBUGpB/wFxQQlLDQAgBiEDIAAhAgNAIAIhByAEQZmz5swBSw0BIANB/wFxQVBqIgIgBEEKbCIDQX9zSw0BIAIgA2ohBCAHQQFqIgItAAAiA0FQakH/AXFBCkkNAAsgACACRiAAIAdHQQAgBkEwRhtyDQAgASAENgIAIAIhBQsgBQsaACAAIAEQrQIiAEEAIAAtAAAgAUH/AXFGGwsKACAAIAEgAhA9C2kBAX8jAEEQayIDIAA2AgwgAyABNgIIQQAhASADQQA6AAcgAgRAA0AgAyADLQAHIAMoAgggAWotAAAgAygCDCABai0AAHNyOgAHIAFBAWoiASACRw0ACwsgAy0AB0F/akEIdkEBcUF/agsMACAAIAEgAiADED4L6QIBAX8CQCAAIAFGDQAgASAAayACa0EAIAJBAXRrTQRAIAAgASACEBIPCyAAIAFzQQNxIQMCQAJAIAAgAUkEQCADBEAgACEDDAMLIABBA3FFBEAgACEDDAILIAAhAwNAIAJFDQQgAyABLQAAOgAAIAFBAWohASACQX9qIQIgA0EBaiIDQQNxDQALDAELAkAgAw0AIAAgAmpBA3EEQANAIAJFDQUgACACQX9qIgJqIgMgASACai0AADoAACADQQNxDQALCyACQQNNDQADQCAAIAJBfGoiAmogASACaigCADYCACACQQNLDQALCyACRQ0CA0AgACACQX9qIgJqIAEgAmotAAA6AAAgAg0ACwwCCyACQQNNDQADQCADIAEoAgA2AgAgAUEEaiEBIANBBGohAyACQXxqIgJBA0sNAAsLIAJFDQADQCADIAEtAAA6AAAgA0EBaiEDIAFBAWohASACQX9qIgINAAsLIAALzBcCE38JfiACIAEQxwIgAyAAQcAAEBIhASACKQMAIRpBACEDA0AgASAaIAEpAyAiHUEOEAYgHUESEAaFIB1BKRAGhXxB4I8CIgQgA0EDdCISaikDAHwgHSABKQMwIhkgASkDKCIchYMgGYV8IAEpAzh8IhogASkDGHwiHjcDGCABIAEpAwAiG0EcEAYgG0EiEAaFIBtBJxAGhSAafCABKQMQIhcgASkDCCIYhCAbgyAXIBiDhHwiGjcDOCABIBcgGSAcIB4gHCAdhYOFfCAeQQ4QBiAeQRIQBoUgHkEpEAaFfCACIANBAXJBA3QiBWoiDCkDAHwgBCAFaikDAHwiGXwiFzcDECABIBkgGiAYIBuEgyAYIBuDhHwgGkEcEAYgGkEiEAaFIBpBJxAGhXwiGTcDMCABIBggHCAdIBcgHSAehYOFfCAXQQ4QBiAXQRIQBoUgF0EpEAaFfCACIANBAnJBA3QiBWoiEykDAHwgBCAFaikDAHwiH3wiHDcDCCABIB8gGSAaIBuEgyAaIBuDhHwgGUEcEAYgGUEiEAaFIBlBJxAGhXwiGDcDKCABIBsgHSAcIBcgHoWDIB6FfCAcQQ4QBiAcQRIQBoUgHEEpEAaFfCACIANBA3JBA3QiBmoiBSkDAHwgBCAGaikDAHwiH3wiHTcDACABIB8gGCAZIBqEgyAZIBqDhHwgGEEcEAYgGEEiEAaFIBhBJxAGhXwiGzcDICABIBogHSAXIByFgyAXhSAefCAdQQ4QBiAdQRIQBoUgHUEpEAaFfCACIANBBHJBA3QiBmoiFCkDAHwgBCAGaikDAHwiGnwiHjcDOCABIBogGyAYIBmEgyAYIBmDhHwgG0EcEAYgG0EiEAaFIBtBJxAGhXwiGjcDGCABIBkgHiAcIB2FgyAchSAXfCAeQQ4QBiAeQRIQBoUgHkEpEAaFfCACIANBBXJBA3QiB2oiBikDAHwgBCAHaikDAHwiGXwiFzcDMCABIBkgGiAYIBuEgyAYIBuDhHwgGkEcEAYgGkEiEAaFIBpBJxAGhXwiGTcDECABIBggFyAdIB6FgyAdhSAcfCAXQQ4QBiAXQRIQBoUgF0EpEAaFfCACIANBBnJBA3QiB2oiFSkDAHwgBCAHaikDAHwiGHwiHDcDKCABIBggGSAaIBuEgyAaIBuDhHwgGUEcEAYgGUEiEAaFIBlBJxAGhXwiGDcDCCABIBsgHCAXIB6FgyAehSAdfCAcQQ4QBiAcQRIQBoUgHEEpEAaFfCACIANBB3JBA3QiCGoiBykDAHwgBCAIaikDAHwiG3wiHTcDICABIBsgGCAZIBqEgyAZIBqDhHwgGEEcEAYgGEEiEAaFIBhBJxAGhXwiGzcDACABIBogHSAXIByFgyAXhSAefCAdQQ4QBiAdQRIQBoUgHUEpEAaFfCACIANBCHJBA3QiCGoiDykDAHwgBCAIaikDAHwiGnwiHjcDGCABIBogGyAYIBmEgyAYIBmDhHwgG0EcEAYgG0EiEAaFIBtBJxAGhXwiGjcDOCABIBkgHiAcIB2FgyAchSAXfCAeQQ4QBiAeQRIQBoUgHkEpEAaFfCACIANBCXJBA3QiCWoiCCkDAHwgBCAJaikDAHwiGXwiFzcDECABIBkgGiAYIBuEgyAYIBuDhHwgGkEcEAYgGkEiEAaFIBpBJxAGhXwiGTcDMCABIBggFyAdIB6FgyAdhSAcfCAXQQ4QBiAXQRIQBoUgF0EpEAaFfCACIANBCnJBA3QiCWoiECkDAHwgBCAJaikDAHwiGHwiHDcDCCABIBggGSAaIBuEgyAaIBuDhHwgGUEcEAYgGUEiEAaFIBlBJxAGhXwiGDcDKCABIBsgHCAXIB6FgyAehSAdfCAcQQ4QBiAcQRIQBoUgHEEpEAaFfCACIANBC3JBA3QiCmoiCSkDAHwgBCAKaikDAHwiG3wiHTcDACABIBsgGCAZIBqEgyAZIBqDhHwgGEEcEAYgGEEiEAaFIBhBJxAGhXwiGzcDICABIBogHSAXIByFgyAXhSAefCAdQQ4QBiAdQRIQBoUgHUEpEAaFfCACIANBDHJBA3QiCmoiESkDAHwgBCAKaikDAHwiGnwiHjcDOCABIBogGyAYIBmEgyAYIBmDhHwgG0EcEAYgG0EiEAaFIBtBJxAGhXwiGjcDGCABIBkgHiAcIB2FgyAchSAXfCAeQQ4QBiAeQRIQBoUgHkEpEAaFfCACIANBDXJBA3QiC2oiCikDAHwgBCALaikDAHwiGXwiFzcDMCABIBkgGiAYIBuEgyAYIBuDhHwgGkEcEAYgGkEiEAaFIBpBJxAGhXwiGTcDECABIBcgHSAehYMgHYUgHHwgF0EOEAYgF0ESEAaFIBdBKRAGhXwgAiADQQ5yQQN0IgtqIg4pAwB8IAQgC2opAwB8IhwgGHwiGDcDKCABIBwgGSAaIBuEgyAaIBuDhHwgGUEcEAYgGUEiEAaFIBlBJxAGhXwiHDcDCCABIBggFyAehYMgHoUgHXwgGEEOEAYgGEESEAaFIBhBKRAGhXwgAiADQQ9yQQN0IhZqIgspAwB8IAQgFmopAwB8IhggG3w3AyAgASAYIBwgGSAahIMgGSAag4R8IBxBHBAGIBxBIhAGhSAcQScQBoV8NwMAIANBwABGBEADQCAAIA1BA3QiAmoiAyADKQMAIAEgAmopAwB8NwMAIA1BAWoiDUEIRw0ACwUgAiADQRBqIgNBA3RqIA4pAwAiHkIGiCAeQRMQBoUgHkE9EAaFIAgpAwAiGXwgAiASaikDAHwgDCkDACIaQgeIIBpBARAGhSAaQQgQBoV8Ihg3AwAgDCAaIAwpA0h8IAspAwAiGkIGiCAaQRMQBoUgGkE9EAaFfCAMKQMIIhtCB4ggG0EBEAaFIBtBCBAGhXwiFzcDgAEgEyAbIBhBExAGIBhCBoiFIBhBPRAGhSAJKQMAIhh8fCAFKQMAIhtCB4ggG0EBEAaFIBtBCBAGhXwiHDcDgAEgBSAbIAUpA0h8IBdBExAGIBdCBoiFIBdBPRAGhXwgBSkDCCIXQgeIIBdBARAGhSAXQQgQBoV8Ih03A4ABIBQgFyAcQRMQBiAcQgaIhSAcQT0QBoUgCikDACIbfHwgBikDACIXQgeIIBdBARAGhSAXQQgQBoV8Ihw3A4ABIAYgFyAGKQNIfCAdQRMQBiAdQgaIhSAdQT0QBoV8IAYpAwgiF0IHiCAXQQEQBoUgF0EIEAaFfCIdNwOAASAVIBcgGiAcQRMQBiAcQgaIhSAcQT0QBoV8fCAHKQMAIhdCB4ggF0EBEAaFIBdBCBAGhXwiHDcDgAEgByAXIAcpA0h8IB1BExAGIB1CBoiFIB1BPRAGhXwgBykDCCIXQgeIIBdBARAGhSAXQQgQBoV8Ih03A4ABIA8gFyAcQRMQBiAcQgaIhSAcQT0QBoUgDykDSHx8IBlBARAGIBlCB4iFIBlBCBAGhXwiFzcDgAEgCCAZIAgpA0h8IB1BExAGIB1CBoiFIB1BPRAGhXwgCCkDCCIZQgeIIBlBARAGhSAZQQgQBoV8Ihw3A4ABIBAgGSAXQRMQBiAXQgaIhSAXQT0QBoUgECkDSHx8IBhBARAGIBhCB4iFIBhBCBAGhXwiGTcDgAEgCSAYIAkpA0h8IBxBExAGIBxCBoiFIBxBPRAGhXwgCSkDCCIYQgeIIBhBARAGhSAYQQgQBoV8Ihc3A4ABIBEgGCAZQRMQBiAZQgaIhSAZQT0QBoUgESkDSHx8IBtBARAGIBtCB4iFIBtBCBAGhXwiGTcDgAEgCiAbIAopA0h8IBdBExAGIBdCBoiFIBdBPRAGhXwgCikDCCIYQgeIIBhBARAGhSAYQQgQBoV8Ihg3A4ABIA4gHiAOKQNIfCAZQRMQBiAZQgaIhSAZQT0QBoV8IBpBARAGIBpCB4iFIBpBCBAGhXw3A4ABIAsgGiALKQNIfCAYQRMQBiAYQgaIhSAYQT0QBoV8IAspAwgiGkIHiCAaQQEQBoUgGkEIEAaFfDcDgAEMAQsLCwQAQRgLrAUBEn9BstqIywchA0HuyIGZAyEMQeXwwYsGIQ1B9MqB2QYhBCACKAAAIQYgAigABCEHIAIoAAghBSACKAAMIQggAigAECEKIAIoABQhCyACKAAYIQ8gAigAHCERIAEoAAAhAiABKAAEIQ4gASgACCEJIAEoAAwhAQNAIAYgCiACIAYgDWoiDXNBEBAIIhBqIgpzQQwQCCECIAIgCiAQIAIgDWoiDXNBCBAIIhBqIgpzQQcQCCEGIAcgDiAHIAxqIgxzQRAQCCIOIAtqIgtzQQwQCCECIAIgDiACIAxqIgxzQQgQCCIOIAtqIgtzQQcQCCECIAUgCSADIAVqIgdzQRAQCCIJIA9qIg9zQQwQCCEDIAMgCSADIAdqIhJzQQgQCCIJIA9qIgdzQQcQCCEDIAggASAEIAhqIgRzQRAQCCIFIBFqIg9zQQwQCCEBIAEgBSABIARqIhNzQQgQCCIFIA9qIghzQQcQCCEEIAIgByAFIAIgDWoiAXNBEBAIIgVqIgdzQQwQCCECIAIgByAFIAEgAmoiDXNBCBAIIgFqIg9zQQcQCCEHIAMgCCAQIAMgDGoiAnNBEBAIIgVqIghzQQwQCCEDIAMgCCAFIAIgA2oiDHNBCBAIIgJqIhFzQQcQCCEFIAQgDiAEIBJqIgNzQRAQCCIIIApqIgpzQQwQCCEEIAQgCiAIIAMgBGoiA3NBCBAIIg5qIgpzQQcQCCEIIAYgCSAGIBNqIgRzQRAQCCIJIAtqIgtzQQwQCCEGIAYgCSAEIAZqIgRzQQgQCCIJIAtqIgtzQQcQCCEGIBRBAWoiFEEKRw0ACyAAIA0QCiAAQQRqIAwQCiAAQQhqIAMQCiAAQQxqIAQQCiAAQRBqIAIQCiAAQRRqIA4QCiAAQRhqIAkQCiAAQRxqIAEQCgvYCQExfyMAQUBqIhwkACAAKAI8IR0gACgCOCEeIAAoAjQhEiAAKAIwIRMgACgCLCEfIAAoAighICAAKAIkISEgACgCICEiIAAoAhwhIyAAKAIYISQgACgCFCElIAAoAhAhJiAAKAIMIScgACgCCCEoIAAoAgQhKSAAKAIAISoDQAJAIANCP1YEQCACIQQMAQtBACEFIBxBAEHAABAQIgchBCADUEUEQANAIAUgB2ogASAFai0AADoAACADIAVBAWoiBa1WDQALCyAEIQEgAiErC0EUIRUgKiENICkhFCAoIRAgJyEOICYhBSAlIQogJCECICMhDyAiIQwgISELICAhGCAdIREgHiEIIBIhCSATIQYgHyEHA0AgBSAMIAUgDWoiDSAGc0EQEAgiBWoiBnNBDBAIIQwgDCAFIAwgDWoiDXNBCBAIIhkgBmoiGnNBBxAIIRYgCyAKIBRqIgwgCXNBEBAIIglqIgYgCnNBDBAIIQsgCyAJIAsgDGoiFHNBCBAIIgwgBmoiG3NBBxAIIQogAiAIIAIgEGoiCHNBEBAIIgkgGGoiBnNBDBAIIQIgAiAJIAIgCGoiC3NBCBAIIgUgBmoiCHNBBxAIIRcgByAOIA9qIgYgEXNBEBAIIgJqIgcgD3NBDBAIIREgESAHIAIgBiARaiIOc0EIEAgiAmoiCXNBBxAIIRAgCiACIAogDWoiBnNBEBAIIgcgCGoiAnNBDBAIIQggCCAHIAYgCGoiDXNBCBAIIhEgAmoiGHNBBxAIIQogFyAZIBQgF2oiBnNBEBAIIgcgCWoiAnNBDBAIIQkgCSAHIAYgCWoiFHNBCBAIIgYgAmoiB3NBBxAIIQIgECAMIAsgEGoiC3NBEBAIIgkgGmoiCHNBDBAIIQ8gDyAIIAkgCyAPaiIQc0EIEAgiCWoiDHNBBxAIIQ8gFiAFIA4gFmoiDnNBEBAIIgggG2oiC3NBDBAIIQUgBSALIAggBSAOaiIOc0EIEAgiCGoiC3NBBxAIIQUgFUF+aiIVDQALIAEoAAQhLCABKAAIIS0gASgADCEuIAEoABAhLyABKAAUITAgASgAGCExIAEoABwhMiABKAAgITMgASgAJCE0IAEoACghFSABKAAsIRYgASgAMCEXIAEoADQhGSABKAA4IRogASgAPCEbIAQgASgAACANICpqcxAKIARBBGogLCAUIClqcxAKIARBCGogLSAQIChqcxAKIARBDGogLiAOICdqcxAKIARBEGogLyAFICZqcxAKIARBFGogMCAKICVqcxAKIARBGGogMSACICRqcxAKIARBHGogMiAPICNqcxAKIARBIGogMyAMICJqcxAKIARBJGogNCALICFqcxAKIARBKGogFSAYICBqcxAKIARBLGogFiAHIB9qcxAKIARBMGogFyAGIBNqcxAKIARBNGogGSAJIBJqcxAKIARBOGogGiAIIB5qcxAKIARBPGogGyARIB1qcxAKIBIgE0EBaiIHIBNJaiESIANCwABYBEACQCADQj9WDQAgA6ciAUUNAEEAIQoDQCAKICtqIAQgCmotAAA6AAAgCkEBaiIKIAFHDQALCyAAIBI2AjQgACAHNgIwIBxBQGskAAUgAUFAayEBIARBQGshAiADQkB8IQMgByETDAELCwtxACAAQuXwwYvmjZmQMzcCACAAQrLaiMvHrpmQ6wA3AgggACABKAAANgIQIAAgASgABDYCFCAAIAEoAAg2AhggACABKAAMNgIcIAAgASgAEDYCICAAIAEoABQ2AiQgACABKAAYNgIoIAAgASgAHDYCLAsLACAAIAEgAhDaAgupAwEVfyABKAIEIQsgACgCBCEMIAEoAgghDSAAKAIIIQ4gASgCDCEPIAAoAgwhAyABKAIQIRAgACgCECEEIAEoAhQhESAAKAIUIQUgASgCGCESIAAoAhghBiABKAIcIRMgACgCHCEHIAEoAiAhFCAAKAIgIQggASgCJCEVIAAoAiQhCSAAQQAgAmsiAiABKAIAIhYgACgCACIKc3EiFyAKczYCACAAIAkgCSAVcyACcSIKczYCJCAAIAggCCAUcyACcSIJczYCICAAIAcgByATcyACcSIIczYCHCAAIAYgBiAScyACcSIHczYCGCAAIAUgBSARcyACcSIGczYCFCAAIAQgBCAQcyACcSIFczYCECAAIAMgAyAPcyACcSIEczYCDCAAIA4gDSAOcyACcSIDczYCCCAAIAwgCyAMcyACcSIAczYCBCABIAogFXM2AiQgASAJIBRzNgIgIAEgCCATczYCHCABIAcgEnM2AhggASAGIBFzNgIUIAEgBSAQczYCECABIAQgD3M2AgwgASADIA1zNgIIIAEgACALczYCBCABIBYgF3M2AgALKQEBfyMAQYABayICJAAgAkEIaiABEOcCIAAgAkEIahA5IAJBgAFqJAALMgEBfyAAIAEgAUH4AGoiAhALIABBKGogAUEoaiABQdAAaiIBEAsgAEHQAGogASACEAsLrwIBE38gASgCBCEMIAAoAgQhAyABKAIIIQ0gACgCCCEEIAEoAgwhDiAAKAIMIQUgASgCECEPIAAoAhAhBiABKAIUIRAgACgCFCEHIAEoAhghESAAKAIYIQggASgCHCESIAAoAhwhCSABKAIgIRMgACgCICEKIAEoAiQhFCAAKAIkIQsgAEEAIAJrIgIgACgCACIVIAEoAgBzcSAVczYCACAAIAsgCyAUcyACcXM2AiQgACAKIAogE3MgAnFzNgIgIAAgCSAJIBJzIAJxczYCHCAAIAggCCARcyACcXM2AhggACAHIAcgEHMgAnFzNgIUIAAgBiAGIA9zIAJxczYCECAAIAUgBSAOcyACcXM2AgwgACAEIAQgDXMgAnFzNgIIIAAgAyADIAxzIAJxczYCBAskAQF/IwBBIGsiASQAIAEgABAtIAFBIBBlIQAgAUEgaiQAIAALpgQCCn8OfiAAKAIkIQQgACgCICEFIAAoAhwhBiAAKAIYIQcgACgCFCEDIAJCEFoEQCAALQBQRUEYdCEIIAAoAgQiCUEFbK0hGSAAKAIIIgpBBWytIRcgACgCDCILQQVsrSEVIAAoAhAiDEEFbK0hEyAMrSEaIAutIRggCq0hFiAJrSEUIAA1AgAhEgNAIAEoAANBAnZB////H3EgB2qtIg0gGH4gASgAAEH///8fcSADaq0iDiAafnwgASgABkEEdkH///8fcSAGaq0iDyAWfnwgASgACUEGdiAFaq0iECAUfnwgASgADEEIdiAIciAEaq0iESASfnwgDSAWfiAOIBh+fCAPIBR+fCAQIBJ+fCARIBN+fCANIBR+IA4gFn58IA8gEn58IBAg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IAFBf2pBP0sgBUHAAEtyBH8gBgUgACACIAQgAUH/AXEgAyAFQf8BcRDGAQsL0QIBA38jAEFAaiIEJAACQCACRSACQcEAT3JFBEBBfyEDIAApAFBQBEAgACAAKADgAiIDQYEBTwR/IABCgAEQWSAAIABB4ABqIgUQXiAAIAAoAOACQYB/aiIDNgDgAiADQYEBTw0DIAUgAEHgAWogAxASGiAAKADgAgUgAwutEFkgACIDLQDkAgRAIANCfzcAWAsgA0J/NwBQIABB4ABqIgMgACgA4AIiBWpBAEGAAiAFaxAQGiAAIAMQXiAEIAApAAAQESAEQQhyIAApAAgQESAEQRBqIAApABAQESAEQRhqIAApABgQESAEQSBqIAApACAQESAEQShqIAApACgQESAEQTBqIAApADAQESAEQThqIAApADgQESABIAQgAhASGiAAQcAAEAkgA0GAAhAJQQAhAwsgBEFAayQAIAMPCxAUAAtBvg5B3g5BsgJBiw8QAAALJgEBfiAAIAEgACkAQCIBfCICNwBAIAAgACkASCACIAFUrXw3AEgLCQAgAEEANgAAC0UBA38gAEGgD0HAABASQUBrQQBBpQIQEBoDQCAAIAJBA3QiA2oiBCABIANqKQAAIAQpAACFNwAAIAJBAWoiAkEIRw0ACwsWACAAEDUgAQRAIABBkJcCQiIQHBoLC5YBAQF/IwBBMGsiASQAIAEgACkAGDcDGCABIAApABA3AxAgASAAKQAANwMAIAEgACkACDcDCCABIAApACQ3AyAgASABQiggAEEgakEAIABB8JcCKAIAERQAGiAAIAEpAxg3ABggACABKQMQNwAQIAAgASkDCDcACCAAIAEpAwA3AAAgACABKQMgNwAkIAAQXyABQTBqJAALnzgCA38efiMAQYACayICJAADQCADQQN0IgQgAkGAAWpqIAEgBGopAAA3AwAgA0EBaiIDQRBHDQALIAIgAEHAABASIgFC8e30+KWn/aelfzcDWCAAKQBYISAgACkASCEcIAApAFAhCyABKQMAIAEpAyAiISABKQOAAXx8IhYgACkAQIVC0YWa7/rPlIfRAIVBIBAGIRsgASAbIBtCiJLznf/M+YTqAHwiHSAhhUEYEAYiHyAWfCABKQOIASIhfCIIhUEQEAYiFjcDYCABIBYgHXwiHTcDQCABIB0gH4VBPxAGIh83AyAgHCABKQMIIAEpA5ABIhIgASkDKCIVfHwiB4VCn9j52cKR2oKbf4VBIBAGIRsgASAbIBtCu86qptjQ67O7f3wiHCAVhUEYEAYiFSAHfCABKQOYAXwiE4VBEBAGIgc3A2ggASAHIBx8IgY3A0ggBiAVhUE/EAYhFSALIAEpAxAgASkDoAEiFCABKQMwIht8fCIFhULr+obav7X2wR+FQSAQBiILQqvw0/Sv7ry3PHwiDSAbhUEYEAYhHCAcIAsgASkDqAEiGyAFIBx8fCIJhUEQEAYiDiANfCIMhUE/EAYhCyAgIAEpAxggASkDsAEiHCABKQM4IgV8fCINhUL5wvibkaOz8NsAhUEgEAYiD0Lx7fT4paf9p6V/fCIKIAWFQRgQBiEFIAUgCiAPIAEpA7gBIiAgBSANfHwiEYVBEBAGIg98IgqFQT8QBiEFIA8gASkDwAEiDSAIIBV8fCIQhUEgEAYhCCABIAggFSAIIAx8IgyFQRgQBiIVIBB8IAEpA8gBIhB8IheFQRAQBiIINwN4IAEgCCAMfCIMNwNQIAwgFYVBPxAGIQ8gCyAKIBYgASkD0AEiFSALIBN8fCIThUEgEAYiGHwiCoVBGBAGIRYgFiAKIBggASkD2AEiCyATIBZ8fCIZhUEQEAYiGHwiCoVBPxAGIRMgBSAHIAEpA+ABIhYgBSAJfHwiCYVBIBAGIhogHXwiHoVBGBAGIR0gHSAeIBogASkD6AEiByAJIB18fCIJhUEQEAYiGnwiHoVBPxAGIQUgHyAOIAEpA/ABIh0gESAffHwiEYVBIBAGIg4gBnwiIoVBGBAGIQYgHiAYIAYgDiABKQP4ASIfIAYgEXx8IhGFQRAQBiIOICJ8IiKFQT8QBiIGIBcgHXx8IheFQSAQBiIYfCIeIAaFQRgQBiEGIAEgBiAYIAYgFSAXfHwiF4VBEBAGIhggHnwiHoVBPxAGIgY3AyAgDyAiIBogDyAUfCAZfCIUhUEgEAYiGXwiGoVBGBAGIQ8gDyAZIA8gDSAUfHwiFIVBEBAGIhkgGnwiGoVBPxAGIQ8gEyAOIBAgE3wgCXwiCYVBIBAGIg4gDHwiEIVBGBAGIQwgDCAOIAwgCSAffHwiE4VBEBAGIgkgEHwiDoVBPxAGIQwgBSAKIAggBSAHfCARfCIRhUEgEAYiCHwiCoVBGBAGIQUgBSAKIAggBSARIBx8fCIKhUEQEAYiCHwiEYVBPxAGIQUgASAPIA4gCCAPIBcgIXx8IhCFQSAQBiIIfCIOhUEYEAYiDyAQIBZ8fCIQIAiFQRAQBiIINwN4IA8gCCAOfCIOhUE/EAYhDyAMIBEgGCABKQOAASIXIAwgFHx8IhSFQSAQBiIYfCIRhUEYEAYhDCAMIBEgGCAMIBIgFHx8IhSFQRAQBiIYfCIRhUE/EAYhDCAFIBkgBSALIBN8fCIThUEgEAYiGSAefCIehUEYEAYhBSAFIB4gGSAFIBMgIHx8IiKFQRAQBiIZfCIehUE/EAYhBSAGIAkgBiAbfCAKfCIKhUEgEAYiCSAafCIahUEYEAYhBiAeIBggBiAaIAkgASkDmAEiEyAGIAp8fCIKhUEQEAYiCXwiGoVBPxAGIgYgCyAQfHwiEIVBIBAGIhh8Ih4gBoVBGBAGIQYgASAGIBggBiANIBB8fCIQhUEQEAYiGCAefCIehUE/EAYiBjcDICAPIBogGSAPIBZ8IBR8IhSFQSAQBiIZfCIahUEYEAYhDSANIBkgDSAUIBd8fCIPhUEQEAYiFCAafCIXhUE/EAYhDSAMIA4gCSAMIBt8ICJ8IhmFQSAQBiIJfCIOhUEYEAYhDCAMIA4gCSAMIBIgGXx8Ig6FQRAQBiIJfCIZhUE/EAYhDCAFIAggBSAffCAKfCIKhUEgEAYiCCARfCIRhUEYEAYhBSAFIAggBSAHIAp8fCIKhUEQEAYiCCARfCIRhUE/EAYhBSABIA0gGSAIIA0gECAVfHwiEIVBIBAGIgh8IhmFQRgQBiIaIBAgHXx8IhAgCIVBEBAGIg03A3ggGiANIBl8IhmFQT8QBiEIIAwgESAYIAwgDyATfHwiD4VBIBAGIhF8IhiFQRgQBiEMIAwgGCARIAwgDyAcfHwiGoVBEBAGIhF8IhiFQT8QBiEMIAUgFCAFIA4gIHx8Ig+FQSAQBiIUIB58Ig6FQRgQBiEFIAUgDiAUIAUgDyAhfHwiHoVBEBAGIiJ8Ig6FQT8QBiEFIAYgCSABKQPIASIPIAYgCnx8IgqFQSAQBiIJIBd8IheFQRgQBiEGIA4gESAGIBcgCSABKQOgASIUIAYgCnx8IgqFQRAQBiIJfCIXhUE/EAYiBiAQICB8fCIQhUEgEAYiEXwiDiAGhUEYEAYhBiABIAYgDiARIAYgDyAQfHwiEIVBEBAGIhF8Ig6FQT8QBiIGNwMgIAggFyAiIAggE3wgGnwiE4VBIBAGIhp8IheFQRgQBiEIIAggFyAaIAggEyAhfHwiE4VBEBAGIhp8IheFQT8QBiEIIAwgGSAJIAcgDHwgHnwiHoVBIBAGIgl8IhmFQRgQBiEHIAcgCSAHIBYgHnx8IgyFQRAQBiIJIBl8IhmFQT8QBiEHIAUgDSAFIAt8IAp8IgqFQSAQBiINIBh8IhiFQRgQBiEFIAUgDSAFIAogHXx8IgqFQRAQBiINIBh8IhiFQT8QBiEFIAEgCCAZIA0gCCAQIBJ8fCIQhUEgEAYiDXwiGYVBGBAGIgggECAcfHwiECANhUEQEAYiDTcDeCAIIA0gGXwiGYVBPxAGIQggByARIAcgEyAbfHwiE4VBIBAGIhEgGHwiGIVBGBAGIQcgByAYIBEgByATIBV8fCIehUEQEAYiEXwiGIVBPxAGIQcgBSAOIBogBSAMIBR8fCIThUEgEAYiGnwiDoVBGBAGIQUgBSAOIBogASkDgAEiDCAFIBN8fCIihUEQEAYiGnwiDoVBPxAGIQUgBiAJIAYgH3wgCnwiCoVBIBAGIgkgF3wiE4VBGBAGIQYgDiARIAYgEyAJIAEpA8ABIhMgBiAKfHwiCoVBEBAGIgl8IheFQT8QBiIGIA8gEHx8Ig+FQSAQBiIRfCIOIAaFQRgQBiEGIAEgBiAOIBEgBiAMIA98fCIPhUEQEAYiDnwiEYVBPxAGIgY3AyAgCCAXIBogCCAbfCAefCIQhUEgEAYiGnwiF4VBGBAGIQggCCAXIBogCCAQICB8fCIQhUEQEAYiF3wiGoVBPxAGIQggByAZIAkgByASfCAifCIehUEgEAYiCXwiGYVBGBAGIQcgByAJIAcgFCAefHwiFIVBEBAGIgkgGXwiGYVBPxAGIQcgBSANIAUgFXwgCnwiCoVBIBAGIg0gGHwiGIVBGBAGIQUgBSANIAUgCiAffHwiCoVBEBAGIg0gGHwiGIVBPxAGIQUgASAIIBkgDSAIIA8gHXx8Ig+FQSAQBiINfCIZhUEYEAYiCCAPICF8fCIPIA2FQRAQBiINNwN4IAggDSAZfCIZhUE/EAYhCCAHIA4gByALIBB8fCIQhUEgEAYiDiAYfCIYhUEYEAYhByAHIA4gByAQIBZ8fCIQhUEQEAYiDiAYfCIYhUE/EAYhByAFIBEgFyAFIBQgHHx8IhSFQSAQBiIXfCIRhUEYEAYhBSAFIBEgFyAFIBMgFHx8IhSFQRAQBiIRfCIXhUE/EAYhBSAGIBogCSABKQOYASIeIAYgCnx8IgqFQSAQBiIJfCIahUEYEAYhBiAXIA4gBiAaIAkgASkD6AEiIiAGIAp8fCIKhUEQEAYiCXwiGoVBPxAGIgYgDyASfHwiD4VBIBAGIg58IhcgBoVBGBAGIRIgASASIBcgDiASIA8gFnx8Ig+FQRAQBiIOfCIXhUE/EAYiEjcDICAIIBEgCCAcfCAQfCIQhUEgEAYiESAafCIahUEYEAYhBiAGIBEgBiAQIBV8fCIIhUEQEAYiESAafCIQhUE/EAYhBiAHIAkgByAMfCAUfCIMhUEgEAYiFCAZfCIJhUEYEAYhByAHIBQgByALIAx8fCIMhUEQEAYiFCAJfCIJhUE/EAYhCyAFIA0gBSATfCAKfCIThUEgEAYiDSAYfCIKhUEYEAYhByAHIA0gByATIB58fCIThUEQEAYiBSAKfCINhUE/EAYhByABIAYgCSAFIAEpA6ABIAYgD3x8Ig+FQSAQBiIFfCIJhUEYEAYiCiAPICJ8fCIPIAWFQRAQBiIGNwN4IAogBiAJfCIJhUE/EAYhBSALIA0gDiALIAggIHx8IgiFQSAQBiIOfCINhUEYEAYhCyALIA0gDiALIAggG3x8IgiFQRAQBiIOfCINhUE/EAYhCyAHIBEgByAMIB98fCIMhUEgEAYiCiAXfCIRhUEYEAYhByAHIAogByAMIB18fCIMhUEQEAYiCiARfCIRhUE/EAYhByASIBQgEiAhfCATfCIThUEgEAYiFCAQfCIQhUEYEAYhEiARIA4gEiAUIAEpA8gBIBIgE3x8IhOFQRAQBiIUIBB8IhCFQT8QBiISIA8gFnx8Ig+FQSAQBiIOfCIRIBKFQRgQBiESIAEgEiAOIBIgDyAbfHwiD4VBEBAGIg4gEXwiEYVBPxAGIhI3AyAgBSAKIAUgIXwgCHwiCIVBIBAGIgogEHwiEIVBGBAGIQUgBSAKIAUgCCAffHwiCIVBEBAGIgogEHwiEIVBPxAGIQUgCyAUIAsgHXwgDHwiDIVBIBAGIhQgCXwiCYVBGBAGIQsgCyAUIAEpA+gBIAsgDHx8IgyFQRAQBiIUIAl8IgmFQT8QBiELIAcgDSAGIAEpA6ABIAcgE3x8Ig2FQSAQBiIGfCIThUEYEAYhByAHIAYgByANIBV8fCINhUEQEAYiBiATfCIThUE/EAYhByABIAUgCSAGIAEpA4ABIAUgD3x8Ig+FQSAQBiIGfCIJhUEYEAYiBSAPICB8fCIPIAaFQRAQBiIGNwN4IAUgBiAJfCIJhUE/EAYhBSALIBMgDiALIAggHHx8IgiFQSAQBiITfCIOhUEYEAYhCyALIBMgASkDmAEgCCALfHwiCIVBEBAGIhMgDnwiDoVBPxAGIQsgByAKIAEpA8gBIAcgDHx8IgyFQSAQBiIKIBF8IhGFQRgQBiEHIAcgCiABKQOQASAHIAx8fCIMhUEQEAYiCiARfCIRhUE/EAYhByASIBQgASkDwAEgDSASfHwiDYVBIBAGIhQgEHwiEIVBGBAGIRIgEiAQIBQgASkD2AEiFyANIBJ8fCINhUEQEAYiFHwiEIVBPxAGIRIgEiATIAEpA+gBIA8gEnx8Ig+FQSAQBiITIBF8IhGFQRgQBiESIAEgEiATIA8gEnwgF3wiD4VBEBAGIhMgEXwiEYVBPxAGIhI3AyAgBSAKIAUgIHwgCHwiCIVBIBAGIgogEHwiEIVBGBAGIQUgBSAKIAUgCCAdfHwiCIVBEBAGIgogEHwiEIVBPxAGIQUgCyAUIAsgFnwgDHwiDIVBIBAGIhQgCXwiCYVBGBAGIQsgCyAUIAsgDCAhfHwiDIVBEBAGIhQgCXwiCYVBPxAGIQsgByAGIAEpA5gBIAcgDXx8Ig2FQSAQBiIGIA58Ig6FQRgQBiEHIAcgBiABKQPIASAHIA18fCINhUEQEAYiBiAOfCIOhUE/EAYhByABIAUgBiAFIA8gG3x8Ig+FQSAQBiIGIAl8IgmFQRgQBiIFIA98IAEpA4ABfCIPIAaFQRAQBiIGNwN4IAUgBiAJfCIJhUE/EAYhBSALIBMgCyAIIB98fCIIhUEgEAYiEyAOfCIOhUEYEAYhCyALIBMgASkDoAEgCCALfHwiCIVBEBAGIhMgDnwiDoVBPxAGIQsgByAKIAEpA8ABIAcgDHx8IgyFQSAQBiIKIBF8IhGFQRgQBiEHIAcgCiAHIAwgHHx8IgyFQRAQBiIKIBF8IhGFQT8QBiEHIBIgFCABKQOQASANIBJ8fCINhUEgEAYiFCAQfCIQhUEYEAYhEiARIBMgEiAUIBIgDSAVfHwiDYVBEBAGIhQgEHwiEIVBPxAGIhIgDyAcfHwiD4VBIBAGIhN8IhEgEoVBGBAGIRIgASASIBMgEiAPIB98fCIPhUEQEAYiEyARfCIRhUE/EAYiEjcDICAFIAogBSAdfCAIfCIIhUEgEAYiCiAQfCIQhUEYEAYhBSAFIAogASkDyAEgBSAIfHwiCIVBEBAGIgogEHwiEIVBPxAGIQUgCyAUIAEpA9gBIAsgDHx8IgyFQSAQBiIUIAl8IgmFQRgQBiELIAsgFCABKQOYASALIAx8fCIMhUEQEAYiFCAJfCIJhUE/EAYhCyAHIAYgASkDgAEgByANfHwiDYVBIBAGIgYgDnwiDoVBGBAGIQcgByAGIAEpA8ABIAcgDXx8Ig2FQRAQBiIGIA58Ig6FQT8QBiEHIAEgBSAGIAUgDyAWfHwiD4VBIBAGIgYgCXwiCYVBGBAGIgUgD3wgASkDkAEiD3wiFyAGhUEQEAYiBjcDeCAFIAYgCXwiCYVBPxAGIQUgCyATIAEpA+gBIAggC3x8IgiFQSAQBiITIA58Ig6FQRgQBiELIAsgEyALIAggIHx8IgiFQRAQBiITIA58Ig6FQT8QBiELIAcgCiAHIAwgIXx8IgyFQSAQBiIKIBF8IhGFQRgQBiEHIAcgESAKIAEpA6ABIhggByAMfHwiDIVBEBAGIgp8IhGFQT8QBiEHIBIgFCASIBV8IA18Ig2FQSAQBiIUIBB8IhCFQRgQBiESIBEgEyASIBQgEiANIBt8fCINhUEQEAYiFCAQfCIQhUE/EAYiEiAVIBd8fCIXhUEgEAYiE3wiESAShUEYEAYhFSABIBUgEyAPIBUgF3x8Ig+FQRAQBiITIBF8IhGFQT8QBiIVNwMgIAUgCiABKQPAASAFIAh8fCIIhUEgEAYiCiAQfCIQhUEYEAYhEiASIAogGCAIIBJ8fCIFhUEQEAYiCCAQfCIKhUE/EAYhEiALIAkgFCALICB8IAx8IgyFQSAQBiIUfCIJhUEYEAYhCyALIBQgCyAMIBx8fCIMhUEQEAYiFCAJfCIJhUE/EAYhCyAHIAYgByAhfCANfCINhUEgEAYiBiAOfCIOhUEYEAYhByAHIAYgByANIBt8fCINhUEQEAYiBiAOfCIOhUE/EAYhByABIBIgCSAGIBIgDyAffHwiD4VBIBAGIgZ8IgmFQRgQBiIQIA98IAEpA9gBfCIPIAaFQRAQBiISNwN4IBAgCSASfCIJhUE/EAYhBiALIBMgASkDyAEgBSALfHwiBYVBIBAGIhMgDnwiDoVBGBAGIQsgCyATIAsgBSAdfHwiBYVBEBAGIhMgDnwiDoVBPxAGIQsgByARIAggASkDmAEiESAHIAx8fCIMhUEgEAYiCHwiEIVBGBAGIQcgByAIIAcgDCAWfHwiDIVBEBAGIgggEHwiEIVBPxAGIQcgFSAKIBQgASkD6AEgDSAVfHwiDYVBIBAGIhR8IgqFQRgQBiEVIBUgCiAUIAEpA4ABIhcgDSAVfHwiDYVBEBAGIhR8IgqFQT8QBiEVIBUgEyAPIBV8IBd8Ig+FQSAQBiITIBB8IhCFQRgQBiEVIAEgFSATIBUgDyAhfHwiD4VBEBAGIhMgEHwiEIVBPxAGIhU3AyAgBiAIIAEpA5ABIAUgBnx8IgWFQSAQBiIIIAp8IgqFQRgQBiEGIAYgCCARIAUgBnx8IgWFQRAQBiIIIAp8IgqFQT8QBiEGIAsgFCABKQOgASALIAx8fCIMhUEgEAYiFCAJfCIJhUEYEAYhCyALIBQgCyAMIBt8fCIMhUEQEAYiFCAJfCIJhUE/EAYhCyAHIA4gEiAHIBx8IA18Ig2FQSAQBiIRfCIOhUEYEAYhEiASIBEgEiANICB8fCINhUEQEAYiByAOfCIOhUE/EAYhEiABIAYgByABKQPAASAGIA98fCIPhUEgEAYiByAJfCIJhUEYEAYiBiAPfCABKQPIAXwiDyAHhUEQEAYiBzcDeCAGIAcgCXwiCYVBPxAGIQYgCyAOIBMgASkD0AEiESAFIAt8fCIFhUEgEAYiE3wiDoVBGBAGIQsgCyATIAEpA9gBIAUgC3x8IgWFQRAQBiITIA58Ig6FQT8QBiELIBIgCCASIAwgFnx8IgyFQSAQBiIIIBB8IhCFQRgQBiESIBIgCCABKQPoASAMIBJ8fCIMhUEQEAYiCCAQfCIQhUE/EAYhEiAVIBQgFSAdfCANfCINhUEgEAYiFCAKfCIKhUEYEAYhFSATIBUgFCAVIA0gH3x8Ig2FQRAQBiIUIAp8IgqFQT8QBiIVIA8gHXx8Ig+FQSAQBiITIBB8IhAgFYVBGBAGIR0gASAdIBMgDyAdfCARfCIPhUEQEAYiEyAQfCIRhUE/EAYiHTcDICAGIAggASkDoAEgBSAGfHwiBYVBIBAGIgggCnwiCoVBGBAGIRUgFSAIIAEpA8ABIAUgFXx8IgaFQRAQBiIFIAp8IgiFQT8QBiEVIAsgFCABKQPIASALIAx8fCIMhUEgEAYiFCAJfCIJhUEYEAYhCyALIBQgCyAMIB98fCIMhUEQEAYiFCAJfCIJhUE/EAYhHyASIAcgASkD6AEgDSASfHwiC4VBIBAGIgcgDnwiDYVBGBAGIRIgEiAHIBIgCyAcfHwiC4VBEBAGIgcgDXwiDYVBPxAGIRwgASAWIBUgDyAhfHwiIXwgFSAHICGFQSAQBiIWIAl8IhKFQRgQBiIVfCIhNwMAIAEgFiAhhUEQEAYiFjcDeCABIBIgFnwiFjcDUCABIBUgFoVBPxAGNwMoIAEgHyATIAEpA4ABIAYgH3x8IhaFQSAQBiIVIA18IhKFQRgQBiIfIBZ8IAEpA5ABfCIWNwMIIAEgFSAWhUEQEAYiFjcDYCABIBIgFnwiFjcDWCABIBYgH4VBPxAGNwMwIAEgICABKQPYASAMIBx8fCIWfCAcIAUgFoVBIBAGIiAgEXwiFoVBGBAGIhx8Ih83AxAgASAfICCFQRAQBiIgNwNoIAEgFiAgfCIgNwNAIAEgHCAghUE/EAY3AzggASAdIBQgGyAdfCALfCIbhUEgEAYiHCAIfCIghUEYEAYiFiAbfCABKQOYAXwiGzcDGCABIBsgHIVBEBAGIhs3A3AgASAbICB8Ihs3A0ggASAWIBuFQT8QBjcDICAAIAEpA0AgISAAKQAAhYU3AABBASEDA0AgACADQQN0IgJqIgQgASACaiICKQMAIAQpAACFIAJBQGspAwCFNwAAIANBAWoiA0EIRw0ACyABQYACaiQACwkAIABBATYAIAsEAEEDCwQAQX8L4wMBCn8jAEEQayIJJAAgCUEANgIMIAcQZAJAAkAgA0UNACAHQQRxIQ8CfwJAAkADQCALIQgCQAJAA0AgAiAIaiwAACENAn8gDwRAIA0QqQIMAQsgDRCoAgsiEEH/AUcNASAERQ0CIAQgDRBDRQ0EIAhBAWoiCCADSQ0ACyAJIAMgC0EBaiIAIAAgA0kbNgIMDAQLIBAgDkEGdGohDgJAIApBBmoiC0EISQRAIAshCgwBCyAKQX5qIQogDCABTwRAIAkgCDYCDEGAmAJBxAA2AgBBAQwGCyAAIAxqIA4gCnY6AAAgDEEBaiEMCyAIQQFqIgsgA0kNAQsLIAkgCzYCDAwBCyAJIAg2AgwLQQALIQggCkEETQ0AQX8hAAwBC0F/IQAgCCAOQX8gCnRBf3Nxcg0AIAdBAnFFBEAgAiADIAlBDGogBCAKQQF2EKcCIgANAQtBACEAAkAgBEUNACAJKAIMIgggA08NAAJAA0AgBCACIAhqLAAAEENFDQEgCEEBaiIIIANHDQALIAkgAzYCDAwBCyAJIAg2AgwLIAwhEQsgCSgCDCEBAkAgBgRAIAYgASACajYCAAwBCyABIANGDQBBgJgCQRw2AgBBfyEACyAFBEAgBSARNgIACyAJQRBqJAAgAAvWAwEGfyAEEGQgA0EDbiIFQQJ0IQcCQCAFQX1sIANqIgVFDQAgBEECcUUEQCAHQQRqIQcMAQsgB0ECciAFQQF2aiEHCwJAAkAgBwJ/AkAgByABSQRAAkAgBEEEcQRAQQAgA0UNBBpBACEEQQAhBQwBC0EAIANFDQMaQQAhBEEAIQUMAgsDQCACIAhqLQAAIAZBCHRyIQYgBEEIaiEEA0AgACAFIglqIAYgBCIKQXpqIgR2QT9xEJABOgAAIAVBAWohBSAEQQVLDQALIAhBAWoiCCADRw0ACyAFIARFDQIaIAAgBWogBkEMIAprdEE/cRCQAToAACAJQQJqDAILEBQACwNAIAIgCGotAAAgBkEIdHIhBiAEQQhqIQQDQCAAIAUiCWogBiAEIgpBemoiBHZBP3EQjwE6AAAgBUEBaiEFIARBBUsNAAsgCEEBaiIIIANHDQALIAUgBEUNABogACAFaiAGQQwgCmt0QT9xEI8BOgAAIAlBAmoLIgZPBEAgByAGSw0BIAYhBwwCC0EAIgBB8JUCaiAAQYOWAmpB5gEgAEGTlgJqEAAACyAAIAZqQT0gByAGaxAQGgsgACAHakEAIAEgB0EBaiICIAIgAUkbIAdrEBAaIAALEAAgAEF5cUEBRwRAEBQACwtFAQJ/IwBBEGsiA0EAOgAPIAEEQANAIAMgACACai0AACADLQAPcjoADyACQQFqIgIgAUcNAAsLIAMtAA9Bf2pBCHZBAXELCwAgACABIAIQpwELCAAgACABEHILEAAgACABIAIgAyAEIAUQagsQACAAIAEgAiADIAQgBRBrC50CAgF/AX4jAEHgAGsiBiQAIAYgBCAFEG0aIAZBIGpCICAEQRBqIgUgBkHclwIoAgAREQAaQX8hBAJAAkAgAiABIAMgBkEgakHElwIoAgARDQANAEEAIQQgAEUNASABIABLQQAgASAAa60gA1QbRUEAIAAgAU0gACABa60gA1pyG0UEQCAAIAEgA6cQRyEBCwJAQiAgAyADQiBWGyIHUARAIAZBIGogBkEgaiAHQiB8IAUgBhBxDAELIAZBQGsgASAHpyICEBIhBCAGQSBqIAZBIGogB0IgfCAFIAYQcSAAIAQgAhASGgtBACEEIANCIVQNACAAIAenIgJqIAEgAmogAyAHfSAFIAYQpQELIAZBIBAJCyAGQeAAaiQAIAQLngICAX8BfiMAQeACayIGJAAgBiAEIAUQbRogACACS0EAIAAgAmutIANUG0VBACACIABNIAIgAGutIANachtFBEAgACACIAOnEEchAgsgBkIANwM4IAZCADcDMCAGQgA3AyggBkIANwMgQiAgAyADQiBWGyIHUCIFRQRAIAZBQGsgAiAHpxASGgsgBkEgaiAGQSBqIAdCIHwgBEEQaiIEIAYQcSAGQeAAaiAGQSBqECQgBUUEQCAAIAZBQGsgB6cQEhoLIAZBIGpBwAAQCSADQiFaBEAgACAHpyIFaiACIAVqIAMgB30gBCAGEKUBCyAGQSAQCSAGQeAAaiAAIAMQDSAGQeAAaiABECMgBkHgAGpBgAIQCSAGQeACaiQAQQALCwAgACABIAIQvQIL8AQBFX9BstqIywchA0HuyIGZAyEEQeXwwYsGIQVB9MqB2QYhBkEUIQ8gAigAACEKIAIoAAQhECACKAAIIRIgAigADCELIAIoABAhDCACKAAUIQcgAigAGCENIAIoABwhDiABKAAAIQIgASgABCEIIAEoAAghCSABKAAMIQEDQCAFIAdqQQcQCCALcyILIAVqQQkQCCAJcyIJIAtqQQ0QCCAHcyIRIAlqQRIQCCETIAQgCmpBBxAIIAFzIgEgBGpBCRAIIA1zIg0gAWpBDRAIIApzIgogDWpBEhAIIRQgAiADakEHEAggDnMiDiADakEJEAggEHMiByAOakENEAggAnMiFSAHakESEAghFiAGIAxqQQcQCCAScyICIAZqQQkQCCAIcyIIIAJqQQ0QCCAMcyIMIAhqQRIQCCEXIAIgBSATcyIFakEHEAggCnMiCiAFakEJEAggB3MiECAKakENEAggAnMiEiAQakESEAggBXMhBSAEIBRzIgQgC2pBBxAIIBVzIgIgBGpBCRAIIAhzIgggAmpBDRAIIAtzIgsgCGpBEhAIIARzIQQgAyAWcyIDIAFqQQcQCCAMcyIMIANqQQkQCCAJcyIJIAxqQQ0QCCABcyIBIAlqQRIQCCADcyEDIAYgF3MiBiAOakEHEAggEXMiByAGakEJEAggDXMiDSAHakENEAggDnMiDiANakESEAggBnMhBiAPQQJLIREgD0F+aiEPIBENAAsgACAFEAogAEEEaiAEEAogAEEIaiADEAogAEEMaiAGEAogAEEQaiACEAogAEEUaiAIEAogAEEYaiAJEAogAEEcaiABEApBAAsEAEEICygAIAJCgICAgBBaBEAQFAALIAAgASACIAMgBCAFQfCXAigCABEUABoLJAAgAUKAgICAEFoEQBAUAAsgACABIAIgA0HolwIoAgAREQAaCxkAIAAgASACIANCACAEQeCXAigCABEVABoLEAAgACABQdiXAigCABECAAsrAQJ/IwBBEGsiACQAIABBADoAD0GACCAAQQ9qQQAQASEBIABBEGokACABC5USAR5+IAAQDyEQIAA1AAIhESAAQQVqEA8hEiAANQAHIRkgADUACiEaIABBDWoQDyEbIAA1AA8hCyAAQRJqEA8hCiAAQRVqEA8hCCAANQAXIQUgAEEaahAPIQEgADUAHCEcIAA1AB8hEyAAQSJqEA8hFCAANQAkIQwgAEEnahAPIQ8gAEEqahAPIQkgADUALCEGIAAgAEEvahAPQgKIQv///wCDIgJC0asIfiABQgKIQv///wCDfCAANQAxQgeIQv///wCDIgFC04xDfnwgADUANEIEiEL///8AgyIDQuf2J358IABBN2oQD0IBiEL///8AgyIEQpjaHH58IAA1ADlCBohC////AIMiB0KT2Ch+fCIVIAZCBYhC////AIMgADUAPEIDiCIGQoOhVn4gCUL///8Ag3wiDUKAgEB9Ig5CFYd8IglCg6FWfnwgAkLTjEN+IAVCBYhC////AIN8IAFC5/YnfnwgA0KY2hx+fCAEQpPYKH58IAJC5/YnfiAIQv///wCDfCABQpjaHH58IANCk9gofnwiBUKAgEB9IhZCFYh8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QhCIQh+DIAFC////AIMiAUIFhoQ8ABcgACAIQv///wCDIANCFYd8IgJCEYg8AB8gACACQgmIPAAeIAAgAkIBiDwAHSAAIANC////AIMiA0IChiABQhOIhDwAGiAAIAJCB4YgA0IOiIQ8ABwL2gEBBX8jAEEQayIDQQA2AAsgA0EANgIIA0AgACACai0AACEEQQAhAQNAIANBCGogAWoiBSAFLQAAIAFBBXRBoBlqIAJqLQAAIARzcjoAACABQQFqIgFBB0cNAAsgAkEBaiICQR9HDQALIAAtAB9B/wBxIQJBACEAQQAhAQNAIANBCGogAWoiBCAELQAAIAIgAUEFdEG/GWotAABzcjoAACABQQFqIgFBB0cNAAtBACEBA0AgA0EIaiAAai0AAEF/aiABciEBIABBAWoiAEEHRw0ACyABQQh2QQFxC54DAQV/IwBB0ANrIgIkAANAIANBAXQiBSACQZADamogASADai0AACIGQQ9xOgAAIAJBkANqIAVBAXJqIAZBBHY6AAAgA0EBaiIDQSBHDQALQQAhAwNAIAJBkANqIARqIgEgAS0AACADaiIBIAFBCGoiAUHwAXFrOgAAIAFBGHRBHHUhAyAEQQFqIgRBP0cNAAsgAiACLQDPAyADajoAzwMgABCqAUEBIQMDQCACIANBAXYgAkGQA2ogA2osAAAQqAEgAkHwAWogACACEHcgACACQfABahAVIANBPkkhASADQQJqIQMgAQ0ACyACQfABaiAAEE8gAkH4AGogAkHwAWoQUCACQfABaiACQfgAahA5IAJB+ABqIAJB8AFqEFAgAkHwAWogAkH4AGoQOSACQfgAaiACQfABahBQIAJB8AFqIAJB+ABqEDkgACACQfABahAVQQAhAwNAIAIgA0EBdiACQZADaiADaiwAABCoASACQfABaiAAIAIQdyAAIAJB8AFqEBUgA0E+SSEBIANBAmohAyABDQALIAJB0ANqJAALiwEBBH8jAEEwayIFJAAgACABQShqIgMgARATIABBKGoiBCADIAEQFiAAQdAAaiIDIAAgAhALIAQgBCACQShqEAsgAEH4AGoiBiACQdAAaiABQfgAahALIAUgAUHQAGoiASABEBMgACADIAQQFiAEIAMgBBATIAMgBSAGEBMgBiAFIAYQFiAFQTBqJAALXgEBfyMAQZABayICJAAg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ASEEA0AgAyIFQQFqIQMCQCAAIAVqIgYtAABFIAVB/gFLcg0AQQEhASAEQQUgBEEFSRtBAWohCSADIQIDQCABIQcCQCAAIAJqIgEsAAAiCEUNACAIIAd0IgggBiwAACIKaiILQQ9MBEAgBiALOgAAIAFBADoAAAwBCyAKIAhrIgFBcUgNAiAGIAE6AAADQCAAIAJqIgEtAABFBEAgAUEBOgAADAILIAFBADoAACACQf8BSSEBIAJBAWohAiABDQALCyAHQQFqIgEgBWohAiAHIAlHDQALCyAEQX9qIQQgA0GAAkcNAAsLlQEBBH8jAEEwayIFJAAgACABQShqIgMgARATIABBKGoiBCADIAEQFiAAQdAAaiIDIAAgAkEoahALIAQgBCACEAsgAEH4AGoiBiACQfgAaiABQfgAahALIAAgAUHQAGogAkHQAGoQCyAFIAAgABATIAAgAyAEEBYgBCADIAQQEyADIAUgBhAWIAYgBSAGEBMgBUEwaiQAC9QCAQN/IwBBoAJrIgIkACAAQShqIgMgARB6IABB0ABqIgQQHSACQfABaiADEAwgAkHAAWogAkHwAWpB0BAQCyACQfABaiACQfABaiAEEBYgAkHAAWogAkHAAWogBBATIAJBkAFqIAJBwAFqEAwgAkGQAWogAkGQAWogAkHAAWoQCyAAIAJBkAFqEAwgACAAIAJBwAFqEAsgACAAIAJB8AFqEAsgACAAELABIAAgACACQZABahALIAAgACACQfABahALIAJB4ABqIAAQDCACQeAAaiACQeAAaiACQcABahALIAJBMGogAkHgAGogAkHwAWoQFgJ/IAJBMGoQUkUEQCACIAJB4ABqIAJB8AFqEBNBfyACEFJFDQEaIAAgAEGAERALCyAAEK4BIAEtAB9BB3ZGBEAgACAAEHkLIABB+ABqIAAgAxALQQALIQAgAkGgAmokACAACyYBAX8jAEEgayIBJAAgASAAEC0gAS0AACEAIAFBIGokACAAQQFxC6oMAQZ/IAAgAWohBQJAAkAgACgCBCICQQFxDQAgAkEDcUUNASAAKAIAIgMgAWohASAAIANrIgBBmJgCKAIARwRAQZSYAigCACEEIANB/wFNBEAgACgCCCIEIANBA3YiA0EDdEGsmAJqRxogBCAAKAIMIgJGBEBBhJgCQYSYAigCAEF+IAN3cTYC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AkHgAGoQDEEBIQMDQCACQTBqIAJBMGoQDCADQQFqIgNBMkcNAAsgAkEwaiACQTBqIAJB4ABqEAsgAiACQTBqEAxBASEDA0AgAiACEAwgA0EBaiIDQeQARw0ACyACQTBqIAIgAkEwahALIAJBMGogAkEwahAMQQEhAwNAIAJBMGogAkEwahAMIANBAWoiA0EyRw0ACyACQeAAaiACQTBqIAJB4ABqEAsgAkHgAGogAkHgAGoQDCACQeAAaiACQeAAahAMIAAgAkHgAGogARALIAJBkAFqJAALKgACfwJ/QTBBgH8gAUkNARogARC0ASIBRQsEQEEwDwsgACABNgIAQQALC84CAQl/IAAgASgCICICIAEoAhwiAyABKAIYIgQgASgCFCIFIAEoAhAiBiABKAIMIgcgASgCCCIIIAEoAgQiCSABKAIAIgogASgCJCIBQRNsQYCAgAhqQRl2akEadWpBGXVqQRp1akEZdWpBGnVqQRl1akEadWpBGXVqQRp1IAFqQRl1QRNsIApqIgpB////H3E2AgAgACAJIApBGnVqIglB////D3E2AgQgACAIIAlBGXVqIghB////H3E2AgggACAHIAhBGnVqIgdB////D3E2AgwgACAGIAdBGXVqIgZB////H3E2AhAgACAFIAZBGnVqIgVB////D3E2AhQgACAEIAVBGXVqIgRB////H3E2AhggACADIARBGnVqIgNB////D3E2AhwgACACIANBGXVqIgJB////H3E2AiAgACABIAJBGnVqQf///w9xNgIkCwoAIAAgARB7QQAL1wIBBn9BgH8gAE0EQEGAmAJBMDYCAEEADwtBECAAQQtqQXhxIABBC0kbIgNBzABqECAiAEUEQEEADwsgAEF4aiEBAkAgAEE/cUUEQCABIQAMAQsgAEF8aiIFKAIAIgZBeHEgAEE/akFAcUF4aiIAIABBQGsgACABa0EPSxsiACABayICayEEIAZBA3FFBEAgASgCACEBIAAgBDYCBCAAIAEgAmo2AgAMAQsgACAEIAAoAgRBAXFyQQJyNgIEIAAgBGoiBCAEKAIEQQFyNgIEIAUgAiAFKAIAQQFxckECcjYCACAAIAAoAgRBAXI2AgQgASACEK8BCwJAIAAoAgQiAUEDcUUNACABQXhxIgIgA0EQak0NACAAIAMgAUEBcXJBAnI2AgQgACADaiIBIAIgA2siA0EDcjYCBCAAIAJqIgIgAigCBEEBcjYCBCABIAMQrwELIABBCGoLDAAgACABIAIQfEEACwoAIAAgARB9QQALKQEBfyMAQRBrIgQkACAEIAEgAiADEH4aIAAgBBA7IQAgBEEQaiQAIAALVgIBfwF+AkACf0EAIABFDQAaIACtIgKnIgEgAEEBckGAgARJDQAaQX8gASACQiCIpxsLIgEQICIARQ0AIABBfGotAABBA3FFDQAgAEEAIAEQEBoLIAALpgEBBH8jAEGACGsiAiQAIAEoAhwEQCAAQcQAaiEFIABBQGshBANAIARBABAKIAUgAxAKIAJBgAggAEHIABBWIAEoAgAoAgQgASgCGCADbEEKdGogAhCBASAEQQEQCiACQYAIIABByAAQViABKAIAKAIEIAEoAhggA2xBCnRqQYAIaiACEIEBIANBAWoiAyABKAIcSQ0ACwsgAkGACBAJIAJBgAhqJAAL8AMBAn8jACIDIQQgA0HAA2tBQHEiAyQAIABFIAFFckUEQCADQUBrQQBBAEHAABA+GiADQTxqIAEoAjAQCiADQUBrIANBPGpCBBAYGiADQTxqIAEoAgQQCiADQUBrIANBPGpCBBAYGiADQTxqIAEoAiwQCiADQUBrIANBPGpCBBAYGiADQTxqIAEoAigQCiADQUBrIANBPGpCBBAYGiADQTxqQRMQCiADQUBrIANBPGpCBBAYGiADQTxqIAIQCiADQUBrIANBPGpCBBAYGiADQTxqIAEoAgwQCiADQUBrIANBPGpCBBAYGgJAIAEoAggiAkUNACADQUBrIAIgATUCDBAYGiABLQA4QQFxRQ0AIAEoAgggASgCDBAJIAFBADYCDAsgA0E8aiABKAIUEAogA0FAayADQTxqQgQQGBogASgCECICBEAgA0FAayACIAE1AhQQGBoLIANBPGogASgCHBAKIANBQGsgA0E8akIEEBgaAkAgASgCGCICRQ0AIANBQGsgAiABNQIcEBgaIAEtADhBAnFFDQAgASgCGCABKAIcEAkgAUEANgIcCyADQTxqIAEoAiQQCiADQUBrIANBPGpCBBAYGiABKAIgIgIEQCADQUBrIAIgATUCJBAYGgsgA0FAayAAQcAAED0aCyAEJAALrwEBA38jAEEQayICJABBaiEDAkAgAEUgAUVyDQAg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chBaIAVBgAFqQQhyQgAQESAFQgA3A5gBIAVCADcDkAECQCADBEAgBUGAAWogAxDiAQwBCyAFQgA3A6gBIAVCADcDoAELAkAgBARAIAVBgAFqIAQQ1wEMAQsgBUIANwO4ASAFQgA3A7ABCyAAIAVBgAFqEFsgBUEgakEAQeAAEBAaIAAgBSACQSAQEiIAQoABEDIaIABBgAEQCSAAQcABaiQADwsQFAALEQAgACABrSACrUIghoQQvAILEgAgACABIAKtIAOtQiCGhBAcCxUAIAAgASACrSADrUIghoQgBBCFAQsXACAAIAEgAiADrSAErUIghoQgBRCHAQsXACAAIAEgAiADrSAErUIghoQgBRCDAgsXACAAIAEgAiADrSAErUIghoQgBRCEAgsVACAAIAEgAq0gA61CIIaEIAQQiQILJQAgACABIAIgAyAEIAWtIAatQiCGhCAHIAitIAmtQiCGhBCNAgslACAAIAEgAiADIAStIAWtQiCGhCAGIAetIAitQiCGhCAJEI4CCxcAIAAgASACrSADrUIghoQgBCAFELkCCxgAIAAgASACIAOtIAStQiCGhCAFIAYQagsXACAAIAEgAq0gA61CIIaEIAQgBRC6AgsYACAAIAEgAiADrSAErUIghoQgBSAGEGsLEwAgACABrSACrUIghoQgAxCRAgsTACAAIAEgAq0gA61CIIaEEJICCxYAIAAgASkAADcAMCAAIAEpAAg3ADgLIQAgACABIAKtIAOtQiCGhCAErSAFrUIghoQgBiAHEJMCCx8AIAAgASACrSADrUIghoQgBK0gBa1CIIaEIAYQiwELLQAgACABrSACrUIghoQgAyAErSAFrUIghoQgBiAHrSAIrUIghoQgCSAKEJQCCxcAIAAgASACrSADrUIghoQgBCAFELICCxIAIAAgASACrSADrUIghoQQNAsSACAAIAEgAq0gA61CIIaEECULGQAgACABIAIgA60gBK1CIIaEIAUgBhCTAQsXACAAIAEgAq0gA61CIIaEIAQgBRC0AgsVACAAIAEgAq0gA61CIIaEIAQQtQILGQAgACABIAKtIAOtQiCGhCAEIAUgBhCUAQsWACAAIAEpAAA3ACAgACABKQAINwAoCxcAIAAgASACrSADrUIghoQgBCAFELcCCxsAIAAgASACIAOtIAStQiCGhCAFIAYgBxCVAQsYACAAIAEgAiADrSAErUIghoQgBSAGEGgLGQAgACABIAKtIAOtQiCGhCAEIAUgBhCWAQsXACAAIAEgAq0gA61CIIaEIAQgBRC4AgsbACAAIAEgAiADrSAErUIghoQgBSAGIAcQlwELGAAgACABIAIgA60gBK1CIIaEIAUgBhBpCxUAIAAgASACrSADrUIghoQgBBC/AgsVACAAIAEgAq0gA61CIIaEIAQQmQELJQAgACABIAMgBK0gBa1CIIaEIAYgB60gCK1CIIaEIAkgChDIAgslACAAIAIgA60gBK1CIIaEIAUgBiAHrSAIrUIghoQgCSAKEJsBCyUAIAAgASACIAOtIAStQiCGhCAFIAatIAetQiCGhCAJIAoQygILJwAgACABIAIgAyAErSAFrUIghoQgBiAHrSAIrUIghoQgCiALEJwBCyUAIAAgASADIAStIAWtQiCGhCAGIAetIAitQiCGhCAJIAoQzgILJQAgACACIAOtIAStQiCGhCAFIAYgB60gCK1CIIaEIAkgChCdAQslACAAIAEgAyAErSAFrUIghoQgBiAHrSAIrUIghoQgCSAKEM8CCyUAIAAgAiADrSAErUIghoQgBSAGIAetIAitQiCGhCAJIAoQngELJQAgACABIAIgA60gBK1CIIaEIAUgBq0gB61CIIaEIAkgChDQAgsnACAAIAEgAiADIAStIAWtQiCGhCAGIAetIAitQiCGhCAKIAsQnwELJQAgACABIAIgA60gBK1CIIaEIAUgBq0gB61CIIaEIAkgChDRAgsnACAAIAEgAiADIAStIAWtQiCGhCAGIAetIAitQiCGhCAKIAsQoAELBABBCgsGAEGylwILCwAgACABIAIQgQILDQAgACABIAIgAxCCAgsIACAAEDVBAAsJACAAIAEQhwILCwAgACABIAIQiQELBQBBv38LBQBB0AELLAEBfyMAQUBqIgMkACAAIAMQJyABIANCwAAgAkEBEIYBIQAgA0FAayQAIAALLgEBfyMAQUBqIgQkACAAIAQQJyABIAIgBELAACADQQEQiAEhACAEQUBrJAAgAAt7AQF/AkACQAJAIANCwABUDQAgA0JAfCIDQr////8PVg0AIAIgAkFAayIFIAMgBBCFAUUNASAARQ0AIABBACADpxAQGgtBfyECIAFFDQEgAUIANwMAQX8P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ahATIANB4ABqIANBMGogA0HwAWoQCyADQcABaiADQcABaiADEAsgA0EwaiADEAwgAyADQfABahAMIANBkAFqIANB4ABqIANBwAFqEBMgA0HAAWogA0HgAGogA0HAAWoQFiADQfABaiADIANBMGoQCyADIAMgA0EwahAWIANBwAFqIANBwAFqEAwgA0HgAGogAxDdAiADQZABaiADQZABahAMIANBMGogA0EwaiADQeAAahATIANB4ABqIANBoAJqIANBwAFqEAsgA0HAAWogAyADQTBqEAsgASEEIAUNAAsgA0HwAWogA0GQAWogARBOIANBwAFqIANB4ABqIAEQTiADQcABaiADQcABahA6IANB8AFqIANB8AFqIANBwAFqEAsgACADQfABahAtQQAhBAsgA0HQAmokACAEC1QBBX9BICEBQQEhAgNAIAAgAUF/aiIBai0AACIEIAFBgBtqLQAAIgVrQQh1IAJxIANB/wFxciEDIAQgBXNB//8DakEIdiACcSECIAENAAsgA0EARwvoHgE6fiABEA8hEiABNQACIRMgAUEFahAPIRQgATUAByEVIAE1AAohFiABQQ1qEA8hFyABNQAPIREgAUESahAPIQ4gAUEVahAPIRAgATUAFyEIIAFBGmoQDyEEIAE1ABwhByACEA8hGCACNQACIRkgAkEFahAPIRogAjUAByEbIAI1AAohCiACQQ1qEA8hCSACNQAPIQsgAkESahAPIQ8gAkEVahAPIQwgAjUAFyENIAJBGmoQDyEFIAI1ABwhBiADEA8hMiADNQACITMgA0EFahAPITQgAzUAByE1IAM1AAohISADQQ1qEA8hLiADNQAPISggA0ESahAPISkgA0EVahAPISIgACAGQgeIIgYgBEICiEL///8AgyIEfiAFQgKIQv///wCDIgUgB0IHiCIHfnwgBCAFfiANQgWIQv///wCDIg0gB358IAYgCEIFiEL///8AgyIIfnwiH0KAgEB9IiBCFYd8IiNCgIBAfSIcQhWHIAYgB34iJCAkQoCAQH0iJUKAgIB/g318IiRCg6FWfiAlQhWHIiVC0asIfnwgCUIBiEL///8AgyIJIAR+IApCBIhC////AIMiCiAHfnwgC0IGiEL///8AgyILIAh+fCAMQv///wCDIgwgDkIDiEL///8AgyIOfnwgD0IDiEL///8A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wAJqEBUgAkGABWoiASACQaABahAbIAJBwAJqIAIgARAaIAJBoAFqIAJBwAJqEBUgAkGgBmoiASACQaABahAbIAJBwAJqIAIgARAaIAJBoAFqIAJBwAJqEBUgAkHAB2oiASACQaABahAbIAJBwAJqIAIgARAaIAJBoAFqIAJBwAJqEBUgAkHgCGoiASACQaABahAbIAJBwAJqIAIgARAaIAJBoAFqIAJBwAJqEBUgAkGACmoiASACQaABahAbIAJBwAJqIAIgARAaIAJBoAFqIAJBwAJqEBUgAkGgC2oiASACQaABahAbIAJBwAJqIAIgARAaIAJBoAFqIAJBwAJqEBUgAkHADGogAkGgAWoQGyAAEKoBQfwBIQEDQCACQcACaiAAEE8CQCABIgNBoIsCaiwAACIBQQFOBEAgAkGgAWogAkHAAmoQFSACQcACaiACQaABaiACQeADaiABQf4BcUEBdkGgAWxqEBoMAQsgAUF/Sg0AIAJBoAFqIAJBwAJqEBUgAkHAAmogAkGgAWogAkHgA2pBACABa0H+AXFBAXZBoAFsahCsAQsgACACQcACahAVIANBf2ohASADDQALIAJB4A1qJAALJQEBfyMAQaABayIBJAAgASAAEOMCIAEQUiEAIAFBoAFqJAAgAAvwAQECfyMAQYABayIDJAAgABAdIABBKGoQHSAAQdAAahA4IAAgASACQQAgAkGAAXFBB3YiBGsgAnFBAXRrQRh0QRh1IgJBARApECYgACABQfgAaiACQQIQKRAmIAAgAUHwAWogAkEDECkQJiAAIAFB6AJqIAJBBBApECYgACABQeADaiACQQUQKRAmIAAgAUHYBGogAkEGECkQJiAAIAFB0AVqIAJBBxApECYgACABQcgGaiACQQgQKRAmIANBCGogAEEoahAsIANBMGogABAsIANB2ABqIABB0ABqEHkgACADQQhqIAQQJiADQYABaiQAC+kGAgl/HH4gACABKAIMIgRBAXSsIhEgASgCBCIFQQF0rCILfiABKAIIIgasIhYgFn58IAEoAhAiB6wiECABKAIAIghBAXSsIg5+fCABKAIcIgJBJmysIhcgAqwiGn58IAEoAiAiCUETbKwiDCABKAIYIgNBAXSsfnwgASgCJCIKQSZsrCINIAEoAhQiAUEBdKwiEn58QgGGIh5CgICAEHwiH0Ia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IHZhciB3aW5kb3dfID0gJ29iamVjdCcgPT09IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiBzZWxmOyB2YXIgY3J5cHRvXyA9IHR5cGVvZiB3aW5kb3dfLmNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3dfLmNyeXB0byA6IHdpbmRvd18ubXNDcnlwdG87IHZhciByYW5kb21WYWx1ZXNTdGFuZGFyZCA9IGZ1bmN0aW9uKCkgeyB2YXIgYnVmID0gbmV3IFVpbnQzMkFycmF5KDEpOyBjcnlwdG9fLmdldFJhbmRvbVZhbHVlcyhidWYpOyByZXR1cm4gYnVmWzBdID4+PiAwOyB9OyByYW5kb21WYWx1ZXNTdGFuZGFyZCgpOyBNb2R1bGUuZ2V0UmFuZG9tVmFsdWUgPSByYW5kb21WYWx1ZXNTdGFuZGFyZDsgfSBjYXRjaCAoZSkgeyB0cnkgeyB2YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7IHZhciByYW5kb21WYWx1ZU5vZGVKUyA9IGZ1bmN0aW9uKCkgeyB2YXIgYnVmID0gY3J5cHRvWydyYW5kb21CeXRlcyddKDQpOyByZXR1cm4gKGJ1ZlswXSA8PCAyNCB8IGJ1ZlsxXSA8PCAxNiB8IGJ1ZlsyXSA8PCA4IHwgYnVmWzNdKSA+Pj4gMDsgfTsgcmFuZG9tVmFsdWVOb2RlSlMoKTsgTW9kdWxlLmdldFJhbmRvbVZhbHVlID0gcmFuZG9tVmFsdWVOb2RlSlM7IH0gY2F0Y2ggKGUpIHsgdGhyb3cgJ05vIHNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBmb3VuZCc7IH0gfSB9IH0ATGlic29kaXVtRFJHYnVmX2xlbiA8PSBTSVpFX01BWAByYW5kb21ieXRlcy9yYW5kb21ieXRlcy5jAHJhbmRvbWJ5dGVzAFMtPmJ1ZmxlbiA8PSBCTEFLRTJCX0JMT0NLQllURVMAY3J5cHRvX2dlbmVyaWNoYXNoL2JsYWtlMmIvcmVmL2JsYWtlMmItcmVmLmMAYmxha2UyYl9maW5hbAAAAAAAAAAACMm882fmCWo7p8qEha5nuyv4lP5y82488TYdXzr1T6XRguatf1IOUR9sPiuMaAWba71B+6vZgx95IX4TGc3gW291dGxlbiA8PSBVSU5UOF9NQVgAY3J5cHRvX2dlbmVyaWNoYXNoL2JsYWtlMmIvcmVmL2dlbmVyaWNoYXNoX2JsYWtlMmIuYwBjcnlwdG9fZ2VuZXJpY2hhc2hfYmxha2UyYl9maW5hbAAAAAAAAAC2eFn/hXLTAL1uFf8PCmoAKcABAJjoef+8PKD/mXHO/wC34v60DUj/AAAAAAAAAACwoA7+08mG/54YjwB/aTUAYAy9AKfX+/+fTID+amXh/x78BACSDK4AQbARCydZ8bL+CuWm/3vdKv4eFNQAUoADADDR8wB3eUD/MuOc/wBuxQFnG5AAQeARC8AHhTuMAb3xJP/4JcMBYNw3ALdMPv/DQj0AMkykAeGkTP9MPaP/dT4fAFGRQP92QQ4AonPW/waKLgB85vT/CoqPADQawgC49EwAgY8pAb70E/97qnr/YoFEAHnVkwBWZR7/oWebAIxZQ//v5b4BQwu1AMbwif7uRbz/Q5fuABMqbP/lVXEBMkSH/xFqCQAyZwH/UAGoASOYHv8QqLkBOFno/2XS/AAp+kcAzKpP/w4u7/9QTe8AvdZL/xGN+QAmUEz/vlV1AFbkqgCc2NABw8+k/5ZCTP+v4RD/jVBiAUzb8gDGonIALtqYAJsr8f6boGj/M7ulAAIRrwBCVKAB9zoeACNBNf5F7L8ALYb1AaN73QAgbhT/NBelALrWRwDpsGAA8u82ATlZigBTAFT/iKBkAFyOeP5ofL4AtbE+//opVQCYgioBYPz2AJeXP/7vhT4AIDicAC2nvf+OhbMBg1bTALuzlv76qg7/0qNOACU0lwBjTRoA7pzV/9XA0QFJLlQAFEEpATbOTwDJg5L+qm8Y/7EhMv6rJsv/Tvd0ANHdmQCFgLIBOiwZAMknOwG9E/wAMeXSAXW7dQC1s7gBAHLbADBekwD1KTgAfQ3M/vStdwAs3SD+VOoUAPmgxgHsfur/L2Oo/qrimf9ms9gA4o16/3pCmf629YYA4+QZAdY56//YrTj/tefSAHeAnf+BX4j/bn4zAAKpt/8HgmL+RbBe/3QE4wHZ8pH/yq0fAWkBJ/8ur0UA5C86/9fgRf7POEX/EP6L/xfP1P/KFH7/X9Vg/wmwIQDIBc//8SqA/iMhwP/45cQBgRF4APtnl/8HNHD/jDhC/yji9f/ZRiX+rNYJ/0hDhgGSwNb/LCZwAES4S//OWvsAleuNALWqOgB09O8AXJ0CAGatYgDpiWABfzHLAAWblAAXlAn/03oMACKGGv/bzIgAhggp/+BTK/5VGfcAbX8A/qmIMADud9v/563VAM4S/v4Iugf/fgkHAW8qSABvNOz+YD+NAJO/f/7NTsD/DmrtAbvbTACv87v+aVmtAFUZWQGi85QAAnbR/iGeCQCLoy7/XUYoAGwqjv5v/I7/m9+QADPlp/9J/Jv/XnQM/5ig2v+c7iX/s+rP/8UAs/+apI0A4cRoAAojGf7R1PL/Yf3e/rhl5QDeEn8BpIiH/x7PjP6SYfMAgcAa/slUIf9vCk7/k1Gy/wQEGACh7tf/Bo0hADXXDv8ptdD/54udALPL3f//uXEAveKs/3FC1v/KPi3/ZkAI/06uEP6FdUT/AEHAGQsBAQBB4BkLsAEm6JWPwrInsEXD9Iny75jw1d+sBdPGMzmxOAKIbVP8BccXanA9TdhPujwLdg0QZw8qIFP6LDnMxk7H/XeSrAN67P///////////////////////////////////////3/t////////////////////////////////////////f+7///////////////////////////////////////9/7dP1XBpjEljWnPei3vneFABBnxsL/PABEIU7jAG98ST/+CXDAWDcNwC3TD7/w0I9ADJMpAHhpEz/TD2j/3U+HwBRkUD/dkEOAKJz1v8Gii4AfOb0/wqKjwA0GsIAuPRMAIGPKQG+9BP/e6p6/2KBRAB51ZMAVmUe/6FnmwCMWUP/7+W+AUMLtQDG8In+7kW8/+pxPP8l/zn/RbK2/oDQswB2Gn3+AwfW//EyTf9Vy8X/04f6/xkwZP+71bT+EVhpAFPRngEFc2IABK48/qs3bv/ZtRH/FLyqAJKcZv5X1q7/cnqbAeksqgB/CO8B1uzqAK8F2wAxaj3/BkLQ/wJqbv9R6hP/12vA/0OX7gATKmz/5VVxATJEh/8RagkAMmcB/1ABqAEjmB7/EKi5AThZ6P9l0vwAKfpHAMyqT/8OLu//UE3vAL3WS/8RjfkAJlBM/75VdQBW5KoAnNjQAcPPpP+WQkz/r+EQ/41QYgFM2/IAxqJyAC7amACbK/H+m6Bo/7IJ/P5kbtQADgWnAOnvo/8cl50BZZIK//6e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";function yA(){try{if(s)return new Uint8Array(s);var A=NA(fA);if(A)return A;if(e)return e(fA);throw"both async and sync fetching of the wasm failed"}catch(A){iA(A)}}function sA(){return s||!i&&!n||"function"!=typeof fetch||eA(fA)?new Promise((function(A,I){A(yA())})):fetch(fA,{credentials:"same-origin"}).then((function(A){if(!A.ok)throw"failed to load wasm binary file at '"+fA+"'";return A.arrayBuffer()})).catch((function(){return yA()}))}function wA(){var A={a:MA};function I(A,I){var g=A.exports;C.asm=g,EA()}function g(A){I(A.instance)}function B(I){return sA().then((function(I){return WebAssembly.instantiate(I,A)})).then(I,(function(A){h("failed to asynchronously prepare wasm: "+A),iA(A)}))}if(QA(),C.instantiateWasm)try{return C.instantiateWasm(A,I)}catch(A){return h("Module.instantiateWasm callback failed with error: "+A),!1}return function(){if(s||"function"!=typeof WebAssembly.instantiateStreaming||rA(fA)||eA(fA)||"function"!=typeof fetch)return B(g);fetch(fA,{credentials:"same-origin"}).then((function(I){return WebAssembly.instantiateStreaming(I,A).then(g,(function(A){return h("wasm streaming compile failed: "+A),h("falling back to ArrayBuffer instantiation"),B(g)}))}))}(),{}}rA(fA)||(fA=y(fA));var hA={1024:function(){return C.getRandomValue()},1062:function(){if(void 0===C.getRandomValue)try{var A="object"==typeof window?window:self,I=void 0!==A.crypto?A.crypto:A.msCrypto,g=function(){var A=new Uint32Array(1);return I.getRandomValues(A),A[0]>>>0};g(),C.getRandomValue=g}catch(A){try{var B=require("crypto"),Q=function(){var A=B.randomBytes(4);return(A[0]<<24|A[1]<<16|A[2]<<8|A[3])>>>0};Q(),C.getRandomValue=Q}catch(A){throw"No secure random number generator found"}}}};function DA(A,I,g){var B=bA(I,g);return hA[A].apply(null,B)}function uA(A,I,g,B){iA("Assertion failed: "+_(A)+", at: "+[I?_(I):"unknown filename",g,B?_(B):"unknown function"])}function pA(){iA()}function lA(A,I,g){b.copyWithin(A,I,I+g)}function FA(){return b.length}function GA(A){try{return w.grow(A-H.byteLength+65535>>>16),M(w.buffer),1}catch(A){}}function kA(A){A>>>=0;var I=FA();if(A>2147483648)return!1;for(var g=1;g<=4;g*=2){var B=I*(1+.2/g);if(B=Math.min(B,A+100663296),GA(Math.min(2147483648,R(Math.max(16777216,A,B),65536))))return!0}return!1}function _A(A){return U[PA()>>2]=A,A}function HA(A){switch(A){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:case 79:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"==typeof navigator&&navigator.hardwareConcurrency||1}return _A(28),-1}K.push({func:function(){dA()}});var YA=[];function bA(A,I){var g;for(YA.length=0,I>>=2;g=b[A++];){var B=g<105;B&&1&I&&I++,YA.push(B?S[I++>>1]:U[I]),++I}return YA}var mA=!1;function UA(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(mA&&F(!1,"Character code "+B+" ("+String.fromCharCode(B)+")  at offset "+g+" not in 0x00-0xFF."),B&=255),I.push(String.fromCharCode(B))}return I.join("")}var vA="function"==typeof atob?atob:function(A){var I,g,B,C,Q,E,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",n="",a=0;A=A.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{I=i.indexOf(A.charAt(a++))<<2|(C=i.indexOf(A.charAt(a++)))>>4,g=(15&C)<<4|(Q=i.indexOf(A.charAt(a++)))>>2,B=(3&Q)<<6|(E=i.indexOf(A.charAt(a++))),n+=String.fromCharCode(I),64!==Q&&(n+=String.fromCharCode(g)),64!==E&&(n+=String.fromCharCode(B))}while(a<A.length);return n};function SA(A){if("boolean"==typeof a&&a){var I;try{I=Buffer.from(A,"base64")}catch(g){I=new Buffer(A,"base64")}return new Uint8Array(I.buffer,I.byteOffset,I.byteLength)}try{for(var g=vA(A),B=new Uint8Array(g.length),C=0;C<g.length;++C)B[C]=g.charCodeAt(C);return B}catch(A){throw new Error("Converting base64 string to bytes failed.")}}function NA(A){if(rA(A))return SA(A.slice(aA.length))}var RA,MA={a:uA,c:pA,b:DA,e:lA,f:kA,memory:w,d:HA,table:p},dA=(wA(),C.___wasm_call_ctors=function(){return(dA=C.___wasm_call_ctors=C.asm.g).apply(null,arguments)}),PA=(C._crypto_aead_chacha20poly1305_encrypt_detached=function(){return(C._crypto_aead_chacha20poly1305_encrypt_detached=C.asm.h).apply(null,arguments)},C._crypto_aead_chacha20poly1305_encrypt=function(){return(C._crypto_aead_chacha20poly1305_encrypt=C.asm.i).apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_encrypt_detached=function(){return(C._crypto_aead_chacha20poly1305_ietf_encrypt_detached=C.asm.j).apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_encrypt=function(){return(C._crypto_aead_chacha20poly1305_ietf_encrypt=C.asm.k).apply(null,arguments)},C._crypto_aead_chacha20poly1305_decrypt_detached=function(){return(C._crypto_aead_chacha20poly1305_decrypt_detached=C.asm.l).apply(null,arguments)},C._crypto_aead_chacha20poly1305_decrypt=function(){return(C._crypto_aead_chacha20poly1305_decrypt=C.asm.m).apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_decrypt_detached=function(){return(C._crypto_aead_chacha20poly1305_ietf_decrypt_detached=C.asm.n).apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_decrypt=function(){return(C._crypto_aead_chacha20poly1305_ietf_decrypt=C.asm.o).apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_keybytes=function(){return(C._crypto_aead_chacha20poly1305_ietf_keybytes=C.asm.p).apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_npubbytes=function(){return(C._crypto_aead_chacha20poly1305_ietf_npubbytes=C.asm.q).apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_nsecbytes=function(){return(C._crypto_aead_chacha20poly1305_ietf_nsecbytes=C.asm.r).apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_abytes=function(){return(C._crypto_aead_chacha20poly1305_ietf_abytes=C.asm.s).apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_messagebytes_max=function(){return(C._crypto_aead_chacha20poly1305_ietf_messagebytes_max=C.asm.t).apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_keygen=function(){return(C._crypto_aead_chacha20poly1305_ietf_keygen=C.asm.u).apply(null,arguments)},C._crypto_aead_chacha20poly1305_keybytes=function(){return(C._crypto_aead_chacha20poly1305_keybytes=C.asm.v).apply(null,arguments)},C._crypto_aead_chacha20poly1305_npubbytes=function(){return(C._crypto_aead_chacha20poly1305_npubbytes=C.asm.w).apply(null,arguments)},C._crypto_aead_chacha20poly1305_nsecbytes=function(){return(C._crypto_aead_chacha20poly1305_nsecbytes=C.asm.x).apply(null,arguments)},C._crypto_aead_chacha20poly1305_abytes=function(){return(C._crypto_aead_chacha20poly1305_abytes=C.asm.y).apply(null,arguments)},C._crypto_aead_chacha20poly1305_messagebytes_max=function(){return(C._crypto_aead_chacha20poly1305_messagebytes_max=C.asm.z).apply(null,arguments)},C._crypto_aead_chacha20poly1305_keygen=function(){return(C._crypto_aead_chacha20poly1305_keygen=C.asm.A).apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=function(){return(C._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=C.asm.B).apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_encrypt=function(){return(C._crypto_aead_xchacha20poly1305_ietf_encrypt=C.asm.C).apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=function(){return(C._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=C.asm.D).apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_decrypt=function(){return(C._crypto_aead_xchacha20poly1305_ietf_decrypt=C.asm.E).apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_keybytes=function(){return(C._crypto_aead_xchacha20poly1305_ietf_keybytes=C.asm.F).apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_npubbytes=function(){return(C._crypto_aead_xchacha20poly1305_ietf_npubbytes=C.asm.G).apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_nsecbytes=function(){return(C._crypto_aead_xchacha20poly1305_ietf_nsecbytes=C.asm.H).apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_abytes=function(){return(C._crypto_aead_xchacha20poly1305_ietf_abytes=C.asm.I).apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=function(){return(C._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=C.asm.J).apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_keygen=function(){return(C._crypto_aead_xchacha20poly1305_ietf_keygen=C.asm.K).apply(null,arguments)},C._crypto_auth_bytes=function(){return(C._crypto_auth_bytes=C.asm.L).apply(null,arguments)},C._crypto_auth_keybytes=function(){return(C._crypto_auth_keybytes=C.asm.M).apply(null,arguments)},C._crypto_auth=function(){return(C._crypto_auth=C.asm.N).apply(null,arguments)},C._crypto_auth_verify=function(){return(C._crypto_auth_verify=C.asm.O).apply(null,arguments)},C._crypto_auth_keygen=function(){return(C._crypto_auth_keygen=C.asm.P).apply(null,arguments)},C._crypto_box_seedbytes=function(){return(C._crypto_box_seedbytes=C.asm.Q).apply(null,arguments)},C._crypto_box_publickeybytes=function(){return(C._crypto_box_publickeybytes=C.asm.R).apply(null,arguments)},C._crypto_box_secretkeybytes=function(){return(C._crypto_box_secretkeybytes=C.asm.S).apply(null,arguments)},C._crypto_box_beforenmbytes=function(){return(C._crypto_box_beforenmbytes=C.asm.T).apply(null,arguments)},C._crypto_box_noncebytes=function(){return(C._crypto_box_noncebytes=C.asm.U).apply(null,arguments)},C._crypto_box_macbytes=function(){return(C._crypto_box_macbytes=C.asm.V).apply(null,arguments)},C._crypto_box_messagebytes_max=function(){return(C._crypto_box_messagebytes_max=C.asm.W).apply(null,arguments)},C._crypto_box_seed_keypair=function(){return(C._crypto_box_seed_keypair=C.asm.X).apply(null,arguments)},C._crypto_box_keypair=function(){return(C._crypto_box_keypair=C.asm.Y).apply(null,arguments)},C._crypto_box_beforenm=function(){return(C._crypto_box_beforenm=C.asm.Z).apply(null,arguments)},C._crypto_box_detached_afternm=function(){return(C._crypto_box_detached_afternm=C.asm._).apply(null,arguments)},C._crypto_box_detached=function(){return(C._crypto_box_detached=C.asm.$).apply(null,arguments)},C._crypto_box_easy_afternm=function(){return(C._crypto_box_easy_afternm=C.asm.aa).apply(null,arguments)},C._crypto_box_easy=function(){return(C._crypto_box_easy=C.asm.ba).apply(null,arguments)},C._crypto_box_open_detached_afternm=function(){return(C._crypto_box_open_detached_afternm=C.asm.ca).apply(null,arguments)},C._crypto_box_open_detached=function(){return(C._crypto_box_open_detached=C.asm.da).apply(null,arguments)},C._crypto_box_open_easy_afternm=function(){return(C._crypto_box_open_easy_afternm=C.asm.ea).apply(null,arguments)},C._crypto_box_open_easy=function(){return(C._crypto_box_open_easy=C.asm.fa).apply(null,arguments)},C._crypto_box_seal=function(){return(C._crypto_box_seal=C.asm.ga).apply(null,arguments)},C._crypto_box_seal_open=function(){return(C._crypto_box_seal_open=C.asm.ha).apply(null,arguments)},C._crypto_box_sealbytes=function(){return(C._crypto_box_sealbytes=C.asm.ia).apply(null,arguments)},C._crypto_generichash_bytes_min=function(){return(C._crypto_generichash_bytes_min=C.asm.ja).apply(null,arguments)},C._crypto_generichash_bytes_max=function(){return(C._crypto_generichash_bytes_max=C.asm.ka).apply(null,arguments)},C._crypto_generichash_bytes=function(){return(C._crypto_generichash_bytes=C.asm.la).apply(null,arguments)},C._crypto_generichash_keybytes_min=function(){return(C._crypto_generichash_keybytes_min=C.asm.ma).apply(null,arguments)},C._crypto_generichash_keybytes_max=function(){return(C._crypto_generichash_keybytes_max=C.asm.na).apply(null,arguments)},C._crypto_generichash_keybytes=function(){return(C._crypto_generichash_keybytes=C.asm.oa).apply(null,arguments)},C._crypto_generichash_statebytes=function(){return(C._crypto_generichash_statebytes=C.asm.pa).apply(null,arguments)},C._crypto_generichash=function(){return(C._crypto_generichash=C.asm.qa).apply(null,arguments)},C._crypto_generichash_init=function(){return(C._crypto_generichash_init=C.asm.ra).apply(null,arguments)},C._crypto_generichash_update=function(){return(C._crypto_generichash_update=C.asm.sa).apply(null,arguments)},C._crypto_generichash_final=function(){return(C._crypto_generichash_final=C.asm.ta).apply(null,arguments)},C._crypto_generichash_keygen=function(){return(C._crypto_generichash_keygen=C.asm.ua).apply(null,arguments)},C._crypto_hash_bytes=function(){return(C._crypto_hash_bytes=C.asm.va).apply(null,arguments)},C._crypto_hash=function(){return(C._crypto_hash=C.asm.wa).apply(null,arguments)},C._crypto_kdf_bytes_min=function(){return(C._crypto_kdf_bytes_min=C.asm.xa).apply(null,arguments)},C._crypto_kdf_bytes_max=function(){return(C._crypto_kdf_bytes_max=C.asm.ya).apply(null,arguments)},C._crypto_kdf_contextbytes=function(){return(C._crypto_kdf_contextbytes=C.asm.za).apply(null,arguments)},C._crypto_kdf_keybytes=function(){return(C._crypto_kdf_keybytes=C.asm.Aa).apply(null,arguments)},C._crypto_kdf_derive_from_key=function(){return(C._crypto_kdf_derive_from_key=C.asm.Ba).apply(null,arguments)},C._crypto_kdf_keygen=function(){return(C._crypto_kdf_keygen=C.asm.Ca).apply(null,arguments)},C._crypto_kx_seed_keypair=function(){return(C._crypto_kx_seed_keypair=C.asm.Da).apply(null,arguments)},C._crypto_kx_keypair=function(){return(C._crypto_kx_keypair=C.asm.Ea).apply(null,arguments)},C._crypto_kx_client_session_keys=function(){return(C._crypto_kx_client_session_keys=C.asm.Fa).apply(null,arguments)},C._crypto_kx_server_session_keys=function(){return(C._crypto_kx_server_session_keys=C.asm.Ga).apply(null,arguments)},C._crypto_kx_publickeybytes=function(){return(C._crypto_kx_publickeybytes=C.asm.Ha).apply(null,arguments)},C._crypto_kx_secretkeybytes=function(){return(C._crypto_kx_secretkeybytes=C.asm.Ia).apply(null,arguments)},C._crypto_kx_seedbytes=function(){return(C._crypto_kx_seedbytes=C.asm.Ja).apply(null,arguments)},C._crypto_kx_sessionkeybytes=function(){return(C._crypto_kx_sessionkeybytes=C.asm.Ka).apply(null,arguments)},C._crypto_pwhash_alg_argon2i13=function(){return(C._crypto_pwhash_alg_argon2i13=C.asm.La).apply(null,arguments)},C._crypto_pwhash_alg_argon2id13=function(){return(C._crypto_pwhash_alg_argon2id13=C.asm.Ma).apply(null,arguments)},C._crypto_pwhash_alg_default=function(){return(C._crypto_pwhash_alg_default=C.asm.Na).apply(null,arguments)},C._crypto_pwhash_bytes_min=function(){return(C._crypto_pwhash_bytes_min=C.asm.Oa).apply(null,arguments)},C._crypto_pwhash_bytes_max=function(){return(C._crypto_pwhash_bytes_max=C.asm.Pa).apply(null,arguments)},C._crypto_pwhash_passwd_min=function(){return(C._crypto_pwhash_passwd_min=C.asm.Qa).apply(null,arguments)},C._crypto_pwhash_passwd_max=function(){return(C._crypto_pwhash_passwd_max=C.asm.Ra).apply(null,arguments)},C._crypto_pwhash_saltbytes=function(){return(C._crypto_pwhash_saltbytes=C.asm.Sa).apply(null,arguments)},C._crypto_pwhash_strbytes=function(){return(C._crypto_pwhash_strbytes=C.asm.Ta).apply(null,arguments)},C._crypto_pwhash_strprefix=function(){return(C._crypto_pwhash_strprefix=C.asm.Ua).apply(null,arguments)},C._crypto_pwhash_opslimit_min=function(){return(C._crypto_pwhash_opslimit_min=C.asm.Va).apply(null,arguments)},C._crypto_pwhash_opslimit_max=function(){return(C._crypto_pwhash_opslimit_max=C.asm.Wa).apply(null,arguments)},C._crypto_pwhash_memlimit_min=function(){return(C._crypto_pwhash_memlimit_min=C.asm.Xa).apply(null,arguments)},C._crypto_pwhash_memlimit_max=function(){return(C._crypto_pwhash_memlimit_max=C.asm.Ya).apply(null,arguments)},C._crypto_pwhash_opslimit_interactive=function(){return(C._crypto_pwhash_opslimit_interactive=C.asm.Za).apply(null,arguments)},C._crypto_pwhash_memlimit_interactive=function(){return(C._crypto_pwhash_memlimit_interactive=C.asm._a).apply(null,arguments)},C._crypto_pwhash_opslimit_moderate=function(){return(C._crypto_pwhash_opslimit_moderate=C.asm.$a).apply(null,arguments)},C._crypto_pwhash_memlimit_moderate=function(){return(C._crypto_pwhash_memlimit_moderate=C.asm.ab).apply(null,arguments)},C._crypto_pwhash_opslimit_sensitive=function(){return(C._crypto_pwhash_opslimit_sensitive=C.asm.bb).apply(null,arguments)},C._crypto_pwhash_memlimit_sensitive=function(){return(C._crypto_pwhash_memlimit_sensitive=C.asm.cb).apply(null,arguments)},C._crypto_pwhash=function(){return(C._crypto_pwhash=C.asm.db).apply(null,arguments)},C._crypto_pwhash_str=function(){return(C._crypto_pwhash_str=C.asm.eb).apply(null,arguments)},C._crypto_pwhash_str_alg=function(){return(C._crypto_pwhash_str_alg=C.asm.fb).apply(null,arguments)},C._crypto_pwhash_str_verify=function(){return(C._crypto_pwhash_str_verify=C.asm.gb).apply(null,arguments)},C._crypto_pwhash_str_needs_rehash=function(){return(C._crypto_pwhash_str_needs_rehash=C.asm.hb).apply(null,arguments)},C._crypto_scalarmult_base=function(){return(C._crypto_scalarmult_base=C.asm.ib).apply(null,arguments)},C._crypto_scalarmult=function(){return(C._crypto_scalarmult=C.asm.jb).apply(null,arguments)},C._crypto_scalarmult_bytes=function(){return(C._crypto_scalarmult_bytes=C.asm.kb).apply(null,arguments)},C._crypto_scalarmult_scalarbytes=function(){return(C._crypto_scalarmult_scalarbytes=C.asm.lb).apply(null,arguments)},C._crypto_secretbox_keybytes=function(){return(C._crypto_secretbox_keybytes=C.asm.mb).apply(null,arguments)},C._crypto_secretbox_noncebytes=function(){return(C._crypto_secretbox_noncebytes=C.asm.nb).apply(null,arguments)},C._crypto_secretbox_macbytes=function(){return(C._crypto_secretbox_macbytes=C.asm.ob).apply(null,arguments)},C._crypto_secretbox_messagebytes_max=function(){return(C._crypto_secretbox_messagebytes_max=C.asm.pb).apply(null,arguments)},C._crypto_secretbox_keygen=function(){return(C._crypto_secretbox_keygen=C.asm.qb).apply(null,arguments)},C._crypto_secretbox_detached=function(){return(C._crypto_secretbox_detached=C.asm.rb).apply(null,arguments)},C._crypto_secretbox_easy=function(){return(C._crypto_secretbox_easy=C.asm.sb).apply(null,arguments)},C._crypto_secretbox_open_detached=function(){return(C._crypto_secretbox_open_detached=C.asm.tb).apply(null,arguments)},C._crypto_secretbox_open_easy=function(){return(C._crypto_secretbox_open_easy=C.asm.ub).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_keygen=function(){return(C._crypto_secretstream_xchacha20poly1305_keygen=C.asm.vb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_init_push=function(){return(C._crypto_secretstream_xchacha20poly1305_init_push=C.asm.wb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_init_pull=function(){return(C._crypto_secretstream_xchacha20poly1305_init_pull=C.asm.xb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_rekey=function(){return(C._crypto_secretstream_xchacha20poly1305_rekey=C.asm.yb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_push=function(){return(C._crypto_secretstream_xchacha20poly1305_push=C.asm.zb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_pull=function(){return(C._crypto_secretstream_xchacha20poly1305_pull=C.asm.Ab).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_statebytes=function(){return(C._crypto_secretstream_xchacha20poly1305_statebytes=C.asm.Bb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_abytes=function(){return(C._crypto_secretstream_xchacha20poly1305_abytes=C.asm.Cb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_headerbytes=function(){return(C._crypto_secretstream_xchacha20poly1305_headerbytes=C.asm.Db).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_keybytes=function(){return(C._crypto_secretstream_xchacha20poly1305_keybytes=C.asm.Eb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_messagebytes_max=function(){return(C._crypto_secretstream_xchacha20poly1305_messagebytes_max=C.asm.Fb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_message=function(){return(C._crypto_secretstream_xchacha20poly1305_tag_message=C.asm.Gb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_push=function(){return(C._crypto_secretstream_xchacha20poly1305_tag_push=C.asm.Hb).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_rekey=function(){return(C._crypto_secretstream_xchacha20poly1305_tag_rekey=C.asm.Ib).apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_final=function(){return(C._crypto_secretstream_xchacha20poly1305_tag_final=C.asm.Jb).apply(null,arguments)},C._crypto_shorthash_bytes=function(){return(C._crypto_shorthash_bytes=C.asm.Kb).apply(null,arguments)},C._crypto_shorthash_keybytes=function(){return(C._crypto_shorthash_keybytes=C.asm.Lb).apply(null,arguments)},C._crypto_shorthash=function(){return(C._crypto_shorthash=C.asm.Mb).apply(null,arguments)},C._crypto_shorthash_keygen=function(){return(C._crypto_shorthash_keygen=C.asm.Nb).apply(null,arguments)},C._crypto_sign_statebytes=function(){return(C._crypto_sign_statebytes=C.asm.Ob).apply(null,arguments)},C._crypto_sign_bytes=function(){return(C._crypto_sign_bytes=C.asm.Pb).apply(null,arguments)},C._crypto_sign_seedbytes=function(){return(C._crypto_sign_seedbytes=C.asm.Qb).apply(null,arguments)},C._crypto_sign_publickeybytes=function(){return(C._crypto_sign_publickeybytes=C.asm.Rb).apply(null,arguments)},C._crypto_sign_secretkeybytes=function(){return(C._crypto_sign_secretkeybytes=C.asm.Sb).apply(null,arguments)},C._crypto_sign_messagebytes_max=function(){return(C._crypto_sign_messagebytes_max=C.asm.Tb).apply(null,arguments)},C._crypto_sign_seed_keypair=function(){return(C._crypto_sign_seed_keypair=C.asm.Ub).apply(null,arguments)},C._crypto_sign_keypair=function(){return(C._crypto_sign_keypair=C.asm.Vb).apply(null,arguments)},C._crypto_sign=function(){return(C._crypto_sign=C.asm.Wb).apply(null,arguments)},C._crypto_sign_open=function(){return(C._crypto_sign_open=C.asm.Xb).apply(null,arguments)},C._crypto_sign_detached=function(){return(C._crypto_sign_detached=C.asm.Yb).apply(null,arguments)},C._crypto_sign_verify_detached=function(){return(C._crypto_sign_verify_detached=C.asm.Zb).apply(null,arguments)},C._crypto_sign_init=function(){return(C._crypto_sign_init=C.asm._b).apply(null,arguments)},C._crypto_sign_update=function(){return(C._crypto_sign_update=C.asm.$b).apply(null,arguments)},C._crypto_sign_final_create=function(){return(C._crypto_sign_final_create=C.asm.ac).apply(null,arguments)},C._crypto_sign_final_verify=function(){return(C._crypto_sign_final_verify=C.asm.bc).apply(null,arguments)},C._crypto_sign_ed25519_pk_to_curve25519=function(){return(C._crypto_sign_ed25519_pk_to_curve25519=C.asm.cc).apply(null,arguments)},C._crypto_sign_ed25519_sk_to_curve25519=function(){return(C._crypto_sign_ed25519_sk_to_curve25519=C.asm.dc).apply(null,arguments)},C._randombytes_random=function(){return(C._randombytes_random=C.asm.ec).apply(null,arguments)},C._randombytes_stir=function(){return(C._randombytes_stir=C.asm.fc).apply(null,arguments)},C._randombytes_uniform=function(){return(C._randombytes_uniform=C.asm.gc).apply(null,arguments)},C._randombytes_buf=function(){return(C._randombytes_buf=C.asm.hc).apply(null,arguments)},C._randombytes_buf_deterministic=function(){return(C._randombytes_buf_deterministic=C.asm.ic).apply(null,arguments)},C._randombytes_seedbytes=function(){return(C._randombytes_seedbytes=C.asm.jc).apply(null,arguments)},C._randombytes_close=function(){return(C._randombytes_close=C.asm.kc).apply(null,arguments)},C._randombytes=function(){return(C._randombytes=C.asm.lc).apply(null,arguments)},C._sodium_bin2hex=function(){return(C._sodium_bin2hex=C.asm.mc).apply(null,arguments)},C._sodium_hex2bin=function(){return(C._sodium_hex2bin=C.asm.nc).apply(null,arguments)},C._sodium_base64_encoded_len=function(){return(C._sodium_base64_encoded_len=C.asm.oc).apply(null,arguments)},C._sodium_bin2base64=function(){return(C._sodium_bin2base64=C.asm.pc).apply(null,arguments)},C._sodium_base642bin=function(){return(C._sodium_base642bin=C.asm.qc).apply(null,arguments)},C._sodium_init=function(){return(C._sodium_init=C.asm.rc).apply(null,arguments)},C._sodium_pad=function(){return(C._sodium_pad=C.asm.sc).apply(null,arguments)},C._sodium_unpad=function(){return(C._sodium_unpad=C.asm.tc).apply(null,arguments)},C._sodium_version_string=function(){return(C._sodium_version_string=C.asm.uc).apply(null,arguments)},C._sodium_library_version_major=function(){return(C._sodium_library_version_major=C.asm.vc).apply(null,arguments)},C._sodium_library_version_minor=function(){return(C._sodium_library_version_minor=C.asm.wc).apply(null,arguments)},C._sodium_library_minimal=function(){return(C._sodium_library_minimal=C.asm.xc).apply(null,arguments)},C.___errno_location=function(){return(PA=C.___errno_location=C.asm.yc).apply(null,arguments)});function JA(A){function I(){RA||(RA=!0,C.calledRun=!0,l||(T(),W(),C.onRuntimeInitialized&&C.onRuntimeInitialized(),j()))}A=A||E,gA>0||(V(),gA>0||(C.setStatus?(C.setStatus("Running..."),setTimeout((function(){setTimeout((function(){C.setStatus("")}),1),I()}),1)):I()))}if(C._malloc=function(){return(C._malloc=C.asm.zc).apply(null,arguments)},C._free=function(){return(C._free=C.asm.Ac).apply(null,arguments)},C.setValue=D,C.getValue=u,C.UTF8ToString=_,CA=function A(){RA||JA(),RA||(CA=A)},C.run=JA,C.preInit)for("function"==typeof C.preInit&&(C.preInit=[C.preInit]);C.preInit.length>0;)C.preInit.pop()();JA()})).catch((function(){B.useBackupModule()})),"object"==typeof process&&"function"==typeof process.removeAllListeners&&(process.removeAllListeners("uncaughtException"),process.removeAllListeners("unhandledRejection")),I}"function"==typeof define&&define.amd?define(["exports"],I):"object"==typeof exports&&"string"!=typeof exports.nodeName?I(exports):A.libsodium=I(A.libsodium_mod||(A.commonJsStrict={}))}(this);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/libsodium/dist/modules")
},{"_process":279,"buffer":195,"crypto":204,"fs":164,"path":272}],101:[function(require,module,exports){
module.exports={
  "application/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "application/3gpdash-qoe-report+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/3gpp-ims+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/a2l": {
    "source": "iana"
  },
  "application/activemessage": {
    "source": "iana"
  },
  "application/activity+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-directory+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcost+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcostparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointprop+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointpropparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-error+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-updatestreamcontrol+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-updatestreamparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/aml": {
    "source": "iana"
  },
  "application/andrew-inset": {
    "source": "iana",
    "extensions": ["ez"]
  },
  "application/applefile": {
    "source": "iana"
  },
  "application/applixware": {
    "source": "apache",
    "extensions": ["aw"]
  },
  "application/atf": {
    "source": "iana"
  },
  "application/atfx": {
    "source": "iana"
  },
  "application/atom+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atom"]
  },
  "application/atomcat+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomcat"]
  },
  "application/atomdeleted+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomdeleted"]
  },
  "application/atomicmail": {
    "source": "iana"
  },
  "application/atomsvc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomsvc"]
  },
  "application/atsc-dwd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dwd"]
  },
  "application/atsc-dynamic-event-message": {
    "source": "iana"
  },
  "application/atsc-held+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["held"]
  },
  "application/atsc-rdt+json": {
    "source": "iana",
    "compressible": true
  },
  "application/atsc-rsat+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rsat"]
  },
  "application/atxml": {
    "source": "iana"
  },
  "application/auth-policy+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/bacnet-xdd+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/batch-smtp": {
    "source": "iana"
  },
  "application/bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/beep+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/calendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/calendar+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xcs"]
  },
  "application/call-completion": {
    "source": "iana"
  },
  "application/cals-1840": {
    "source": "iana"
  },
  "application/cap+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/cbor": {
    "source": "iana"
  },
  "application/cbor-seq": {
    "source": "iana"
  },
  "application/cccex": {
    "source": "iana"
  },
  "application/ccmp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ccxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ccxml"]
  },
  "application/cdfx+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["cdfx"]
  },
  "application/cdmi-capability": {
    "source": "iana",
    "extensions": ["cdmia"]
  },
  "application/cdmi-container": {
    "source": "iana",
    "extensions": ["cdmic"]
  },
  "application/cdmi-domain": {
    "source": "iana",
    "extensions": ["cdmid"]
  },
  "application/cdmi-object": {
    "source": "iana",
    "extensions": ["cdmio"]
  },
  "application/cdmi-queue": {
    "source": "iana",
    "extensions": ["cdmiq"]
  },
  "application/cdni": {
    "source": "iana"
  },
  "application/cea": {
    "source": "iana"
  },
  "application/cea-2018+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cellml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cfw": {
    "source": "iana"
  },
  "application/clue+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/clue_info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cms": {
    "source": "iana"
  },
  "application/cnrp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/coap-group+json": {
    "source": "iana",
    "compressible": true
  },
  "application/coap-payload": {
    "source": "iana"
  },
  "application/commonground": {
    "source": "iana"
  },
  "application/conference-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cose": {
    "source": "iana"
  },
  "application/cose-key": {
    "source": "iana"
  },
  "application/cose-key-set": {
    "source": "iana"
  },
  "application/cpl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/csrattrs": {
    "source": "iana"
  },
  "application/csta+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cstadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/csvm+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cu-seeme": {
    "source": "apache",
    "extensions": ["cu"]
  },
  "application/cwt": {
    "source": "iana"
  },
  "application/cybercash": {
    "source": "iana"
  },
  "application/dart": {
    "compressible": true
  },
  "application/dash+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpd"]
  },
  "application/dashdelta": {
    "source": "iana"
  },
  "application/davmount+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["davmount"]
  },
  "application/dca-rft": {
    "source": "iana"
  },
  "application/dcd": {
    "source": "iana"
  },
  "application/dec-dx": {
    "source": "iana"
  },
  "application/dialog-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom": {
    "source": "iana"
  },
  "application/dicom+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dii": {
    "source": "iana"
  },
  "application/dit": {
    "source": "iana"
  },
  "application/dns": {
    "source": "iana"
  },
  "application/dns+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dns-message": {
    "source": "iana"
  },
  "application/docbook+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["dbk"]
  },
  "application/dots+cbor": {
    "source": "iana"
  },
  "application/dskpp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dssc+der": {
    "source": "iana",
    "extensions": ["dssc"]
  },
  "application/dssc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdssc"]
  },
  "application/dvcs": {
    "source": "iana"
  },
  "application/ecmascript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ecma","es"]
  },
  "application/edi-consent": {
    "source": "iana"
  },
  "application/edi-x12": {
    "source": "iana",
    "compressible": false
  },
  "application/edifact": {
    "source": "iana",
    "compressible": false
  },
  "application/efi": {
    "source": "iana"
  },
  "application/emergencycalldata.comment+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.deviceinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.ecall.msd": {
    "source": "iana"
  },
  "application/emergencycalldata.providerinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.serviceinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.subscriberinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.veds+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emma+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["emma"]
  },
  "application/emotionml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["emotionml"]
  },
  "application/encaprtp": {
    "source": "iana"
  },
  "application/epp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/epub+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["epub"]
  },
  "application/eshop": {
    "source": "iana"
  },
  "application/exi": {
    "source": "iana",
    "extensions": ["exi"]
  },
  "application/expect-ct-report+json": {
    "source": "iana",
    "compressible": true
  },
  "application/fastinfoset": {
    "source": "iana"
  },
  "application/fastsoap": {
    "source": "iana"
  },
  "application/fdt+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["fdt"]
  },
  "application/fhir+json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/fhir+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/fido.trusted-apps+json": {
    "compressible": true
  },
  "application/fits": {
    "source": "iana"
  },
  "application/flexfec": {
    "source": "iana"
  },
  "application/font-sfnt": {
    "source": "iana"
  },
  "application/font-tdpfr": {
    "source": "iana",
    "extensions": ["pfr"]
  },
  "application/font-woff": {
    "source": "iana",
    "compressible": false
  },
  "application/framework-attributes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/geo+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["geojson"]
  },
  "application/geo+json-seq": {
    "source": "iana"
  },
  "application/geopackage+sqlite3": {
    "source": "iana"
  },
  "application/geoxacml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/gltf-buffer": {
    "source": "iana"
  },
  "application/gml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["gml"]
  },
  "application/gpx+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["gpx"]
  },
  "application/gxf": {
    "source": "apache",
    "extensions": ["gxf"]
  },
  "application/gzip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gz"]
  },
  "application/h224": {
    "source": "iana"
  },
  "application/held+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/hjson": {
    "extensions": ["hjson"]
  },
  "application/http": {
    "source": "iana"
  },
  "application/hyperstudio": {
    "source": "iana",
    "extensions": ["stk"]
  },
  "application/ibe-key-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ibe-pkg-reply+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ibe-pp-data": {
    "source": "iana"
  },
  "application/iges": {
    "source": "iana"
  },
  "application/im-iscomposing+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/index": {
    "source": "iana"
  },
  "application/index.cmd": {
    "source": "iana"
  },
  "application/index.obj": {
    "source": "iana"
  },
  "application/index.response": {
    "source": "iana"
  },
  "application/index.vnd": {
    "source": "iana"
  },
  "application/inkml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ink","inkml"]
  },
  "application/iotp": {
    "source": "iana"
  },
  "application/ipfix": {
    "source": "iana",
    "extensions": ["ipfix"]
  },
  "application/ipp": {
    "source": "iana"
  },
  "application/isup": {
    "source": "iana"
  },
  "application/its+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["its"]
  },
  "application/java-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jar","war","ear"]
  },
  "application/java-serialized-object": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ser"]
  },
  "application/java-vm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["class"]
  },
  "application/javascript": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["js","mjs"]
  },
  "application/jf2feed+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jose": {
    "source": "iana"
  },
  "application/jose+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jrd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["json","map"]
  },
  "application/json-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json-seq": {
    "source": "iana"
  },
  "application/json5": {
    "extensions": ["json5"]
  },
  "application/jsonml+json": {
    "source": "apache",
    "compressible": true,
    "extensions": ["jsonml"]
  },
  "application/jwk+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwk-set+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwt": {
    "source": "iana"
  },
  "application/kpml-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/kpml-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ld+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["jsonld"]
  },
  "application/lgr+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lgr"]
  },
  "application/link-format": {
    "source": "iana"
  },
  "application/load-control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/lost+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lostxml"]
  },
  "application/lostsync+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/lpf+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/lxf": {
    "source": "iana"
  },
  "application/mac-binhex40": {
    "source": "iana",
    "extensions": ["hqx"]
  },
  "application/mac-compactpro": {
    "source": "apache",
    "extensions": ["cpt"]
  },
  "application/macwriteii": {
    "source": "iana"
  },
  "application/mads+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mads"]
  },
  "application/manifest+json": {
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["webmanifest"]
  },
  "application/marc": {
    "source": "iana",
    "extensions": ["mrc"]
  },
  "application/marcxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mrcx"]
  },
  "application/mathematica": {
    "source": "iana",
    "extensions": ["ma","nb","mb"]
  },
  "application/mathml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mathml"]
  },
  "application/mathml-content+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mathml-presentation+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-associated-procedure-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-deregister+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-envelope+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-msk+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-msk-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-protection-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-reception-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-register+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-register-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-schedule+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-user-service-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbox": {
    "source": "iana",
    "extensions": ["mbox"]
  },
  "application/media-policy-dataset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/media_control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mediaservercontrol+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mscml"]
  },
  "application/merge-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/metalink+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["metalink"]
  },
  "application/metalink4+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["meta4"]
  },
  "application/mets+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mets"]
  },
  "application/mf4": {
    "source": "iana"
  },
  "application/mikey": {
    "source": "iana"
  },
  "application/mipc": {
    "source": "iana"
  },
  "application/mmt-aei+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["maei"]
  },
  "application/mmt-usd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["musd"]
  },
  "application/mods+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mods"]
  },
  "application/moss-keys": {
    "source": "iana"
  },
  "application/moss-signature": {
    "source": "iana"
  },
  "application/mosskey-data": {
    "source": "iana"
  },
  "application/mosskey-request": {
    "source": "iana"
  },
  "application/mp21": {
    "source": "iana",
    "extensions": ["m21","mp21"]
  },
  "application/mp4": {
    "source": "iana",
    "extensions": ["mp4s","m4p"]
  },
  "application/mpeg4-generic": {
    "source": "iana"
  },
  "application/mpeg4-iod": {
    "source": "iana"
  },
  "application/mpeg4-iod-xmt": {
    "source": "iana"
  },
  "application/mrb-consumer+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdf"]
  },
  "application/mrb-publish+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdf"]
  },
  "application/msc-ivr+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/msc-mixer+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/msword": {
    "source": "iana",
    "compressible": false,
    "extensions": ["doc","dot"]
  },
  "application/mud+json": {
    "source": "iana",
    "compressible": true
  },
  "application/multipart-core": {
    "source": "iana"
  },
  "application/mxf": {
    "source": "iana",
    "extensions": ["mxf"]
  },
  "application/n-quads": {
    "source": "iana",
    "extensions": ["nq"]
  },
  "application/n-triples": {
    "source": "iana",
    "extensions": ["nt"]
  },
  "application/nasdata": {
    "source": "iana"
  },
  "application/news-checkgroups": {
    "source": "iana",
    "charset": "US-ASCII"
  },
  "application/news-groupinfo": {
    "source": "iana",
    "charset": "US-ASCII"
  },
  "application/news-transmission": {
    "source": "iana"
  },
  "application/nlsml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/node": {
    "source": "iana",
    "extensions": ["cjs"]
  },
  "application/nss": {
    "source": "iana"
  },
  "application/ocsp-request": {
    "source": "iana"
  },
  "application/ocsp-response": {
    "source": "iana"
  },
  "application/octet-stream": {
    "source": "iana",
    "compressible": false,
    "extensions": ["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]
  },
  "application/oda": {
    "source": "iana",
    "extensions": ["oda"]
  },
  "application/odm+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/odx": {
    "source": "iana"
  },
  "application/oebps-package+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["opf"]
  },
  "application/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogx"]
  },
  "application/omdoc+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["omdoc"]
  },
  "application/onenote": {
    "source": "apache",
    "extensions": ["onetoc","onetoc2","onetmp","onepkg"]
  },
  "application/oscore": {
    "source": "iana"
  },
  "application/oxps": {
    "source": "iana",
    "extensions": ["oxps"]
  },
  "application/p2p-overlay+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["relo"]
  },
  "application/parityfec": {
    "source": "iana"
  },
  "application/passport": {
    "source": "iana"
  },
  "application/patch-ops-error+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xer"]
  },
  "application/pdf": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pdf"]
  },
  "application/pdx": {
    "source": "iana"
  },
  "application/pem-certificate-chain": {
    "source": "iana"
  },
  "application/pgp-encrypted": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pgp"]
  },
  "application/pgp-keys": {
    "source": "iana"
  },
  "application/pgp-signature": {
    "source": "iana",
    "extensions": ["asc","sig"]
  },
  "application/pics-rules": {
    "source": "apache",
    "extensions": ["prf"]
  },
  "application/pidf+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/pidf-diff+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/pkcs10": {
    "source": "iana",
    "extensions": ["p10"]
  },
  "application/pkcs12": {
    "source": "iana"
  },
  "application/pkcs7-mime": {
    "source": "iana",
    "extensions": ["p7m","p7c"]
  },
  "application/pkcs7-signature": {
    "source": "iana",
    "extensions": ["p7s"]
  },
  "application/pkcs8": {
    "source": "iana",
    "extensions": ["p8"]
  },
  "application/pkcs8-encrypted": {
    "source": "iana"
  },
  "application/pkix-attr-cert": {
    "source": "iana",
    "extensions": ["ac"]
  },
  "application/pkix-cert": {
    "source": "iana",
    "extensions": ["cer"]
  },
  "application/pkix-crl": {
    "source": "iana",
    "extensions": ["crl"]
  },
  "application/pkix-pkipath": {
    "source": "iana",
    "extensions": ["pkipath"]
  },
  "application/pkixcmp": {
    "source": "iana",
    "extensions": ["pki"]
  },
  "application/pls+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["pls"]
  },
  "application/poc-settings+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/postscript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ai","eps","ps"]
  },
  "application/ppsp-tracker+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/provenance+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["provx"]
  },
  "application/prs.alvestrand.titrax-sheet": {
    "source": "iana"
  },
  "application/prs.cww": {
    "source": "iana",
    "extensions": ["cww"]
  },
  "application/prs.hpub+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/prs.nprend": {
    "source": "iana"
  },
  "application/prs.plucker": {
    "source": "iana"
  },
  "application/prs.rdf-xml-crypt": {
    "source": "iana"
  },
  "application/prs.xsf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/pskc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["pskcxml"]
  },
  "application/pvd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/qsig": {
    "source": "iana"
  },
  "application/raml+yaml": {
    "compressible": true,
    "extensions": ["raml"]
  },
  "application/raptorfec": {
    "source": "iana"
  },
  "application/rdap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/rdf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rdf","owl"]
  },
  "application/reginfo+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rif"]
  },
  "application/relax-ng-compact-syntax": {
    "source": "iana",
    "extensions": ["rnc"]
  },
  "application/remote-printing": {
    "source": "iana"
  },
  "application/reputon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/resource-lists+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rl"]
  },
  "application/resource-lists-diff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rld"]
  },
  "application/rfc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/riscos": {
    "source": "iana"
  },
  "application/rlmi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/rls-services+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rs"]
  },
  "application/route-apd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rapd"]
  },
  "application/route-s-tsid+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sls"]
  },
  "application/route-usd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rusd"]
  },
  "application/rpki-ghostbusters": {
    "source": "iana",
    "extensions": ["gbr"]
  },
  "application/rpki-manifest": {
    "source": "iana",
    "extensions": ["mft"]
  },
  "application/rpki-publication": {
    "source": "iana"
  },
  "application/rpki-roa": {
    "source": "iana",
    "extensions": ["roa"]
  },
  "application/rpki-updown": {
    "source": "iana"
  },
  "application/rsd+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rsd"]
  },
  "application/rss+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rss"]
  },
  "application/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "application/rtploopback": {
    "source": "iana"
  },
  "application/rtx": {
    "source": "iana"
  },
  "application/samlassertion+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/samlmetadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sbe": {
    "source": "iana"
  },
  "application/sbml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sbml"]
  },
  "application/scaip+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/scim+json": {
    "source": "iana",
    "compressible": true
  },
  "application/scvp-cv-request": {
    "source": "iana",
    "extensions": ["scq"]
  },
  "application/scvp-cv-response": {
    "source": "iana",
    "extensions": ["scs"]
  },
  "application/scvp-vp-request": {
    "source": "iana",
    "extensions": ["spq"]
  },
  "application/scvp-vp-response": {
    "source": "iana",
    "extensions": ["spp"]
  },
  "application/sdp": {
    "source": "iana",
    "extensions": ["sdp"]
  },
  "application/secevent+jwt": {
    "source": "iana"
  },
  "application/senml+cbor": {
    "source": "iana"
  },
  "application/senml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/senml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["senmlx"]
  },
  "application/senml-etch+cbor": {
    "source": "iana"
  },
  "application/senml-etch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/senml-exi": {
    "source": "iana"
  },
  "application/sensml+cbor": {
    "source": "iana"
  },
  "application/sensml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sensml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sensmlx"]
  },
  "application/sensml-exi": {
    "source": "iana"
  },
  "application/sep+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sep-exi": {
    "source": "iana"
  },
  "application/session-info": {
    "source": "iana"
  },
  "application/set-payment": {
    "source": "iana"
  },
  "application/set-payment-initiation": {
    "source": "iana",
    "extensions": ["setpay"]
  },
  "application/set-registration": {
    "source": "iana"
  },
  "application/set-registration-initiation": {
    "source": "iana",
    "extensions": ["setreg"]
  },
  "application/sgml": {
    "source": "iana"
  },
  "application/sgml-open-catalog": {
    "source": "iana"
  },
  "application/shf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["shf"]
  },
  "application/sieve": {
    "source": "iana",
    "extensions": ["siv","sieve"]
  },
  "application/simple-filter+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/simple-message-summary": {
    "source": "iana"
  },
  "application/simplesymbolcontainer": {
    "source": "iana"
  },
  "application/sipc": {
    "source": "iana"
  },
  "application/slate": {
    "source": "iana"
  },
  "application/smil": {
    "source": "iana"
  },
  "application/smil+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["smi","smil"]
  },
  "application/smpte336m": {
    "source": "iana"
  },
  "application/soap+fastinfoset": {
    "source": "iana"
  },
  "application/soap+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sparql-query": {
    "source": "iana",
    "extensions": ["rq"]
  },
  "application/sparql-results+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["srx"]
  },
  "application/spirits-event+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sql": {
    "source": "iana"
  },
  "application/srgs": {
    "source": "iana",
    "extensions": ["gram"]
  },
  "application/srgs+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["grxml"]
  },
  "application/sru+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sru"]
  },
  "application/ssdl+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ssdl"]
  },
  "application/ssml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ssml"]
  },
  "application/stix+json": {
    "source": "iana",
    "compressible": true
  },
  "application/swid+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["swidtag"]
  },
  "application/tamp-apex-update": {
    "source": "iana"
  },
  "application/tamp-apex-update-confirm": {
    "source": "iana"
  },
  "application/tamp-community-update": {
    "source": "iana"
  },
  "application/tamp-community-update-confirm": {
    "source": "iana"
  },
  "application/tamp-error": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust-confirm": {
    "source": "iana"
  },
  "application/tamp-status-query": {
    "source": "iana"
  },
  "application/tamp-status-response": {
    "source": "iana"
  },
  "application/tamp-update": {
    "source": "iana"
  },
  "application/tamp-update-confirm": {
    "source": "iana"
  },
  "application/tar": {
    "compressible": true
  },
  "application/taxii+json": {
    "source": "iana",
    "compressible": true
  },
  "application/td+json": {
    "source": "iana",
    "compressible": true
  },
  "application/tei+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tei","teicorpus"]
  },
  "application/tetra_isi": {
    "source": "iana"
  },
  "application/thraud+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tfi"]
  },
  "application/timestamp-query": {
    "source": "iana"
  },
  "application/timestamp-reply": {
    "source": "iana"
  },
  "application/timestamped-data": {
    "source": "iana",
    "extensions": ["tsd"]
  },
  "application/tlsrpt+gzip": {
    "source": "iana"
  },
  "application/tlsrpt+json": {
    "source": "iana",
    "compressible": true
  },
  "application/tnauthlist": {
    "source": "iana"
  },
  "application/toml": {
    "compressible": true,
    "extensions": ["toml"]
  },
  "application/trickle-ice-sdpfrag": {
    "source": "iana"
  },
  "application/trig": {
    "source": "iana"
  },
  "application/ttml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ttml"]
  },
  "application/tve-trigger": {
    "source": "iana"
  },
  "application/tzif": {
    "source": "iana"
  },
  "application/tzif-leap": {
    "source": "iana"
  },
  "application/ulpfec": {
    "source": "iana"
  },
  "application/urc-grpsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/urc-ressheet+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rsheet"]
  },
  "application/urc-targetdesc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/urc-uisocketdesc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vemmi": {
    "source": "iana"
  },
  "application/vividence.scriptfile": {
    "source": "apache"
  },
  "application/vnd.1000minds.decision-model+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["1km"]
  },
  "application/vnd.3gpp-prose+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-prose-pc3ch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-v2x-local-service-information": {
    "source": "iana"
  },
  "application/vnd.3gpp.access-transfer-events+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.bsf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.gmop+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mc-signalling-ear": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-payload": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-signalling": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-floor-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-location-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-signed+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-ue-init-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-location-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-transmission-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mid-call+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.pic-bw-large": {
    "source": "iana",
    "extensions": ["plb"]
  },
  "application/vnd.3gpp.pic-bw-small": {
    "source": "iana",
    "extensions": ["psb"]
  },
  "application/vnd.3gpp.pic-bw-var": {
    "source": "iana",
    "extensions": ["pvb"]
  },
  "application/vnd.3gpp.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp.sms+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.srvcc-ext+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.srvcc-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.state-and-event-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.ussd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp2.bcmcsinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp2.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp2.tcap": {
    "source": "iana",
    "extensions": ["tcap"]
  },
  "application/vnd.3lightssoftware.imagescal": {
    "source": "iana"
  },
  "application/vnd.3m.post-it-notes": {
    "source": "iana",
    "extensions": ["pwn"]
  },
  "application/vnd.accpac.simply.aso": {
    "source": "iana",
    "extensions": ["aso"]
  },
  "application/vnd.accpac.simply.imp": {
    "source": "iana",
    "extensions": ["imp"]
  },
  "application/vnd.acucobol": {
    "source": "iana",
    "extensions": ["acu"]
  },
  "application/vnd.acucorp": {
    "source": "iana",
    "extensions": ["atc","acutc"]
  },
  "application/vnd.adobe.air-application-installer-package+zip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["air"]
  },
  "application/vnd.adobe.flash.movie": {
    "source": "iana"
  },
  "application/vnd.adobe.formscentral.fcdt": {
    "source": "iana",
    "extensions": ["fcdt"]
  },
  "application/vnd.adobe.fxp": {
    "source": "iana",
    "extensions": ["fxp","fxpl"]
  },
  "application/vnd.adobe.partial-upload": {
    "source": "iana"
  },
  "application/vnd.adobe.xdp+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdp"]
  },
  "application/vnd.adobe.xfdf": {
    "source": "iana",
    "extensions": ["xfdf"]
  },
  "application/vnd.aether.imp": {
    "source": "iana"
  },
  "application/vnd.afpc.afplinedata": {
    "source": "iana"
  },
  "application/vnd.afpc.afplinedata-pagedef": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-charset": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-codedfont": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-codepage": {
    "source": "iana"
  },
  "application/vnd.afpc.modca": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-formdef": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-mediummap": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-objectcontainer": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-overlay": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-pagesegment": {
    "source": "iana"
  },
  "application/vnd.ah-barcode": {
    "source": "iana"
  },
  "application/vnd.ahead.space": {
    "source": "iana",
    "extensions": ["ahead"]
  },
  "application/vnd.airzip.filesecure.azf": {
    "source": "iana",
    "extensions": ["azf"]
  },
  "application/vnd.airzip.filesecure.azs": {
    "source": "iana",
    "extensions": ["azs"]
  },
  "application/vnd.amadeus+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.amazon.ebook": {
    "source": "apache",
    "extensions": ["azw"]
  },
  "application/vnd.amazon.mobi8-ebook": {
    "source": "iana"
  },
  "application/vnd.americandynamics.acc": {
    "source": "iana",
    "extensions": ["acc"]
  },
  "application/vnd.amiga.ami": {
    "source": "iana",
    "extensions": ["ami"]
  },
  "application/vnd.amundsen.maze+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.android.ota": {
    "source": "iana"
  },
  "application/vnd.android.package-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["apk"]
  },
  "application/vnd.anki": {
    "source": "iana"
  },
  "application/vnd.anser-web-certificate-issue-initiation": {
    "source": "iana",
    "extensions": ["cii"]
  },
  "application/vnd.anser-web-funds-transfer-initiation": {
    "source": "apache",
    "extensions": ["fti"]
  },
  "application/vnd.antix.game-component": {
    "source": "iana",
    "extensions": ["atx"]
  },
  "application/vnd.apache.thrift.binary": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.compact": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.json": {
    "source": "iana"
  },
  "application/vnd.api+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.aplextor.warrp+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apothekende.reservation+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apple.installer+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpkg"]
  },
  "application/vnd.apple.keynote": {
    "source": "iana",
    "extensions": ["keynote"]
  },
  "application/vnd.apple.mpegurl": {
    "source": "iana",
    "extensions": ["m3u8"]
  },
  "application/vnd.apple.numbers": {
    "source": "iana",
    "extensions": ["numbers"]
  },
  "application/vnd.apple.pages": {
    "source": "iana",
    "extensions": ["pages"]
  },
  "application/vnd.apple.pkpass": {
    "compressible": false,
    "extensions": ["pkpass"]
  },
  "application/vnd.arastra.swi": {
    "source": "iana"
  },
  "application/vnd.aristanetworks.swi": {
    "source": "iana",
    "extensions": ["swi"]
  },
  "application/vnd.artisan+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.artsquare": {
    "source": "iana"
  },
  "application/vnd.astraea-software.iota": {
    "source": "iana",
    "extensions": ["iota"]
  },
  "application/vnd.audiograph": {
    "source": "iana",
    "extensions": ["aep"]
  },
  "application/vnd.autopackage": {
    "source": "iana"
  },
  "application/vnd.avalon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.avistar+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.balsamiq.bmml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["bmml"]
  },
  "application/vnd.balsamiq.bmpr": {
    "source": "iana"
  },
  "application/vnd.banana-accounting": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.error": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.msg": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.msg+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.bekitzur-stech+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.bint.med-content": {
    "source": "iana"
  },
  "application/vnd.biopax.rdf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.blink-idb-value-wrapper": {
    "source": "iana"
  },
  "application/vnd.blueice.multipass": {
    "source": "iana",
    "extensions": ["mpm"]
  },
  "application/vnd.bluetooth.ep.oob": {
    "source": "iana"
  },
  "application/vnd.bluetooth.le.oob": {
    "source": "iana"
  },
  "application/vnd.bmi": {
    "source": "iana",
    "extensions": ["bmi"]
  },
  "application/vnd.bpf": {
    "source": "iana"
  },
  "application/vnd.bpf3": {
    "source": "iana"
  },
  "application/vnd.businessobjects": {
    "source": "iana",
    "extensions": ["rep"]
  },
  "application/vnd.byu.uapi+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cab-jscript": {
    "source": "iana"
  },
  "application/vnd.canon-cpdl": {
    "source": "iana"
  },
  "application/vnd.canon-lips": {
    "source": "iana"
  },
  "application/vnd.capasystems-pg+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cendio.thinlinc.clientconf": {
    "source": "iana"
  },
  "application/vnd.century-systems.tcp_stream": {
    "source": "iana"
  },
  "application/vnd.chemdraw+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["cdxml"]
  },
  "application/vnd.chess-pgn": {
    "source": "iana"
  },
  "application/vnd.chipnuts.karaoke-mmd": {
    "source": "iana",
    "extensions": ["mmd"]
  },
  "application/vnd.ciedi": {
    "source": "iana"
  },
  "application/vnd.cinderella": {
    "source": "iana",
    "extensions": ["cdy"]
  },
  "application/vnd.cirpack.isdn-ext": {
    "source": "iana"
  },
  "application/vnd.citationstyles.style+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csl"]
  },
  "application/vnd.claymore": {
    "source": "iana",
    "extensions": ["cla"]
  },
  "application/vnd.cloanto.rp9": {
    "source": "iana",
    "extensions": ["rp9"]
  },
  "application/vnd.clonk.c4group": {
    "source": "iana",
    "extensions": ["c4g","c4d","c4f","c4p","c4u"]
  },
  "application/vnd.cluetrust.cartomobile-config": {
    "source": "iana",
    "extensions": ["c11amc"]
  },
  "application/vnd.cluetrust.cartomobile-config-pkg": {
    "source": "iana",
    "extensions": ["c11amz"]
  },
  "application/vnd.coffeescript": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.document": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.document-template": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.presentation": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.presentation-template": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet-template": {
    "source": "iana"
  },
  "application/vnd.collection+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.doc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.next+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.comicbook+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.comicbook-rar": {
    "source": "iana"
  },
  "application/vnd.commerce-battelle": {
    "source": "iana"
  },
  "application/vnd.commonspace": {
    "source": "iana",
    "extensions": ["csp"]
  },
  "application/vnd.contact.cmsg": {
    "source": "iana",
    "extensions": ["cdbcmsg"]
  },
  "application/vnd.coreos.ignition+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cosmocaller": {
    "source": "iana",
    "extensions": ["cmc"]
  },
  "application/vnd.crick.clicker": {
    "source": "iana",
    "extensions": ["clkx"]
  },
  "application/vnd.crick.clicker.keyboard": {
    "source": "iana",
    "extensions": ["clkk"]
  },
  "application/vnd.crick.clicker.palette": {
    "source": "iana",
    "extensions": ["clkp"]
  },
  "application/vnd.crick.clicker.template": {
    "source": "iana",
    "extensions": ["clkt"]
  },
  "application/vnd.crick.clicker.wordbank": {
    "source": "iana",
    "extensions": ["clkw"]
  },
  "application/vnd.criticaltools.wbs+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wbs"]
  },
  "application/vnd.cryptii.pipe+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.crypto-shade-file": {
    "source": "iana"
  },
  "application/vnd.ctc-posml": {
    "source": "iana",
    "extensions": ["pml"]
  },
  "application/vnd.ctct.ws+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cups-pdf": {
    "source": "iana"
  },
  "application/vnd.cups-postscript": {
    "source": "iana"
  },
  "application/vnd.cups-ppd": {
    "source": "iana",
    "extensions": ["ppd"]
  },
  "application/vnd.cups-raster": {
    "source": "iana"
  },
  "application/vnd.cups-raw": {
    "source": "iana"
  },
  "application/vnd.curl": {
    "source": "iana"
  },
  "application/vnd.curl.car": {
    "source": "apache",
    "extensions": ["car"]
  },
  "application/vnd.curl.pcurl": {
    "source": "apache",
    "extensions": ["pcurl"]
  },
  "application/vnd.cyan.dean.root+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cybank": {
    "source": "iana"
  },
  "application/vnd.d2l.coursepackage1p0+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.dart": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dart"]
  },
  "application/vnd.data-vision.rdz": {
    "source": "iana",
    "extensions": ["rdz"]
  },
  "application/vnd.datapackage+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dataresource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dbf": {
    "source": "iana"
  },
  "application/vnd.debian.binary-package": {
    "source": "iana"
  },
  "application/vnd.dece.data": {
    "source": "iana",
    "extensions": ["uvf","uvvf","uvd","uvvd"]
  },
  "application/vnd.dece.ttml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uvt","uvvt"]
  },
  "application/vnd.dece.unspecified": {
    "source": "iana",
    "extensions": ["uvx","uvvx"]
  },
  "application/vnd.dece.zip": {
    "source": "iana",
    "extensions": ["uvz","uvvz"]
  },
  "application/vnd.denovo.fcselayout-link": {
    "source": "iana",
    "extensions": ["fe_launch"]
  },
  "application/vnd.desmume.movie": {
    "source": "iana"
  },
  "application/vnd.dir-bi.plate-dl-nosuffix": {
    "source": "iana"
  },
  "application/vnd.dm.delegation+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dna": {
    "source": "iana",
    "extensions": ["dna"]
  },
  "application/vnd.document+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dolby.mlp": {
    "source": "apache",
    "extensions": ["mlp"]
  },
  "application/vnd.dolby.mobile.1": {
    "source": "iana"
  },
  "application/vnd.dolby.mobile.2": {
    "source": "iana"
  },
  "application/vnd.doremir.scorecloud-binary-document": {
    "source": "iana"
  },
  "application/vnd.dpgraph": {
    "source": "iana",
    "extensions": ["dpg"]
  },
  "application/vnd.dreamfactory": {
    "source": "iana",
    "extensions": ["dfac"]
  },
  "application/vnd.drive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ds-keypoint": {
    "source": "apache",
    "extensions": ["kpxx"]
  },
  "application/vnd.dtg.local": {
    "source": "iana"
  },
  "application/vnd.dtg.local.flash": {
    "source": "iana"
  },
  "application/vnd.dtg.local.html": {
    "source": "iana"
  },
  "application/vnd.dvb.ait": {
    "source": "iana",
    "extensions": ["ait"]
  },
  "application/vnd.dvb.dvbisl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.dvbj": {
    "source": "iana"
  },
  "application/vnd.dvb.esgcontainer": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcdftnotifaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess2": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgpdd": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcroaming": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-base": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-enhancement": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-aggregate-root+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-container+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-generic+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-msglist+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-registration-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-registration-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-init+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.pfr": {
    "source": "iana"
  },
  "application/vnd.dvb.service": {
    "source": "iana",
    "extensions": ["svc"]
  },
  "application/vnd.dxr": {
    "source": "iana"
  },
  "application/vnd.dynageo": {
    "source": "iana",
    "extensions": ["geo"]
  },
  "application/vnd.dzr": {
    "source": "iana"
  },
  "application/vnd.easykaraoke.cdgdownload": {
    "source": "iana"
  },
  "application/vnd.ecdis-update": {
    "source": "iana"
  },
  "application/vnd.ecip.rlp": {
    "source": "iana"
  },
  "application/vnd.ecowin.chart": {
    "source": "iana",
    "extensions": ["mag"]
  },
  "application/vnd.ecowin.filerequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.fileupdate": {
    "source": "iana"
  },
  "application/vnd.ecowin.series": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesrequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesupdate": {
    "source": "iana"
  },
  "application/vnd.efi.img": {
    "source": "iana"
  },
  "application/vnd.efi.iso": {
    "source": "iana"
  },
  "application/vnd.emclient.accessrequest+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.enliven": {
    "source": "iana",
    "extensions": ["nml"]
  },
  "application/vnd.enphase.envoy": {
    "source": "iana"
  },
  "application/vnd.eprints.data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.epson.esf": {
    "source": "iana",
    "extensions": ["esf"]
  },
  "application/vnd.epson.msf": {
    "source": "iana",
    "extensions": ["msf"]
  },
  "application/vnd.epson.quickanime": {
    "source": "iana",
    "extensions": ["qam"]
  },
  "application/vnd.epson.salt": {
    "source": "iana",
    "extensions": ["slt"]
  },
  "application/vnd.epson.ssf": {
    "source": "iana",
    "extensions": ["ssf"]
  },
  "application/vnd.ericsson.quickcall": {
    "source": "iana"
  },
  "application/vnd.espass-espass+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.eszigno3+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["es3","et3"]
  },
  "application/vnd.etsi.aoc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.asic-e+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.etsi.asic-s+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.etsi.cug+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvcommand+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvdiscovery+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-bc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-cod+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-npvr+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvservice+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsync+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvueprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.mcid+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.mheg5": {
    "source": "iana"
  },
  "application/vnd.etsi.overload-control-policy-dataset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.pstn+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.sci+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.simservs+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.timestamp-token": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.tsl.der": {
    "source": "iana"
  },
  "application/vnd.eudora.data": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.profile": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.settings": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.theme": {
    "source": "iana"
  },
  "application/vnd.exstream-empower+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.exstream-package": {
    "source": "iana"
  },
  "application/vnd.ezpix-album": {
    "source": "iana",
    "extensions": ["ez2"]
  },
  "application/vnd.ezpix-package": {
    "source": "iana",
    "extensions": ["ez3"]
  },
  "application/vnd.f-secure.mobile": {
    "source": "iana"
  },
  "application/vnd.fastcopy-disk-image": {
    "source": "iana"
  },
  "application/vnd.fdf": {
    "source": "iana",
    "extensions": ["fdf"]
  },
  "application/vnd.fdsn.mseed": {
    "source": "iana",
    "extensions": ["mseed"]
  },
  "application/vnd.fdsn.seed": {
    "source": "iana",
    "extensions": ["seed","dataless"]
  },
  "application/vnd.ffsns": {
    "source": "iana"
  },
  "application/vnd.ficlab.flb+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.filmit.zfc": {
    "source": "iana"
  },
  "application/vnd.fints": {
    "source": "iana"
  },
  "application/vnd.firemonkeys.cloudcell": {
    "source": "iana"
  },
  "application/vnd.flographit": {
    "source": "iana",
    "extensions": ["gph"]
  },
  "application/vnd.fluxtime.clip": {
    "source": "iana",
    "extensions": ["ftc"]
  },
  "application/vnd.font-fontforge-sfd": {
    "source": "iana"
  },
  "application/vnd.framemaker": {
    "source": "iana",
    "extensions": ["fm","frame","maker","book"]
  },
  "application/vnd.frogans.fnc": {
    "source": "iana",
    "extensions": ["fnc"]
  },
  "application/vnd.frogans.ltf": {
    "source": "iana",
    "extensions": ["ltf"]
  },
  "application/vnd.fsc.weblaunch": {
    "source": "iana",
    "extensions": ["fsc"]
  },
  "application/vnd.fujitsu.oasys": {
    "source": "iana",
    "extensions": ["oas"]
  },
  "application/vnd.fujitsu.oasys2": {
    "source": "iana",
    "extensions": ["oa2"]
  },
  "application/vnd.fujitsu.oasys3": {
    "source": "iana",
    "extensions": ["oa3"]
  },
  "application/vnd.fujitsu.oasysgp": {
    "source": "iana",
    "extensions": ["fg5"]
  },
  "application/vnd.fujitsu.oasysprs": {
    "source": "iana",
    "extensions": ["bh2"]
  },
  "application/vnd.fujixerox.art-ex": {
    "source": "iana"
  },
  "application/vnd.fujixerox.art4": {
    "source": "iana"
  },
  "application/vnd.fujixerox.ddd": {
    "source": "iana",
    "extensions": ["ddd"]
  },
  "application/vnd.fujixerox.docuworks": {
    "source": "iana",
    "extensions": ["xdw"]
  },
  "application/vnd.fujixerox.docuworks.binder": {
    "source": "iana",
    "extensions": ["xbd"]
  },
  "application/vnd.fujixerox.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujixerox.hbpl": {
    "source": "iana"
  },
  "application/vnd.fut-misnet": {
    "source": "iana"
  },
  "application/vnd.futoin+cbor": {
    "source": "iana"
  },
  "application/vnd.futoin+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.fuzzysheet": {
    "source": "iana",
    "extensions": ["fzs"]
  },
  "application/vnd.genomatix.tuxedo": {
    "source": "iana",
    "extensions": ["txd"]
  },
  "application/vnd.gentics.grd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geo+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geocube+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geogebra.file": {
    "source": "iana",
    "extensions": ["ggb"]
  },
  "application/vnd.geogebra.tool": {
    "source": "iana",
    "extensions": ["ggt"]
  },
  "application/vnd.geometry-explorer": {
    "source": "iana",
    "extensions": ["gex","gre"]
  },
  "application/vnd.geonext": {
    "source": "iana",
    "extensions": ["gxt"]
  },
  "application/vnd.geoplan": {
    "source": "iana",
    "extensions": ["g2w"]
  },
  "application/vnd.geospace": {
    "source": "iana",
    "extensions": ["g3w"]
  },
  "application/vnd.gerber": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt-response": {
    "source": "iana"
  },
  "application/vnd.gmx": {
    "source": "iana",
    "extensions": ["gmx"]
  },
  "application/vnd.google-apps.document": {
    "compressible": false,
    "extensions": ["gdoc"]
  },
  "application/vnd.google-apps.presentation": {
    "compressible": false,
    "extensions": ["gslides"]
  },
  "application/vnd.google-apps.spreadsheet": {
    "compressible": false,
    "extensions": ["gsheet"]
  },
  "application/vnd.google-earth.kml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["kml"]
  },
  "application/vnd.google-earth.kmz": {
    "source": "iana",
    "compressible": false,
    "extensions": ["kmz"]
  },
  "application/vnd.gov.sk.e-form+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.gov.sk.e-form+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.gov.sk.xmldatacontainer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.grafeq": {
    "source": "iana",
    "extensions": ["gqf","gqs"]
  },
  "application/vnd.gridmp": {
    "source": "iana"
  },
  "application/vnd.groove-account": {
    "source": "iana",
    "extensions": ["gac"]
  },
  "application/vnd.groove-help": {
    "source": "iana",
    "extensions": ["ghf"]
  },
  "application/vnd.groove-identity-message": {
    "source": "iana",
    "extensions": ["gim"]
  },
  "application/vnd.groove-injector": {
    "source": "iana",
    "extensions": ["grv"]
  },
  "application/vnd.groove-tool-message": {
    "source": "iana",
    "extensions": ["gtm"]
  },
  "application/vnd.groove-tool-template": {
    "source": "iana",
    "extensions": ["tpl"]
  },
  "application/vnd.groove-vcard": {
    "source": "iana",
    "extensions": ["vcg"]
  },
  "application/vnd.hal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hal+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["hal"]
  },
  "application/vnd.handheld-entertainment+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["zmm"]
  },
  "application/vnd.hbci": {
    "source": "iana",
    "extensions": ["hbci"]
  },
  "application/vnd.hc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hcl-bireports": {
    "source": "iana"
  },
  "application/vnd.hdt": {
    "source": "iana"
  },
  "application/vnd.heroku+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hhe.lesson-player": {
    "source": "iana",
    "extensions": ["les"]
  },
  "application/vnd.hp-hpgl": {
    "source": "iana",
    "extensions": ["hpgl"]
  },
  "application/vnd.hp-hpid": {
    "source": "iana",
    "extensions": ["hpid"]
  },
  "application/vnd.hp-hps": {
    "source": "iana",
    "extensions": ["hps"]
  },
  "application/vnd.hp-jlyt": {
    "source": "iana",
    "extensions": ["jlt"]
  },
  "application/vnd.hp-pcl": {
    "source": "iana",
    "extensions": ["pcl"]
  },
  "application/vnd.hp-pclxl": {
    "source": "iana",
    "extensions": ["pclxl"]
  },
  "application/vnd.httphone": {
    "source": "iana"
  },
  "application/vnd.hydrostatix.sof-data": {
    "source": "iana",
    "extensions": ["sfd-hdstx"]
  },
  "application/vnd.hyper+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hyper-item+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hyperdrive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hzn-3d-crossword": {
    "source": "iana"
  },
  "application/vnd.ibm.afplinedata": {
    "source": "iana"
  },
  "application/vnd.ibm.electronic-media": {
    "source": "iana"
  },
  "application/vnd.ibm.minipay": {
    "source": "iana",
    "extensions": ["mpy"]
  },
  "application/vnd.ibm.modcap": {
    "source": "iana",
    "extensions": ["afp","listafp","list3820"]
  },
  "application/vnd.ibm.rights-management": {
    "source": "iana",
    "extensions": ["irm"]
  },
  "application/vnd.ibm.secure-container": {
    "source": "iana",
    "extensions": ["sc"]
  },
  "application/vnd.iccprofile": {
    "source": "iana",
    "extensions": ["icc","icm"]
  },
  "application/vnd.ieee.1905": {
    "source": "iana"
  },
  "application/vnd.igloader": {
    "source": "iana",
    "extensions": ["igl"]
  },
  "application/vnd.imagemeter.folder+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.imagemeter.image+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.immervision-ivp": {
    "source": "iana",
    "extensions": ["ivp"]
  },
  "application/vnd.immervision-ivu": {
    "source": "iana",
    "extensions": ["ivu"]
  },
  "application/vnd.ims.imsccv1p1": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p2": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p3": {
    "source": "iana"
  },
  "application/vnd.ims.lis.v2.result+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy.id+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informedcontrol.rms+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informix-visionary": {
    "source": "iana"
  },
  "application/vnd.infotech.project": {
    "source": "iana"
  },
  "application/vnd.infotech.project+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.innopath.wamp.notification": {
    "source": "iana"
  },
  "application/vnd.insors.igm": {
    "source": "iana",
    "extensions": ["igm"]
  },
  "application/vnd.intercon.formnet": {
    "source": "iana",
    "extensions": ["xpw","xpx"]
  },
  "application/vnd.intergeo": {
    "source": "iana",
    "extensions": ["i2g"]
  },
  "application/vnd.intertrust.digibox": {
    "source": "iana"
  },
  "application/vnd.intertrust.nncp": {
    "source": "iana"
  },
  "application/vnd.intu.qbo": {
    "source": "iana",
    "extensions": ["qbo"]
  },
  "application/vnd.intu.qfx": {
    "source": "iana",
    "extensions": ["qfx"]
  },
  "application/vnd.iptc.g2.catalogitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.conceptitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.knowledgeitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.newsitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.newsmessage+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.packageitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.planningitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ipunplugged.rcprofile": {
    "source": "iana",
    "extensions": ["rcprofile"]
  },
  "application/vnd.irepository.package+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["irp"]
  },
  "application/vnd.is-xpr": {
    "source": "iana",
    "extensions": ["xpr"]
  },
  "application/vnd.isac.fcs": {
    "source": "iana",
    "extensions": ["fcs"]
  },
  "application/vnd.iso11783-10+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.jam": {
    "source": "iana",
    "extensions": ["jam"]
  },
  "application/vnd.japannet-directory-service": {
    "source": "iana"
  },
  "application/vnd.japannet-jpnstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-payment-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-registration": {
    "source": "iana"
  },
  "application/vnd.japannet-registration-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-setstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-verification": {
    "source": "iana"
  },
  "application/vnd.japannet-verification-wakeup": {
    "source": "iana"
  },
  "application/vnd.jcp.javame.midlet-rms": {
    "source": "iana",
    "extensions": ["rms"]
  },
  "application/vnd.jisp": {
    "source": "iana",
    "extensions": ["jisp"]
  },
  "application/vnd.joost.joda-archive": {
    "source": "iana",
    "extensions": ["joda"]
  },
  "application/vnd.jsk.isdn-ngn": {
    "source": "iana"
  },
  "application/vnd.kahootz": {
    "source": "iana",
    "extensions": ["ktz","ktr"]
  },
  "application/vnd.kde.karbon": {
    "source": "iana",
    "extensions": ["karbon"]
  },
  "application/vnd.kde.kchart": {
    "source": "iana",
    "extensions": ["chrt"]
  },
  "application/vnd.kde.kformula": {
    "source": "iana",
    "extensions": ["kfo"]
  },
  "application/vnd.kde.kivio": {
    "source": "iana",
    "extensions": ["flw"]
  },
  "application/vnd.kde.kontour": {
    "source": "iana",
    "extensions": ["kon"]
  },
  "application/vnd.kde.kpresenter": {
    "source": "iana",
    "extensions": ["kpr","kpt"]
  },
  "application/vnd.kde.kspread": {
    "source": "iana",
    "extensions": ["ksp"]
  },
  "application/vnd.kde.kword": {
    "source": "iana",
    "extensions": ["kwd","kwt"]
  },
  "application/vnd.kenameaapp": {
    "source": "iana",
    "extensions": ["htke"]
  },
  "application/vnd.kidspiration": {
    "source": "iana",
    "extensions": ["kia"]
  },
  "application/vnd.kinar": {
    "source": "iana",
    "extensions": ["kne","knp"]
  },
  "application/vnd.koan": {
    "source": "iana",
    "extensions": ["skp","skd","skt","skm"]
  },
  "application/vnd.kodak-descriptor": {
    "source": "iana",
    "extensions": ["sse"]
  },
  "application/vnd.las": {
    "source": "iana"
  },
  "application/vnd.las.las+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.las.las+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lasxml"]
  },
  "application/vnd.laszip": {
    "source": "iana"
  },
  "application/vnd.leap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.liberty-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.llamagraphics.life-balance.desktop": {
    "source": "iana",
    "extensions": ["lbd"]
  },
  "application/vnd.llamagraphics.life-balance.exchange+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lbe"]
  },
  "application/vnd.logipipe.circuit+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.loom": {
    "source": "iana"
  },
  "application/vnd.lotus-1-2-3": {
    "source": "iana",
    "extensions": ["123"]
  },
  "application/vnd.lotus-approach": {
    "source": "iana",
    "extensions": ["apr"]
  },
  "application/vnd.lotus-freelance": {
    "source": "iana",
    "extensions": ["pre"]
  },
  "application/vnd.lotus-notes": {
    "source": "iana",
    "extensions": ["nsf"]
  },
  "application/vnd.lotus-organizer": {
    "source": "iana",
    "extensions": ["org"]
  },
  "application/vnd.lotus-screencam": {
    "source": "iana",
    "extensions": ["scm"]
  },
  "application/vnd.lotus-wordpro": {
    "source": "iana",
    "extensions": ["lwp"]
  },
  "application/vnd.macports.portpkg": {
    "source": "iana",
    "extensions": ["portpkg"]
  },
  "application/vnd.mapbox-vector-tile": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.actiontoken+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.conftoken+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.license+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.mdcf": {
    "source": "iana"
  },
  "application/vnd.mason+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.maxmind.maxmind-db": {
    "source": "iana"
  },
  "application/vnd.mcd": {
    "source": "iana",
    "extensions": ["mcd"]
  },
  "application/vnd.medcalcdata": {
    "source": "iana",
    "extensions": ["mc1"]
  },
  "application/vnd.mediastation.cdkey": {
    "source": "iana",
    "extensions": ["cdkey"]
  },
  "application/vnd.meridian-slingshot": {
    "source": "iana"
  },
  "application/vnd.mfer": {
    "source": "iana",
    "extensions": ["mwf"]
  },
  "application/vnd.mfmp": {
    "source": "iana",
    "extensions": ["mfm"]
  },
  "application/vnd.micro+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.micrografx.flo": {
    "source": "iana",
    "extensions": ["flo"]
  },
  "application/vnd.micrografx.igx": {
    "source": "iana",
    "extensions": ["igx"]
  },
  "application/vnd.microsoft.portable-executable": {
    "source": "iana"
  },
  "application/vnd.microsoft.windows.thumbnail-cache": {
    "source": "iana"
  },
  "application/vnd.miele+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.mif": {
    "source": "iana",
    "extensions": ["mif"]
  },
  "application/vnd.minisoft-hp3000-save": {
    "source": "iana"
  },
  "application/vnd.mitsubishi.misty-guard.trustweb": {
    "source": "iana"
  },
  "application/vnd.mobius.daf": {
    "source": "iana",
    "extensions": ["daf"]
  },
  "application/vnd.mobius.dis": {
    "source": "iana",
    "extensions": ["dis"]
  },
  "application/vnd.mobius.mbk": {
    "source": "iana",
    "extensions": ["mbk"]
  },
  "application/vnd.mobius.mqy": {
    "source": "iana",
    "extensions": ["mqy"]
  },
  "application/vnd.mobius.msl": {
    "source": "iana",
    "extensions": ["msl"]
  },
  "application/vnd.mobius.plc": {
    "source": "iana",
    "extensions": ["plc"]
  },
  "application/vnd.mobius.txf": {
    "source": "iana",
    "extensions": ["txf"]
  },
  "application/vnd.mophun.application": {
    "source": "iana",
    "extensions": ["mpn"]
  },
  "application/vnd.mophun.certificate": {
    "source": "iana",
    "extensions": ["mpc"]
  },
  "application/vnd.motorola.flexsuite": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.adsi": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.fis": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.gotap": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.kmr": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.ttc": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.wem": {
    "source": "iana"
  },
  "application/vnd.motorola.iprm": {
    "source": "iana"
  },
  "application/vnd.mozilla.xul+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xul"]
  },
  "application/vnd.ms-3mfdocument": {
    "source": "iana"
  },
  "application/vnd.ms-artgalry": {
    "source": "iana",
    "extensions": ["cil"]
  },
  "application/vnd.ms-asf": {
    "source": "iana"
  },
  "application/vnd.ms-cab-compressed": {
    "source": "iana",
    "extensions": ["cab"]
  },
  "application/vnd.ms-color.iccprofile": {
    "source": "apache"
  },
  "application/vnd.ms-excel": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xls","xlm","xla","xlc","xlt","xlw"]
  },
  "application/vnd.ms-excel.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlam"]
  },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsb"]
  },
  "application/vnd.ms-excel.sheet.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsm"]
  },
  "application/vnd.ms-excel.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["xltm"]
  },
  "application/vnd.ms-fontobject": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eot"]
  },
  "application/vnd.ms-htmlhelp": {
    "source": "iana",
    "extensions": ["chm"]
  },
  "application/vnd.ms-ims": {
    "source": "iana",
    "extensions": ["ims"]
  },
  "application/vnd.ms-lrm": {
    "source": "iana",
    "extensions": ["lrm"]
  },
  "application/vnd.ms-office.activex+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-officetheme": {
    "source": "iana",
    "extensions": ["thmx"]
  },
  "application/vnd.ms-opentype": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-outlook": {
    "compressible": false,
    "extensions": ["msg"]
  },
  "application/vnd.ms-package.obfuscated-opentype": {
    "source": "apache"
  },
  "application/vnd.ms-pki.seccat": {
    "source": "apache",
    "extensions": ["cat"]
  },
  "application/vnd.ms-pki.stl": {
    "source": "apache",
    "extensions": ["stl"]
  },
  "application/vnd.ms-playready.initiator+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-powerpoint": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ppt","pps","pot"]
  },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppam"]
  },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
    "source": "iana",
    "extensions": ["pptm"]
  },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
    "source": "iana",
    "extensions": ["sldm"]
  },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppsm"]
  },
  "application/vnd.ms-powerpoint.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["potm"]
  },
  "application/vnd.ms-printdevicecapabilities+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-printing.printticket+xml": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-printschematicket+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-project": {
    "source": "iana",
    "extensions": ["mpp","mpt"]
  },
  "application/vnd.ms-tnef": {
    "source": "iana"
  },
  "application/vnd.ms-windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.nwprinting.oob": {
    "source": "iana"
  },
  "application/vnd.ms-windows.printerpairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.wsd.oob": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-resp": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-resp": {
    "source": "iana"
  },
  "application/vnd.ms-word.document.macroenabled.12": {
    "source": "iana",
    "extensions": ["docm"]
  },
  "application/vnd.ms-word.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["dotm"]
  },
  "application/vnd.ms-works": {
    "source": "iana",
    "extensions": ["wps","wks","wcm","wdb"]
  },
  "application/vnd.ms-wpl": {
    "source": "iana",
    "extensions": ["wpl"]
  },
  "application/vnd.ms-xpsdocument": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xps"]
  },
  "application/vnd.msa-disk-image": {
    "source": "iana"
  },
  "application/vnd.mseq": {
    "source": "iana",
    "extensions": ["mseq"]
  },
  "application/vnd.msign": {
    "source": "iana"
  },
  "application/vnd.multiad.creator": {
    "source": "iana"
  },
  "application/vnd.multiad.creator.cif": {
    "source": "iana"
  },
  "application/vnd.music-niff": {
    "source": "iana"
  },
  "application/vnd.musician": {
    "source": "iana",
    "extensions": ["mus"]
  },
  "application/vnd.muvee.style": {
    "source": "iana",
    "extensions": ["msty"]
  },
  "application/vnd.mynfc": {
    "source": "iana",
    "extensions": ["taglet"]
  },
  "application/vnd.ncd.control": {
    "source": "iana"
  },
  "application/vnd.ncd.reference": {
    "source": "iana"
  },
  "application/vnd.nearst.inv+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nervana": {
    "source": "iana"
  },
  "application/vnd.netfpx": {
    "source": "iana"
  },
  "application/vnd.neurolanguage.nlu": {
    "source": "iana",
    "extensions": ["nlu"]
  },
  "application/vnd.nimn": {
    "source": "iana"
  },
  "application/vnd.nintendo.nitro.rom": {
    "source": "iana"
  },
  "application/vnd.nintendo.snes.rom": {
    "source": "iana"
  },
  "application/vnd.nitf": {
    "source": "iana",
    "extensions": ["ntf","nitf"]
  },
  "application/vnd.noblenet-directory": {
    "source": "iana",
    "extensions": ["nnd"]
  },
  "application/vnd.noblenet-sealer": {
    "source": "iana",
    "extensions": ["nns"]
  },
  "application/vnd.noblenet-web": {
    "source": "iana",
    "extensions": ["nnw"]
  },
  "application/vnd.nokia.catalogs": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.iptv.config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.isds-radio-presets": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.landmarkcollection+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.n-gage.ac+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ac"]
  },
  "application/vnd.nokia.n-gage.data": {
    "source": "iana",
    "extensions": ["ngdat"]
  },
  "application/vnd.nokia.n-gage.symbian.install": {
    "source": "iana",
    "extensions": ["n-gage"]
  },
  "application/vnd.nokia.ncd": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.radio-preset": {
    "source": "iana",
    "extensions": ["rpst"]
  },
  "application/vnd.nokia.radio-presets": {
    "source": "iana",
    "extensions": ["rpss"]
  },
  "application/vnd.novadigm.edm": {
    "source": "iana",
    "extensions": ["edm"]
  },
  "application/vnd.novadigm.edx": {
    "source": "iana",
    "extensions": ["edx"]
  },
  "application/vnd.novadigm.ext": {
    "source": "iana",
    "extensions": ["ext"]
  },
  "application/vnd.ntt-local.content-share": {
    "source": "iana"
  },
  "application/vnd.ntt-local.file-transfer": {
    "source": "iana"
  },
  "application/vnd.ntt-local.ogw_remote-access": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_remote": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_tcp_stream": {
    "source": "iana"
  },
  "application/vnd.oasis.opendocument.chart": {
    "source": "iana",
    "extensions": ["odc"]
  },
  "application/vnd.oasis.opendocument.chart-template": {
    "source": "iana",
    "extensions": ["otc"]
  },
  "application/vnd.oasis.opendocument.database": {
    "source": "iana",
    "extensions": ["odb"]
  },
  "application/vnd.oasis.opendocument.formula": {
    "source": "iana",
    "extensions": ["odf"]
  },
  "application/vnd.oasis.opendocument.formula-template": {
    "source": "iana",
    "extensions": ["odft"]
  },
  "application/vnd.oasis.opendocument.graphics": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odg"]
  },
  "application/vnd.oasis.opendocument.graphics-template": {
    "source": "iana",
    "extensions": ["otg"]
  },
  "application/vnd.oasis.opendocument.image": {
    "source": "iana",
    "extensions": ["odi"]
  },
  "application/vnd.oasis.opendocument.image-template": {
    "source": "iana",
    "extensions": ["oti"]
  },
  "application/vnd.oasis.opendocument.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odp"]
  },
  "application/vnd.oasis.opendocument.presentation-template": {
    "source": "iana",
    "extensions": ["otp"]
  },
  "application/vnd.oasis.opendocument.spreadsheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ods"]
  },
  "application/vnd.oasis.opendocument.spreadsheet-template": {
    "source": "iana",
    "extensions": ["ots"]
  },
  "application/vnd.oasis.opendocument.text": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odt"]
  },
  "application/vnd.oasis.opendocument.text-master": {
    "source": "iana",
    "extensions": ["odm"]
  },
  "application/vnd.oasis.opendocument.text-template": {
    "source": "iana",
    "extensions": ["ott"]
  },
  "application/vnd.oasis.opendocument.text-web": {
    "source": "iana",
    "extensions": ["oth"]
  },
  "application/vnd.obn": {
    "source": "iana"
  },
  "application/vnd.ocf+cbor": {
    "source": "iana"
  },
  "application/vnd.oci.image.manifest.v1+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oftn.l10n+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessdownload+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessstreaming+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.cspg-hexbinary": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.svg+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.dae.xhtml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.mippvcontrolmessage+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.pae.gem": {
    "source": "iana"
  },
  "application/vnd.oipf.spdiscovery+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.spdlist+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.ueprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.userprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.olpc-sugar": {
    "source": "iana",
    "extensions": ["xo"]
  },
  "application/vnd.oma-scws-config": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-request": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-response": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.drm-trigger+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.imd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.ltkm": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.notification+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.provisioningtrigger": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgboot": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.sgdu": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.simple-symbol-container": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.smartcard-trigger+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.sprov+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.stkm": {
    "source": "iana"
  },
  "application/vnd.oma.cab-address-book+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-feature-handler+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-pcc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-subs-invite+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-user-prefs+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.dcd": {
    "source": "iana"
  },
  "application/vnd.oma.dcdc": {
    "source": "iana"
  },
  "application/vnd.oma.dd2+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dd2"]
  },
  "application/vnd.oma.drm.risd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.group-usage-list+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+tlv": {
    "source": "iana"
  },
  "application/vnd.oma.pal+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.detailed-progress-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.final-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.groups+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.invocation-descriptor+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.optimized-progress-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.push": {
    "source": "iana"
  },
  "application/vnd.oma.scidm.messages+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.xcap-directory+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.omads-email+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omads-file+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omads-folder+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omaloc-supl-init": {
    "source": "iana"
  },
  "application/vnd.onepager": {
    "source": "iana"
  },
  "application/vnd.onepagertamp": {
    "source": "iana"
  },
  "application/vnd.onepagertamx": {
    "source": "iana"
  },
  "application/vnd.onepagertat": {
    "source": "iana"
  },
  "application/vnd.onepagertatp": {
    "source": "iana"
  },
  "application/vnd.onepagertatx": {
    "source": "iana"
  },
  "application/vnd.openblox.game+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["obgx"]
  },
  "application/vnd.openblox.game-binary": {
    "source": "iana"
  },
  "application/vnd.openeye.oeb": {
    "source": "iana"
  },
  "application/vnd.openofficeorg.extension": {
    "source": "apache",
    "extensions": ["oxt"]
  },
  "application/vnd.openstreetmap.data+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["osm"]
  },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawing+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pptx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
    "source": "iana",
    "extensions": ["sldx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
    "source": "iana",
    "extensions": ["ppsx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template": {
    "source": "iana",
    "extensions": ["potx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xlsx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
    "source": "iana",
    "extensions": ["xltx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.theme+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.vmldrawing": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
    "source": "iana",
    "compressible": false,
    "extensions": ["docx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
    "source": "iana",
    "extensions": ["dotx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.core-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.relationships+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oracle.resource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.orange.indata": {
    "source": "iana"
  },
  "application/vnd.osa.netdeploy": {
    "source": "iana"
  },
  "application/vnd.osgeo.mapguide.package": {
    "source": "iana",
    "extensions": ["mgp"]
  },
  "application/vnd.osgi.bundle": {
    "source": "iana"
  },
  "application/vnd.osgi.dp": {
    "source": "iana",
    "extensions": ["dp"]
  },
  "application/vnd.osgi.subsystem": {
    "source": "iana",
    "extensions": ["esa"]
  },
  "application/vnd.otps.ct-kip+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oxli.countgraph": {
    "source": "iana"
  },
  "application/vnd.pagerduty+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.palm": {
    "source": "iana",
    "extensions": ["pdb","pqa","oprc"]
  },
  "application/vnd.panoply": {
    "source": "iana"
  },
  "application/vnd.paos.xml": {
    "source": "iana"
  },
  "application/vnd.patentdive": {
    "source": "iana"
  },
  "application/vnd.patientecommsdoc": {
    "source": "iana"
  },
  "application/vnd.pawaafile": {
    "source": "iana",
    "extensions": ["paw"]
  },
  "application/vnd.pcos": {
    "source": "iana"
  },
  "application/vnd.pg.format": {
    "source": "iana",
    "extensions": ["str"]
  },
  "application/vnd.pg.osasli": {
    "source": "iana",
    "extensions": ["ei6"]
  },
  "application/vnd.piaccess.application-licence": {
    "source": "iana"
  },
  "application/vnd.picsel": {
    "source": "iana",
    "extensions": ["efif"]
  },
  "application/vnd.pmi.widget": {
    "source": "iana",
    "extensions": ["wg"]
  },
  "application/vnd.poc.group-advertisement+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.pocketlearn": {
    "source": "iana",
    "extensions": ["plf"]
  },
  "application/vnd.powerbuilder6": {
    "source": "iana",
    "extensions": ["pbd"]
  },
  "application/vnd.powerbuilder6-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75-s": {
    "source": "iana"
  },
  "application/vnd.preminet": {
    "source": "iana"
  },
  "application/vnd.previewsystems.box": {
    "source": "iana",
    "extensions": ["box"]
  },
  "application/vnd.proteus.magazine": {
    "source": "iana",
    "extensions": ["mgz"]
  },
  "application/vnd.psfs": {
    "source": "iana"
  },
  "application/vnd.publishare-delta-tree": {
    "source": "iana",
    "extensions": ["qps"]
  },
  "application/vnd.pvi.ptid1": {
    "source": "iana",
    "extensions": ["ptid"]
  },
  "application/vnd.pwg-multiplexed": {
    "source": "iana"
  },
  "application/vnd.pwg-xhtml-print+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.qualcomm.brew-app-res": {
    "source": "iana"
  },
  "application/vnd.quarantainenet": {
    "source": "iana"
  },
  "application/vnd.quark.quarkxpress": {
    "source": "iana",
    "extensions": ["qxd","qxt","qwd","qwt","qxl","qxb"]
  },
  "application/vnd.quobject-quoxdocument": {
    "source": "iana"
  },
  "application/vnd.radisys.moml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-conf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-conn+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-dialog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-stream+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-conf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-base+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-group+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-speech+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-transform+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.rainstor.data": {
    "source": "iana"
  },
  "application/vnd.rapid": {
    "source": "iana"
  },
  "application/vnd.rar": {
    "source": "iana"
  },
  "application/vnd.realvnc.bed": {
    "source": "iana",
    "extensions": ["bed"]
  },
  "application/vnd.recordare.musicxml": {
    "source": "iana",
    "extensions": ["mxl"]
  },
  "application/vnd.recordare.musicxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["musicxml"]
  },
  "application/vnd.renlearn.rlprint": {
    "source": "iana"
  },
  "application/vnd.restful+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.rig.cryptonote": {
    "source": "iana",
    "extensions": ["cryptonote"]
  },
  "application/vnd.rim.cod": {
    "source": "apache",
    "extensions": ["cod"]
  },
  "application/vnd.rn-realmedia": {
    "source": "apache",
    "extensions": ["rm"]
  },
  "application/vnd.rn-realmedia-vbr": {
    "source": "apache",
    "extensions": ["rmvb"]
  },
  "application/vnd.route66.link66+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["link66"]
  },
  "application/vnd.rs-274x": {
    "source": "iana"
  },
  "application/vnd.ruckus.download": {
    "source": "iana"
  },
  "application/vnd.s3sms": {
    "source": "iana"
  },
  "application/vnd.sailingtracker.track": {
    "source": "iana",
    "extensions": ["st"]
  },
  "application/vnd.sar": {
    "source": "iana"
  },
  "application/vnd.sbm.cid": {
    "source": "iana"
  },
  "application/vnd.sbm.mid2": {
    "source": "iana"
  },
  "application/vnd.scribus": {
    "source": "iana"
  },
  "application/vnd.sealed.3df": {
    "source": "iana"
  },
  "application/vnd.sealed.csf": {
    "source": "iana"
  },
  "application/vnd.sealed.doc": {
    "source": "iana"
  },
  "application/vnd.sealed.eml": {
    "source": "iana"
  },
  "application/vnd.sealed.mht": {
    "source": "iana"
  },
  "application/vnd.sealed.net": {
    "source": "iana"
  },
  "application/vnd.sealed.ppt": {
    "source": "iana"
  },
  "application/vnd.sealed.tiff": {
    "source": "iana"
  },
  "application/vnd.sealed.xls": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.html": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.pdf": {
    "source": "iana"
  },
  "application/vnd.seemail": {
    "source": "iana",
    "extensions": ["see"]
  },
  "application/vnd.sema": {
    "source": "iana",
    "extensions": ["sema"]
  },
  "application/vnd.semd": {
    "source": "iana",
    "extensions": ["semd"]
  },
  "application/vnd.semf": {
    "source": "iana",
    "extensions": ["semf"]
  },
  "application/vnd.shade-save-file": {
    "source": "iana"
  },
  "application/vnd.shana.informed.formdata": {
    "source": "iana",
    "extensions": ["ifm"]
  },
  "application/vnd.shana.informed.formtemplate": {
    "source": "iana",
    "extensions": ["itp"]
  },
  "application/vnd.shana.informed.interchange": {
    "source": "iana",
    "extensions": ["iif"]
  },
  "application/vnd.shana.informed.package": {
    "source": "iana",
    "extensions": ["ipk"]
  },
  "application/vnd.shootproof+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.shopkick+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.shp": {
    "source": "iana"
  },
  "application/vnd.shx": {
    "source": "iana"
  },
  "application/vnd.sigrok.session": {
    "source": "iana"
  },
  "application/vnd.simtech-mindmapper": {
    "source": "iana",
    "extensions": ["twd","twds"]
  },
  "application/vnd.siren+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.smaf": {
    "source": "iana",
    "extensions": ["mmf"]
  },
  "application/vnd.smart.notebook": {
    "source": "iana"
  },
  "application/vnd.smart.teacher": {
    "source": "iana",
    "extensions": ["teacher"]
  },
  "application/vnd.snesdev-page-table": {
    "source": "iana"
  },
  "application/vnd.software602.filler.form+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["fo"]
  },
  "application/vnd.software602.filler.form-xml-zip": {
    "source": "iana"
  },
  "application/vnd.solent.sdkm+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sdkm","sdkd"]
  },
  "application/vnd.spotfire.dxp": {
    "source": "iana",
    "extensions": ["dxp"]
  },
  "application/vnd.spotfire.sfs": {
    "source": "iana",
    "extensions": ["sfs"]
  },
  "application/vnd.sqlite3": {
    "source": "iana"
  },
  "application/vnd.sss-cod": {
    "source": "iana"
  },
  "application/vnd.sss-dtf": {
    "source": "iana"
  },
  "application/vnd.sss-ntf": {
    "source": "iana"
  },
  "application/vnd.stardivision.calc": {
    "source": "apache",
    "extensions": ["sdc"]
  },
  "application/vnd.stardivision.draw": {
    "source": "apache",
    "extensions": ["sda"]
  },
  "application/vnd.stardivision.impress": {
    "source": "apache",
    "extensions": ["sdd"]
  },
  "application/vnd.stardivision.math": {
    "source": "apache",
    "extensions": ["smf"]
  },
  "application/vnd.stardivision.writer": {
    "source": "apache",
    "extensions": ["sdw","vor"]
  },
  "application/vnd.stardivision.writer-global": {
    "source": "apache",
    "extensions": ["sgl"]
  },
  "application/vnd.stepmania.package": {
    "source": "iana",
    "extensions": ["smzip"]
  },
  "application/vnd.stepmania.stepchart": {
    "source": "iana",
    "extensions": ["sm"]
  },
  "application/vnd.street-stream": {
    "source": "iana"
  },
  "application/vnd.sun.wadl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wadl"]
  },
  "application/vnd.sun.xml.calc": {
    "source": "apache",
    "extensions": ["sxc"]
  },
  "application/vnd.sun.xml.calc.template": {
    "source": "apache",
    "extensions": ["stc"]
  },
  "application/vnd.sun.xml.draw": {
    "source": "apache",
    "extensions": ["sxd"]
  },
  "application/vnd.sun.xml.draw.template": {
    "source": "apache",
    "extensions": ["std"]
  },
  "application/vnd.sun.xml.impress": {
    "source": "apache",
    "extensions": ["sxi"]
  },
  "application/vnd.sun.xml.impress.template": {
    "source": "apache",
    "extensions": ["sti"]
  },
  "application/vnd.sun.xml.math": {
    "source": "apache",
    "extensions": ["sxm"]
  },
  "application/vnd.sun.xml.writer": {
    "source": "apache",
    "extensions": ["sxw"]
  },
  "application/vnd.sun.xml.writer.global": {
    "source": "apache",
    "extensions": ["sxg"]
  },
  "application/vnd.sun.xml.writer.template": {
    "source": "apache",
    "extensions": ["stw"]
  },
  "application/vnd.sus-calendar": {
    "source": "iana",
    "extensions": ["sus","susp"]
  },
  "application/vnd.svd": {
    "source": "iana",
    "extensions": ["svd"]
  },
  "application/vnd.swiftview-ics": {
    "source": "iana"
  },
  "application/vnd.symbian.install": {
    "source": "apache",
    "extensions": ["sis","sisx"]
  },
  "application/vnd.syncml+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["xsm"]
  },
  "application/vnd.syncml.dm+wbxml": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["bdm"]
  },
  "application/vnd.syncml.dm+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["xdm"]
  },
  "application/vnd.syncml.dm.notification": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["ddf"]
  },
  "application/vnd.syncml.dmtnds+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.syncml.ds.notification": {
    "source": "iana"
  },
  "application/vnd.tableschema+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tao.intent-module-archive": {
    "source": "iana",
    "extensions": ["tao"]
  },
  "application/vnd.tcpdump.pcap": {
    "source": "iana",
    "extensions": ["pcap","cap","dmp"]
  },
  "application/vnd.think-cell.ppttc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tmd.mediaflex.api+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tml": {
    "source": "iana"
  },
  "application/vnd.tmobile-livetv": {
    "source": "iana",
    "extensions": ["tmo"]
  },
  "application/vnd.tri.onesource": {
    "source": "iana"
  },
  "application/vnd.trid.tpt": {
    "source": "iana",
    "extensions": ["tpt"]
  },
  "application/vnd.triscape.mxs": {
    "source": "iana",
    "extensions": ["mxs"]
  },
  "application/vnd.trueapp": {
    "source": "iana",
    "extensions": ["tra"]
  },
  "application/vnd.truedoc": {
    "source": "iana"
  },
  "application/vnd.ubisoft.webplayer": {
    "source": "iana"
  },
  "application/vnd.ufdl": {
    "source": "iana",
    "extensions": ["ufd","ufdl"]
  },
  "application/vnd.uiq.theme": {
    "source": "iana",
    "extensions": ["utz"]
  },
  "application/vnd.umajin": {
    "source": "iana",
    "extensions": ["umj"]
  },
  "application/vnd.unity": {
    "source": "iana",
    "extensions": ["unityweb"]
  },
  "application/vnd.uoml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uoml"]
  },
  "application/vnd.uplanet.alert": {
    "source": "iana"
  },
  "application/vnd.uplanet.alert-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.list": {
    "source": "iana"
  },
  "application/vnd.uplanet.list-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.signal": {
    "source": "iana"
  },
  "application/vnd.uri-map": {
    "source": "iana"
  },
  "application/vnd.valve.source.material": {
    "source": "iana"
  },
  "application/vnd.vcx": {
    "source": "iana",
    "extensions": ["vcx"]
  },
  "application/vnd.vd-study": {
    "source": "iana"
  },
  "application/vnd.vectorworks": {
    "source": "iana"
  },
  "application/vnd.vel+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.verimatrix.vcas": {
    "source": "iana"
  },
  "application/vnd.veryant.thin": {
    "source": "iana"
  },
  "application/vnd.ves.encrypted": {
    "source": "iana"
  },
  "application/vnd.vidsoft.vidconference": {
    "source": "iana"
  },
  "application/vnd.visio": {
    "source": "iana",
    "extensions": ["vsd","vst","vss","vsw"]
  },
  "application/vnd.visionary": {
    "source": "iana",
    "extensions": ["vis"]
  },
  "application/vnd.vividence.scriptfile": {
    "source": "iana"
  },
  "application/vnd.vsf": {
    "source": "iana",
    "extensions": ["vsf"]
  },
  "application/vnd.wap.sic": {
    "source": "iana"
  },
  "application/vnd.wap.slc": {
    "source": "iana"
  },
  "application/vnd.wap.wbxml": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["wbxml"]
  },
  "application/vnd.wap.wmlc": {
    "source": "iana",
    "extensions": ["wmlc"]
  },
  "application/vnd.wap.wmlscriptc": {
    "source": "iana",
    "extensions": ["wmlsc"]
  },
  "application/vnd.webturbo": {
    "source": "iana",
    "extensions": ["wtb"]
  },
  "application/vnd.wfa.p2p": {
    "source": "iana"
  },
  "application/vnd.wfa.wsc": {
    "source": "iana"
  },
  "application/vnd.windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.wmc": {
    "source": "iana"
  },
  "application/vnd.wmf.bootstrap": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica.package": {
    "source": "iana"
  },
  "application/vnd.wolfram.player": {
    "source": "iana",
    "extensions": ["nbp"]
  },
  "application/vnd.wordperfect": {
    "source": "iana",
    "extensions": ["wpd"]
  },
  "application/vnd.wqd": {
    "source": "iana",
    "extensions": ["wqd"]
  },
  "application/vnd.wrq-hp3000-labelled": {
    "source": "iana"
  },
  "application/vnd.wt.stf": {
    "source": "iana",
    "extensions": ["stf"]
  },
  "application/vnd.wv.csp+wbxml": {
    "source": "iana"
  },
  "application/vnd.wv.csp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.wv.ssp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xacml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xara": {
    "source": "iana",
    "extensions": ["xar"]
  },
  "application/vnd.xfdl": {
    "source": "iana",
    "extensions": ["xfdl"]
  },
  "application/vnd.xfdl.webform": {
    "source": "iana"
  },
  "application/vnd.xmi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xmpie.cpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.dpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.plan": {
    "source": "iana"
  },
  "application/vnd.xmpie.ppkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.xlim": {
    "source": "iana"
  },
  "application/vnd.yamaha.hv-dic": {
    "source": "iana",
    "extensions": ["hvd"]
  },
  "application/vnd.yamaha.hv-script": {
    "source": "iana",
    "extensions": ["hvs"]
  },
  "application/vnd.yamaha.hv-voice": {
    "source": "iana",
    "extensions": ["hvp"]
  },
  "application/vnd.yamaha.openscoreformat": {
    "source": "iana",
    "extensions": ["osf"]
  },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["osfpvg"]
  },
  "application/vnd.yamaha.remote-setup": {
    "source": "iana"
  },
  "application/vnd.yamaha.smaf-audio": {
    "source": "iana",
    "extensions": ["saf"]
  },
  "application/vnd.yamaha.smaf-phrase": {
    "source": "iana",
    "extensions": ["spf"]
  },
  "application/vnd.yamaha.through-ngn": {
    "source": "iana"
  },
  "application/vnd.yamaha.tunnel-udpencap": {
    "source": "iana"
  },
  "application/vnd.yaoweme": {
    "source": "iana"
  },
  "application/vnd.yellowriver-custom-menu": {
    "source": "iana",
    "extensions": ["cmp"]
  },
  "application/vnd.youtube.yt": {
    "source": "iana"
  },
  "application/vnd.zul": {
    "source": "iana",
    "extensions": ["zir","zirz"]
  },
  "application/vnd.zzazz.deck+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["zaz"]
  },
  "application/voicexml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vxml"]
  },
  "application/voucher-cms+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vq-rtcpxr": {
    "source": "iana"
  },
  "application/wasm": {
    "compressible": true,
    "extensions": ["wasm"]
  },
  "application/watcherinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/webpush-options+json": {
    "source": "iana",
    "compressible": true
  },
  "application/whoispp-query": {
    "source": "iana"
  },
  "application/whoispp-response": {
    "source": "iana"
  },
  "application/widget": {
    "source": "iana",
    "extensions": ["wgt"]
  },
  "application/winhlp": {
    "source": "apache",
    "extensions": ["hlp"]
  },
  "application/wita": {
    "source": "iana"
  },
  "application/wordperfect5.1": {
    "source": "iana"
  },
  "application/wsdl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wsdl"]
  },
  "application/wspolicy+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wspolicy"]
  },
  "application/x-7z-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["7z"]
  },
  "application/x-abiword": {
    "source": "apache",
    "extensions": ["abw"]
  },
  "application/x-ace-compressed": {
    "source": "apache",
    "extensions": ["ace"]
  },
  "application/x-amf": {
    "source": "apache"
  },
  "application/x-apple-diskimage": {
    "source": "apache",
    "extensions": ["dmg"]
  },
  "application/x-arj": {
    "compressible": false,
    "extensions": ["arj"]
  },
  "application/x-authorware-bin": {
    "source": "apache",
    "extensions": ["aab","x32","u32","vox"]
  },
  "application/x-authorware-map": {
    "source": "apache",
    "extensions": ["aam"]
  },
  "application/x-authorware-seg": {
    "source": "apache",
    "extensions": ["aas"]
  },
  "application/x-bcpio": {
    "source": "apache",
    "extensions": ["bcpio"]
  },
  "application/x-bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/x-bittorrent": {
    "source": "apache",
    "extensions": ["torrent"]
  },
  "application/x-blorb": {
    "source": "apache",
    "extensions": ["blb","blorb"]
  },
  "application/x-bzip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz"]
  },
  "application/x-bzip2": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz2","boz"]
  },
  "application/x-cbr": {
    "source": "apache",
    "extensions": ["cbr","cba","cbt","cbz","cb7"]
  },
  "application/x-cdlink": {
    "source": "apache",
    "extensions": ["vcd"]
  },
  "application/x-cfs-compressed": {
    "source": "apache",
    "extensions": ["cfs"]
  },
  "application/x-chat": {
    "source": "apache",
    "extensions": ["chat"]
  },
  "application/x-chess-pgn": {
    "source": "apache",
    "extensions": ["pgn"]
  },
  "application/x-chrome-extension": {
    "extensions": ["crx"]
  },
  "application/x-cocoa": {
    "source": "nginx",
    "extensions": ["cco"]
  },
  "application/x-compress": {
    "source": "apache"
  },
  "application/x-conference": {
    "source": "apache",
    "extensions": ["nsc"]
  },
  "application/x-cpio": {
    "source": "apache",
    "extensions": ["cpio"]
  },
  "application/x-csh": {
    "source": "apache",
    "extensions": ["csh"]
  },
  "application/x-deb": {
    "compressible": false
  },
  "application/x-debian-package": {
    "source": "apache",
    "extensions": ["deb","udeb"]
  },
  "application/x-dgc-compressed": {
    "source": "apache",
    "extensions": ["dgc"]
  },
  "application/x-director": {
    "source": "apache",
    "extensions": ["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]
  },
  "application/x-doom": {
    "source": "apache",
    "extensions": ["wad"]
  },
  "application/x-dtbncx+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ncx"]
  },
  "application/x-dtbook+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["dtb"]
  },
  "application/x-dtbresource+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["res"]
  },
  "application/x-dvi": {
    "source": "apache",
    "compressible": false,
    "extensions": ["dvi"]
  },
  "application/x-envoy": {
    "source": "apache",
    "extensions": ["evy"]
  },
  "application/x-eva": {
    "source": "apache",
    "extensions": ["eva"]
  },
  "application/x-font-bdf": {
    "source": "apache",
    "extensions": ["bdf"]
  },
  "application/x-font-dos": {
    "source": "apache"
  },
  "application/x-font-framemaker": {
    "source": "apache"
  },
  "application/x-font-ghostscript": {
    "source": "apache",
    "extensions": ["gsf"]
  },
  "application/x-font-libgrx": {
    "source": "apache"
  },
  "application/x-font-linux-psf": {
    "source": "apache",
    "extensions": ["psf"]
  },
  "application/x-font-pcf": {
    "source": "apache",
    "extensions": ["pcf"]
  },
  "application/x-font-snf": {
    "source": "apache",
    "extensions": ["snf"]
  },
  "application/x-font-speedo": {
    "source": "apache"
  },
  "application/x-font-sunos-news": {
    "source": "apache"
  },
  "application/x-font-type1": {
    "source": "apache",
    "extensions": ["pfa","pfb","pfm","afm"]
  },
  "application/x-font-vfont": {
    "source": "apache"
  },
  "application/x-freearc": {
    "source": "apache",
    "extensions": ["arc"]
  },
  "application/x-futuresplash": {
    "source": "apache",
    "extensions": ["spl"]
  },
  "application/x-gca-compressed": {
    "source": "apache",
    "extensions": ["gca"]
  },
  "application/x-glulx": {
    "source": "apache",
    "extensions": ["ulx"]
  },
  "application/x-gnumeric": {
    "source": "apache",
    "extensions": ["gnumeric"]
  },
  "application/x-gramps-xml": {
    "source": "apache",
    "extensions": ["gramps"]
  },
  "application/x-gtar": {
    "source": "apache",
    "extensions": ["gtar"]
  },
  "application/x-gzip": {
    "source": "apache"
  },
  "application/x-hdf": {
    "source": "apache",
    "extensions": ["hdf"]
  },
  "application/x-httpd-php": {
    "compressible": true,
    "extensions": ["php"]
  },
  "application/x-install-instructions": {
    "source": "apache",
    "extensions": ["install"]
  },
  "application/x-iso9660-image": {
    "source": "apache",
    "extensions": ["iso"]
  },
  "application/x-java-archive-diff": {
    "source": "nginx",
    "extensions": ["jardiff"]
  },
  "application/x-java-jnlp-file": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jnlp"]
  },
  "application/x-javascript": {
    "compressible": true
  },
  "application/x-keepass2": {
    "extensions": ["kdbx"]
  },
  "application/x-latex": {
    "source": "apache",
    "compressible": false,
    "extensions": ["latex"]
  },
  "application/x-lua-bytecode": {
    "extensions": ["luac"]
  },
  "application/x-lzh-compressed": {
    "source": "apache",
    "extensions": ["lzh","lha"]
  },
  "application/x-makeself": {
    "source": "nginx",
    "extensions": ["run"]
  },
  "application/x-mie": {
    "source": "apache",
    "extensions": ["mie"]
  },
  "application/x-mobipocket-ebook": {
    "source": "apache",
    "extensions": ["prc","mobi"]
  },
  "application/x-mpegurl": {
    "compressible": false
  },
  "application/x-ms-application": {
    "source": "apache",
    "extensions": ["application"]
  },
  "application/x-ms-shortcut": {
    "source": "apache",
    "extensions": ["lnk"]
  },
  "application/x-ms-wmd": {
    "source": "apache",
    "extensions": ["wmd"]
  },
  "application/x-ms-wmz": {
    "source": "apache",
    "extensions": ["wmz"]
  },
  "application/x-ms-xbap": {
    "source": "apache",
    "extensions": ["xbap"]
  },
  "application/x-msaccess": {
    "source": "apache",
    "extensions": ["mdb"]
  },
  "application/x-msbinder": {
    "source": "apache",
    "extensions": ["obd"]
  },
  "application/x-mscardfile": {
    "source": "apache",
    "extensions": ["crd"]
  },
  "application/x-msclip": {
    "source": "apache",
    "extensions": ["clp"]
  },
  "application/x-msdos-program": {
    "extensions": ["exe"]
  },
  "application/x-msdownload": {
    "source": "apache",
    "extensions": ["exe","dll","com","bat","msi"]
  },
  "application/x-msmediaview": {
    "source": "apache",
    "extensions": ["mvb","m13","m14"]
  },
  "application/x-msmetafile": {
    "source": "apache",
    "extensions": ["wmf","wmz","emf","emz"]
  },
  "application/x-msmoney": {
    "source": "apache",
    "extensions": ["mny"]
  },
  "application/x-mspublisher": {
    "source": "apache",
    "extensions": ["pub"]
  },
  "application/x-msschedule": {
    "source": "apache",
    "extensions": ["scd"]
  },
  "application/x-msterminal": {
    "source": "apache",
    "extensions": ["trm"]
  },
  "application/x-mswrite": {
    "source": "apache",
    "extensions": ["wri"]
  },
  "application/x-netcdf": {
    "source": "apache",
    "extensions": ["nc","cdf"]
  },
  "application/x-ns-proxy-autoconfig": {
    "compressible": true,
    "extensions": ["pac"]
  },
  "application/x-nzb": {
    "source": "apache",
    "extensions": ["nzb"]
  },
  "application/x-perl": {
    "source": "nginx",
    "extensions": ["pl","pm"]
  },
  "application/x-pilot": {
    "source": "nginx",
    "extensions": ["prc","pdb"]
  },
  "application/x-pkcs12": {
    "source": "apache",
    "compressible": false,
    "extensions": ["p12","pfx"]
  },
  "application/x-pkcs7-certificates": {
    "source": "apache",
    "extensions": ["p7b","spc"]
  },
  "application/x-pkcs7-certreqresp": {
    "source": "apache",
    "extensions": ["p7r"]
  },
  "application/x-pki-message": {
    "source": "iana"
  },
  "application/x-rar-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["rar"]
  },
  "application/x-redhat-package-manager": {
    "source": "nginx",
    "extensions": ["rpm"]
  },
  "application/x-research-info-systems": {
    "source": "apache",
    "extensions": ["ris"]
  },
  "application/x-sea": {
    "source": "nginx",
    "extensions": ["sea"]
  },
  "application/x-sh": {
    "source": "apache",
    "compressible": true,
    "extensions": ["sh"]
  },
  "application/x-shar": {
    "source": "apache",
    "extensions": ["shar"]
  },
  "application/x-shockwave-flash": {
    "source": "apache",
    "compressible": false,
    "extensions": ["swf"]
  },
  "application/x-silverlight-app": {
    "source": "apache",
    "extensions": ["xap"]
  },
  "application/x-sql": {
    "source": "apache",
    "extensions": ["sql"]
  },
  "application/x-stuffit": {
    "source": "apache",
    "compressible": false,
    "extensions": ["sit"]
  },
  "application/x-stuffitx": {
    "source": "apache",
    "extensions": ["sitx"]
  },
  "application/x-subrip": {
    "source": "apache",
    "extensions": ["srt"]
  },
  "application/x-sv4cpio": {
    "source": "apache",
    "extensions": ["sv4cpio"]
  },
  "application/x-sv4crc": {
    "source": "apache",
    "extensions": ["sv4crc"]
  },
  "application/x-t3vm-image": {
    "source": "apache",
    "extensions": ["t3"]
  },
  "application/x-tads": {
    "source": "apache",
    "extensions": ["gam"]
  },
  "application/x-tar": {
    "source": "apache",
    "compressible": true,
    "extensions": ["tar"]
  },
  "application/x-tcl": {
    "source": "apache",
    "extensions": ["tcl","tk"]
  },
  "application/x-tex": {
    "source": "apache",
    "extensions": ["tex"]
  },
  "application/x-tex-tfm": {
    "source": "apache",
    "extensions": ["tfm"]
  },
  "application/x-texinfo": {
    "source": "apache",
    "extensions": ["texinfo","texi"]
  },
  "application/x-tgif": {
    "source": "apache",
    "extensions": ["obj"]
  },
  "application/x-ustar": {
    "source": "apache",
    "extensions": ["ustar"]
  },
  "application/x-virtualbox-hdd": {
    "compressible": true,
    "extensions": ["hdd"]
  },
  "application/x-virtualbox-ova": {
    "compressible": true,
    "extensions": ["ova"]
  },
  "application/x-virtualbox-ovf": {
    "compressible": true,
    "extensions": ["ovf"]
  },
  "application/x-virtualbox-vbox": {
    "compressible": true,
    "extensions": ["vbox"]
  },
  "application/x-virtualbox-vbox-extpack": {
    "compressible": false,
    "extensions": ["vbox-extpack"]
  },
  "application/x-virtualbox-vdi": {
    "compressible": true,
    "extensions": ["vdi"]
  },
  "application/x-virtualbox-vhd": {
    "compressible": true,
    "extensions": ["vhd"]
  },
  "application/x-virtualbox-vmdk": {
    "compressible": true,
    "extensions": ["vmdk"]
  },
  "application/x-wais-source": {
    "source": "apache",
    "extensions": ["src"]
  },
  "application/x-web-app-manifest+json": {
    "compressible": true,
    "extensions": ["webapp"]
  },
  "application/x-www-form-urlencoded": {
    "source": "iana",
    "compressible": true
  },
  "application/x-x509-ca-cert": {
    "source": "iana",
    "extensions": ["der","crt","pem"]
  },
  "application/x-x509-ca-ra-cert": {
    "source": "iana"
  },
  "application/x-x509-next-ca-cert": {
    "source": "iana"
  },
  "application/x-xfig": {
    "source": "apache",
    "extensions": ["fig"]
  },
  "application/x-xliff+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xlf"]
  },
  "application/x-xpinstall": {
    "source": "apache",
    "compressible": false,
    "extensions": ["xpi"]
  },
  "application/x-xz": {
    "source": "apache",
    "extensions": ["xz"]
  },
  "application/x-zmachine": {
    "source": "apache",
    "extensions": ["z1","z2","z3","z4","z5","z6","z7","z8"]
  },
  "application/x400-bp": {
    "source": "iana"
  },
  "application/xacml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xaml+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xaml"]
  },
  "application/xcap-att+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xav"]
  },
  "application/xcap-caps+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xca"]
  },
  "application/xcap-diff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdf"]
  },
  "application/xcap-el+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xel"]
  },
  "application/xcap-error+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xer"]
  },
  "application/xcap-ns+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xns"]
  },
  "application/xcon-conference-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcon-conference-info-diff+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xenc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xenc"]
  },
  "application/xhtml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xhtml","xht"]
  },
  "application/xhtml-voice+xml": {
    "source": "apache",
    "compressible": true
  },
  "application/xliff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xlf"]
  },
  "application/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml","xsl","xsd","rng"]
  },
  "application/xml-dtd": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dtd"]
  },
  "application/xml-external-parsed-entity": {
    "source": "iana"
  },
  "application/xml-patch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xmpp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xop+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xop"]
  },
  "application/xproc+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xpl"]
  },
  "application/xslt+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xslt"]
  },
  "application/xspf+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xspf"]
  },
  "application/xv+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mxml","xhvml","xvml","xvm"]
  },
  "application/yang": {
    "source": "iana",
    "extensions": ["yang"]
  },
  "application/yang-data+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-patch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/yin+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["yin"]
  },
  "application/zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["zip"]
  },
  "application/zlib": {
    "source": "iana"
  },
  "application/zstd": {
    "source": "iana"
  },
  "audio/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "audio/32kadpcm": {
    "source": "iana"
  },
  "audio/3gpp": {
    "source": "iana",
    "compressible": false,
    "extensions": ["3gpp"]
  },
  "audio/3gpp2": {
    "source": "iana"
  },
  "audio/aac": {
    "source": "iana"
  },
  "audio/ac3": {
    "source": "iana"
  },
  "audio/adpcm": {
    "source": "apache",
    "extensions": ["adp"]
  },
  "audio/amr": {
    "source": "iana"
  },
  "audio/amr-wb": {
    "source": "iana"
  },
  "audio/amr-wb+": {
    "source": "iana"
  },
  "audio/aptx": {
    "source": "iana"
  },
  "audio/asc": {
    "source": "iana"
  },
  "audio/atrac-advanced-lossless": {
    "source": "iana"
  },
  "audio/atrac-x": {
    "source": "iana"
  },
  "audio/atrac3": {
    "source": "iana"
  },
  "audio/basic": {
    "source": "iana",
    "compressible": false,
    "extensions": ["au","snd"]
  },
  "audio/bv16": {
    "source": "iana"
  },
  "audio/bv32": {
    "source": "iana"
  },
  "audio/clearmode": {
    "source": "iana"
  },
  "audio/cn": {
    "source": "iana"
  },
  "audio/dat12": {
    "source": "iana"
  },
  "audio/dls": {
    "source": "iana"
  },
  "audio/dsr-es201108": {
    "source": "iana"
  },
  "audio/dsr-es202050": {
    "source": "iana"
  },
  "audio/dsr-es202211": {
    "source": "iana"
  },
  "audio/dsr-es202212": {
    "source": "iana"
  },
  "audio/dv": {
    "source": "iana"
  },
  "audio/dvi4": {
    "source": "iana"
  },
  "audio/eac3": {
    "source": "iana"
  },
  "audio/encaprtp": {
    "source": "iana"
  },
  "audio/evrc": {
    "source": "iana"
  },
  "audio/evrc-qcp": {
    "source": "iana"
  },
  "audio/evrc0": {
    "source": "iana"
  },
  "audio/evrc1": {
    "source": "iana"
  },
  "audio/evrcb": {
    "source": "iana"
  },
  "audio/evrcb0": {
    "source": "iana"
  },
  "audio/evrcb1": {
    "source": "iana"
  },
  "audio/evrcnw": {
    "source": "iana"
  },
  "audio/evrcnw0": {
    "source": "iana"
  },
  "audio/evrcnw1": {
    "source": "iana"
  },
  "audio/evrcwb": {
    "source": "iana"
  },
  "audio/evrcwb0": {
    "source": "iana"
  },
  "audio/evrcwb1": {
    "source": "iana"
  },
  "audio/evs": {
    "source": "iana"
  },
  "audio/flexfec": {
    "source": "iana"
  },
  "audio/fwdred": {
    "source": "iana"
  },
  "audio/g711-0": {
    "source": "iana"
  },
  "audio/g719": {
    "source": "iana"
  },
  "audio/g722": {
    "source": "iana"
  },
  "audio/g7221": {
    "source": "iana"
  },
  "audio/g723": {
    "source": "iana"
  },
  "audio/g726-16": {
    "source": "iana"
  },
  "audio/g726-24": {
    "source": "iana"
  },
  "audio/g726-32": {
    "source": "iana"
  },
  "audio/g726-40": {
    "source": "iana"
  },
  "audio/g728": {
    "source": "iana"
  },
  "audio/g729": {
    "source": "iana"
  },
  "audio/g7291": {
    "source": "iana"
  },
  "audio/g729d": {
    "source": "iana"
  },
  "audio/g729e": {
    "source": "iana"
  },
  "audio/gsm": {
    "source": "iana"
  },
  "audio/gsm-efr": {
    "source": "iana"
  },
  "audio/gsm-hr-08": {
    "source": "iana"
  },
  "audio/ilbc": {
    "source": "iana"
  },
  "audio/ip-mr_v2.5": {
    "source": "iana"
  },
  "audio/isac": {
    "source": "apache"
  },
  "audio/l16": {
    "source": "iana"
  },
  "audio/l20": {
    "source": "iana"
  },
  "audio/l24": {
    "source": "iana",
    "compressible": false
  },
  "audio/l8": {
    "source": "iana"
  },
  "audio/lpc": {
    "source": "iana"
  },
  "audio/melp": {
    "source": "iana"
  },
  "audio/melp1200": {
    "source": "iana"
  },
  "audio/melp2400": {
    "source": "iana"
  },
  "audio/melp600": {
    "source": "iana"
  },
  "audio/mhas": {
    "source": "iana"
  },
  "audio/midi": {
    "source": "apache",
    "extensions": ["mid","midi","kar","rmi"]
  },
  "audio/mobile-xmf": {
    "source": "iana",
    "extensions": ["mxmf"]
  },
  "audio/mp3": {
    "compressible": false,
    "extensions": ["mp3"]
  },
  "audio/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["m4a","mp4a"]
  },
  "audio/mp4a-latm": {
    "source": "iana"
  },
  "audio/mpa": {
    "source": "iana"
  },
  "audio/mpa-robust": {
    "source": "iana"
  },
  "audio/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpga","mp2","mp2a","mp3","m2a","m3a"]
  },
  "audio/mpeg4-generic": {
    "source": "iana"
  },
  "audio/musepack": {
    "source": "apache"
  },
  "audio/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["oga","ogg","spx"]
  },
  "audio/opus": {
    "source": "iana"
  },
  "audio/parityfec": {
    "source": "iana"
  },
  "audio/pcma": {
    "source": "iana"
  },
  "audio/pcma-wb": {
    "source": "iana"
  },
  "audio/pcmu": {
    "source": "iana"
  },
  "audio/pcmu-wb": {
    "source": "iana"
  },
  "audio/prs.sid": {
    "source": "iana"
  },
  "audio/qcelp": {
    "source": "iana"
  },
  "audio/raptorfec": {
    "source": "iana"
  },
  "audio/red": {
    "source": "iana"
  },
  "audio/rtp-enc-aescm128": {
    "source": "iana"
  },
  "audio/rtp-midi": {
    "source": "iana"
  },
  "audio/rtploopback": {
    "source": "iana"
  },
  "audio/rtx": {
    "source": "iana"
  },
  "audio/s3m": {
    "source": "apache",
    "extensions": ["s3m"]
  },
  "audio/silk": {
    "source": "apache",
    "extensions": ["sil"]
  },
  "audio/smv": {
    "source": "iana"
  },
  "audio/smv-qcp": {
    "source": "iana"
  },
  "audio/smv0": {
    "source": "iana"
  },
  "audio/sp-midi": {
    "source": "iana"
  },
  "audio/speex": {
    "source": "iana"
  },
  "audio/t140c": {
    "source": "iana"
  },
  "audio/t38": {
    "source": "iana"
  },
  "audio/telephone-event": {
    "source": "iana"
  },
  "audio/tetra_acelp": {
    "source": "iana"
  },
  "audio/tetra_acelp_bb": {
    "source": "iana"
  },
  "audio/tone": {
    "source": "iana"
  },
  "audio/uemclip": {
    "source": "iana"
  },
  "audio/ulpfec": {
    "source": "iana"
  },
  "audio/usac": {
    "source": "iana"
  },
  "audio/vdvi": {
    "source": "iana"
  },
  "audio/vmr-wb": {
    "source": "iana"
  },
  "audio/vnd.3gpp.iufp": {
    "source": "iana"
  },
  "audio/vnd.4sb": {
    "source": "iana"
  },
  "audio/vnd.audiokoz": {
    "source": "iana"
  },
  "audio/vnd.celp": {
    "source": "iana"
  },
  "audio/vnd.cisco.nse": {
    "source": "iana"
  },
  "audio/vnd.cmles.radio-events": {
    "source": "iana"
  },
  "audio/vnd.cns.anp1": {
    "source": "iana"
  },
  "audio/vnd.cns.inf1": {
    "source": "iana"
  },
  "audio/vnd.dece.audio": {
    "source": "iana",
    "extensions": ["uva","uvva"]
  },
  "audio/vnd.digital-winds": {
    "source": "iana",
    "extensions": ["eol"]
  },
  "audio/vnd.dlna.adts": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.1": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.2": {
    "source": "iana"
  },
  "audio/vnd.dolby.mlp": {
    "source": "iana"
  },
  "audio/vnd.dolby.mps": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2x": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2z": {
    "source": "iana"
  },
  "audio/vnd.dolby.pulse.1": {
    "source": "iana"
  },
  "audio/vnd.dra": {
    "source": "iana",
    "extensions": ["dra"]
  },
  "audio/vnd.dts": {
    "source": "iana",
    "extensions": ["dts"]
  },
  "audio/vnd.dts.hd": {
    "source": "iana",
    "extensions": ["dtshd"]
  },
  "audio/vnd.dts.uhd": {
    "source": "iana"
  },
  "audio/vnd.dvb.file": {
    "source": "iana"
  },
  "audio/vnd.everad.plj": {
    "source": "iana"
  },
  "audio/vnd.hns.audio": {
    "source": "iana"
  },
  "audio/vnd.lucent.voice": {
    "source": "iana",
    "extensions": ["lvp"]
  },
  "audio/vnd.ms-playready.media.pya": {
    "source": "iana",
    "extensions": ["pya"]
  },
  "audio/vnd.nokia.mobile-xmf": {
    "source": "iana"
  },
  "audio/vnd.nortel.vbk": {
    "source": "iana"
  },
  "audio/vnd.nuera.ecelp4800": {
    "source": "iana",
    "extensions": ["ecelp4800"]
  },
  "audio/vnd.nuera.ecelp7470": {
    "source": "iana",
    "extensions": ["ecelp7470"]
  },
  "audio/vnd.nuera.ecelp9600": {
    "source": "iana",
    "extensions": ["ecelp9600"]
  },
  "audio/vnd.octel.sbc": {
    "source": "iana"
  },
  "audio/vnd.presonus.multitrack": {
    "source": "iana"
  },
  "audio/vnd.qcelp": {
    "source": "iana"
  },
  "audio/vnd.rhetorex.32kadpcm": {
    "source": "iana"
  },
  "audio/vnd.rip": {
    "source": "iana",
    "extensions": ["rip"]
  },
  "audio/vnd.rn-realaudio": {
    "compressible": false
  },
  "audio/vnd.sealedmedia.softseal.mpeg": {
    "source": "iana"
  },
  "audio/vnd.vmx.cvsd": {
    "source": "iana"
  },
  "audio/vnd.wave": {
    "compressible": false
  },
  "audio/vorbis": {
    "source": "iana",
    "compressible": false
  },
  "audio/vorbis-config": {
    "source": "iana"
  },
  "audio/wav": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/wave": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["weba"]
  },
  "audio/x-aac": {
    "source": "apache",
    "compressible": false,
    "extensions": ["aac"]
  },
  "audio/x-aiff": {
    "source": "apache",
    "extensions": ["aif","aiff","aifc"]
  },
  "audio/x-caf": {
    "source": "apache",
    "compressible": false,
    "extensions": ["caf"]
  },
  "audio/x-flac": {
    "source": "apache",
    "extensions": ["flac"]
  },
  "audio/x-m4a": {
    "source": "nginx",
    "extensions": ["m4a"]
  },
  "audio/x-matroska": {
    "source": "apache",
    "extensions": ["mka"]
  },
  "audio/x-mpegurl": {
    "source": "apache",
    "extensions": ["m3u"]
  },
  "audio/x-ms-wax": {
    "source": "apache",
    "extensions": ["wax"]
  },
  "audio/x-ms-wma": {
    "source": "apache",
    "extensions": ["wma"]
  },
  "audio/x-pn-realaudio": {
    "source": "apache",
    "extensions": ["ram","ra"]
  },
  "audio/x-pn-realaudio-plugin": {
    "source": "apache",
    "extensions": ["rmp"]
  },
  "audio/x-realaudio": {
    "source": "nginx",
    "extensions": ["ra"]
  },
  "audio/x-tta": {
    "source": "apache"
  },
  "audio/x-wav": {
    "source": "apache",
    "extensions": ["wav"]
  },
  "audio/xm": {
    "source": "apache",
    "extensions": ["xm"]
  },
  "chemical/x-cdx": {
    "source": "apache",
    "extensions": ["cdx"]
  },
  "chemical/x-cif": {
    "source": "apache",
    "extensions": ["cif"]
  },
  "chemical/x-cmdf": {
    "source": "apache",
    "extensions": ["cmdf"]
  },
  "chemical/x-cml": {
    "source": "apache",
    "extensions": ["cml"]
  },
  "chemical/x-csml": {
    "source": "apache",
    "extensions": ["csml"]
  },
  "chemical/x-pdb": {
    "source": "apache"
  },
  "chemical/x-xyz": {
    "source": "apache",
    "extensions": ["xyz"]
  },
  "font/collection": {
    "source": "iana",
    "extensions": ["ttc"]
  },
  "font/otf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["otf"]
  },
  "font/sfnt": {
    "source": "iana"
  },
  "font/ttf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ttf"]
  },
  "font/woff": {
    "source": "iana",
    "extensions": ["woff"]
  },
  "font/woff2": {
    "source": "iana",
    "extensions": ["woff2"]
  },
  "image/aces": {
    "source": "iana",
    "extensions": ["exr"]
  },
  "image/apng": {
    "compressible": false,
    "extensions": ["apng"]
  },
  "image/avci": {
    "source": "iana"
  },
  "image/avcs": {
    "source": "iana"
  },
  "image/bmp": {
    "source": "iana",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/cgm": {
    "source": "iana",
    "extensions": ["cgm"]
  },
  "image/dicom-rle": {
    "source": "iana",
    "extensions": ["drle"]
  },
  "image/emf": {
    "source": "iana",
    "extensions": ["emf"]
  },
  "image/fits": {
    "source": "iana",
    "extensions": ["fits"]
  },
  "image/g3fax": {
    "source": "iana",
    "extensions": ["g3"]
  },
  "image/gif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gif"]
  },
  "image/heic": {
    "source": "iana",
    "extensions": ["heic"]
  },
  "image/heic-sequence": {
    "source": "iana",
    "extensions": ["heics"]
  },
  "image/heif": {
    "source": "iana",
    "extensions": ["heif"]
  },
  "image/heif-sequence": {
    "source": "iana",
    "extensions": ["heifs"]
  },
  "image/hej2k": {
    "source": "iana",
    "extensions": ["hej2"]
  },
  "image/hsj2": {
    "source": "iana",
    "extensions": ["hsj2"]
  },
  "image/ief": {
    "source": "iana",
    "extensions": ["ief"]
  },
  "image/jls": {
    "source": "iana",
    "extensions": ["jls"]
  },
  "image/jp2": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jp2","jpg2"]
  },
  "image/jpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpeg","jpg","jpe"]
  },
  "image/jph": {
    "source": "iana",
    "extensions": ["jph"]
  },
  "image/jphc": {
    "source": "iana",
    "extensions": ["jhc"]
  },
  "image/jpm": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpm"]
  },
  "image/jpx": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpx","jpf"]
  },
  "image/jxr": {
    "source": "iana",
    "extensions": ["jxr"]
  },
  "image/jxra": {
    "source": "iana",
    "extensions": ["jxra"]
  },
  "image/jxrs": {
    "source": "iana",
    "extensions": ["jxrs"]
  },
  "image/jxs": {
    "source": "iana",
    "extensions": ["jxs"]
  },
  "image/jxsc": {
    "source": "iana",
    "extensions": ["jxsc"]
  },
  "image/jxsi": {
    "source": "iana",
    "extensions": ["jxsi"]
  },
  "image/jxss": {
    "source": "iana",
    "extensions": ["jxss"]
  },
  "image/ktx": {
    "source": "iana",
    "extensions": ["ktx"]
  },
  "image/naplps": {
    "source": "iana"
  },
  "image/pjpeg": {
    "compressible": false
  },
  "image/png": {
    "source": "iana",
    "compressible": false,
    "extensions": ["png"]
  },
  "image/prs.btif": {
    "source": "iana",
    "extensions": ["btif"]
  },
  "image/prs.pti": {
    "source": "iana",
    "extensions": ["pti"]
  },
  "image/pwg-raster": {
    "source": "iana"
  },
  "image/sgi": {
    "source": "apache",
    "extensions": ["sgi"]
  },
  "image/svg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["svg","svgz"]
  },
  "image/t38": {
    "source": "iana",
    "extensions": ["t38"]
  },
  "image/tiff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["tif","tiff"]
  },
  "image/tiff-fx": {
    "source": "iana",
    "extensions": ["tfx"]
  },
  "image/vnd.adobe.photoshop": {
    "source": "iana",
    "compressible": true,
    "extensions": ["psd"]
  },
  "image/vnd.airzip.accelerator.azv": {
    "source": "iana",
    "extensions": ["azv"]
  },
  "image/vnd.cns.inf2": {
    "source": "iana"
  },
  "image/vnd.dece.graphic": {
    "source": "iana",
    "extensions": ["uvi","uvvi","uvg","uvvg"]
  },
  "image/vnd.djvu": {
    "source": "iana",
    "extensions": ["djvu","djv"]
  },
  "image/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "image/vnd.dwg": {
    "source": "iana",
    "extensions": ["dwg"]
  },
  "image/vnd.dxf": {
    "source": "iana",
    "extensions": ["dxf"]
  },
  "image/vnd.fastbidsheet": {
    "source": "iana",
    "extensions": ["fbs"]
  },
  "image/vnd.fpx": {
    "source": "iana",
    "extensions": ["fpx"]
  },
  "image/vnd.fst": {
    "source": "iana",
    "extensions": ["fst"]
  },
  "image/vnd.fujixerox.edmics-mmr": {
    "source": "iana",
    "extensions": ["mmr"]
  },
  "image/vnd.fujixerox.edmics-rlc": {
    "source": "iana",
    "extensions": ["rlc"]
  },
  "image/vnd.globalgraphics.pgb": {
    "source": "iana"
  },
  "image/vnd.microsoft.icon": {
    "source": "iana",
    "extensions": ["ico"]
  },
  "image/vnd.mix": {
    "source": "iana"
  },
  "image/vnd.mozilla.apng": {
    "source": "iana"
  },
  "image/vnd.ms-dds": {
    "extensions": ["dds"]
  },
  "image/vnd.ms-modi": {
    "source": "iana",
    "extensions": ["mdi"]
  },
  "image/vnd.ms-photo": {
    "source": "apache",
    "extensions": ["wdp"]
  },
  "image/vnd.net-fpx": {
    "source": "iana",
    "extensions": ["npx"]
  },
  "image/vnd.radiance": {
    "source": "iana"
  },
  "image/vnd.sealed.png": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.gif": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.jpg": {
    "source": "iana"
  },
  "image/vnd.svf": {
    "source": "iana"
  },
  "image/vnd.tencent.tap": {
    "source": "iana",
    "extensions": ["tap"]
  },
  "image/vnd.valve.source.texture": {
    "source": "iana",
    "extensions": ["vtf"]
  },
  "image/vnd.wap.wbmp": {
    "source": "iana",
    "extensions": ["wbmp"]
  },
  "image/vnd.xiff": {
    "source": "iana",
    "extensions": ["xif"]
  },
  "image/vnd.zbrush.pcx": {
    "source": "iana",
    "extensions": ["pcx"]
  },
  "image/webp": {
    "source": "apache",
    "extensions": ["webp"]
  },
  "image/wmf": {
    "source": "iana",
    "extensions": ["wmf"]
  },
  "image/x-3ds": {
    "source": "apache",
    "extensions": ["3ds"]
  },
  "image/x-cmu-raster": {
    "source": "apache",
    "extensions": ["ras"]
  },
  "image/x-cmx": {
    "source": "apache",
    "extensions": ["cmx"]
  },
  "image/x-freehand": {
    "source": "apache",
    "extensions": ["fh","fhc","fh4","fh5","fh7"]
  },
  "image/x-icon": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ico"]
  },
  "image/x-jng": {
    "source": "nginx",
    "extensions": ["jng"]
  },
  "image/x-mrsid-image": {
    "source": "apache",
    "extensions": ["sid"]
  },
  "image/x-ms-bmp": {
    "source": "nginx",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/x-pcx": {
    "source": "apache",
    "extensions": ["pcx"]
  },
  "image/x-pict": {
    "source": "apache",
    "extensions": ["pic","pct"]
  },
  "image/x-portable-anymap": {
    "source": "apache",
    "extensions": ["pnm"]
  },
  "image/x-portable-bitmap": {
    "source": "apache",
    "extensions": ["pbm"]
  },
  "image/x-portable-graymap": {
    "source": "apache",
    "extensions": ["pgm"]
  },
  "image/x-portable-pixmap": {
    "source": "apache",
    "extensions": ["ppm"]
  },
  "image/x-rgb": {
    "source": "apache",
    "extensions": ["rgb"]
  },
  "image/x-tga": {
    "source": "apache",
    "extensions": ["tga"]
  },
  "image/x-xbitmap": {
    "source": "apache",
    "extensions": ["xbm"]
  },
  "image/x-xcf": {
    "compressible": false
  },
  "image/x-xpixmap": {
    "source": "apache",
    "extensions": ["xpm"]
  },
  "image/x-xwindowdump": {
    "source": "apache",
    "extensions": ["xwd"]
  },
  "message/cpim": {
    "source": "iana"
  },
  "message/delivery-status": {
    "source": "iana"
  },
  "message/disposition-notification": {
    "source": "iana",
    "extensions": [
      "disposition-notification"
    ]
  },
  "message/external-body": {
    "source": "iana"
  },
  "message/feedback-report": {
    "source": "iana"
  },
  "message/global": {
    "source": "iana",
    "extensions": ["u8msg"]
  },
  "message/global-delivery-status": {
    "source": "iana",
    "extensions": ["u8dsn"]
  },
  "message/global-disposition-notification": {
    "source": "iana",
    "extensions": ["u8mdn"]
  },
  "message/global-headers": {
    "source": "iana",
    "extensions": ["u8hdr"]
  },
  "message/http": {
    "source": "iana",
    "compressible": false
  },
  "message/imdn+xml": {
    "source": "iana",
    "compressible": true
  },
  "message/news": {
    "source": "iana"
  },
  "message/partial": {
    "source": "iana",
    "compressible": false
  },
  "message/rfc822": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eml","mime"]
  },
  "message/s-http": {
    "source": "iana"
  },
  "message/sip": {
    "source": "iana"
  },
  "message/sipfrag": {
    "source": "iana"
  },
  "message/tracking-status": {
    "source": "iana"
  },
  "message/vnd.si.simp": {
    "source": "iana"
  },
  "message/vnd.wfa.wsc": {
    "source": "iana",
    "extensions": ["wsc"]
  },
  "model/3mf": {
    "source": "iana",
    "extensions": ["3mf"]
  },
  "model/gltf+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["gltf"]
  },
  "model/gltf-binary": {
    "source": "iana",
    "compressible": true,
    "extensions": ["glb"]
  },
  "model/iges": {
    "source": "iana",
    "compressible": false,
    "extensions": ["igs","iges"]
  },
  "model/mesh": {
    "source": "iana",
    "compressible": false,
    "extensions": ["msh","mesh","silo"]
  },
  "model/mtl": {
    "source": "iana",
    "extensions": ["mtl"]
  },
  "model/obj": {
    "source": "iana",
    "extensions": ["obj"]
  },
  "model/stl": {
    "source": "iana",
    "extensions": ["stl"]
  },
  "model/vnd.collada+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dae"]
  },
  "model/vnd.dwf": {
    "source": "iana",
    "extensions": ["dwf"]
  },
  "model/vnd.flatland.3dml": {
    "source": "iana"
  },
  "model/vnd.gdl": {
    "source": "iana",
    "extensions": ["gdl"]
  },
  "model/vnd.gs-gdl": {
    "source": "apache"
  },
  "model/vnd.gs.gdl": {
    "source": "iana"
  },
  "model/vnd.gtw": {
    "source": "iana",
    "extensions": ["gtw"]
  },
  "model/vnd.moml+xml": {
    "source": "iana",
    "compressible": true
  },
  "model/vnd.mts": {
    "source": "iana",
    "extensions": ["mts"]
  },
  "model/vnd.opengex": {
    "source": "iana",
    "extensions": ["ogex"]
  },
  "model/vnd.parasolid.transmit.binary": {
    "source": "iana",
    "extensions": ["x_b"]
  },
  "model/vnd.parasolid.transmit.text": {
    "source": "iana",
    "extensions": ["x_t"]
  },
  "model/vnd.rosette.annotated-data-model": {
    "source": "iana"
  },
  "model/vnd.usdz+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["usdz"]
  },
  "model/vnd.valve.source.compiled-map": {
    "source": "iana",
    "extensions": ["bsp"]
  },
  "model/vnd.vtu": {
    "source": "iana",
    "extensions": ["vtu"]
  },
  "model/vrml": {
    "source": "iana",
    "compressible": false,
    "extensions": ["wrl","vrml"]
  },
  "model/x3d+binary": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3db","x3dbz"]
  },
  "model/x3d+fastinfoset": {
    "source": "iana",
    "extensions": ["x3db"]
  },
  "model/x3d+vrml": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3dv","x3dvz"]
  },
  "model/x3d+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["x3d","x3dz"]
  },
  "model/x3d-vrml": {
    "source": "iana",
    "extensions": ["x3dv"]
  },
  "multipart/alternative": {
    "source": "iana",
    "compressible": false
  },
  "multipart/appledouble": {
    "source": "iana"
  },
  "multipart/byteranges": {
    "source": "iana"
  },
  "multipart/digest": {
    "source": "iana"
  },
  "multipart/encrypted": {
    "source": "iana",
    "compressible": false
  },
  "multipart/form-data": {
    "source": "iana",
    "compressible": false
  },
  "multipart/header-set": {
    "source": "iana"
  },
  "multipart/mixed": {
    "source": "iana"
  },
  "multipart/multilingual": {
    "source": "iana"
  },
  "multipart/parallel": {
    "source": "iana"
  },
  "multipart/related": {
    "source": "iana",
    "compressible": false
  },
  "multipart/report": {
    "source": "iana"
  },
  "multipart/signed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/vnd.bint.med-plus": {
    "source": "iana"
  },
  "multipart/voice-message": {
    "source": "iana"
  },
  "multipart/x-mixed-replace": {
    "source": "iana"
  },
  "text/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "text/cache-manifest": {
    "source": "iana",
    "compressible": true,
    "extensions": ["appcache","manifest"]
  },
  "text/calendar": {
    "source": "iana",
    "extensions": ["ics","ifb"]
  },
  "text/calender": {
    "compressible": true
  },
  "text/cmd": {
    "compressible": true
  },
  "text/coffeescript": {
    "extensions": ["coffee","litcoffee"]
  },
  "text/css": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["css"]
  },
  "text/csv": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csv"]
  },
  "text/csv-schema": {
    "source": "iana"
  },
  "text/directory": {
    "source": "iana"
  },
  "text/dns": {
    "source": "iana"
  },
  "text/ecmascript": {
    "source": "iana"
  },
  "text/encaprtp": {
    "source": "iana"
  },
  "text/enriched": {
    "source": "iana"
  },
  "text/flexfec": {
    "source": "iana"
  },
  "text/fwdred": {
    "source": "iana"
  },
  "text/grammar-ref-list": {
    "source": "iana"
  },
  "text/html": {
    "source": "iana",
    "compressible": true,
    "extensions": ["html","htm","shtml"]
  },
  "text/jade": {
    "extensions": ["jade"]
  },
  "text/javascript": {
    "source": "iana",
    "compressible": true
  },
  "text/jcr-cnd": {
    "source": "iana"
  },
  "text/jsx": {
    "compressible": true,
    "extensions": ["jsx"]
  },
  "text/less": {
    "compressible": true,
    "extensions": ["less"]
  },
  "text/markdown": {
    "source": "iana",
    "compressible": true,
    "extensions": ["markdown","md"]
  },
  "text/mathml": {
    "source": "nginx",
    "extensions": ["mml"]
  },
  "text/mdx": {
    "compressible": true,
    "extensions": ["mdx"]
  },
  "text/mizar": {
    "source": "iana"
  },
  "text/n3": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["n3"]
  },
  "text/parameters": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/parityfec": {
    "source": "iana"
  },
  "text/plain": {
    "source": "iana",
    "compressible": true,
    "extensions": ["txt","text","conf","def","list","log","in","ini"]
  },
  "text/provenance-notation": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/prs.fallenstein.rst": {
    "source": "iana"
  },
  "text/prs.lines.tag": {
    "source": "iana",
    "extensions": ["dsc"]
  },
  "text/prs.prop.logic": {
    "source": "iana"
  },
  "text/raptorfec": {
    "source": "iana"
  },
  "text/red": {
    "source": "iana"
  },
  "text/rfc822-headers": {
    "source": "iana"
  },
  "text/richtext": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtx"]
  },
  "text/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "text/rtp-enc-aescm128": {
    "source": "iana"
  },
  "text/rtploopback": {
    "source": "iana"
  },
  "text/rtx": {
    "source": "iana"
  },
  "text/sgml": {
    "source": "iana",
    "extensions": ["sgml","sgm"]
  },
  "text/shex": {
    "extensions": ["shex"]
  },
  "text/slim": {
    "extensions": ["slim","slm"]
  },
  "text/strings": {
    "source": "iana"
  },
  "text/stylus": {
    "extensions": ["stylus","styl"]
  },
  "text/t140": {
    "source": "iana"
  },
  "text/tab-separated-values": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tsv"]
  },
  "text/troff": {
    "source": "iana",
    "extensions": ["t","tr","roff","man","me","ms"]
  },
  "text/turtle": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["ttl"]
  },
  "text/ulpfec": {
    "source": "iana"
  },
  "text/uri-list": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uri","uris","urls"]
  },
  "text/vcard": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vcard"]
  },
  "text/vnd.a": {
    "source": "iana"
  },
  "text/vnd.abc": {
    "source": "iana"
  },
  "text/vnd.ascii-art": {
    "source": "iana"
  },
  "text/vnd.curl": {
    "source": "iana",
    "extensions": ["curl"]
  },
  "text/vnd.curl.dcurl": {
    "source": "apache",
    "extensions": ["dcurl"]
  },
  "text/vnd.curl.mcurl": {
    "source": "apache",
    "extensions": ["mcurl"]
  },
  "text/vnd.curl.scurl": {
    "source": "apache",
    "extensions": ["scurl"]
  },
  "text/vnd.debian.copyright": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.dmclientscript": {
    "source": "iana"
  },
  "text/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "text/vnd.esmertec.theme-descriptor": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.ficlab.flt": {
    "source": "iana"
  },
  "text/vnd.fly": {
    "source": "iana",
    "extensions": ["fly"]
  },
  "text/vnd.fmi.flexstor": {
    "source": "iana",
    "extensions": ["flx"]
  },
  "text/vnd.gml": {
    "source": "iana"
  },
  "text/vnd.graphviz": {
    "source": "iana",
    "extensions": ["gv"]
  },
  "text/vnd.hgl": {
    "source": "iana"
  },
  "text/vnd.in3d.3dml": {
    "source": "iana",
    "extensions": ["3dml"]
  },
  "text/vnd.in3d.spot": {
    "source": "iana",
    "extensions": ["spot"]
  },
  "text/vnd.iptc.newsml": {
    "source": "iana"
  },
  "text/vnd.iptc.nitf": {
    "source": "iana"
  },
  "text/vnd.latex-z": {
    "source": "iana"
  },
  "text/vnd.motorola.reflex": {
    "source": "iana"
  },
  "text/vnd.ms-mediapackage": {
    "source": "iana"
  },
  "text/vnd.net2phone.commcenter.command": {
    "source": "iana"
  },
  "text/vnd.radisys.msml-basic-layout": {
    "source": "iana"
  },
  "text/vnd.senx.warpscript": {
    "source": "iana"
  },
  "text/vnd.si.uricatalogue": {
    "source": "iana"
  },
  "text/vnd.sosi": {
    "source": "iana"
  },
  "text/vnd.sun.j2me.app-descriptor": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["jad"]
  },
  "text/vnd.trolltech.linguist": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.wap.si": {
    "source": "iana"
  },
  "text/vnd.wap.sl": {
    "source": "iana"
  },
  "text/vnd.wap.wml": {
    "source": "iana",
    "extensions": ["wml"]
  },
  "text/vnd.wap.wmlscript": {
    "source": "iana",
    "extensions": ["wmls"]
  },
  "text/vtt": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["vtt"]
  },
  "text/x-asm": {
    "source": "apache",
    "extensions": ["s","asm"]
  },
  "text/x-c": {
    "source": "apache",
    "extensions": ["c","cc","cxx","cpp","h","hh","dic"]
  },
  "text/x-component": {
    "source": "nginx",
    "extensions": ["htc"]
  },
  "text/x-fortran": {
    "source": "apache",
    "extensions": ["f","for","f77","f90"]
  },
  "text/x-gwt-rpc": {
    "compressible": true
  },
  "text/x-handlebars-template": {
    "extensions": ["hbs"]
  },
  "text/x-java-source": {
    "source": "apache",
    "extensions": ["java"]
  },
  "text/x-jquery-tmpl": {
    "compressible": true
  },
  "text/x-lua": {
    "extensions": ["lua"]
  },
  "text/x-markdown": {
    "compressible": true,
    "extensions": ["mkd"]
  },
  "text/x-nfo": {
    "source": "apache",
    "extensions": ["nfo"]
  },
  "text/x-opml": {
    "source": "apache",
    "extensions": ["opml"]
  },
  "text/x-org": {
    "compressible": true,
    "extensions": ["org"]
  },
  "text/x-pascal": {
    "source": "apache",
    "extensions": ["p","pas"]
  },
  "text/x-processing": {
    "compressible": true,
    "extensions": ["pde"]
  },
  "text/x-sass": {
    "extensions": ["sass"]
  },
  "text/x-scss": {
    "extensions": ["scss"]
  },
  "text/x-setext": {
    "source": "apache",
    "extensions": ["etx"]
  },
  "text/x-sfv": {
    "source": "apache",
    "extensions": ["sfv"]
  },
  "text/x-suse-ymp": {
    "compressible": true,
    "extensions": ["ymp"]
  },
  "text/x-uuencode": {
    "source": "apache",
    "extensions": ["uu"]
  },
  "text/x-vcalendar": {
    "source": "apache",
    "extensions": ["vcs"]
  },
  "text/x-vcard": {
    "source": "apache",
    "extensions": ["vcf"]
  },
  "text/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml"]
  },
  "text/xml-external-parsed-entity": {
    "source": "iana"
  },
  "text/yaml": {
    "extensions": ["yaml","yml"]
  },
  "video/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "video/3gpp": {
    "source": "iana",
    "extensions": ["3gp","3gpp"]
  },
  "video/3gpp-tt": {
    "source": "iana"
  },
  "video/3gpp2": {
    "source": "iana",
    "extensions": ["3g2"]
  },
  "video/bmpeg": {
    "source": "iana"
  },
  "video/bt656": {
    "source": "iana"
  },
  "video/celb": {
    "source": "iana"
  },
  "video/dv": {
    "source": "iana"
  },
  "video/encaprtp": {
    "source": "iana"
  },
  "video/flexfec": {
    "source": "iana"
  },
  "video/h261": {
    "source": "iana",
    "extensions": ["h261"]
  },
  "video/h263": {
    "source": "iana",
    "extensions": ["h263"]
  },
  "video/h263-1998": {
    "source": "iana"
  },
  "video/h263-2000": {
    "source": "iana"
  },
  "video/h264": {
    "source": "iana",
    "extensions": ["h264"]
  },
  "video/h264-rcdo": {
    "source": "iana"
  },
  "video/h264-svc": {
    "source": "iana"
  },
  "video/h265": {
    "source": "iana"
  },
  "video/iso.segment": {
    "source": "iana"
  },
  "video/jpeg": {
    "source": "iana",
    "extensions": ["jpgv"]
  },
  "video/jpeg2000": {
    "source": "iana"
  },
  "video/jpm": {
    "source": "apache",
    "extensions": ["jpm","jpgm"]
  },
  "video/mj2": {
    "source": "iana",
    "extensions": ["mj2","mjp2"]
  },
  "video/mp1s": {
    "source": "iana"
  },
  "video/mp2p": {
    "source": "iana"
  },
  "video/mp2t": {
    "source": "iana",
    "extensions": ["ts"]
  },
  "video/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mp4","mp4v","mpg4"]
  },
  "video/mp4v-es": {
    "source": "iana"
  },
  "video/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpeg","mpg","mpe","m1v","m2v"]
  },
  "video/mpeg4-generic": {
    "source": "iana"
  },
  "video/mpv": {
    "source": "iana"
  },
  "video/nv": {
    "source": "iana"
  },
  "video/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogv"]
  },
  "video/parityfec": {
    "source": "iana"
  },
  "video/pointer": {
    "source": "iana"
  },
  "video/quicktime": {
    "source": "iana",
    "compressible": false,
    "extensions": ["qt","mov"]
  },
  "video/raptorfec": {
    "source": "iana"
  },
  "video/raw": {
    "source": "iana"
  },
  "video/rtp-enc-aescm128": {
    "source": "iana"
  },
  "video/rtploopback": {
    "source": "iana"
  },
  "video/rtx": {
    "source": "iana"
  },
  "video/smpte291": {
    "source": "iana"
  },
  "video/smpte292m": {
    "source": "iana"
  },
  "video/ulpfec": {
    "source": "iana"
  },
  "video/vc1": {
    "source": "iana"
  },
  "video/vc2": {
    "source": "iana"
  },
  "video/vnd.cctv": {
    "source": "iana"
  },
  "video/vnd.dece.hd": {
    "source": "iana",
    "extensions": ["uvh","uvvh"]
  },
  "video/vnd.dece.mobile": {
    "source": "iana",
    "extensions": ["uvm","uvvm"]
  },
  "video/vnd.dece.mp4": {
    "source": "iana"
  },
  "video/vnd.dece.pd": {
    "source": "iana",
    "extensions": ["uvp","uvvp"]
  },
  "video/vnd.dece.sd": {
    "source": "iana",
    "extensions": ["uvs","uvvs"]
  },
  "video/vnd.dece.video": {
    "source": "iana",
    "extensions": ["uvv","uvvv"]
  },
  "video/vnd.directv.mpeg": {
    "source": "iana"
  },
  "video/vnd.directv.mpeg-tts": {
    "source": "iana"
  },
  "video/vnd.dlna.mpeg-tts": {
    "source": "iana"
  },
  "video/vnd.dvb.file": {
    "source": "iana",
    "extensions": ["dvb"]
  },
  "video/vnd.fvt": {
    "source": "iana",
    "extensions": ["fvt"]
  },
  "video/vnd.hns.video": {
    "source": "iana"
  },
  "video/vnd.iptvforum.1dparityfec-1010": {
    "source": "iana"
  },
  "video/vnd.iptvforum.1dparityfec-2005": {
    "source": "iana"
  },
  "video/vnd.iptvforum.2dparityfec-1010": {
    "source": "iana"
  },
  "video/vnd.iptvforum.2dparityfec-2005": {
    "source": "iana"
  },
  "video/vnd.iptvforum.ttsavc": {
    "source": "iana"
  },
  "video/vnd.iptvforum.ttsmpeg2": {
    "source": "iana"
  },
  "video/vnd.motorola.video": {
    "source": "iana"
  },
  "video/vnd.motorola.videop": {
    "source": "iana"
  },
  "video/vnd.mpegurl": {
    "source": "iana",
    "extensions": ["mxu","m4u"]
  },
  "video/vnd.ms-playready.media.pyv": {
    "source": "iana",
    "extensions": ["pyv"]
  },
  "video/vnd.nokia.interleaved-multimedia": {
    "source": "iana"
  },
  "video/vnd.nokia.mp4vr": {
    "source": "iana"
  },
  "video/vnd.nokia.videovoip": {
    "source": "iana"
  },
  "video/vnd.objectvideo": {
    "source": "iana"
  },
  "video/vnd.radgamettools.bink": {
    "source": "iana"
  },
  "video/vnd.radgamettools.smacker": {
    "source": "iana"
  },
  "video/vnd.sealed.mpeg1": {
    "source": "iana"
  },
  "video/vnd.sealed.mpeg4": {
    "source": "iana"
  },
  "video/vnd.sealed.swf": {
    "source": "iana"
  },
  "video/vnd.sealedmedia.softseal.mov": {
    "source": "iana"
  },
  "video/vnd.uvvu.mp4": {
    "source": "iana",
    "extensions": ["uvu","uvvu"]
  },
  "video/vnd.vivo": {
    "source": "iana",
    "extensions": ["viv"]
  },
  "video/vnd.youtube.yt": {
    "source": "iana"
  },
  "video/vp8": {
    "source": "iana"
  },
  "video/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["webm"]
  },
  "video/x-f4v": {
    "source": "apache",
    "extensions": ["f4v"]
  },
  "video/x-fli": {
    "source": "apache",
    "extensions": ["fli"]
  },
  "video/x-flv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["flv"]
  },
  "video/x-m4v": {
    "source": "apache",
    "extensions": ["m4v"]
  },
  "video/x-matroska": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mkv","mk3d","mks"]
  },
  "video/x-mng": {
    "source": "apache",
    "extensions": ["mng"]
  },
  "video/x-ms-asf": {
    "source": "apache",
    "extensions": ["asf","asx"]
  },
  "video/x-ms-vob": {
    "source": "apache",
    "extensions": ["vob"]
  },
  "video/x-ms-wm": {
    "source": "apache",
    "extensions": ["wm"]
  },
  "video/x-ms-wmv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["wmv"]
  },
  "video/x-ms-wmx": {
    "source": "apache",
    "extensions": ["wmx"]
  },
  "video/x-ms-wvx": {
    "source": "apache",
    "extensions": ["wvx"]
  },
  "video/x-msvideo": {
    "source": "apache",
    "extensions": ["avi"]
  },
  "video/x-sgi-movie": {
    "source": "apache",
    "extensions": ["movie"]
  },
  "video/x-smv": {
    "source": "apache",
    "extensions": ["smv"]
  },
  "x-conference/x-cooltalk": {
    "source": "apache",
    "extensions": ["ice"]
  },
  "x-shader/x-fragment": {
    "compressible": true
  },
  "x-shader/x-vertex": {
    "compressible": true
  }
}

},{}],102:[function(require,module,exports){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

/**
 * Module exports.
 */

module.exports = require('./db.json')

},{"./db.json":101}],103:[function(require,module,exports){
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
 */

var db = require('mime-db')
var extname = require('path').extname

/**
 * Module variables.
 * @private
 */

var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/
var TEXT_TYPE_REGEXP = /^text\//i

/**
 * Module exports.
 * @public
 */

exports.charset = charset
exports.charsets = { lookup: charset }
exports.contentType = contentType
exports.extension = extension
exports.extensions = Object.create(null)
exports.lookup = lookup
exports.types = Object.create(null)

// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types)

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)
  var mime = match && db[match[1].toLowerCase()]

  if (mime && mime.charset) {
    return mime.charset
  }

  // default text/* to utf-8
  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8'
  }

  return false
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

function contentType (str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false
  }

  var mime = str.indexOf('/') === -1
    ? exports.lookup(str)
    : str

  if (!mime) {
    return false
  }

  // TODO: use content-type or other module
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime)
    if (charset) mime += '; charset=' + charset.toLowerCase()
  }

  return mime
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function extension (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)

  // get extensions
  var exts = match && exports.extensions[match[1].toLowerCase()]

  if (!exts || !exts.length) {
    return false
  }

  return exts[0]
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

function lookup (path) {
  if (!path || typeof path !== 'string') {
    return false
  }

  // get the extension ("ext" or ".ext" or full path)
  var extension = extname('x.' + path)
    .toLowerCase()
    .substr(1)

  if (!extension) {
    return false
  }

  return exports.types[extension] || false
}

/**
 * Populate the extensions and types maps.
 * @private
 */

function populateMaps (extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana']

  Object.keys(db).forEach(function forEachMimeType (type) {
    var mime = db[type]
    var exts = mime.extensions

    if (!exts || !exts.length) {
      return
    }

    // mime -> extensions
    extensions[type] = exts

    // extension -> mime
    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i]

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source)
        var to = preference.indexOf(mime.source)

        if (types[extension] !== 'application/octet-stream' &&
          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
          // skip the remapping
          continue
        }
      }

      // set the extension -> mime
      types[extension] = type
    }
  })
}

},{"mime-db":102,"path":272}],104:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

},{}],105:[function(require,module,exports){
/*!
 * negotiator
 * Copyright(c) 2012 Federico Romero
 * Copyright(c) 2012-2014 Isaac Z. Schlueter
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Cached loaded submodules.
 * @private
 */

var modules = Object.create(null);

/**
 * Module exports.
 * @public
 */

module.exports = Negotiator;
module.exports.Negotiator = Negotiator;

/**
 * Create a Negotiator instance from a request.
 * @param {object} request
 * @public
 */

function Negotiator(request) {
  if (!(this instanceof Negotiator)) {
    return new Negotiator(request);
  }

  this.request = request;
}

Negotiator.prototype.charset = function charset(available) {
  var set = this.charsets(available);
  return set && set[0];
};

Negotiator.prototype.charsets = function charsets(available) {
  var preferredCharsets = loadModule('charset').preferredCharsets;
  return preferredCharsets(this.request.headers['accept-charset'], available);
};

Negotiator.prototype.encoding = function encoding(available) {
  var set = this.encodings(available);
  return set && set[0];
};

Negotiator.prototype.encodings = function encodings(available) {
  var preferredEncodings = loadModule('encoding').preferredEncodings;
  return preferredEncodings(this.request.headers['accept-encoding'], available);
};

Negotiator.prototype.language = function language(available) {
  var set = this.languages(available);
  return set && set[0];
};

Negotiator.prototype.languages = function languages(available) {
  var preferredLanguages = loadModule('language').preferredLanguages;
  return preferredLanguages(this.request.headers['accept-language'], available);
};

Negotiator.prototype.mediaType = function mediaType(available) {
  var set = this.mediaTypes(available);
  return set && set[0];
};

Negotiator.prototype.mediaTypes = function mediaTypes(available) {
  var preferredMediaTypes = loadModule('mediaType').preferredMediaTypes;
  return preferredMediaTypes(this.request.headers.accept, available);
};

// Backwards compatibility
Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;

/**
 * Load the given module.
 * @private
 */

function loadModule(moduleName) {
  var module = modules[moduleName];

  if (module !== undefined) {
    return module;
  }

  // This uses a switch for static require analysis
  switch (moduleName) {
    case 'charset':
      module = require('./lib/charset');
      break;
    case 'encoding':
      module = require('./lib/encoding');
      break;
    case 'language':
      module = require('./lib/language');
      break;
    case 'mediaType':
      module = require('./lib/mediaType');
      break;
    default:
      throw new Error('Cannot find module \'' + moduleName + '\'');
  }

  // Store to prevent invoking require()
  modules[moduleName] = module;

  return module;
}

},{"./lib/charset":106,"./lib/encoding":107,"./lib/language":108,"./lib/mediaType":109}],106:[function(require,module,exports){
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module exports.
 * @public
 */

module.exports = preferredCharsets;
module.exports.preferredCharsets = preferredCharsets;

/**
 * Module variables.
 * @private
 */

var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Charset header.
 * @private
 */

function parseAcceptCharset(accept) {
  var accepts = accept.split(',');

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var charset = parseCharset(accepts[i].trim(), i);

    if (charset) {
      accepts[j++] = charset;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a charset from the Accept-Charset header.
 * @private
 */

function parseCharset(str, i) {
  var match = simpleCharsetRegExp.exec(str);
  if (!match) return null;

  var charset = match[1];
  var q = 1;
  if (match[2]) {
    var params = match[2].split(';')
    for (var j = 0; j < params.length; j++) {
      var p = params[j].trim().split('=');
      if (p[0] === 'q') {
        q = parseFloat(p[1]);
        break;
      }
    }
  }

  return {
    charset: charset,
    q: q,
    i: i
  };
}

/**
 * Get the priority of a charset.
 * @private
 */

function getCharsetPriority(charset, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(charset, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the charset.
 * @private
 */

function specify(charset, spec, index) {
  var s = 0;
  if(spec.charset.toLowerCase() === charset.toLowerCase()){
    s |= 1;
  } else if (spec.charset !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
}

/**
 * Get the preferred charsets from an Accept-Charset header.
 * @public
 */

function preferredCharsets(accept, provided) {
  // RFC 2616 sec 14.2: no header = *
  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');

  if (!provided) {
    // sorted list of all charsets
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullCharset);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getCharsetPriority(type, accepts, index);
  });

  // sorted list of accepted charsets
  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full charset string.
 * @private
 */

function getFullCharset(spec) {
  return spec.charset;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}

},{}],107:[function(require,module,exports){
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module exports.
 * @public
 */

module.exports = preferredEncodings;
module.exports.preferredEncodings = preferredEncodings;

/**
 * Module variables.
 * @private
 */

var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Encoding header.
 * @private
 */

function parseAcceptEncoding(accept) {
  var accepts = accept.split(',');
  var hasIdentity = false;
  var minQuality = 1;

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var encoding = parseEncoding(accepts[i].trim(), i);

    if (encoding) {
      accepts[j++] = encoding;
      hasIdentity = hasIdentity || specify('identity', encoding);
      minQuality = Math.min(minQuality, encoding.q || 1);
    }
  }

  if (!hasIdentity) {
    /*
     * If identity doesn't explicitly appear in the accept-encoding header,
     * it's added to the list of acceptable encoding with the lowest q
     */
    accepts[j++] = {
      encoding: 'identity',
      q: minQuality,
      i: i
    };
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse an encoding from the Accept-Encoding header.
 * @private
 */

function parseEncoding(str, i) {
  var match = simpleEncodingRegExp.exec(str);
  if (!match) return null;

  var encoding = match[1];
  var q = 1;
  if (match[2]) {
    var params = match[2].split(';');
    for (var j = 0; j < params.length; j++) {
      var p = params[j].trim().split('=');
      if (p[0] === 'q') {
        q = parseFloat(p[1]);
        break;
      }
    }
  }

  return {
    encoding: encoding,
    q: q,
    i: i
  };
}

/**
 * Get the priority of an encoding.
 * @private
 */

function getEncodingPriority(encoding, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(encoding, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the encoding.
 * @private
 */

function specify(encoding, spec, index) {
  var s = 0;
  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){
    s |= 1;
  } else if (spec.encoding !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
};

/**
 * Get the preferred encodings from an Accept-Encoding header.
 * @public
 */

function preferredEncodings(accept, provided) {
  var accepts = parseAcceptEncoding(accept || '');

  if (!provided) {
    // sorted list of all encodings
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullEncoding);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getEncodingPriority(type, accepts, index);
  });

  // sorted list of accepted encodings
  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full encoding string.
 * @private
 */

function getFullEncoding(spec) {
  return spec.encoding;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}

},{}],108:[function(require,module,exports){
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module exports.
 * @public
 */

module.exports = preferredLanguages;
module.exports.preferredLanguages = preferredLanguages;

/**
 * Module variables.
 * @private
 */

var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Language header.
 * @private
 */

function parseAcceptLanguage(accept) {
  var accepts = accept.split(',');

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var language = parseLanguage(accepts[i].trim(), i);

    if (language) {
      accepts[j++] = language;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a language from the Accept-Language header.
 * @private
 */

function parseLanguage(str, i) {
  var match = simpleLanguageRegExp.exec(str);
  if (!match) return null;

  var prefix = match[1],
    suffix = match[2],
    full = prefix;

  if (suffix) full += "-" + suffix;

  var q = 1;
  if (match[3]) {
    var params = match[3].split(';')
    for (var j = 0; j < params.length; j++) {
      var p = params[j].split('=');
      if (p[0] === 'q') q = parseFloat(p[1]);
    }
  }

  return {
    prefix: prefix,
    suffix: suffix,
    q: q,
    i: i,
    full: full
  };
}

/**
 * Get the priority of a language.
 * @private
 */

function getLanguagePriority(language, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(language, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the language.
 * @private
 */

function specify(language, spec, index) {
  var p = parseLanguage(language)
  if (!p) return null;
  var s = 0;
  if(spec.full.toLowerCase() === p.full.toLowerCase()){
    s |= 4;
  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
    s |= 2;
  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
    s |= 1;
  } else if (spec.full !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
};

/**
 * Get the preferred languages from an Accept-Language header.
 * @public
 */

function preferredLanguages(accept, provided) {
  // RFC 2616 sec 14.4: no header = *
  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');

  if (!provided) {
    // sorted list of all languages
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullLanguage);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getLanguagePriority(type, accepts, index);
  });

  // sorted list of accepted languages
  return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full language string.
 * @private
 */

function getFullLanguage(spec) {
  return spec.full;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}

},{}],109:[function(require,module,exports){
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module exports.
 * @public
 */

module.exports = preferredMediaTypes;
module.exports.preferredMediaTypes = preferredMediaTypes;

/**
 * Module variables.
 * @private
 */

var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept header.
 * @private
 */

function parseAccept(accept) {
  var accepts = splitMediaTypes(accept);

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var mediaType = parseMediaType(accepts[i].trim(), i);

    if (mediaType) {
      accepts[j++] = mediaType;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a media type from the Accept header.
 * @private
 */

function parseMediaType(str, i) {
  var match = simpleMediaTypeRegExp.exec(str);
  if (!match) return null;

  var params = Object.create(null);
  var q = 1;
  var subtype = match[2];
  var type = match[1];

  if (match[3]) {
    var kvps = splitParameters(match[3]).map(splitKeyValuePair);

    for (var j = 0; j < kvps.length; j++) {
      var pair = kvps[j];
      var key = pair[0].toLowerCase();
      var val = pair[1];

      // get the value, unwrapping quotes
      var value = val && val[0] === '"' && val[val.length - 1] === '"'
        ? val.substr(1, val.length - 2)
        : val;

      if (key === 'q') {
        q = parseFloat(value);
        break;
      }

      // store parameter
      params[key] = value;
    }
  }

  return {
    type: type,
    subtype: subtype,
    params: params,
    q: q,
    i: i
  };
}

/**
 * Get the priority of a media type.
 * @private
 */

function getMediaTypePriority(type, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(type, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the media type.
 * @private
 */

function specify(type, spec, index) {
  var p = parseMediaType(type);
  var s = 0;

  if (!p) {
    return null;
  }

  if(spec.type.toLowerCase() == p.type.toLowerCase()) {
    s |= 4
  } else if(spec.type != '*') {
    return null;
  }

  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
    s |= 2
  } else if(spec.subtype != '*') {
    return null;
  }

  var keys = Object.keys(spec.params);
  if (keys.length > 0) {
    if (keys.every(function (k) {
      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
    })) {
      s |= 1
    } else {
      return null
    }
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s,
  }
}

/**
 * Get the preferred media types from an Accept header.
 * @public
 */

function preferredMediaTypes(accept, provided) {
  // RFC 2616 sec 14.2: no header = */*
  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');

  if (!provided) {
    // sorted list of all types
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullType);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getMediaTypePriority(type, accepts, index);
  });

  // sorted list of accepted types
  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full type string.
 * @private
 */

function getFullType(spec) {
  return spec.type + '/' + spec.subtype;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}

/**
 * Count the number of quotes in a string.
 * @private
 */

function quoteCount(string) {
  var count = 0;
  var index = 0;

  while ((index = string.indexOf('"', index)) !== -1) {
    count++;
    index++;
  }

  return count;
}

/**
 * Split a key value pair.
 * @private
 */

function splitKeyValuePair(str) {
  var index = str.indexOf('=');
  var key;
  var val;

  if (index === -1) {
    key = str;
  } else {
    key = str.substr(0, index);
    val = str.substr(index + 1);
  }

  return [key, val];
}

/**
 * Split an Accept header into media types.
 * @private
 */

function splitMediaTypes(accept) {
  var accepts = accept.split(',');

  for (var i = 1, j = 0; i < accepts.length; i++) {
    if (quoteCount(accepts[j]) % 2 == 0) {
      accepts[++j] = accepts[i];
    } else {
      accepts[j] += ',' + accepts[i];
    }
  }

  // trim accepts
  accepts.length = j + 1;

  return accepts;
}

/**
 * Split a string of parameters.
 * @private
 */

function splitParameters(str) {
  var parameters = str.split(';');

  for (var i = 1, j = 0; i < parameters.length; i++) {
    if (quoteCount(parameters[j]) % 2 == 0) {
      parameters[++j] = parameters[i];
    } else {
      parameters[j] += ';' + parameters[i];
    }
  }

  // trim parameters
  parameters.length = j + 1;

  for (var i = 0; i < parameters.length; i++) {
    parameters[i] = parameters[i].trim();
  }

  return parameters;
}

},{}],110:[function(require,module,exports){
/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};

},{}],111:[function(require,module,exports){
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};

},{}],112:[function(require,module,exports){
(function (process){

/**
 * Module dependencies.
 */

var Emitter = require('events').EventEmitter;

/**
 * Module exports.
 */

module.exports = Adapter;

/**
 * Memory adapter constructor.
 *
 * @param {Namespace} nsp
 * @api public
 */

function Adapter(nsp){
  this.nsp = nsp;
  this.rooms = {};
  this.sids = {};
  this.encoder = nsp.server.encoder;
}

/**
 * Inherits from `EventEmitter`.
 */

Adapter.prototype.__proto__ = Emitter.prototype;

/**
 * Adds a socket to a room.
 *
 * @param {String} socket id
 * @param {String} room name
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.add = function(id, room, fn){
  return this.addAll(id, [ room ], fn);
};

/**
 * Adds a socket to a list of room.
 *
 * @param {String} socket id
 * @param {String} rooms
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.addAll = function(id, rooms, fn){
  for (var i = 0; i < rooms.length; i++) {
    var room = rooms[i];
    this.sids[id] = this.sids[id] || {};
    this.sids[id][room] = true;
    this.rooms[room] = this.rooms[room] || Room();
    this.rooms[room].add(id);
  }
  if (fn) process.nextTick(fn.bind(null, null));
};

/**
 * Removes a socket from a room.
 *
 * @param {String} socket id
 * @param {String} room name
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.del = function(id, room, fn){
  if (this.sids[id]) delete this.sids[id][room];

  if (this.rooms.hasOwnProperty(room)) {
    this.rooms[room].del(id);
    if (this.rooms[room].length === 0) delete this.rooms[room];
  }

  if (fn) process.nextTick(fn.bind(null, null));
};

/**
 * Removes a socket from all rooms it's joined.
 *
 * @param {String} socket id
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.delAll = function(id, fn){
  var rooms = this.sids[id];
  if (rooms) {
    for (var room in rooms) {
      if (this.rooms.hasOwnProperty(room)) {
        this.rooms[room].del(id);
        if (this.rooms[room].length === 0) delete this.rooms[room];
      }
    }
  }
  delete this.sids[id];

  if (fn) process.nextTick(fn.bind(null, null));
};

/**
 * Broadcasts a packet.
 *
 * Options:
 *  - `flags` {Object} flags for this packet
 *  - `except` {Array} sids that should be excluded
 *  - `rooms` {Array} list of rooms to broadcast to
 *
 * @param {Object} packet object
 * @api public
 */

Adapter.prototype.broadcast = function(packet, opts){
  var rooms = opts.rooms || [];
  var except = opts.except || [];
  var flags = opts.flags || {};
  var packetOpts = {
    preEncoded: true,
    volatile: flags.volatile,
    compress: flags.compress
  };
  var ids = {};
  var self = this;
  var socket;

  packet.nsp = this.nsp.name;
  this.encoder.encode(packet, function(encodedPackets) {
    if (rooms.length) {
      for (var i = 0; i < rooms.length; i++) {
        var room = self.rooms[rooms[i]];
        if (!room) continue;
        var sockets = room.sockets;
        for (var id in sockets) {
          if (sockets.hasOwnProperty(id)) {
            if (ids[id] || ~except.indexOf(id)) continue;
            socket = self.nsp.connected[id];
            if (socket) {
              socket.packet(encodedPackets, packetOpts);
              ids[id] = true;
            }
          }
        }
      }
    } else {
      for (var id in self.sids) {
        if (self.sids.hasOwnProperty(id)) {
          if (~except.indexOf(id)) continue;
          socket = self.nsp.connected[id];
          if (socket) socket.packet(encodedPackets, packetOpts);
        }
      }
    }
  });
};

/**
 * Gets a list of clients by sid.
 *
 * @param {Array} explicit set of rooms to check.
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.clients = function(rooms, fn){
  if ('function' == typeof rooms){
    fn = rooms;
    rooms = null;
  }

  rooms = rooms || [];

  var ids = {};
  var sids = [];
  var socket;

  if (rooms.length) {
    for (var i = 0; i < rooms.length; i++) {
      var room = this.rooms[rooms[i]];
      if (!room) continue;
      var sockets = room.sockets;
      for (var id in sockets) {
        if (sockets.hasOwnProperty(id)) {
          if (ids[id]) continue;
          socket = this.nsp.connected[id];
          if (socket) {
            sids.push(id);
            ids[id] = true;
          }
        }
      }
    }
  } else {
    for (var id in this.sids) {
      if (this.sids.hasOwnProperty(id)) {
        socket = this.nsp.connected[id];
        if (socket) sids.push(id);
      }
    }
  }

  if (fn) process.nextTick(fn.bind(null, null, sids));
};

/**
 * Gets the list of rooms a given client has joined.
 *
 * @param {String} socket id
 * @param {Function} callback
 * @api public
 */
Adapter.prototype.clientRooms = function(id, fn){
  var rooms = this.sids[id];
  if (fn) process.nextTick(fn.bind(null, null, rooms ? Object.keys(rooms) : null));
};

/**
* Room constructor.
*
* @api private
*/

function Room(){
  if (!(this instanceof Room)) return new Room();
  this.sockets = {};
  this.length = 0;
}

/**
 * Adds a socket to a room.
 *
 * @param {String} socket id
 * @api private
 */

Room.prototype.add = function(id){
  if (!this.sockets.hasOwnProperty(id)) {
    this.sockets[id] = true;
    this.length++;
  }
};

/**
 * Removes a socket from a room.
 *
 * @param {String} socket id
 * @api private
 */

Room.prototype.del = function(id){
  if (this.sockets.hasOwnProperty(id)) {
    delete this.sockets[id];
    this.length--;
  }
};

}).call(this,require('_process'))
},{"_process":279,"events":231}],113:[function(require,module,exports){

/**
 * Module dependencies.
 */

var url = require('./url');
var parser = require('socket.io-parser');
var Manager = require('./manager');
var debug = require('debug')('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = require('./manager');
exports.Socket = require('./socket');

},{"./manager":114,"./socket":116,"./url":117,"debug":118,"socket.io-parser":121}],114:[function(require,module,exports){

/**
 * Module dependencies.
 */

var eio = require('engine.io-client');
var Socket = require('./socket');
var Emitter = require('component-emitter');
var parser = require('socket.io-parser');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:manager');
var indexOf = require('indexof');
var Backoff = require('backo2');

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  var _parser = opts.parser || parser;
  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};

/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};

},{"./on":115,"./socket":116,"backo2":60,"component-bind":64,"component-emitter":65,"debug":118,"engine.io-client":68,"indexof":97,"socket.io-parser":121}],115:[function(require,module,exports){

/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}

},{}],116:[function(require,module,exports){

/**
 * Module dependencies.
 */

var parser = require('socket.io-parser');
var Emitter = require('component-emitter');
var toArray = require('to-array');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:socket');
var parseqs = require('parseqs');
var hasBin = require('has-binary2');

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  this.flags = {};
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  this.flags = {};

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({type: parser.CONNECT, query: query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  var sameNamespace = packet.nsp === this.nsp;
  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';

  if (!sameNamespace && !rootNamespaceError) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    self.packet({
      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags.compress = compress;
  return this;
};

/**
 * Sets the binary flag
 *
 * @param {Boolean} whether the emitted data contains binary
 * @return {Socket} self
 * @api public
 */

Socket.prototype.binary = function (binary) {
  this.flags.binary = binary;
  return this;
};

},{"./on":115,"component-bind":64,"component-emitter":65,"debug":118,"has-binary2":95,"parseqs":110,"socket.io-parser":121,"to-array":139}],117:[function(require,module,exports){

/**
 * Module dependencies.
 */

var parseuri = require('parseuri');
var debug = require('debug')('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || (typeof location !== 'undefined' && location);
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}

},{"debug":118,"parseuri":111}],118:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./common":119,"_process":279,"dup":78}],119:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"dup":79,"ms":104}],120:[function(require,module,exports){
/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = require('isarray');
var isBuf = require('./is-buffer');
var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');
var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);
    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }
    return newData;
  } else if (typeof data === 'object' && !(data instanceof Date)) {
    var newData = {};
    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }
    return newData;
  }
  return data;
}

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful
  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if (typeof data === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((withNativeBlob && obj instanceof Blob) ||
        (withNativeFile && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

},{"./is-buffer":122,"isarray":98}],121:[function(require,module,exports){

/**
 * Module dependencies.
 */

var debug = require('debug')('socket.io-parser');
var Emitter = require('component-emitter');
var binary = require('./binary');
var isArray = require('isarray');
var isBuf = require('./is-buffer');

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

var ERROR_PACKET = exports.ERROR + '"encode error"';

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    var payload = tryStringify(obj.data);
    if (payload !== false) {
      str += payload;
    } else {
      return ERROR_PACKET;
    }
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

function tryStringify(str) {
  try {
    return JSON.stringify(str);
  } catch(e){
    return false;
  }
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an encoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if (typeof obj === 'string') {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) {
    return error('unknown packet type ' + p.type);
  }

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var buf = '';
    while (str.charAt(++i) !== '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      p.nsp += c;
      if (i === str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i === str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    var payload = tryParse(str.substr(i));
    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
    if (isPayloadValid) {
      p.data = payload;
    } else {
      return error('invalid payload');
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(str) {
  try {
    return JSON.parse(str);
  } catch(e){
    return false;
  }
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(msg) {
  return {
    type: exports.ERROR,
    data: 'parser error: ' + msg
  };
}

},{"./binary":120,"./is-buffer":122,"component-emitter":65,"debug":123,"isarray":98}],122:[function(require,module,exports){
(function (Buffer){

module.exports = isBuf;

var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

var isView = function (obj) {
  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
};

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (withNativeBuffer && Buffer.isBuffer(obj)) ||
          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
}

}).call(this,require("buffer").Buffer)
},{"buffer":195}],123:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))
},{"./debug":124,"_process":279}],124:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":125}],125:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],126:[function(require,module,exports){
module.exports={
  "_from": "socket.io-client@2.3.0",
  "_id": "socket.io-client@2.3.0",
  "_inBundle": false,
  "_integrity": "sha512-cEQQf24gET3rfhxZ2jJ5xzAOo/xhZwK+mOqtGRg5IowZsMgwvHwnf/mCRapAAkadhM26y+iydgwsXGObBB5ZdA==",
  "_location": "/socket.io-client",
  "_phantomChildren": {
    "component-emitter": "1.2.1",
    "isarray": "2.0.1",
    "ms": "2.1.1"
  },
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "socket.io-client@2.3.0",
    "name": "socket.io-client",
    "escapedName": "socket.io-client",
    "rawSpec": "2.3.0",
    "saveSpec": null,
    "fetchSpec": "2.3.0"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/socket.io"
  ],
  "_resolved": "https://registry.npmjs.org/socket.io-client/-/socket.io-client-2.3.0.tgz",
  "_shasum": "14d5ba2e00b9bcd145ae443ab96b3f86cbcc1bb4",
  "_spec": "socket.io-client@2.3.0",
  "_where": "/Users/peterflockhart/SAIL/jiff",
  "bugs": {
    "url": "https://github.com/Automattic/socket.io-client/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Guillermo Rauch",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "Arnout Kazemier",
      "email": "info@3rd-eden.com"
    },
    {
      "name": "Vladimir Dronnikov",
      "email": "dronnikov@gmail.com"
    },
    {
      "name": "Einar Otto Stangvik",
      "email": "einaros@gmail.com"
    }
  ],
  "dependencies": {
    "backo2": "1.0.2",
    "base64-arraybuffer": "0.1.5",
    "component-bind": "1.0.0",
    "component-emitter": "1.2.1",
    "debug": "~4.1.0",
    "engine.io-client": "~3.4.0",
    "has-binary2": "~1.0.2",
    "has-cors": "1.1.0",
    "indexof": "0.0.1",
    "object-component": "0.0.3",
    "parseqs": "0.0.5",
    "parseuri": "0.0.5",
    "socket.io-parser": "~3.3.0",
    "to-array": "0.1.4"
  },
  "deprecated": false,
  "description": "[![Build Status](https://secure.travis-ci.org/socketio/socket.io-client.svg?branch=master)](http://travis-ci.org/socketio/socket.io-client) [![Dependency Status](https://david-dm.org/socketio/socket.io-client.svg)](https://david-dm.org/socketio/socket.io-client) [![devDependency Status](https://david-dm.org/socketio/socket.io-client/dev-status.svg)](https://david-dm.org/socketio/socket.io-client#info=devDependencies) [![NPM version](https://badge.fury.io/js/socket.io-client.svg)](https://www.npmjs.com/package/socket.io-client) ![Downloads](http://img.shields.io/npm/dm/socket.io-client.svg?style=flat) [![](http://slack.socket.io/badge.svg?)](http://slack.socket.io)",
  "devDependencies": {
    "babel-core": "^6.24.1",
    "babel-eslint": "4.1.7",
    "babel-loader": "7.0.0",
    "babel-preset-es2015": "6.24.1",
    "concat-stream": "^1.6.0",
    "derequire": "^2.0.6",
    "eslint-config-standard": "4.4.0",
    "eslint-plugin-standard": "1.3.1",
    "expect.js": "0.3.1",
    "gulp": "^3.9.1",
    "gulp-eslint": "1.1.1",
    "gulp-file": "^0.3.0",
    "gulp-istanbul": "^1.1.1",
    "gulp-mocha": "^4.3.1",
    "gulp-task-listing": "1.0.1",
    "imports-loader": "^0.7.1",
    "istanbul": "^0.4.5",
    "mocha": "^3.3.0",
    "socket.io": "2.3.0",
    "socket.io-browsers": "^1.0.0",
    "strip-loader": "0.1.2",
    "text-blob-builder": "0.0.1",
    "webpack-merge": "4.1.2",
    "webpack-stream": "3.2.0",
    "zuul": "~3.11.1",
    "zuul-builder-webpack": "^1.2.0",
    "zuul-ngrok": "4.0.0"
  },
  "files": [
    "lib/",
    "dist/"
  ],
  "homepage": "https://github.com/Automattic/socket.io-client#readme",
  "keywords": [
    "realtime",
    "framework",
    "websocket",
    "tcp",
    "events",
    "client"
  ],
  "license": "MIT",
  "main": "./lib/index",
  "name": "socket.io-client",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Automattic/socket.io-client.git"
  },
  "scripts": {
    "test": "gulp test"
  },
  "version": "2.3.0"
}

},{}],127:[function(require,module,exports){
arguments[4][120][0].apply(exports,arguments)
},{"./is-buffer":129,"dup":120,"isarray":98}],128:[function(require,module,exports){

/**
 * Module dependencies.
 */

var debug = require('debug')('socket.io-parser');
var Emitter = require('component-emitter');
var binary = require('./binary');
var isArray = require('isarray');
var isBuf = require('./is-buffer');

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

var ERROR_PACKET = exports.ERROR + '"encode error"';

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    var payload = tryStringify(obj.data);
    if (payload !== false) {
      str += payload;
    } else {
      return ERROR_PACKET;
    }
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

function tryStringify(str) {
  try {
    return JSON.stringify(str);
  } catch(e){
    return false;
  }
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an encoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if (typeof obj === 'string') {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) {
    return error('unknown packet type ' + p.type);
  }

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var start = i + 1;
    while (str.charAt(++i) !== '-' && i != str.length) {}
    var buf = str.substring(start, i);
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    var start = i + 1;
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      if (i === str.length) break;
    }
    p.nsp = str.substring(start, i);
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    var start = i + 1;
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      if (i === str.length) break;
    }
    p.id = Number(str.substring(start, i + 1));
  }

  // look up json data
  if (str.charAt(++i)) {
    var payload = tryParse(str.substr(i));
    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
    if (isPayloadValid) {
      p.data = payload;
    } else {
      return error('invalid payload');
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(str) {
  try {
    return JSON.parse(str);
  } catch(e){
    return false;
  }
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(msg) {
  return {
    type: exports.ERROR,
    data: 'parser error: ' + msg
  };
}

},{"./binary":127,"./is-buffer":129,"component-emitter":65,"debug":130,"isarray":98}],129:[function(require,module,exports){
arguments[4][122][0].apply(exports,arguments)
},{"buffer":195,"dup":122}],130:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./common":131,"_process":279,"dup":78}],131:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"dup":79,"ms":104}],132:[function(require,module,exports){
(function (process){

/**
 * Module dependencies.
 */

var parser = require('socket.io-parser');
var debug = require('debug')('socket.io:client');
var url = require('url');

/**
 * Module exports.
 */

module.exports = Client;

/**
 * Client constructor.
 *
 * @param {Server} server instance
 * @param {Socket} conn
 * @api private
 */

function Client(server, conn){
  this.server = server;
  this.conn = conn;
  this.encoder = server.encoder;
  this.decoder = new server.parser.Decoder();
  this.id = conn.id;
  this.request = conn.request;
  this.setup();
  this.sockets = {};
  this.nsps = {};
  this.connectBuffer = [];
}

/**
 * Sets up event listeners.
 *
 * @api private
 */

Client.prototype.setup = function(){
  this.onclose = this.onclose.bind(this);
  this.ondata = this.ondata.bind(this);
  this.onerror = this.onerror.bind(this);
  this.ondecoded = this.ondecoded.bind(this);

  this.decoder.on('decoded', this.ondecoded);
  this.conn.on('data', this.ondata);
  this.conn.on('error', this.onerror);
  this.conn.on('close', this.onclose);
};

/**
 * Connects a client to a namespace.
 *
 * @param {String} name namespace
 * @param {Object} query the query parameters
 * @api private
 */

Client.prototype.connect = function(name, query){
  if (this.server.nsps[name]) {
    debug('connecting to namespace %s', name);
    return this.doConnect(name, query);
  }

  this.server.checkNamespace(name, query, (dynamicNsp) => {
    if (dynamicNsp) {
      debug('dynamic namespace %s was created', dynamicNsp.name);
      this.doConnect(name, query);
    } else {
      debug('creation of namespace %s was denied', name);
      this.packet({ type: parser.ERROR, nsp: name, data: 'Invalid namespace' });
    }
  });
};

/**
 * Connects a client to a namespace.
 *
 * @param {String} name namespace
 * @param {String} query the query parameters
 * @api private
 */

Client.prototype.doConnect = function(name, query){
  var nsp = this.server.of(name);

  if ('/' != name && !this.nsps['/']) {
    this.connectBuffer.push(name);
    return;
  }

  var self = this;
  var socket = nsp.add(this, query, function(){
    self.sockets[socket.id] = socket;
    self.nsps[nsp.name] = socket;

    if ('/' == nsp.name && self.connectBuffer.length > 0) {
      self.connectBuffer.forEach(self.connect, self);
      self.connectBuffer = [];
    }
  });
};

/**
 * Disconnects from all namespaces and closes transport.
 *
 * @api private
 */

Client.prototype.disconnect = function(){
  for (var id in this.sockets) {
    if (this.sockets.hasOwnProperty(id)) {
      this.sockets[id].disconnect();
    }
  }
  this.sockets = {};
  this.close();
};

/**
 * Removes a socket. Called by each `Socket`.
 *
 * @api private
 */

Client.prototype.remove = function(socket){
  if (this.sockets.hasOwnProperty(socket.id)) {
    var nsp = this.sockets[socket.id].nsp.name;
    delete this.sockets[socket.id];
    delete this.nsps[nsp];
  } else {
    debug('ignoring remove for %s', socket.id);
  }
};

/**
 * Closes the underlying connection.
 *
 * @api private
 */

Client.prototype.close = function(){
  if ('open' == this.conn.readyState) {
    debug('forcing transport close');
    this.conn.close();
    this.onclose('forced server close');
  }
};

/**
 * Writes a packet to the transport.
 *
 * @param {Object} packet object
 * @param {Object} opts
 * @api private
 */

Client.prototype.packet = function(packet, opts){
  opts = opts || {};
  var self = this;

  // this writes to the actual connection
  function writeToEngine(encodedPackets) {
    if (opts.volatile && !self.conn.transport.writable) return;
    for (var i = 0; i < encodedPackets.length; i++) {
      self.conn.write(encodedPackets[i], { compress: opts.compress });
    }
  }

  if ('open' == this.conn.readyState) {
    debug('writing packet %j', packet);
    if (!opts.preEncoded) { // not broadcasting, need to encode
      this.encoder.encode(packet, writeToEngine); // encode, then write results to engine
    } else { // a broadcast pre-encodes a packet
      writeToEngine(packet);
    }
  } else {
    debug('ignoring packet write %j', packet);
  }
};

/**
 * Called with incoming transport data.
 *
 * @api private
 */

Client.prototype.ondata = function(data){
  // try/catch is needed for protocol violations (GH-1880)
  try {
    this.decoder.add(data);
  } catch(e) {
    this.onerror(e);
  }
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Client.prototype.ondecoded = function(packet) {
  if (parser.CONNECT == packet.type) {
    this.connect(url.parse(packet.nsp).pathname, url.parse(packet.nsp, true).query);
  } else {
    var socket = this.nsps[packet.nsp];
    if (socket) {
      process.nextTick(function() {
        socket.onpacket(packet);
      });
    } else {
      debug('no socket for namespace %s', packet.nsp);
    }
  }
};

/**
 * Handles an error.
 *
 * @param {Object} err object
 * @api private
 */

Client.prototype.onerror = function(err){
  for (var id in this.sockets) {
    if (this.sockets.hasOwnProperty(id)) {
      this.sockets[id].onerror(err);
    }
  }
  this.conn.close();
};

/**
 * Called upon transport close.
 *
 * @param {String} reason
 * @api private
 */

Client.prototype.onclose = function(reason){
  debug('client close with reason %s', reason);

  // ignore a potential subsequent `close` event
  this.destroy();

  // `nsps` and `sockets` are cleaned up seamlessly
  for (var id in this.sockets) {
    if (this.sockets.hasOwnProperty(id)) {
      this.sockets[id].onclose(reason);
    }
  }
  this.sockets = {};

  this.decoder.destroy(); // clean up decoder
};

/**
 * Cleans up event listeners.
 *
 * @api private
 */

Client.prototype.destroy = function(){
  this.conn.removeListener('data', this.ondata);
  this.conn.removeListener('error', this.onerror);
  this.conn.removeListener('close', this.onclose);
  this.decoder.removeListener('decoded', this.ondecoded);
};

}).call(this,require('_process'))
},{"_process":279,"debug":137,"socket.io-parser":128,"url":339}],133:[function(require,module,exports){
(function (__dirname){
'use strict';

/**
 * Module dependencies.
 */

var http = require('http');
var read = require('fs').readFileSync;
var path = require('path');
var exists = require('fs').existsSync;
var engine = require('engine.io');
var clientVersion = require('socket.io-client/package.json').version;
var Client = require('./client');
var Emitter = require('events').EventEmitter;
var Namespace = require('./namespace');
var ParentNamespace = require('./parent-namespace');
var Adapter = require('socket.io-adapter');
var parser = require('socket.io-parser');
var debug = require('debug')('socket.io:server');
var url = require('url');

/**
 * Module exports.
 */

module.exports = Server;

/**
 * Socket.IO client source.
 */

var clientSource = undefined;
var clientSourceMap = undefined;

/**
 * Server constructor.
 *
 * @param {http.Server|Number|Object} srv http server, port or options
 * @param {Object} [opts]
 * @api public
 */

function Server(srv, opts){
  if (!(this instanceof Server)) return new Server(srv, opts);
  if ('object' == typeof srv && srv instanceof Object && !srv.listen) {
    opts = srv;
    srv = null;
  }
  opts = opts || {};
  this.nsps = {};
  this.parentNsps = new Map();
  this.path(opts.path || '/socket.io');
  this.serveClient(false !== opts.serveClient);
  this.parser = opts.parser || parser;
  this.encoder = new this.parser.Encoder();
  this.adapter(opts.adapter || Adapter);
  this.origins(opts.origins || '*:*');
  this.sockets = this.of('/');
  if (srv) this.attach(srv, opts);
}

/**
 * Server request verification function, that checks for allowed origins
 *
 * @param {http.IncomingMessage} req request
 * @param {Function} fn callback to be called with the result: `fn(err, success)`
 */

Server.prototype.checkRequest = function(req, fn) {
  var origin = req.headers.origin || req.headers.referer;

  // file:// URLs produce a null Origin which can't be authorized via echo-back
  if ('null' == origin || null == origin) origin = '*';

  if (!!origin && typeof(this._origins) == 'function') return this._origins(origin, fn);
  if (this._origins.indexOf('*:*') !== -1) return fn(null, true);
  if (origin) {
    try {
      var parts = url.parse(origin);
      var defaultPort = 'https:' == parts.protocol ? 443 : 80;
      parts.port = parts.port != null
        ? parts.port
        : defaultPort;
      var ok =
        ~this._origins.indexOf(parts.protocol + '//' + parts.hostname + ':' + parts.port) ||
        ~this._origins.indexOf(parts.hostname + ':' + parts.port) ||
        ~this._origins.indexOf(parts.hostname + ':*') ||
        ~this._origins.indexOf('*:' + parts.port);
      debug('origin %s is %svalid', origin, !!ok ? '' : 'not ');
      return fn(null, !!ok);
    } catch (ex) {
    }
  }
  fn(null, false);
};

/**
 * Sets/gets whether client code is being served.
 *
 * @param {Boolean} v whether to serve client code
 * @return {Server|Boolean} self when setting or value when getting
 * @api public
 */

Server.prototype.serveClient = function(v){
  if (!arguments.length) return this._serveClient;
  this._serveClient = v;
  var resolvePath = function(file){
    var filepath = path.resolve(__dirname, './../../', file);
    if (exists(filepath)) {
      return filepath;
    }
    return require.resolve(file);
  };
  if (v && !clientSource) {
    clientSource = read(resolvePath( 'socket.io-client/dist/socket.io.js'), 'utf-8');
    try {
      clientSourceMap = read(resolvePath( 'socket.io-client/dist/socket.io.js.map'), 'utf-8');
    } catch(err) {
      debug('could not load sourcemap file');
    }
  }
  return this;
};

/**
 * Old settings for backwards compatibility
 */

var oldSettings = {
  "transports": "transports",
  "heartbeat timeout": "pingTimeout",
  "heartbeat interval": "pingInterval",
  "destroy buffer size": "maxHttpBufferSize"
};

/**
 * Backwards compatibility.
 *
 * @api public
 */

Server.prototype.set = function(key, val){
  if ('authorization' == key && val) {
    this.use(function(socket, next) {
      val(socket.request, function(err, authorized) {
        if (err) return next(new Error(err));
        if (!authorized) return next(new Error('Not authorized'));
        next();
      });
    });
  } else if ('origins' == key && val) {
    this.origins(val);
  } else if ('resource' == key) {
    this.path(val);
  } else if (oldSettings[key] && this.eio[oldSettings[key]]) {
    this.eio[oldSettings[key]] = val;
  } else {
    console.error('Option %s is not valid. Please refer to the README.', key);
  }

  return this;
};

/**
 * Executes the middleware for an incoming namespace not already created on the server.
 *
 * @param {String} name name of incoming namespace
 * @param {Object} query the query parameters
 * @param {Function} fn callback
 * @api private
 */

Server.prototype.checkNamespace = function(name, query, fn){
  if (this.parentNsps.size === 0) return fn(false);

  const keysIterator = this.parentNsps.keys();

  const run = () => {
    let nextFn = keysIterator.next();
    if (nextFn.done) {
      return fn(false);
    }
    nextFn.value(name, query, (err, allow) => {
      if (err || !allow) {
        run();
      } else {
        fn(this.parentNsps.get(nextFn.value).createChild(name));
      }
    });
  };

  run();
};

/**
 * Sets the client serving path.
 *
 * @param {String} v pathname
 * @return {Server|String} self when setting or value when getting
 * @api public
 */

Server.prototype.path = function(v){
  if (!arguments.length) return this._path;
  this._path = v.replace(/\/$/, '');
  return this;
};

/**
 * Sets the adapter for rooms.
 *
 * @param {Adapter} v pathname
 * @return {Server|Adapter} self when setting or value when getting
 * @api public
 */

Server.prototype.adapter = function(v){
  if (!arguments.length) return this._adapter;
  this._adapter = v;
  for (var i in this.nsps) {
    if (this.nsps.hasOwnProperty(i)) {
      this.nsps[i].initAdapter();
    }
  }
  return this;
};

/**
 * Sets the allowed origins for requests.
 *
 * @param {String|String[]} v origins
 * @return {Server|Adapter} self when setting or value when getting
 * @api public
 */

Server.prototype.origins = function(v){
  if (!arguments.length) return this._origins;

  this._origins = v;
  return this;
};

/**
 * Attaches socket.io to a server or port.
 *
 * @param {http.Server|Number} server or port
 * @param {Object} options passed to engine.io
 * @return {Server} self
 * @api public
 */

Server.prototype.listen =
Server.prototype.attach = function(srv, opts){
  if ('function' == typeof srv) {
    var msg = 'You are trying to attach socket.io to an express ' +
    'request handler function. Please pass a http.Server instance.';
    throw new Error(msg);
  }

  // handle a port as a string
  if (Number(srv) == srv) {
    srv = Number(srv);
  }

  if ('number' == typeof srv) {
    debug('creating http server and binding to %d', srv);
    var port = srv;
    srv = http.Server(function(req, res){
      res.writeHead(404);
      res.end();
    });
    srv.listen(port);

  }

  // set engine.io path to `/socket.io`
  opts = opts || {};
  opts.path = opts.path || this.path();
  // set origins verification
  opts.allowRequest = opts.allowRequest || this.checkRequest.bind(this);

  if (this.sockets.fns.length > 0) {
    this.initEngine(srv, opts);
    return this;
  }

  var self = this;
  var connectPacket = { type: parser.CONNECT, nsp: '/' };
  this.encoder.encode(connectPacket, function (encodedPacket){
    // the CONNECT packet will be merged with Engine.IO handshake,
    // to reduce the number of round trips
    opts.initialPacket = encodedPacket;

    self.initEngine(srv, opts);
  });
  return this;
};

/**
 * Initialize engine
 *
 * @param {Object} options passed to engine.io
 * @api private
 */

Server.prototype.initEngine = function(srv, opts){
  // initialize engine
  debug('creating engine.io instance with opts %j', opts);
  this.eio = engine.attach(srv, opts);

  // attach static file serving
  if (this._serveClient) this.attachServe(srv);

  // Export http server
  this.httpServer = srv;

  // bind to engine events
  this.bind(this.eio);
};

/**
 * Attaches the static file serving.
 *
 * @param {Function|http.Server} srv http server
 * @api private
 */

Server.prototype.attachServe = function(srv){
  debug('attaching client serving req handler');
  var url = this._path + '/socket.io.js';
  var urlMap = this._path + '/socket.io.js.map';
  var evs = srv.listeners('request').slice(0);
  var self = this;
  srv.removeAllListeners('request');
  srv.on('request', function(req, res) {
    if (0 === req.url.indexOf(urlMap)) {
      self.serveMap(req, res);
    } else if (0 === req.url.indexOf(url)) {
      self.serve(req, res);
    } else {
      for (var i = 0; i < evs.length; i++) {
        evs[i].call(srv, req, res);
      }
    }
  });
};

/**
 * Handles a request serving `/socket.io.js`
 *
 * @param {http.Request} req
 * @param {http.Response} res
 * @api private
 */

Server.prototype.serve = function(req, res){
  // Per the standard, ETags must be quoted:
  // https://tools.ietf.org/html/rfc7232#section-2.3
  var expectedEtag = '"' + clientVersion + '"';

  var etag = req.headers['if-none-match'];
  if (etag) {
    if (expectedEtag == etag) {
      debug('serve client 304');
      res.writeHead(304);
      res.end();
      return;
    }
  }

  debug('serve client source');
  res.setHeader("Cache-Control", "public, max-age=0");
  res.setHeader('Content-Type', 'application/javascript');
  res.setHeader('ETag', expectedEtag);
  res.writeHead(200);
  res.end(clientSource);
};

/**
 * Handles a request serving `/socket.io.js.map`
 *
 * @param {http.Request} req
 * @param {http.Response} res
 * @api private
 */

Server.prototype.serveMap = function(req, res){
  // Per the standard, ETags must be quoted:
  // https://tools.ietf.org/html/rfc7232#section-2.3
  var expectedEtag = '"' + clientVersion + '"';

  var etag = req.headers['if-none-match'];
  if (etag) {
    if (expectedEtag == etag) {
      debug('serve client 304');
      res.writeHead(304);
      res.end();
      return;
    }
  }

  debug('serve client sourcemap');
  res.setHeader('Content-Type', 'application/json');
  res.setHeader('ETag', expectedEtag);
  res.writeHead(200);
  res.end(clientSourceMap);
};

/**
 * Binds socket.io to an engine.io instance.
 *
 * @param {engine.Server} engine engine.io (or compatible) server
 * @return {Server} self
 * @api public
 */

Server.prototype.bind = function(engine){
  this.engine = engine;
  this.engine.on('connection', this.onconnection.bind(this));
  return this;
};

/**
 * Called with each incoming transport connection.
 *
 * @param {engine.Socket} conn
 * @return {Server} self
 * @api public
 */

Server.prototype.onconnection = function(conn){
  debug('incoming connection with id %s', conn.id);
  var client = new Client(this, conn);
  client.connect('/');
  return this;
};

/**
 * Looks up a namespace.
 *
 * @param {String|RegExp|Function} name nsp name
 * @param {Function} [fn] optional, nsp `connection` ev handler
 * @api public
 */

Server.prototype.of = function(name, fn){
  if (typeof name === 'function' || name instanceof RegExp) {
    const parentNsp = new ParentNamespace(this);
    debug('initializing parent namespace %s', parentNsp.name);
    if (typeof name === 'function') {
      this.parentNsps.set(name, parentNsp);
    } else {
      this.parentNsps.set((nsp, conn, next) => next(null, name.test(nsp)), parentNsp);
    }
    if (fn) parentNsp.on('connect', fn);
    return parentNsp;
  }

  if (String(name)[0] !== '/') name = '/' + name;

  var nsp = this.nsps[name];
  if (!nsp) {
    debug('initializing namespace %s', name);
    nsp = new Namespace(this, name);
    this.nsps[name] = nsp;
  }
  if (fn) nsp.on('connect', fn);
  return nsp;
};

/**
 * Closes server connection
 *
 * @param {Function} [fn] optional, called as `fn([err])` on error OR all conns closed
 * @api public
 */

Server.prototype.close = function(fn){
  for (var id in this.nsps['/'].sockets) {
    if (this.nsps['/'].sockets.hasOwnProperty(id)) {
      this.nsps['/'].sockets[id].onclose();
    }
  }

  this.engine.close();

  if (this.httpServer) {
    this.httpServer.close(fn);
  } else {
    fn && fn();
  }
};

/**
 * Expose main namespace (/).
 */

var emitterMethods = Object.keys(Emitter.prototype).filter(function(key){
  return typeof Emitter.prototype[key] === 'function';
});

emitterMethods.concat(['to', 'in', 'use', 'send', 'write', 'clients', 'compress', 'binary']).forEach(function(fn){
  Server.prototype[fn] = function(){
    return this.sockets[fn].apply(this.sockets, arguments);
  };
});

Namespace.flags.forEach(function(flag){
  Object.defineProperty(Server.prototype, flag, {
    get: function() {
      this.sockets.flags = this.sockets.flags || {};
      this.sockets.flags[flag] = true;
      return this;
    }
  });
});

/**
 * BC with `io.listen`
 */

Server.listen = Server;

}).call(this,"/node_modules/socket.io/lib")
},{"./client":132,"./namespace":134,"./parent-namespace":135,"debug":137,"engine.io":83,"events":231,"fs":142,"http":318,"path":272,"socket.io-adapter":112,"socket.io-client/package.json":126,"socket.io-parser":128,"url":339}],134:[function(require,module,exports){
(function (process){

/**
 * Module dependencies.
 */

var Socket = require('./socket');
var Emitter = require('events').EventEmitter;
var parser = require('socket.io-parser');
var hasBin = require('has-binary2');
var debug = require('debug')('socket.io:namespace');

/**
 * Module exports.
 */

module.exports = exports = Namespace;

/**
 * Blacklisted events.
 */

exports.events = [
  'connect',    // for symmetry with client
  'connection',
  'newListener'
];

/**
 * Flags.
 */

exports.flags = [
  'json',
  'volatile',
  'local'
];

/**
 * `EventEmitter#emit` reference.
 */

var emit = Emitter.prototype.emit;

/**
 * Namespace constructor.
 *
 * @param {Server} server instance
 * @param {Socket} name
 * @api private
 */

function Namespace(server, name){
  this.name = name;
  this.server = server;
  this.sockets = {};
  this.connected = {};
  this.fns = [];
  this.ids = 0;
  this.rooms = [];
  this.flags = {};
  this.initAdapter();
}

/**
 * Inherits from `EventEmitter`.
 */

Namespace.prototype.__proto__ = Emitter.prototype;

/**
 * Apply flags from `Socket`.
 */

exports.flags.forEach(function(flag){
  Object.defineProperty(Namespace.prototype, flag, {
    get: function() {
      this.flags[flag] = true;
      return this;
    }
  });
});

/**
 * Initializes the `Adapter` for this nsp.
 * Run upon changing adapter by `Server#adapter`
 * in addition to the constructor.
 *
 * @api private
 */

Namespace.prototype.initAdapter = function(){
  this.adapter = new (this.server.adapter())(this);
};

/**
 * Sets up namespace middleware.
 *
 * @return {Namespace} self
 * @api public
 */

Namespace.prototype.use = function(fn){
  if (this.server.eio && this.name === '/') {
    debug('removing initial packet');
    delete this.server.eio.initialPacket;
  }
  this.fns.push(fn);
  return this;
};

/**
 * Executes the middleware for an incoming client.
 *
 * @param {Socket} socket that will get added
 * @param {Function} fn last fn call in the middleware
 * @api private
 */

Namespace.prototype.run = function(socket, fn){
  var fns = this.fns.slice(0);
  if (!fns.length) return fn(null);

  function run(i){
    fns[i](socket, function(err){
      // upon error, short-circuit
      if (err) return fn(err);

      // if no middleware left, summon callback
      if (!fns[i + 1]) return fn(null);

      // go on to next
      run(i + 1);
    });
  }

  run(0);
};

/**
 * Targets a room when emitting.
 *
 * @param {String} name
 * @return {Namespace} self
 * @api public
 */

Namespace.prototype.to =
Namespace.prototype.in = function(name){
  if (!~this.rooms.indexOf(name)) this.rooms.push(name);
  return this;
};

/**
 * Adds a new client.
 *
 * @return {Socket}
 * @api private
 */

Namespace.prototype.add = function(client, query, fn){
  debug('adding socket to nsp %s', this.name);
  var socket = new Socket(this, client, query);
  var self = this;
  this.run(socket, function(err){
    process.nextTick(function(){
      if ('open' == client.conn.readyState) {
        if (err) return socket.error(err.data || err.message);

        // track socket
        self.sockets[socket.id] = socket;

        // it's paramount that the internal `onconnect` logic
        // fires before user-set events to prevent state order
        // violations (such as a disconnection before the connection
        // logic is complete)
        socket.onconnect();
        if (fn) fn();

        // fire user-set events
        self.emit('connect', socket);
        self.emit('connection', socket);
      } else {
        debug('next called after client was closed - ignoring socket');
      }
    });
  });
  return socket;
};

/**
 * Removes a client. Called by each `Socket`.
 *
 * @api private
 */

Namespace.prototype.remove = function(socket){
  if (this.sockets.hasOwnProperty(socket.id)) {
    delete this.sockets[socket.id];
  } else {
    debug('ignoring remove for %s', socket.id);
  }
};

/**
 * Emits to all clients.
 *
 * @return {Namespace} self
 * @api public
 */

Namespace.prototype.emit = function(ev){
  if (~exports.events.indexOf(ev)) {
    emit.apply(this, arguments);
    return this;
  }
  // set up packet object
  var args = Array.prototype.slice.call(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };

  if ('function' == typeof args[args.length - 1]) {
    throw new Error('Callbacks are not supported when broadcasting');
  }

  var rooms = this.rooms.slice(0);
  var flags = Object.assign({}, this.flags);

  // reset flags
  this.rooms = [];
  this.flags = {};

  this.adapter.broadcast(packet, {
    rooms: rooms,
    flags: flags
  });

  return this;
};

/**
 * Sends a `message` event to all clients.
 *
 * @return {Namespace} self
 * @api public
 */

Namespace.prototype.send =
Namespace.prototype.write = function(){
  var args = Array.prototype.slice.call(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Gets a list of clients.
 *
 * @return {Namespace} self
 * @api public
 */

Namespace.prototype.clients = function(fn){
  if(!this.adapter){
    throw new Error('No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?')
  }
  this.adapter.clients(this.rooms, fn);
  // reset rooms for scenario:
  // .in('room').clients() (GH-1978)
  this.rooms = [];
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} compress if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Namespace.prototype.compress = function(compress){
  this.flags.compress = compress;
  return this;
};

/**
 * Sets the binary flag
 *
 * @param {Boolean} Encode as if it has binary data if `true`, Encode as if it doesnt have binary data if `false`
 * @return {Socket} self
 * @api public
 */

 Namespace.prototype.binary = function (binary) {
   this.flags.binary = binary;
   return this;
 };

}).call(this,require('_process'))
},{"./socket":136,"_process":279,"debug":137,"events":231,"has-binary2":95,"socket.io-parser":128}],135:[function(require,module,exports){
'use strict';

const Namespace = require('./namespace');

let count = 0;

class ParentNamespace extends Namespace {

  constructor(server) {
    super(server, '/_' + (count++));
    this.children = new Set();
  }

  initAdapter() {}

  emit() {
    const args = Array.prototype.slice.call(arguments);

    this.children.forEach(nsp => {
      nsp.rooms = this.rooms;
      nsp.flags = this.flags;
      nsp.emit.apply(nsp, args);
    });
    this.rooms = [];
    this.flags = {};
  }

  createChild(name) {
    const namespace = new Namespace(this.server, name);
    namespace.fns = this.fns.slice(0);
    this.listeners('connect').forEach(listener => namespace.on('connect', listener));
    this.listeners('connection').forEach(listener => namespace.on('connection', listener));
    this.children.add(namespace);
    this.server.nsps[name] = namespace;
    return namespace;
  }
}

module.exports = ParentNamespace;

},{"./namespace":134}],136:[function(require,module,exports){
(function (process){

/**
 * Module dependencies.
 */

var Emitter = require('events').EventEmitter;
var parser = require('socket.io-parser');
var hasBin = require('has-binary2');
var url = require('url');
var debug = require('debug')('socket.io:socket');

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Blacklisted events.
 *
 * @api public
 */

exports.events = [
  'error',
  'connect',
  'disconnect',
  'disconnecting',
  'newListener',
  'removeListener'
];

/**
 * Flags.
 *
 * @api private
 */

var flags = [
  'json',
  'volatile',
  'broadcast',
  'local'
];

/**
 * `EventEmitter#emit` reference.
 */

var emit = Emitter.prototype.emit;

/**
 * Interface to a `Client` for a given `Namespace`.
 *
 * @param {Namespace} nsp
 * @param {Client} client
 * @api public
 */

function Socket(nsp, client, query){
  this.nsp = nsp;
  this.server = nsp.server;
  this.adapter = this.nsp.adapter;
  this.id = nsp.name !== '/' ? nsp.name + '#' + client.id : client.id;
  this.client = client;
  this.conn = client.conn;
  this.rooms = {};
  this.acks = {};
  this.connected = true;
  this.disconnected = false;
  this.handshake = this.buildHandshake(query);
  this.fns = [];
  this.flags = {};
  this._rooms = [];
}

/**
 * Inherits from `EventEmitter`.
 */

Socket.prototype.__proto__ = Emitter.prototype;

/**
 * Apply flags from `Socket`.
 */

flags.forEach(function(flag){
  Object.defineProperty(Socket.prototype, flag, {
    get: function() {
      this.flags[flag] = true;
      return this;
    }
  });
});

/**
 * `request` engine.io shortcut.
 *
 * @api public
 */

Object.defineProperty(Socket.prototype, 'request', {
  get: function() {
    return this.conn.request;
  }
});

/**
 * Builds the `handshake` BC object
 *
 * @api private
 */

Socket.prototype.buildHandshake = function(query){
  var self = this;
  function buildQuery(){
    var requestQuery = url.parse(self.request.url, true).query;
    //if socket-specific query exist, replace query strings in requestQuery
    return Object.assign({}, query, requestQuery);
  }
  return {
    headers: this.request.headers,
    time: (new Date) + '',
    address: this.conn.remoteAddress,
    xdomain: !!this.request.headers.origin,
    secure: !!this.request.connection.encrypted,
    issued: +(new Date),
    url: this.request.url,
    query: buildQuery()
  };
};

/**
 * Emits to this client.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function(ev){
  if (~exports.events.indexOf(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = Array.prototype.slice.call(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };

  // access last argument to see if it's an ACK callback
  if (typeof args[args.length - 1] === 'function') {
    if (this._rooms.length || this.flags.broadcast) {
      throw new Error('Callbacks are not supported when broadcasting');
    }

    debug('emitting packet with ack id %d', this.nsp.ids);
    this.acks[this.nsp.ids] = args.pop();
    packet.id = this.nsp.ids++;
  }

  var rooms = this._rooms.slice(0);
  var flags = Object.assign({}, this.flags);

  // reset flags
  this._rooms = [];
  this.flags = {};

  if (rooms.length || flags.broadcast) {
    this.adapter.broadcast(packet, {
      except: [this.id],
      rooms: rooms,
      flags: flags
    });
  } else {
    // dispatch packet
    this.packet(packet, flags);
  }
  return this;
};

/**
 * Targets a room when broadcasting.
 *
 * @param {String} name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.to =
Socket.prototype.in = function(name){
  if (!~this._rooms.indexOf(name)) this._rooms.push(name);
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send =
Socket.prototype.write = function(){
  var args = Array.prototype.slice.call(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Writes a packet.
 *
 * @param {Object} packet object
 * @param {Object} opts options
 * @api private
 */

Socket.prototype.packet = function(packet, opts){
  packet.nsp = this.nsp.name;
  opts = opts || {};
  opts.compress = false !== opts.compress;
  this.client.packet(packet, opts);
};

/**
 * Joins a room.
 *
 * @param {String|Array} room or array of rooms
 * @param {Function} fn optional, callback
 * @return {Socket} self
 * @api private
 */

Socket.prototype.join = function(rooms, fn){
  debug('joining room %s', rooms);
  var self = this;
  if (!Array.isArray(rooms)) {
    rooms = [rooms];
  }
  rooms = rooms.filter(function (room) {
    return !self.rooms.hasOwnProperty(room);
  });
  if (!rooms.length) {
    fn && fn(null);
    return this;
  }
  this.adapter.addAll(this.id, rooms, function(err){
    if (err) return fn && fn(err);
    debug('joined room %s', rooms);
    rooms.forEach(function (room) {
      self.rooms[room] = room;
    });
    fn && fn(null);
  });
  return this;
};

/**
 * Leaves a room.
 *
 * @param {String} room
 * @param {Function} fn optional, callback
 * @return {Socket} self
 * @api private
 */

Socket.prototype.leave = function(room, fn){
  debug('leave room %s', room);
  var self = this;
  this.adapter.del(this.id, room, function(err){
    if (err) return fn && fn(err);
    debug('left room %s', room);
    delete self.rooms[room];
    fn && fn(null);
  });
  return this;
};

/**
 * Leave all rooms.
 *
 * @api private
 */

Socket.prototype.leaveAll = function(){
  this.adapter.delAll(this.id);
  this.rooms = {};
};

/**
 * Called by `Namespace` upon successful
 * middleware execution (ie: authorization).
 * Socket is added to namespace array before
 * call to join, so adapters can access it.
 *
 * @api private
 */

Socket.prototype.onconnect = function(){
  debug('socket connected - writing packet');
  this.nsp.connected[this.id] = this;
  this.join(this.id);
  var skip = this.nsp.name === '/' && this.nsp.fns.length === 0;
  if (skip) {
    debug('packet already sent in initial handshake');
  } else {
    this.packet({ type: parser.CONNECT });
  }
};

/**
 * Called with each packet. Called by `Client`.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function(packet){
  debug('got packet %j', packet);
  switch (packet.type) {
    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.onerror(new Error(packet.data));
  }
};

/**
 * Called upon event packet.
 *
 * @param {Object} packet object
 * @api private
 */

Socket.prototype.onevent = function(packet){
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  this.dispatch(args);
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @param {Number} id packet id
 * @api private
 */

Socket.prototype.ack = function(id){
  var self = this;
  var sent = false;
  return function(){
    // prevent double callbacks
    if (sent) return;
    var args = Array.prototype.slice.call(arguments);
    debug('sending ack %j', args);

    self.packet({
      id: id,
      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
      data: args
    });

    sent = true;
  };
};

/**
 * Called upon ack packet.
 *
 * @api private
 */

Socket.prototype.onack = function(packet){
  var ack = this.acks[packet.id];
  if ('function' == typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon client disconnect packet.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function(){
  debug('got disconnect packet');
  this.onclose('client namespace disconnect');
};

/**
 * Handles a client error.
 *
 * @api private
 */

Socket.prototype.onerror = function(err){
  if (this.listeners('error').length) {
    this.emit('error', err);
  } else {
    console.error('Missing error handler on `socket`.');
    console.error(err.stack);
  }
};

/**
 * Called upon closing. Called by `Client`.
 *
 * @param {String} reason
 * @throw {Error} optional error object
 * @api private
 */

Socket.prototype.onclose = function(reason){
  if (!this.connected) return this;
  debug('closing socket - reason %s', reason);
  this.emit('disconnecting', reason);
  this.leaveAll();
  this.nsp.remove(this);
  this.client.remove(this);
  this.connected = false;
  this.disconnected = true;
  delete this.nsp.connected[this.id];
  this.emit('disconnect', reason);
};

/**
 * Produces an `error` packet.
 *
 * @param {Object} err error object
 * @api private
 */

Socket.prototype.error = function(err){
  this.packet({ type: parser.ERROR, data: err });
};

/**
 * Disconnects this client.
 *
 * @param {Boolean} close if `true`, closes the underlying connection
 * @return {Socket} self
 * @api public
 */

Socket.prototype.disconnect = function(close){
  if (!this.connected) return this;
  if (close) {
    this.client.disconnect();
  } else {
    this.packet({ type: parser.DISCONNECT });
    this.onclose('server namespace disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} compress if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function(compress){
  this.flags.compress = compress;
  return this;
};

/**
 * Sets the binary flag
 *
 * @param {Boolean} Encode as if it has binary data if `true`, Encode as if it doesnt have binary data if `false`
 * @return {Socket} self
 * @api public
 */

 Socket.prototype.binary = function (binary) {
   this.flags.binary = binary;
   return this;
 };

/**
 * Dispatch incoming event to socket listeners.
 *
 * @param {Array} event that will get emitted
 * @api private
 */

Socket.prototype.dispatch = function(event){
  debug('dispatching an event %j', event);
  var self = this;
  function dispatchSocket(err) {
    process.nextTick(function(){
      if (err) {
        return self.error(err.data || err.message);
      }
      emit.apply(self, event);
    });
  }
  this.run(event, dispatchSocket);
};

/**
 * Sets up socket middleware.
 *
 * @param {Function} middleware function (event, next)
 * @return {Socket} self
 * @api public
 */

Socket.prototype.use = function(fn){
  this.fns.push(fn);
  return this;
};

/**
 * Executes the middleware for an incoming event.
 *
 * @param {Array} event that will get emitted
 * @param {Function} last fn call in the middleware
 * @api private
 */
Socket.prototype.run = function(event, fn){
  var fns = this.fns.slice(0);
  if (!fns.length) return fn(null);

  function run(i){
    fns[i](event, function(err){
      // upon error, short-circuit
      if (err) return fn(err);

      // if no middleware left, summon callback
      if (!fns[i + 1]) return fn(null);

      // go on to next
      run(i + 1);
    });
  }

  run(0);
};

}).call(this,require('_process'))
},{"_process":279,"debug":137,"events":231,"has-binary2":95,"socket.io-parser":128,"url":339}],137:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./common":138,"_process":279,"dup":78}],138:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"dup":79,"ms":104}],139:[function(require,module,exports){
module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}

},{}],140:[function(require,module,exports){
'use strict';

module.exports = function () {
  throw new Error(
    'ws does not work in the browser. Browser clients must use the native ' +
      'WebSocket object'
  );
};

},{}],141:[function(require,module,exports){
'use strict';

var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;

},{}],142:[function(require,module,exports){

},{}],143:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":144,"./asn1/base":146,"./asn1/constants":150,"./asn1/decoders":152,"./asn1/encoders":155,"bn.js":162}],144:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":143,"inherits":248,"vm":345}],145:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":146,"buffer":195,"inherits":248}],146:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":145,"./node":147,"./reporter":148}],147:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var DecoderBuffer = require('../base').DecoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

},{"../base":146,"minimalistic-assert":253}],148:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":248}],149:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":150}],150:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":149}],151:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":143,"inherits":248}],152:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":151,"./pem":153}],153:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":151,"buffer":195,"inherits":248}],154:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":143,"buffer":195,"inherits":248}],155:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":154,"./pem":156}],156:[function(require,module,exports){
var inherits = require('inherits');

var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":154,"inherits":248}],157:[function(require,module,exports){
(function (global){
'use strict';

var objectAssign = require('object-assign');

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"object-assign":255,"util/":160}],158:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],159:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],160:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":159,"_process":279,"inherits":158}],161:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],162:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":164}],163:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":164}],164:[function(require,module,exports){
arguments[4][142][0].apply(exports,arguments)
},{"dup":142}],165:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":308}],166:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":165,"./ghash":170,"./incr32":171,"buffer-xor":194,"cipher-base":197,"inherits":248,"safe-buffer":308}],167:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":168,"./encrypter":169,"./modes/list.json":179}],168:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":165,"./authCipher":166,"./modes":178,"./streamCipher":181,"cipher-base":197,"evp_bytestokey":232,"inherits":248,"safe-buffer":308}],169:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":165,"./authCipher":166,"./modes":178,"./streamCipher":181,"cipher-base":197,"evp_bytestokey":232,"inherits":248,"safe-buffer":308}],170:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":308}],171:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],172:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":194}],173:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":194,"safe-buffer":308}],174:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":308}],175:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":308}],176:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":171,"buffer-xor":194,"safe-buffer":308}],177:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],178:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":172,"./cfb":173,"./cfb1":174,"./cfb8":175,"./ctr":176,"./ecb":177,"./list.json":179,"./ofb":180}],179:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],180:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"buffer":195,"buffer-xor":194}],181:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":165,"cipher-base":197,"inherits":248,"safe-buffer":308}],182:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":167,"browserify-aes/modes":178,"browserify-des":183,"browserify-des/modes":184,"evp_bytestokey":232}],183:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":197,"des.js":205,"inherits":248,"safe-buffer":308}],184:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],185:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,require("buffer").Buffer)
},{"bn.js":162,"buffer":195,"randombytes":290}],186:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":187}],187:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],188:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],189:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash')
var stream = require('stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

}).call(this,require("buffer").Buffer)
},{"./algorithms.json":187,"./sign":190,"./verify":191,"buffer":195,"create-hash":200,"inherits":248,"stream":317}],190:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

}).call(this,require("buffer").Buffer)
},{"./curves.json":188,"bn.js":162,"browserify-rsa":185,"buffer":195,"create-hmac":202,"elliptic":215,"parse-asn1":271}],191:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

}).call(this,require("buffer").Buffer)
},{"./curves.json":188,"bn.js":162,"buffer":195,"elliptic":215,"parse-asn1":271}],192:[function(require,module,exports){
(function (process,Buffer){
'use strict';
/* eslint camelcase: "off" */

var assert = require('assert');

var Zstream = require('pako/lib/zlib/zstream');
var zlib_deflate = require('pako/lib/zlib/deflate.js');
var zlib_inflate = require('pako/lib/zlib/inflate.js');
var constants = require('pako/lib/zlib/constants');

for (var key in constants) {
  exports[key] = constants[key];
}

// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;

var GZIP_HEADER_ID1 = 0x1f;
var GZIP_HEADER_ID2 = 0x8b;

/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
    throw new TypeError('Bad argument');
  }

  this.dictionary = null;
  this.err = 0;
  this.flush = 0;
  this.init_done = false;
  this.level = 0;
  this.memLevel = 0;
  this.mode = mode;
  this.strategy = 0;
  this.windowBits = 0;
  this.write_in_progress = false;
  this.pending_close = false;
  this.gzip_id_bytes_read = 0;
}

Zlib.prototype.close = function () {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }

  this.pending_close = false;

  assert(this.init_done, 'close before init');
  assert(this.mode <= exports.UNZIP);

  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
    zlib_inflate.inflateEnd(this.strm);
  }

  this.mode = exports.NONE;

  this.dictionary = null;
};

Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
  assert.equal(arguments.length, 8);

  assert(this.init_done, 'write before init');
  assert(this.mode !== exports.NONE, 'already finalized');
  assert.equal(false, this.write_in_progress, 'write already in progress');
  assert.equal(false, this.pending_close, 'close is pending');

  this.write_in_progress = true;

  assert.equal(false, flush === undefined, 'must provide flush value');

  this.write_in_progress = true;

  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
    throw new Error('Invalid flush value');
  }

  if (input == null) {
    input = Buffer.alloc(0);
    in_len = 0;
    in_off = 0;
  }

  this.strm.avail_in = in_len;
  this.strm.input = input;
  this.strm.next_in = in_off;
  this.strm.avail_out = out_len;
  this.strm.output = out;
  this.strm.next_out = out_off;
  this.flush = flush;

  if (!async) {
    // sync version
    this._process();

    if (this._checkError()) {
      return this._afterSync();
    }
    return;
  }

  // async version
  var self = this;
  process.nextTick(function () {
    self._process();
    self._after();
  });

  return this;
};

Zlib.prototype._afterSync = function () {
  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;

  this.write_in_progress = false;

  return [avail_in, avail_out];
};

Zlib.prototype._process = function () {
  var next_expected_header_byte = null;

  // If the avail_out is left at 0, then it means that it ran out
  // of room.  If there was avail_out left over, then it means
  // that all of the input was consumed.
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflate(this.strm, this.flush);
      break;
    case exports.UNZIP:
      if (this.strm.avail_in > 0) {
        next_expected_header_byte = this.strm.next_in;
      }

      switch (this.gzip_id_bytes_read) {
        case 0:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
            this.gzip_id_bytes_read = 1;
            next_expected_header_byte++;

            if (this.strm.avail_in === 1) {
              // The only available byte was already read.
              break;
            }
          } else {
            this.mode = exports.INFLATE;
            break;
          }

        // fallthrough
        case 1:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
            this.gzip_id_bytes_read = 2;
            this.mode = exports.GUNZIP;
          } else {
            // There is no actual difference between INFLATE and INFLATERAW
            // (after initialization).
            this.mode = exports.INFLATE;
          }

          break;
        default:
          throw new Error('invalid number of gzip magic number bytes read');
      }

    // fallthrough
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      this.err = zlib_inflate.inflate(this.strm, this.flush

      // If data was encoded with dictionary
      );if (this.err === exports.Z_NEED_DICT && this.dictionary) {
        // Load it
        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
        if (this.err === exports.Z_OK) {
          // And try to decode again
          this.err = zlib_inflate.inflate(this.strm, this.flush);
        } else if (this.err === exports.Z_DATA_ERROR) {
          // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
          // Make it possible for After() to tell a bad dictionary from bad
          // input.
          this.err = exports.Z_NEED_DICT;
        }
      }
      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
        // Bytes remain in input buffer. Perhaps this is another compressed
        // member in the same archive, or just trailing garbage.
        // Trailing zero bytes are okay, though, since they are frequently
        // used for padding.

        this.reset();
        this.err = zlib_inflate.inflate(this.strm, this.flush);
      }
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }
};

Zlib.prototype._checkError = function () {
  // Acceptable error states depend on the type of zlib stream.
  switch (this.err) {
    case exports.Z_OK:
    case exports.Z_BUF_ERROR:
      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
        this._error('unexpected end of file');
        return false;
      }
      break;
    case exports.Z_STREAM_END:
      // normal statuses, not fatal
      break;
    case exports.Z_NEED_DICT:
      if (this.dictionary == null) {
        this._error('Missing dictionary');
      } else {
        this._error('Bad dictionary');
      }
      return false;
    default:
      // something else.
      this._error('Zlib error');
      return false;
  }

  return true;
};

Zlib.prototype._after = function () {
  if (!this._checkError()) {
    return;
  }

  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;

  this.write_in_progress = false;

  // call the write() cb
  this.callback(avail_in, avail_out);

  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype._error = function (message) {
  if (this.strm.msg) {
    message = this.strm.msg;
  }
  this.onerror(message, this.err

  // no hope of rescue.
  );this.write_in_progress = false;
  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');

  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
  assert(level >= -1 && level <= 9, 'invalid compression level');

  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');

  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');

  this._init(level, windowBits, memLevel, strategy, dictionary);
  this._setDictionary();
};

Zlib.prototype.params = function () {
  throw new Error('deflateParams Not supported');
};

Zlib.prototype.reset = function () {
  this._reset();
  this._setDictionary();
};

Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
  this.level = level;
  this.windowBits = windowBits;
  this.memLevel = memLevel;
  this.strategy = strategy;

  this.flush = exports.Z_NO_FLUSH;

  this.err = exports.Z_OK;

  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
    this.windowBits += 16;
  }

  if (this.mode === exports.UNZIP) {
    this.windowBits += 32;
  }

  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
    this.windowBits = -1 * this.windowBits;
  }

  this.strm = new Zstream();

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }

  if (this.err !== exports.Z_OK) {
    this._error('Init error');
  }

  this.dictionary = dictionary;

  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype._setDictionary = function () {
  if (this.dictionary == null) {
    return;
  }

  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
      break;
    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to set dictionary');
  }
};

Zlib.prototype._reset = function () {
  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
    case exports.GZIP:
      this.err = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
    case exports.GUNZIP:
      this.err = zlib_inflate.inflateReset(this.strm);
      break;
    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to reset stream');
  }
};

exports.Zlib = Zlib;
}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":279,"assert":157,"buffer":195,"pako/lib/zlib/constants":258,"pako/lib/zlib/deflate.js":260,"pako/lib/zlib/inflate.js":262,"pako/lib/zlib/zstream":266}],193:[function(require,module,exports){
(function (process){
'use strict';

var Buffer = require('buffer').Buffer;
var Transform = require('stream').Transform;
var binding = require('./binding');
var util = require('util');
var assert = require('assert').ok;
var kMaxLength = require('buffer').kMaxLength;
var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = 16 * 1024;

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
var bkeys = Object.keys(binding);
for (var bk = 0; bk < bkeys.length; bk++) {
  var bkey = bkeys[bk];
  if (bkey.match(/^Z/)) {
    Object.defineProperty(exports, bkey, {
      enumerable: true, value: binding[bkey], writable: false
    });
  }
}

// translation table for return codes.
var codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};

var ckeys = Object.keys(codes);
for (var ck = 0; ck < ckeys.length; ck++) {
  var ckey = ckeys[ck];
  codes[codes[ckey]] = ckey;
}

Object.defineProperty(exports, 'codes', {
  enumerable: true, value: Object.freeze(codes), writable: false
});

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function (o) {
  return new Deflate(o);
};

exports.createInflate = function (o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function (o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function (o) {
  return new InflateRaw(o);
};

exports.createGzip = function (o) {
  return new Gzip(o);
};

exports.createGunzip = function (o) {
  return new Gunzip(o);
};

exports.createUnzip = function (o) {
  return new Unzip(o);
};

// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function (buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function (buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function (buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf;
    var err = null;

    if (nread >= kMaxLength) {
      err = new RangeError(kRangeErrorMessage);
    } else {
      buf = Buffer.concat(buffers, nread);
    }

    buffers = [];
    engine.close();
    callback(err, buf);
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') buffer = Buffer.from(buffer);

  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');

  var flushFlag = engine._finishFlushFlag;

  return engine._processChunk(buffer, flushFlag);
}

// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}

// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}

// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}

// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}

function isValidFlushFlag(flag) {
  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
}

// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) {
  var _this = this;

  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush && !isValidFlushFlag(opts.flush)) {
    throw new Error('Invalid flush flag: ' + opts.flush);
  }
  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
    throw new Error('Invalid flush flag: ' + opts.finishFlush);
  }

  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._handle = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._handle.onerror = function (message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    _close(self);
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

  this._buffer = Buffer.allocUnsafe(this._chunkSize);
  this._offset = 0;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);

  Object.defineProperty(this, '_closed', {
    get: function () {
      return !_this._handle;
    },
    configurable: true,
    enumerable: true
  });
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function (level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function () {
      assert(self._handle, 'zlib binding closed');
      self._handle.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function () {
  assert(this._handle, 'zlib binding closed');
  return this._handle.reset();
};

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function (callback) {
  this._transform(Buffer.alloc(0), '', callback);
};

Zlib.prototype.flush = function (kind, callback) {
  var _this2 = this;

  var ws = this._writableState;

  if (typeof kind === 'function' || kind === undefined && !callback) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback) process.nextTick(callback);
  } else if (ws.ending) {
    if (callback) this.once('end', callback);
  } else if (ws.needDrain) {
    if (callback) {
      this.once('drain', function () {
        return _this2.flush(kind, callback);
      });
    }
  } else {
    this._flushFlag = kind;
    this.write(Buffer.alloc(0), '', callback);
  }
};

Zlib.prototype.close = function (callback) {
  _close(this, callback);
  process.nextTick(emitCloseNT, this);
};

function _close(engine, callback) {
  if (callback) process.nextTick(callback);

  // Caller may invoke .close after a zlib error (which will null _handle).
  if (!engine._handle) return;

  engine._handle.close();
  engine._handle = null;
}

function emitCloseNT(self) {
  self.emit('close');
}

Zlib.prototype._transform = function (chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));

  if (!this._handle) return cb(new Error('zlib binding closed'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
  // (or whatever flag was provided using opts.finishFlush).
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last) flushFlag = this._finishFlushFlag;else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function (er) {
      error = er;
    });

    assert(this._handle, 'zlib binding closed');
    do {
      var res = this._handle.writeSync(flushFlag, chunk, // in
      inOff, // in_off
      availInBefore, // in_len
      this._buffer, // out
      this._offset, //out_off
      availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    if (nread >= kMaxLength) {
      _close(this);
      throw new RangeError(kRangeErrorMessage);
    }

    var buf = Buffer.concat(buffers, nread);
    _close(this);

    return buf;
  }

  assert(this._handle, 'zlib binding closed');
  var req = this._handle.write(flushFlag, chunk, // in
  inOff, // in_off
  availInBefore, // in_len
  this._buffer, // out
  this._offset, //out_off
  availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    // When the callback is used in an async write, the callback's
    // context is the `req` object that was created. The req object
    // is === this._handle, and that's why it's important to null
    // out the values after they are done being used. `this._handle`
    // can stay in memory longer than the callback and buffer are needed.
    if (this) {
      this.buffer = null;
      this.callback = null;
    }

    if (self._hadError) return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += availInBefore - availInAfter;
      availInBefore = availInAfter;

      if (!async) return true;

      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }

    if (!async) return false;

    // finished with the chunk.
    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);
}).call(this,require('_process'))
},{"./binding":192,"_process":279,"assert":157,"buffer":195,"stream":317,"util":344}],194:[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
},{"buffer":195}],195:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? Symbol.for('nodejs.util.inspect.custom')
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    var proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = (function () {
  var alphabet = '0123456789abcdef'
  var table = new Array(256)
  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16
    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

}).call(this,require("buffer").Buffer)
},{"base64-js":161,"buffer":195,"ieee754":247}],196:[function(require,module,exports){
module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}

},{}],197:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":248,"safe-buffer":308,"stream":317,"string_decoder":337}],198:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":249}],199:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this,require("buffer").Buffer)
},{"bn.js":162,"buffer":195,"elliptic":215}],200:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":197,"inherits":248,"md5.js":251,"ripemd160":307,"sha.js":310}],201:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":251}],202:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":203,"cipher-base":197,"create-hash/md5":201,"inherits":248,"ripemd160":307,"safe-buffer":308,"sha.js":310}],203:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":197,"inherits":248,"safe-buffer":308}],204:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":182,"browserify-sign":189,"browserify-sign/algos":186,"create-ecdh":199,"create-hash":200,"create-hmac":202,"diffie-hellman":211,"pbkdf2":273,"public-encrypt":280,"randombytes":290,"randomfill":291}],205:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":206,"./des/cipher":207,"./des/des":208,"./des/ede":209,"./des/utils":210}],206:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":248,"minimalistic-assert":253}],207:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":253}],208:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":207,"./utils":210,"inherits":248,"minimalistic-assert":253}],209:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":207,"./des":208,"inherits":248,"minimalistic-assert":253}],210:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],211:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this,require("buffer").Buffer)
},{"./lib/dh":212,"./lib/generatePrime":213,"./lib/primes.json":214,"buffer":195}],212:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,require("buffer").Buffer)
},{"./generatePrime":213,"bn.js":162,"buffer":195,"miller-rabin":252,"randombytes":290}],213:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":162,"miller-rabin":252,"randombytes":290}],214:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],215:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":230,"./elliptic/curve":218,"./elliptic/curves":221,"./elliptic/ec":222,"./elliptic/eddsa":225,"./elliptic/utils":229,"brorand":163}],216:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":229,"bn.js":162}],217:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":229,"./base":216,"bn.js":162,"inherits":248}],218:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":216,"./edwards":217,"./mont":219,"./short":220}],219:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":229,"./base":216,"bn.js":162,"inherits":248}],220:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":229,"./base":216,"bn.js":162,"inherits":248}],221:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"./curve":218,"./precomputed/secp256k1":228,"./utils":229,"hash.js":234}],222:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":221,"../utils":229,"./key":223,"./signature":224,"bn.js":162,"brorand":163,"hmac-drbg":246}],223:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":229,"bn.js":162}],224:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":229,"bn.js":162}],225:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":221,"../utils":229,"./key":226,"./signature":227,"hash.js":234}],226:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":229}],227:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":229,"bn.js":162}],228:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],229:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":162,"minimalistic-assert":253,"minimalistic-crypto-utils":254}],230:[function(require,module,exports){
module.exports={
  "_from": "elliptic@^6.0.0",
  "_id": "elliptic@6.5.2",
  "_inBundle": false,
  "_integrity": "sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==",
  "_location": "/browserify/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "elliptic@^6.0.0",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "^6.0.0",
    "saveSpec": null,
    "fetchSpec": "^6.0.0"
  },
  "_requiredBy": [
    "/browserify/browserify-sign",
    "/browserify/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz",
  "_shasum": "05c5678d7173c049d8ca433552224a495d0e3762",
  "_spec": "elliptic@^6.0.0",
  "_where": "/usr/local/lib/node_modules/browserify/node_modules/browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  },
  "deprecated": false,
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^3.0.8",
    "grunt": "^1.0.4",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.2",
    "jscs": "^3.0.7",
    "jshint": "^2.10.3",
    "mocha": "^6.2.2"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.5.2"
}

},{}],231:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],232:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":251,"safe-buffer":308}],233:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":248,"safe-buffer":308,"stream":317}],234:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":235,"./hash/hmac":236,"./hash/ripemd":237,"./hash/sha":238,"./hash/utils":245}],235:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":245,"minimalistic-assert":253}],236:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":245,"minimalistic-assert":253}],237:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":235,"./utils":245}],238:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":239,"./sha/224":240,"./sha/256":241,"./sha/384":242,"./sha/512":243}],239:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":235,"../utils":245,"./common":244}],240:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":245,"./256":241}],241:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":235,"../utils":245,"./common":244,"minimalistic-assert":253}],242:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":245,"./512":243}],243:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":235,"../utils":245,"minimalistic-assert":253}],244:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":245}],245:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":248,"minimalistic-assert":253}],246:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":234,"minimalistic-assert":253,"minimalistic-crypto-utils":254}],247:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],248:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],249:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],250:[function(require,module,exports){
arguments[4][98][0].apply(exports,arguments)
},{"dup":98}],251:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":233,"inherits":248,"safe-buffer":308}],252:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":162,"brorand":163}],253:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],254:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],255:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],256:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],257:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],258:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],259:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],260:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":256,"./adler32":257,"./crc32":259,"./messages":264,"./trees":265}],261:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],262:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":256,"./adler32":257,"./crc32":259,"./inffast":261,"./inftrees":263}],263:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":256}],264:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],265:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":256}],266:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],267:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],268:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":269,"asn1.js":143}],269:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":143}],270:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":167,"evp_bytestokey":232,"safe-buffer":308}],271:[function(require,module,exports){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":267,"./asn1":268,"./fixProc":270,"browserify-aes":167,"pbkdf2":273,"safe-buffer":308}],272:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":279}],273:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":274,"./lib/sync":277}],274:[function(require,module,exports){
(function (process,global){
var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var Buffer = require('safe-buffer').Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":275,"./precondition":276,"./sync":277,"_process":279,"safe-buffer":308}],275:[function(require,module,exports){
(function (process){
var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

}).call(this,require('_process'))
},{"_process":279}],276:[function(require,module,exports){
(function (Buffer){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":249}],277:[function(require,module,exports){
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var Buffer = require('safe-buffer').Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":275,"./precondition":276,"create-hash/md5":201,"ripemd160":307,"safe-buffer":308,"sha.js":310}],278:[function(require,module,exports){
(function (process){
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this,require('_process'))
},{"_process":279}],279:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],280:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":282,"./publicEncrypt":283}],281:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":200,"safe-buffer":308}],282:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":281,"./withPublic":284,"./xor":285,"bn.js":162,"browserify-rsa":185,"create-hash":200,"parse-asn1":271,"safe-buffer":308}],283:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":281,"./withPublic":284,"./xor":285,"bn.js":162,"browserify-rsa":185,"create-hash":200,"parse-asn1":271,"randombytes":290,"safe-buffer":308}],284:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":162,"safe-buffer":308}],285:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],286:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],287:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],288:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],289:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":287,"./encode":288}],290:[function(require,module,exports){
(function (process,global){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":279,"safe-buffer":308}],291:[function(require,module,exports){
(function (process,global){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":279,"randombytes":290,"safe-buffer":308}],292:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":293}],293:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"./_stream_readable":295,"./_stream_writable":297,"core-util-is":198,"inherits":248,"process-nextick-args":278}],294:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":296,"core-util-is":198,"inherits":248}],295:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":293,"./internal/streams/BufferList":298,"./internal/streams/destroy":299,"./internal/streams/stream":300,"_process":279,"core-util-is":198,"events":231,"inherits":248,"isarray":250,"process-nextick-args":278,"safe-buffer":301,"string_decoder/":302,"util":164}],296:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":293,"core-util-is":198,"inherits":248}],297:[function(require,module,exports){
(function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
},{"./_stream_duplex":293,"./internal/streams/destroy":299,"./internal/streams/stream":300,"_process":279,"core-util-is":198,"inherits":248,"process-nextick-args":278,"safe-buffer":301,"timers":338,"util-deprecate":341}],298:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":301,"util":164}],299:[function(require,module,exports){
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":278}],300:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":231}],301:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":195}],302:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":301}],303:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":304}],304:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":293,"./lib/_stream_passthrough.js":294,"./lib/_stream_readable.js":295,"./lib/_stream_transform.js":296,"./lib/_stream_writable.js":297}],305:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":304}],306:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":297}],307:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":195,"hash-base":233,"inherits":248}],308:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":195}],309:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":308}],310:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":311,"./sha1":312,"./sha224":313,"./sha256":314,"./sha384":315,"./sha512":316}],311:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":309,"inherits":248,"safe-buffer":308}],312:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":309,"inherits":248,"safe-buffer":308}],313:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":309,"./sha256":314,"inherits":248,"safe-buffer":308}],314:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":309,"inherits":248,"safe-buffer":308}],315:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":309,"./sha512":316,"inherits":248,"safe-buffer":308}],316:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":309,"inherits":248,"safe-buffer":308}],317:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":231,"inherits":248,"readable-stream/duplex.js":292,"readable-stream/passthrough.js":303,"readable-stream/readable.js":304,"readable-stream/transform.js":305,"readable-stream/writable.js":306}],318:[function(require,module,exports){
(function (global){
var ClientRequest = require('./lib/request')
var response = require('./lib/response')
var extend = require('xtend')
var statusCodes = require('builtin-status-codes')
var url = require('url')

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

	var protocol = opts.protocol || defaultProtocol
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.ClientRequest = ClientRequest
http.IncomingMessage = response.IncomingMessage

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.globalAgent = new http.Agent()

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./lib/request":320,"./lib/response":321,"builtin-status-codes":196,"url":339,"xtend":346}],319:[function(require,module,exports){
(function (global){
exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

exports.writableStream = isFunction(global.WritableStream)

exports.abortController = isFunction(global.AbortController)

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr
function getXHR () {
	// Cache the xhr value
	if (xhr !== undefined) return xhr

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest()
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
		} catch(e) {
			xhr = null
		}
	} else {
		// Service workers don't have XHR
		xhr = null
	}
	return xhr
}

function checkTypeSupport (type) {
	var xhr = getXHR()
	if (!xhr) return false
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || checkTypeSupport('arraybuffer')

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

function isFunction (value) {
	return typeof value === 'function'
}

xhr = null // Help gc

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],320:[function(require,module,exports){
(function (process,global,Buffer){
var capability = require('./capability')
var inherits = require('inherits')
var response = require('./response')
var stream = require('readable-stream')

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + Buffer.from(opts.auth).toString('base64'))
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	var useFetch = true
	if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
		// If the use of XHR should be preferred. Not typically needed.
		useFetch = false
		preferBinary = true
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary, useFetch)
	self._fetchTimer = null

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var header = this._headers[name.toLowerCase()]
	if (header)
		return header.value
	return null
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	var headersObj = self._headers
	var body = null
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
        body = new Blob(self._body, {
            type: (headersObj['content-type'] || {}).value || ''
        });
    }

	// create flattened list of headers
	var headersList = []
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name
		var value = headersObj[keyName].value
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v])
			})
		} else {
			headersList.push([name, value])
		}
	})

	if (self._mode === 'fetch') {
		var signal = null
		var fetchTimer = null
		if (capability.abortController) {
			var controller = new AbortController()
			signal = controller.signal
			self._fetchAbortController = controller

			if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
				self._fetchTimer = global.setTimeout(function () {
					self.emit('requestTimeout')
					if (self._fetchAbortController)
						self._fetchAbortController.abort()
				}, opts.requestTimeout)
			}
		}

		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin',
			signal: signal
		}).then(function (response) {
			self._fetchResponse = response
			self._connect()
		}, function (reason) {
			global.clearTimeout(self._fetchTimer)
			if (!self._destroyed)
				self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		if ('requestTimeout' in opts) {
			xhr.timeout = opts.requestTimeout
			xhr.ontimeout = function () {
				self.emit('requestTimeout')
			}
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1])
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		var status = xhr.status
		return (status !== null && status !== 0)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress()
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer)
	self._response.on('error', function(err) {
		self.emit('error', err)
	})

	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this
	self._destroyed = true
	global.clearTimeout(self._fetchTimer)
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	else if (self._fetchAbortController)
		self._fetchAbortController.abort()
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setTimeout = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'via'
]

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":319,"./response":321,"_process":279,"buffer":195,"inherits":248,"readable-stream":336}],321:[function(require,module,exports){
(function (process,global,Buffer){
var capability = require('./capability')
var inherits = require('inherits')
var stream = require('readable-stream')

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.url = response.url
		self.statusCode = response.status
		self.statusMessage = response.statusText
		
		response.headers.forEach(function (header, key){
			self.headers[key.toLowerCase()] = header
			self.rawHeaders.push(key, header)
		})

		if (capability.writableStream) {
			var writable = new WritableStream({
				write: function (chunk) {
					return new Promise(function (resolve, reject) {
						if (self._destroyed) {
							reject()
						} else if(self.push(Buffer.from(chunk))) {
							resolve()
						} else {
							self._resumeFetch = resolve
						}
					})
				},
				close: function () {
					global.clearTimeout(fetchTimer)
					if (!self._destroyed)
						self.push(null)
				},
				abort: function (err) {
					if (!self._destroyed)
						self.emit('error', err)
				}
			})

			try {
				response.body.pipeTo(writable).catch(function (err) {
					global.clearTimeout(fetchTimer)
					if (!self._destroyed)
						self.emit('error', err)
				})
				return
			} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
		}
		// fallback for when writableStream or pipeTo aren't available
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				if (result.done) {
					global.clearTimeout(fetchTimer)
					self.push(null)
					return
				}
				self.push(Buffer.from(result.value))
				read()
			}).catch(function (err) {
				global.clearTimeout(fetchTimer)
				if (!self._destroyed)
					self.emit('error', err)
			})
		}
		read()
	} else {
		self._xhr = xhr
		self._pos = 0

		self.url = xhr.responseURL
		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = []
					}
					self.headers[key].push(matches[2])
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2]
				} else {
					self.headers[key] = matches[2]
				}
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {
	var self = this

	var resolve = self._resumeFetch
	if (resolve) {
		self._resumeFetch = null
		resolve()
	}
}

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text':
			response = xhr.responseText
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = Buffer.alloc(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response)
				break
			response = xhr.response
			self.push(Buffer.from(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(Buffer.from(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(Buffer.from(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null)
	}
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":319,"_process":279,"buffer":195,"inherits":248,"readable-stream":336}],322:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],323:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this,require('_process'))
},{"./_stream_readable":325,"./_stream_writable":327,"_process":279,"inherits":248}],324:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":326,"inherits":248}],325:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":322,"./_stream_duplex":323,"./internal/streams/async_iterator":328,"./internal/streams/buffer_list":329,"./internal/streams/destroy":330,"./internal/streams/from":332,"./internal/streams/state":334,"./internal/streams/stream":335,"_process":279,"buffer":195,"events":231,"inherits":248,"string_decoder/":337,"util":164}],326:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":322,"./_stream_duplex":323,"inherits":248}],327:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":322,"./_stream_duplex":323,"./internal/streams/destroy":330,"./internal/streams/state":334,"./internal/streams/stream":335,"_process":279,"buffer":195,"inherits":248,"util-deprecate":341}],328:[function(require,module,exports){
(function (process){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this,require('_process'))
},{"./end-of-stream":331,"_process":279}],329:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":195,"util":164}],330:[function(require,module,exports){
(function (process){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this,require('_process'))
},{"_process":279}],331:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":322}],332:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],333:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":322,"./end-of-stream":331}],334:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":322}],335:[function(require,module,exports){
arguments[4][300][0].apply(exports,arguments)
},{"dup":300,"events":231}],336:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":323,"./lib/_stream_passthrough.js":324,"./lib/_stream_readable.js":325,"./lib/_stream_transform.js":326,"./lib/_stream_writable.js":327,"./lib/internal/streams/end-of-stream.js":331,"./lib/internal/streams/pipeline.js":333}],337:[function(require,module,exports){
arguments[4][302][0].apply(exports,arguments)
},{"dup":302,"safe-buffer":308}],338:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":279,"timers":338}],339:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":340,"punycode":286,"querystring":289}],340:[function(require,module,exports){
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],341:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],342:[function(require,module,exports){
arguments[4][158][0].apply(exports,arguments)
},{"dup":158}],343:[function(require,module,exports){
arguments[4][159][0].apply(exports,arguments)
},{"dup":159}],344:[function(require,module,exports){
arguments[4][160][0].apply(exports,arguments)
},{"./support/isBuffer":343,"_process":279,"dup":160,"inherits":342}],345:[function(require,module,exports){
var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{}],346:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}]},{},[54]);
